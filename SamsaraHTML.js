if (typeof kotlin === 'undefined') {
  throw new Error("Error loading module 'SamsaraHTML'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'SamsaraHTML'.");
}
if (typeof Phaser === 'undefined') {
  throw new Error("Error loading module 'SamsaraHTML'. Its dependency 'Phaser' was not found. Please, check whether 'Phaser' is loaded prior to 'SamsaraHTML'.");
}
if (typeof phaserKt === 'undefined') {
  throw new Error("Error loading module 'SamsaraHTML'. Its dependency 'phaserKt' was not found. Please, check whether 'phaserKt' is loaded prior to 'SamsaraHTML'.");
}
if (typeof PIXI === 'undefined') {
  throw new Error("Error loading module 'SamsaraHTML'. Its dependency 'PIXI' was not found. Please, check whether 'PIXI' is loaded prior to 'SamsaraHTML'.");
}
if (typeof this['kotlinx-coroutines-core'] === 'undefined') {
  throw new Error("Error loading module 'SamsaraHTML'. Its dependency 'kotlinx-coroutines-core' was not found. Please, check whether 'kotlinx-coroutines-core' is loaded prior to 'SamsaraHTML'.");
}
var SamsaraHTML = function (_, Kotlin, $module$Phaser, $module$phaserKt, $module$PIXI, $module$kotlinx_coroutines_core) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var ensureNotNull = Kotlin.ensureNotNull;
  var Unit = Kotlin.kotlin.Unit;
  var withIndex = Kotlin.kotlin.collections.withIndex_7wnvza$;
  var reversed = Kotlin.kotlin.collections.reversed_7wnvza$;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var numberToInt = Kotlin.numberToInt;
  var Any = Object;
  var throwCCE = Kotlin.throwCCE;
  var listOf = Kotlin.kotlin.collections.listOf_mh5how$;
  var IntRange = Kotlin.kotlin.ranges.IntRange;
  var slice = Kotlin.kotlin.text.slice_fc3b62$;
  var toInt = Kotlin.kotlin.text.toInt_6ic1pp$;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var NumberFormatException = Kotlin.kotlin.NumberFormatException;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var toBoxedChar = Kotlin.toBoxedChar;
  var unboxChar = Kotlin.unboxChar;
  var math = Kotlin.kotlin.math;
  var kotlin_js_internal_FloatCompanionObject = Kotlin.kotlin.js.internal.FloatCompanionObject;
  var Pair = Kotlin.kotlin.Pair;
  var equals = Kotlin.equals;
  var mutableListOf = Kotlin.kotlin.collections.mutableListOf_i5x0yv$;
  var get_indices = Kotlin.kotlin.collections.get_indices_gzk92b$;
  var reversed_0 = Kotlin.kotlin.ranges.reversed_zf1xzc$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var toIntOrNull = Kotlin.kotlin.text.toIntOrNull_pdl1vz$;
  var throwUPAE = Kotlin.throwUPAE;
  var mapOf = Kotlin.kotlin.collections.mapOf_qfcya0$;
  var toInt_0 = Kotlin.kotlin.text.toInt_pdl1vz$;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
  var ScaleManager$Companion = $module$Phaser.ScaleManager;
  var start = $module$phaserKt.Phaser.start_ba683k$;
  var State = $module$Phaser.State;
  var toString = Kotlin.toString;
  var substringBefore = Kotlin.kotlin.text.substringBefore_j4ogox$;
  var destroy = $module$phaserKt.Phaser.destroyKt;
  var numberToDouble = Kotlin.numberToDouble;
  var sortWith = Kotlin.kotlin.collections.sortWith_nqfjgj$;
  var blendModes$NORMAL = $module$PIXI.blendModes.NORMAL;
  var blendModes$ADD = $module$PIXI.blendModes.ADD;
  var TextStyle = $module$phaserKt.Phaser.TextStyle_5jhq38$;
  var reverse = Kotlin.kotlin.collections.reverse_vvxzk3$;
  var UninitializedPropertyAccessException = Kotlin.kotlin.UninitializedPropertyAccessException;
  var compareBy = Kotlin.kotlin.comparisons.compareBy_bvgy4j$;
  var sortedWith = Kotlin.kotlin.collections.sortedWith_iwcb0m$;
  var CoroutineImpl = Kotlin.kotlin.coroutines.experimental.CoroutineImpl;
  var launch = $module$kotlinx_coroutines_core.kotlinx.coroutines.experimental.launch_35c74u$;
  var indexOf = Kotlin.kotlin.text.indexOf_l5u8uk$;
  var sortedWith_0 = Kotlin.kotlin.collections.sortedWith_eknfly$;
  var toList_0 = Kotlin.kotlin.collections.toList_tmsbgo$;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_tmsbgo$;
  var toMutableMap = Kotlin.kotlin.collections.toMutableMap_abgq59$;
  var mapOf_0 = Kotlin.kotlin.collections.mapOf_x2b85n$;
  var GameConfig = $module$phaserKt.Phaser.GameConfig_a28mr1$;
  var Game = $module$phaserKt.Phaser.Game_lcgo3e$;
  SoundCategory.prototype = Object.create(Enum.prototype);
  SoundCategory.prototype.constructor = SoundCategory;
  TimerState.prototype = Object.create(Enum.prototype);
  TimerState.prototype.constructor = TimerState;
  TouchListener$State.prototype = Object.create(Enum.prototype);
  TouchListener$State.prototype.constructor = TouchListener$State;
  NodeWrapper.prototype = Object.create(Node.prototype);
  NodeWrapper.prototype.constructor = NodeWrapper;
  BlankNode.prototype = Object.create(NodeWrapper.prototype);
  BlankNode.prototype.constructor = BlankNode;
  Button.prototype = Object.create(BlankNode.prototype);
  Button.prototype.constructor = Button;
  BlendMode.prototype = Object.create(Enum.prototype);
  BlendMode.prototype.constructor = BlendMode;
  CompositeLabel.prototype = Object.create(BlankNode.prototype);
  CompositeLabel.prototype.constructor = CompositeLabel;
  Event.prototype = Object.create(Enum.prototype);
  Event.prototype.constructor = Event;
  Label.prototype = Object.create(NodeWrapper.prototype);
  Label.prototype.constructor = Label;
  Mask.prototype = Object.create(NodeWrapper.prototype);
  Mask.prototype.constructor = Mask;
  VerticalAlign.prototype = Object.create(Enum.prototype);
  VerticalAlign.prototype.constructor = VerticalAlign;
  HorizontalAlign.prototype = Object.create(Enum.prototype);
  HorizontalAlign.prototype.constructor = HorizontalAlign;
  Camera.prototype = Object.create(Object3D.prototype);
  Camera.prototype.constructor = Camera;
  Particle.prototype = Object.create(Object3D.prototype);
  Particle.prototype.constructor = Particle;
  Background.prototype = Object.create(Particle.prototype);
  Background.prototype.constructor = Background;
  Polygon.prototype = Object.create(Object3D.prototype);
  Polygon.prototype.constructor = Polygon;
  Bounce.prototype = Object.create(Motion.prototype);
  Bounce.prototype.constructor = Bounce;
  Wave.prototype = Object.create(Motion.prototype);
  Wave.prototype.constructor = Wave;
  HyperTan.prototype = Object.create(Motion.prototype);
  HyperTan.prototype.constructor = HyperTan;
  SceneLayer.prototype = Object.create(Enum.prototype);
  SceneLayer.prototype.constructor = SceneLayer;
  WindowProperty.prototype = Object.create(Enum.prototype);
  WindowProperty.prototype.constructor = WindowProperty;
  Screen.prototype = Object.create(Node.prototype);
  Screen.prototype.constructor = Screen;
  Sprite.prototype = Object.create(NodeWrapper.prototype);
  Sprite.prototype.constructor = Sprite;
  SwitchState.prototype = Object.create(Enum.prototype);
  SwitchState.prototype.constructor = SwitchState;
  Switch.prototype = Object.create(Button.prototype);
  Switch.prototype.constructor = Switch;
  TextArea.prototype = Object.create(BlankNode.prototype);
  TextArea.prototype.constructor = TextArea;
  View.prototype = Object.create(BlankNode.prototype);
  View.prototype.constructor = View;
  PhantomLoader.prototype = Object.create(State.prototype);
  PhantomLoader.prototype.constructor = PhantomLoader;
  Samsara.prototype = Object.create(State.prototype);
  Samsara.prototype.constructor = Samsara;
  GuestGDXSprite.prototype = Object.create(GuestGDXNode.prototype);
  GuestGDXSprite.prototype.constructor = GuestGDXSprite;
  GuestGDXMask.prototype = Object.create(GuestGDXNode.prototype);
  GuestGDXMask.prototype.constructor = GuestGDXMask;
  GuestGDXLabel.prototype = Object.create(GuestGDXNode.prototype);
  GuestGDXLabel.prototype.constructor = GuestGDXLabel;
  DeviceScene.prototype = Object.create(GuestGDXNode.prototype);
  DeviceScene.prototype.constructor = DeviceScene;
  ScheduledJob$State.prototype = Object.create(Enum.prototype);
  ScheduledJob$State.prototype.constructor = ScheduledJob$State;
  Tutorial.prototype = Object.create(Game_0.prototype);
  Tutorial.prototype.constructor = Tutorial;
  TutorialBoardGenerator.prototype = Object.create(BoardGenerator.prototype);
  TutorialBoardGenerator.prototype.constructor = TutorialBoardGenerator;
  ClassicConfigureForWatch.prototype = Object.create(GameConfigure.prototype);
  ClassicConfigureForWatch.prototype.constructor = ClassicConfigureForWatch;
  ClassicConfigureForAndroid.prototype = Object.create(ClassicConfigureForWatch.prototype);
  ClassicConfigureForAndroid.prototype.constructor = ClassicConfigureForAndroid;
  ClassicConfigure6x6ForiOS.prototype = Object.create(ClassicConfigureForWatch.prototype);
  ClassicConfigure6x6ForiOS.prototype.constructor = ClassicConfigure6x6ForiOS;
  InfiniteConfigureForWatch.prototype = Object.create(GameConfigure.prototype);
  InfiniteConfigureForWatch.prototype.constructor = InfiniteConfigureForWatch;
  InfiniteConfigureForiOS.prototype = Object.create(InfiniteConfigureForWatch.prototype);
  InfiniteConfigureForiOS.prototype.constructor = InfiniteConfigureForiOS;
  InfiniteConfigure6x6ForiOS.prototype = Object.create(InfiniteConfigureForWatch.prototype);
  InfiniteConfigure6x6ForiOS.prototype.constructor = InfiniteConfigure6x6ForiOS;
  PuzzleConfigure.prototype = Object.create(GameConfigure.prototype);
  PuzzleConfigure.prototype.constructor = PuzzleConfigure;
  TimelessConfigureForWatch.prototype = Object.create(GameConfigure.prototype);
  TimelessConfigureForWatch.prototype.constructor = TimelessConfigureForWatch;
  TimelessConfigureForiOS.prototype = Object.create(TimelessConfigureForWatch.prototype);
  TimelessConfigureForiOS.prototype.constructor = TimelessConfigureForiOS;
  TimelessConfigure6x6ForiOS.prototype = Object.create(TimelessConfigureForWatch.prototype);
  TimelessConfigure6x6ForiOS.prototype.constructor = TimelessConfigure6x6ForiOS;
  TutorialConfigure.prototype = Object.create(GameConfigure.prototype);
  TutorialConfigure.prototype.constructor = TutorialConfigure;
  TileEntity.prototype = Object.create(GameEntity.prototype);
  TileEntity.prototype.constructor = TileEntity;
  BlockEntity.prototype = Object.create(TileEntity.prototype);
  BlockEntity.prototype.constructor = BlockEntity;
  BlankEntity.prototype = Object.create(TileEntity.prototype);
  BlankEntity.prototype.constructor = BlankEntity;
  GameEntity$EntityState.prototype = Object.create(Enum.prototype);
  GameEntity$EntityState.prototype.constructor = GameEntity$EntityState;
  GameEntity$ZOrder.prototype = Object.create(Enum.prototype);
  GameEntity$ZOrder.prototype.constructor = GameEntity$ZOrder;
  ItemEntity.prototype = Object.create(TileEntity.prototype);
  ItemEntity.prototype.constructor = ItemEntity;
  ReactivateItemEntity.prototype = Object.create(ItemEntity.prototype);
  ReactivateItemEntity.prototype.constructor = ReactivateItemEntity;
  SameBombEntity.prototype = Object.create(ItemEntity.prototype);
  SameBombEntity.prototype.constructor = SameBombEntity;
  NearBombEntity.prototype = Object.create(ItemEntity.prototype);
  NearBombEntity.prototype.constructor = NearBombEntity;
  LineBombEntity.prototype = Object.create(ItemEntity.prototype);
  LineBombEntity.prototype.constructor = LineBombEntity;
  ObstacleEntity.prototype = Object.create(TileEntity.prototype);
  ObstacleEntity.prototype.constructor = ObstacleEntity;
  TileEntity$Attribute.prototype = Object.create(Enum.prototype);
  TileEntity$Attribute.prototype.constructor = TileEntity$Attribute;
  DataKey.prototype = Object.create(Enum.prototype);
  DataKey.prototype.constructor = DataKey;
  ItemType.prototype = Object.create(Enum.prototype);
  ItemType.prototype.constructor = ItemType;
  BlockItem.prototype = Object.create(BasicItem.prototype);
  BlockItem.prototype.constructor = BlockItem;
  BoardItem.prototype = Object.create(BasicItem.prototype);
  BoardItem.prototype.constructor = BoardItem;
  PermanentKey.prototype = Object.create(Enum.prototype);
  PermanentKey.prototype.constructor = PermanentKey;
  BlockTypeView.prototype = Object.create(View.prototype);
  BlockTypeView.prototype.constructor = BlockTypeView;
  GameOverView.prototype = Object.create(View.prototype);
  GameOverView.prototype.constructor = GameOverView;
  GameView.prototype = Object.create(View.prototype);
  GameView.prototype.constructor = GameView;
  LoadingView.prototype = Object.create(View.prototype);
  LoadingView.prototype.constructor = LoadingView;
  MainMenuView.prototype = Object.create(View.prototype);
  MainMenuView.prototype.constructor = MainMenuView;
  MenuItemType.prototype = Object.create(Enum.prototype);
  MenuItemType.prototype.constructor = MenuItemType;
  OptionView.prototype = Object.create(View.prototype);
  OptionView.prototype.constructor = OptionView;
  TestView.prototype = Object.create(View.prototype);
  TestView.prototype.constructor = TestView;
  TutorialView.prototype = Object.create(View.prototype);
  TutorialView.prototype.constructor = TutorialView;
  function TouchInfo(x, y, event, code) {
    this.x = x;
    this.y = y;
    this.event = event;
    this.code = code;
  }
  TouchInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TouchInfo',
    interfaces: []
  };
  TouchInfo.prototype.component1 = function () {
    return this.x;
  };
  TouchInfo.prototype.component2 = function () {
    return this.y;
  };
  TouchInfo.prototype.component3 = function () {
    return this.event;
  };
  TouchInfo.prototype.component4 = function () {
    return this.code;
  };
  TouchInfo.prototype.copy_o3bepn$ = function (x, y, event, code) {
    return new TouchInfo(x === void 0 ? this.x : x, y === void 0 ? this.y : y, event === void 0 ? this.event : event, code === void 0 ? this.code : code);
  };
  TouchInfo.prototype.toString = function () {
    return 'TouchInfo(x=' + Kotlin.toString(this.x) + (', y=' + Kotlin.toString(this.y)) + (', event=' + Kotlin.toString(this.event)) + (', code=' + Kotlin.toString(this.code)) + ')';
  };
  TouchInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.x) | 0;
    result = result * 31 + Kotlin.hashCode(this.y) | 0;
    result = result * 31 + Kotlin.hashCode(this.event) | 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    return result;
  };
  TouchInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.x, other.x) && Kotlin.equals(this.y, other.y) && Kotlin.equals(this.event, other.event) && Kotlin.equals(this.code, other.code)))));
  };
  function GuestTexture() {
  }
  GuestTexture.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GuestTexture',
    interfaces: []
  };
  function GuestTextureAtlas() {
  }
  GuestTextureAtlas.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GuestTextureAtlas',
    interfaces: []
  };
  function GuestNode() {
  }
  GuestNode.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GuestNode',
    interfaces: []
  };
  function GuestScreen() {
  }
  GuestScreen.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GuestScreen',
    interfaces: [GuestNode]
  };
  function GuestSprite() {
  }
  GuestSprite.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GuestSprite',
    interfaces: [GuestNode]
  };
  function GuestMask() {
  }
  GuestMask.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GuestMask',
    interfaces: [GuestNode]
  };
  function GuestLabel() {
  }
  GuestLabel.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'GuestLabel',
    interfaces: [GuestNode]
  };
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  function HAL() {
    HAL$Companion_getInstance();
    this.debug = false;
    this.touchQueue = ArrayList_init();
    this.inputMode = 0;
    this.inputPending = false;
    this.guestScreen_0 = null;
    this.shutdown_0 = false;
    this.currentTime_0 = 0.0;
    this.nodeUpdateCounter = 0;
  }
  function HAL$Holder() {
    HAL$Holder_instance = this;
    this.instance = null;
  }
  HAL$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var HAL$Holder_instance = null;
  function HAL$Holder_getInstance() {
    if (HAL$Holder_instance === null) {
      new HAL$Holder();
    }
    return HAL$Holder_instance;
  }
  function HAL$Companion() {
    HAL$Companion_instance = this;
    this.initialized = false;
  }
  HAL$Companion.prototype.shared = function () {
    if (HAL$Holder_getInstance().instance == null) {
      HAL$Holder_getInstance().instance = new HAL();
    }
    return ensureNotNull(HAL$Holder_getInstance().instance);
  };
  HAL$Companion.prototype.shutdown = function () {
    HAL$Holder_getInstance().instance = null;
  };
  HAL$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HAL$Companion_instance = null;
  function HAL$Companion_getInstance() {
    if (HAL$Companion_instance === null) {
      new HAL$Companion();
    }
    return HAL$Companion_instance;
  }
  HAL.prototype.initialize = function () {
    this.shutdown_0 = false;
  };
  HAL.prototype.shutdown = function () {
  };
  HAL.prototype.SetDebug_6taknv$ = function (debug) {
    this.debug = debug;
  };
  HAL.prototype.GetDebug = function () {
    return this.debug;
  };
  HAL.prototype.SetGuestScreen_qgvd6v$ = function (screen) {
    this.guestScreen_0 = screen;
  };
  HAL.prototype.GetGuestScreen = function () {
    return ensureNotNull(this.guestScreen_0);
  };
  HAL.prototype.createGuestSprite = function () {
    return ensureNotNull(this.guestScreen_0).createGuestSprite();
  };
  HAL.prototype.createGuestSprite_h2vgz3$ = function (texture) {
    return ensureNotNull(this.guestScreen_0).createGuestSprite_h2vgz3$(texture);
  };
  HAL.prototype.createGuestMask_h2vgz3$ = function (texture) {
    return ensureNotNull(this.guestScreen_0).createGuestMask_h2vgz3$(texture);
  };
  HAL.prototype.createGuestLabel_61zpoe$ = function (fontName) {
    return ensureNotNull(this.guestScreen_0).createGuestLabel_61zpoe$(fontName);
  };
  HAL.prototype.createGuestTexture_bm4g0d$ = function (name, image) {
    return ensureNotNull(this.guestScreen_0).createGuestTexture_bm4g0d$(name, image);
  };
  HAL.prototype.loadTexture_jyasbz$ = function (file, alias) {
    if (alias === void 0)
      alias = null;
    return ensureNotNull(this.guestScreen_0).loadTexture_jyasbz$(file, alias);
  };
  HAL.prototype.loadAtlas_ivxn3r$ = function (name, preload) {
    if (preload === void 0)
      preload = true;
    return ensureNotNull(this.guestScreen_0).loadAtlas_ivxn3r$(name, preload);
  };
  HAL.prototype.removeAtlas_61zpoe$ = function (name) {
    return ensureNotNull(this.guestScreen_0).removeAtlas_61zpoe$(name);
  };
  HAL.prototype.preloadTexture_o14v8n$ = function (callback) {
    ensureNotNull(this.guestScreen_0).preloadTexture_o14v8n$(callback);
  };
  HAL.prototype.makeAtlas_mvjluj$ = function (name, images) {
    return ensureNotNull(this.guestScreen_0).makeAtlas_mvjluj$(name, images);
  };
  HAL.prototype.makeAtlas_kwv3np$ = function (name, images) {
    return ensureNotNull(this.guestScreen_0).makeAtlas_kwv3np$(name, images);
  };
  HAL.prototype.makeAtlasWithData_d0u64m$ = function (name, images) {
    return ensureNotNull(this.guestScreen_0).makeAtlasWithData_d0u64m$(name, images);
  };
  HAL.prototype.createStringImage_k1lctz$ = function (text, fontName, fontSize, color, stroke, thick, antialias, widthMargin, heightMargin) {
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = '';
    if (fontSize === void 0)
      fontSize = 16.0;
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (stroke === void 0)
      stroke = Color$Companion_getInstance().black_mx4ult$();
    if (thick === void 0)
      thick = -3.0;
    if (antialias === void 0)
      antialias = true;
    return ensureNotNull(this.guestScreen_0).createStringImage_k1lctz$(text, fontName, fontSize, color, stroke, thick, antialias, widthMargin, heightMargin);
  };
  HAL.prototype.SetInputMode_za3lpa$ = function (mode) {
    this.inputMode = mode;
  };
  HAL.prototype.SetInputPending_6taknv$ = function (pending) {
    this.inputPending = pending;
  };
  HAL.prototype.clearInputQueue = function () {
    this.touchQueue.clear();
  };
  HAL.prototype.addInputQueue_o3bepn$ = function (x, y, event, code) {
    if (code === void 0)
      code = 0;
    var tmp$, tmp$_0;
    if (this.inputPending === true) {
      return;
    }
    if (event === TouchListener$State$moved_getInstance()) {
      tmp$ = reversed(withIndex(this.touchQueue)).iterator();
      while (tmp$.hasNext()) {
        var tmp$_1 = tmp$.next();
        var i = tmp$_1.component1()
        , prev = tmp$_1.component2();
        if (prev.event === TouchListener$State$moved_getInstance()) {
          this.touchQueue.removeAt_za3lpa$(i);
          break;
        }
      }
    }
     else if (event === TouchListener$State$cancelled_getInstance()) {
      var i_0 = 0;
      tmp$_0 = this.touchQueue.iterator();
      while (tmp$_0.hasNext()) {
        var t = tmp$_0.next();
        if (t.event === TouchListener$State$cancelled_getInstance()) {
          this.touchQueue.removeAt_za3lpa$(i_0);
          break;
        }
        i_0 = i_0 + 1 | 0;
      }
    }
    this.touchQueue.add_11rb$(new TouchInfo(x, y, event, code));
  };
  HAL.prototype.removeInputQueue_za3lpa$ = function (index) {
    this.touchQueue.removeAt_za3lpa$(index);
  };
  HAL.prototype.scroll_mx4ult$ = function (delta) {
    this.addInputQueue_o3bepn$(0.0, delta, TouchListener$State$scroll_getInstance());
  };
  HAL.prototype.SetBackgroundColor_qt1dr2$ = function (r, g, b) {
    var tmp$;
    (tmp$ = this.guestScreen_0) != null ? (tmp$.SetBackgroundColor_qt1dr2$(r, g, b), Unit) : null;
  };
  HAL.prototype.convertCoordinate_dleff0$ = function (x, y) {
    if (this.guestScreen_0 != null) {
      return ensureNotNull(this.guestScreen_0).convertCoordinate_dleff0$(x, y);
    }
    return Position_init(x, y);
  };
  HAL.prototype.SetTitle_61zpoe$ = function (title) {
    var tmp$;
    (tmp$ = this.guestScreen_0) != null ? (tmp$.SetTitle_61zpoe$(title), Unit) : null;
  };
  HAL.prototype.changeFPS_za3lpa$ = function (frame) {
    var tmp$;
    (tmp$ = this.guestScreen_0) != null ? (tmp$.changeFPS_za3lpa$(frame), Unit) : null;
  };
  HAL.prototype.moveToBackground = function () {
    var tmp$;
    (tmp$ = this.guestScreen_0) != null ? (tmp$.moveToBackground(), Unit) : null;
  };
  HAL.prototype.resume = function () {
    var tmp$;
    (tmp$ = this.guestScreen_0) != null ? (tmp$.resume(), Unit) : null;
  };
  HAL.prototype.terminate = function () {
    var tmp$;
    (tmp$ = this.guestScreen_0) != null ? (tmp$.terminate(), Unit) : null;
  };
  HAL.prototype.update_mx4ult$ = function (elapsed) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.currentTime_0 += elapsed;
    if (this.shutdown_0 === true) {
      return;
    }
    var queue = this.touchQueue;
    tmp$ = queue.iterator();
    while (tmp$.hasNext()) {
      var touch = tmp$.next();
      (tmp$_1 = (tmp$_0 = this.guestScreen_0) != null ? tmp$_0.GetScreen() : null) != null ? (tmp$_1.onTouchEvent_a3vp0k$(touch.x, touch.y, touch.event, elapsed, touch.code), Unit) : null;
    }
    queue.clear();
    this.nodeUpdateCounter = 0;
    (tmp$_2 = this.guestScreen_0) != null ? (tmp$_2.render_mx4ult$(elapsed), Unit) : null;
  };
  HAL.prototype.printLog_61zpoe$ = function (str) {
    var tmp$, tmp$_0;
    (tmp$_0 = (tmp$ = this.guestScreen_0) != null ? tmp$.GetScreen() : null) != null ? (tmp$_0.printLog_61zpoe$(str), Unit) : null;
  };
  HAL.prototype.clearLog = function () {
    var tmp$, tmp$_0;
    (tmp$_0 = (tmp$ = this.guestScreen_0) != null ? tmp$.GetScreen() : null) != null ? (tmp$_0.clearLog(), Unit) : null;
  };
  HAL.prototype.GetScreenshot_3fx80m$ = function (rect) {
    var tmp$;
    return (tmp$ = this.guestScreen_0) != null ? tmp$.GetScreenshot_3fx80m$(rect) : null;
  };
  HAL.prototype.presentView_xl35ob$ = function (view, time) {
    if (time === void 0)
      time = 0.3;
    var tmp$, tmp$_0;
    (tmp$_0 = (tmp$ = this.guestScreen_0) != null ? tmp$.GetScreen() : null) != null ? (tmp$_0.presentView_xl35ob$(view, time), Unit) : null;
  };
  HAL.prototype.GetCurrentTime = function () {
    return this.currentTime_0;
  };
  HAL.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HAL',
    interfaces: []
  };
  function SoundCategory(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SoundCategory_initFields() {
    SoundCategory_initFields = function () {
    };
    SoundCategory$SFX_instance = new SoundCategory('SFX', 0);
    SoundCategory$BGM_instance = new SoundCategory('BGM', 1);
  }
  var SoundCategory$SFX_instance;
  function SoundCategory$SFX_getInstance() {
    SoundCategory_initFields();
    return SoundCategory$SFX_instance;
  }
  var SoundCategory$BGM_instance;
  function SoundCategory$BGM_getInstance() {
    SoundCategory_initFields();
    return SoundCategory$BGM_instance;
  }
  SoundCategory.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SoundCategory',
    interfaces: [Enum]
  };
  function SoundCategory$values() {
    return [SoundCategory$SFX_getInstance(), SoundCategory$BGM_getInstance()];
  }
  SoundCategory.values = SoundCategory$values;
  function SoundCategory$valueOf(name) {
    switch (name) {
      case 'SFX':
        return SoundCategory$SFX_getInstance();
      case 'BGM':
        return SoundCategory$BGM_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.SoundCategory.' + name);
    }
  }
  SoundCategory.valueOf_61zpoe$ = SoundCategory$valueOf;
  function ResourceManager() {
    ResourceManager$Companion_getInstance();
  }
  function ResourceManager$Holder() {
    ResourceManager$Holder_instance = this;
    this.instance = null;
  }
  ResourceManager$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var ResourceManager$Holder_instance = null;
  function ResourceManager$Holder_getInstance() {
    if (ResourceManager$Holder_instance === null) {
      new ResourceManager$Holder();
    }
    return ResourceManager$Holder_instance;
  }
  function ResourceManager$Companion() {
    ResourceManager$Companion_instance = this;
    this.initialized = false;
  }
  ResourceManager$Companion.prototype.shared = function () {
    if (ResourceManager$Holder_getInstance().instance == null) {
      ResourceManager$Holder_getInstance().instance = new ResourceManager();
    }
    return ensureNotNull(ResourceManager$Holder_getInstance().instance);
  };
  ResourceManager$Companion.prototype.shutdown = function () {
    ResourceManager$Holder_getInstance().instance = null;
  };
  ResourceManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ResourceManager$Companion_instance = null;
  function ResourceManager$Companion_getInstance() {
    if (ResourceManager$Companion_instance === null) {
      new ResourceManager$Companion();
    }
    return ResourceManager$Companion_instance;
  }
  ResourceManager.prototype.loadSound_0 = function (file, alias, channelCount, category, volume) {
    if (alias === void 0)
      alias = null;
    if (channelCount === void 0)
      channelCount = 1;
    if (category === void 0)
      category = SoundCategory$SFX_getInstance();
    if (volume === void 0)
      volume = 100.0;
    return SoundManager$Companion_getInstance().shared().loadSound_rxyx1o$(file, alias, channelCount, category, volume);
  };
  ResourceManager.prototype.loadEffect_ho7uxo$ = function (file, alias, channelCount, volume) {
    if (alias === void 0)
      alias = null;
    if (channelCount === void 0)
      channelCount = 8;
    if (volume === void 0)
      volume = 100.0;
    return SoundManager$Companion_getInstance().shared().loadSound_rxyx1o$(file, alias, channelCount, SoundCategory$SFX_getInstance(), volume);
  };
  ResourceManager.prototype.loadBGM_icsyi4$ = function (file, alias, volume) {
    if (alias === void 0)
      alias = null;
    if (volume === void 0)
      volume = 100.0;
    return SoundManager$Companion_getInstance().shared().loadSound_rxyx1o$(file, alias, 1, SoundCategory$BGM_getInstance(), volume);
  };
  ResourceManager.prototype.unloadSound_61zpoe$ = function (alias) {
    SoundManager$Companion_getInstance().shared().unloadSound_61zpoe$(alias);
  };
  ResourceManager.prototype.GetSound_61zpoe$ = function (alias) {
    return SoundManager$Companion_getInstance().shared().GetSound_61zpoe$(alias);
  };
  ResourceManager.prototype.loadTexture_jyasbz$ = function (file, alias) {
    if (alias === void 0)
      alias = null;
    return TextureManager$Companion_getInstance().shared().loadTexture_jyasbz$(file, alias);
  };
  ResourceManager.prototype.addTexture_p1juio$ = function (alias, texture) {
    return TextureManager$Companion_getInstance().shared().addTexture_p1juio$(alias, texture);
  };
  ResourceManager.prototype.GetTexture_61zpoe$ = function (alias) {
    return TextureManager$Companion_getInstance().shared().GetTexture_61zpoe$(alias);
  };
  ResourceManager.prototype.unloadTexture_61zpoe$ = function (alias) {
    TextureManager$Companion_getInstance().shared().removeTexture_61zpoe$(alias);
  };
  ResourceManager.prototype.createStringImage_49g1x9$ = function (text, fontName, fontSize, color, stroke, thick, antialias, cache, alias, widthMargin, heightMargin) {
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = '';
    if (fontSize === void 0)
      fontSize = 16.0;
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (stroke === void 0)
      stroke = Color$Companion_getInstance().black_mx4ult$();
    if (thick === void 0)
      thick = -3.0;
    if (antialias === void 0)
      antialias = false;
    if (cache === void 0)
      cache = true;
    if (alias === void 0)
      alias = null;
    if (widthMargin === void 0)
      widthMargin = 1.0;
    if (heightMargin === void 0)
      heightMargin = 1.0;
    return TextureManager$Companion_getInstance().shared().createStringImage_49g1x9$(text, fontName, fontSize, color, stroke, thick, antialias, cache, alias, widthMargin, heightMargin);
  };
  ResourceManager.prototype.createStringTexture_49g1x9$ = function (text, fontName, fontSize, color, stroke, thick, antialias, cache, alias, widthMargin, heightMargin) {
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = '';
    if (fontSize === void 0)
      fontSize = 16.0;
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (stroke === void 0)
      stroke = Color$Companion_getInstance().black_mx4ult$();
    if (thick === void 0)
      thick = -3.0;
    if (antialias === void 0)
      antialias = false;
    if (cache === void 0)
      cache = true;
    if (alias === void 0)
      alias = null;
    if (widthMargin === void 0)
      widthMargin = 1.0;
    if (heightMargin === void 0)
      heightMargin = 1.0;
    return TextureManager$Companion_getInstance().shared().createStringTexture_w7yuqy$(text, fontName, fontSize, color, stroke, thick, antialias, alias, widthMargin, heightMargin);
  };
  ResourceManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ResourceManager',
    interfaces: []
  };
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  function TextureManager() {
    TextureManager$Companion_getInstance();
    this.dictionary = LinkedHashMap_init();
    this.aliasTable = LinkedHashMap_init();
  }
  function TextureManager$Holder() {
    TextureManager$Holder_instance = this;
    this.instance = null;
  }
  TextureManager$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var TextureManager$Holder_instance = null;
  function TextureManager$Holder_getInstance() {
    if (TextureManager$Holder_instance === null) {
      new TextureManager$Holder();
    }
    return TextureManager$Holder_instance;
  }
  function TextureManager$Companion() {
    TextureManager$Companion_instance = this;
    this.initialized = false;
  }
  TextureManager$Companion.prototype.shared = function () {
    if (TextureManager$Holder_getInstance().instance == null) {
      TextureManager$Holder_getInstance().instance = new TextureManager();
    }
    return ensureNotNull(TextureManager$Holder_getInstance().instance);
  };
  TextureManager$Companion.prototype.shutdown = function () {
    TextureManager$Holder_getInstance().instance = null;
  };
  TextureManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TextureManager$Companion_instance = null;
  function TextureManager$Companion_getInstance() {
    if (TextureManager$Companion_instance === null) {
      new TextureManager$Companion();
    }
    return TextureManager$Companion_instance;
  }
  TextureManager.prototype.addTexture_p1juio$ = function (alias, texture) {
    if (this.dictionary.get_11rb$(alias) != null) {
      return this.dictionary.get_11rb$(alias);
    }
    this.dictionary.put_xwzc9p$(alias, texture);
    return texture;
  };
  TextureManager.prototype.loadTexture_jyasbz$ = function (file, alias) {
    if (alias === void 0)
      alias = null;
    var key = file;
    if (alias != null) {
      key = alias;
    }
     else {
      key = file;
    }
    if (this.dictionary.get_11rb$(key) != null) {
      return this.dictionary.get_11rb$(key);
    }
    var texture = HAL$Companion_getInstance().shared().loadTexture_jyasbz$(file, alias);
    if (texture != null) {
      var $receiver = this.dictionary;
      var key_0 = key;
      $receiver.put_xwzc9p$(key_0, texture);
      return texture;
    }
    return null;
  };
  TextureManager.prototype.loadAtlas_ivxn3r$ = function (name, preload) {
    if (preload === void 0)
      preload = true;
    var tmp$;
    var result = HAL$Companion_getInstance().shared().loadAtlas_ivxn3r$(name, preload);
    tmp$ = result.iterator();
    while (tmp$.hasNext()) {
      var texture = tmp$.next();
      var $receiver = this.dictionary;
      var key = texture.GetName();
      $receiver.put_xwzc9p$(key, texture);
      this.addAlias_puj7f4$(texture.GetName(), name + '/' + texture.GetName());
    }
  };
  TextureManager.prototype.makeAtlas_mvjluj$ = function (name, images) {
    var tmp$;
    var result = HAL$Companion_getInstance().shared().makeAtlas_mvjluj$(name, images);
    tmp$ = result.iterator();
    while (tmp$.hasNext()) {
      var texture = tmp$.next();
      this.addTexture_p1juio$(texture.GetName(), texture);
    }
  };
  TextureManager.prototype.makeAtlas_kwv3np$ = function (name, images) {
    var tmp$;
    var result = HAL$Companion_getInstance().shared().makeAtlas_kwv3np$(name, images);
    tmp$ = result.iterator();
    while (tmp$.hasNext()) {
      var texture = tmp$.next();
      this.addTexture_p1juio$(texture.GetName(), texture);
    }
  };
  TextureManager.prototype.makeAtlasWithData_d0u64m$ = function (name, images) {
    var tmp$;
    var result = HAL$Companion_getInstance().shared().makeAtlasWithData_d0u64m$(name, images);
    tmp$ = result.iterator();
    while (tmp$.hasNext()) {
      var texture = tmp$.next();
      this.addTexture_p1juio$(texture.GetName(), texture);
    }
  };
  TextureManager.prototype.removeAtlas_61zpoe$ = function (name) {
    return HAL$Companion_getInstance().shared().removeAtlas_61zpoe$(name);
  };
  TextureManager.prototype.preloadTexture_o14v8n$ = function (callback) {
    HAL$Companion_getInstance().shared().preloadTexture_o14v8n$(callback);
  };
  TextureManager.prototype.addAlias_2wxw00$ = function (texture, alias) {
    if (this.dictionary.get_11rb$(alias) != null) {
      return this.dictionary.get_11rb$(alias);
    }
    this.dictionary.put_xwzc9p$(alias, texture);
    return texture;
  };
  TextureManager.prototype.addAlias_puj7f4$ = function (name, alias) {
    this.aliasTable.put_xwzc9p$(alias, name);
    return;
  };
  TextureManager.prototype.GetTexture_61zpoe$ = function (alias) {
    var name = this.aliasTable.get_11rb$(alias);
    if (name != null) {
      if (this.dictionary.get_11rb$(name) != null) {
        return this.dictionary.get_11rb$(name);
      }
       else {
        var texture = this.loadTexture_jyasbz$(name);
        if (texture != null) {
          return texture;
        }
      }
    }
     else {
      if (this.dictionary.get_11rb$(alias) != null) {
        return this.dictionary.get_11rb$(alias);
      }
       else {
        var texture_0 = this.loadTexture_jyasbz$(alias);
        if (texture_0 != null) {
          return texture_0;
        }
      }
    }
    return null;
  };
  TextureManager.prototype.checkTexture_61zpoe$ = function (alias) {
    if (this.dictionary.get_11rb$(alias) != null) {
      return this.dictionary.get_11rb$(alias);
    }
     else {
      var name = this.aliasTable.get_11rb$(alias);
      if (name != null) {
        if (this.dictionary.get_11rb$(name) != null) {
          return this.dictionary.get_11rb$(name);
        }
      }
    }
    return null;
  };
  TextureManager.prototype.removeTexture_61zpoe$ = function (alias) {
    if (this.dictionary.get_11rb$(alias) != null) {
      this.dictionary.remove_11rb$(alias);
      return true;
    }
    return false;
  };
  TextureManager.prototype.createStringImage_49g1x9$ = function (text, fontName, fontSize, color, stroke, thick, antialias, cache, alias, widthMargin, heightMargin) {
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = '';
    if (fontSize === void 0)
      fontSize = 16.0;
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (stroke === void 0)
      stroke = Color$Companion_getInstance().black_mx4ult$();
    if (thick === void 0)
      thick = -3.0;
    if (antialias === void 0)
      antialias = true;
    if (cache === void 0)
      cache = true;
    if (alias === void 0)
      alias = null;
    return HAL$Companion_getInstance().shared().createStringImage_k1lctz$(text, fontName, fontSize, color, stroke, thick, antialias, widthMargin, heightMargin);
  };
  TextureManager.prototype.createStringTexture_w7yuqy$ = function (text, fontName, fontSize, color, stroke, thick, antialias, alias, widthMargin, heightMargin) {
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = '';
    if (fontSize === void 0)
      fontSize = 16.0;
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (stroke === void 0)
      stroke = Color$Companion_getInstance().black_mx4ult$();
    if (thick === void 0)
      thick = -3.0;
    if (antialias === void 0)
      antialias = true;
    if (alias === void 0)
      alias = null;
    var key = text + fontName + fontSize.toString();
    if (alias != null) {
      key = alias;
    }
    var find = this.checkTexture_61zpoe$(key);
    if (find != null) {
      return find;
    }
    var image = HAL$Companion_getInstance().shared().createStringImage_k1lctz$(text, fontName, fontSize, color, stroke, thick, antialias, widthMargin, heightMargin);
    if (image != null) {
      return this.addTexture_p1juio$(key, HAL$Companion_getInstance().shared().createGuestTexture_bm4g0d$(key, image));
    }
    return null;
  };
  TextureManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextureManager',
    interfaces: []
  };
  function TimerState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function TimerState_initFields() {
    TimerState_initFields = function () {
    };
    TimerState$ready_instance = new TimerState('ready', 0);
    TimerState$running_instance = new TimerState('running', 1);
    TimerState$stopRequest_instance = new TimerState('stopRequest', 2);
    TimerState$stop_instance = new TimerState('stop', 3);
  }
  var TimerState$ready_instance;
  function TimerState$ready_getInstance() {
    TimerState_initFields();
    return TimerState$ready_instance;
  }
  var TimerState$running_instance;
  function TimerState$running_getInstance() {
    TimerState_initFields();
    return TimerState$running_instance;
  }
  var TimerState$stopRequest_instance;
  function TimerState$stopRequest_getInstance() {
    TimerState_initFields();
    return TimerState$stopRequest_instance;
  }
  var TimerState$stop_instance;
  function TimerState$stop_getInstance() {
    TimerState_initFields();
    return TimerState$stop_instance;
  }
  TimerState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TimerState',
    interfaces: [Enum]
  };
  function TimerState$values() {
    return [TimerState$ready_getInstance(), TimerState$running_getInstance(), TimerState$stopRequest_getInstance(), TimerState$stop_getInstance()];
  }
  TimerState.values = TimerState$values;
  function TimerState$valueOf(name) {
    switch (name) {
      case 'ready':
        return TimerState$ready_getInstance();
      case 'running':
        return TimerState$running_getInstance();
      case 'stopRequest':
        return TimerState$stopRequest_getInstance();
      case 'stop':
        return TimerState$stop_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.device.TimerState.' + name);
    }
  }
  TimerState.valueOf_61zpoe$ = TimerState$valueOf;
  function Timer() {
    this.increase = false;
    this.repeatTime = true;
    this.remain = 0;
    this.state = TimerState$stop_getInstance();
    this.interval = 0;
    this.current = 0.0;
    this.callback = null;
    this.update = Timer$update$lambda(this);
  }
  Timer.prototype.SetCallback_d6xl6w$ = function (callback) {
    this.callback = callback;
  };
  Timer.prototype.GetInterval = function () {
    return this.interval;
  };
  Timer.prototype.start = function () {
    this.state = TimerState$running_getInstance();
  };
  Timer.prototype.stop = function () {
    if (this.state === TimerState$running_getInstance()) {
      this.state = TimerState$stopRequest_getInstance();
    }
  };
  Timer.prototype.manualUpdate_mx4ult$ = function (elapsed) {
    if (this.callback != null) {
      ensureNotNull(this.callback)(this.interval);
    }
  };
  Timer.prototype.GetCurrentTime = function () {
    return this.current;
  };
  function Timer$update$lambda(this$Timer) {
    return function (info) {
      if (this$Timer.state === TimerState$stopRequest_getInstance()) {
        this$Timer.state = TimerState$stop_getInstance();
        return true;
      }
       else if (this$Timer.state === TimerState$stop_getInstance()) {
        return true;
      }
      if (this$Timer.state !== TimerState$running_getInstance()) {
        return true;
      }
      this$Timer.current = this$Timer.current + info.elapsed;
      this$Timer.state = TimerState$running_getInstance();
      if (this$Timer.callback != null) {
        ensureNotNull(this$Timer.callback)(info.elapsed);
      }
      return true;
    };
  }
  Timer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Timer',
    interfaces: []
  };
  function Timer_init(interval, callback, $this) {
    if (callback === void 0)
      callback = null;
    $this = $this || Object.create(Timer.prototype);
    Timer.call($this);
    $this.callback = callback;
    $this.interval = interval;
    $this.increase = false;
    $this.repeatTime = true;
    $this.remain = 0;
    $this.state = TimerState$stop_getInstance();
    return $this;
  }
  function TouchListener(name, x, y, width, height, receiveAlways, callback) {
    TouchListener$Code_getInstance();
    if (receiveAlways === void 0)
      receiveAlways = true;
    this.name = name;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.receiveAlways = receiveAlways;
    this.callback = callback;
  }
  function TouchListener$State(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function TouchListener$State_initFields() {
    TouchListener$State_initFields = function () {
    };
    TouchListener$State$began_instance = new TouchListener$State('began', 0);
    TouchListener$State$moved_instance = new TouchListener$State('moved', 1);
    TouchListener$State$ended_instance = new TouchListener$State('ended', 2);
    TouchListener$State$cancelled_instance = new TouchListener$State('cancelled', 3);
    TouchListener$State$scroll_instance = new TouchListener$State('scroll', 4);
    TouchListener$State$back_instance = new TouchListener$State('back', 5);
    TouchListener$State$keydown_instance = new TouchListener$State('keydown', 6);
  }
  var TouchListener$State$began_instance;
  function TouchListener$State$began_getInstance() {
    TouchListener$State_initFields();
    return TouchListener$State$began_instance;
  }
  var TouchListener$State$moved_instance;
  function TouchListener$State$moved_getInstance() {
    TouchListener$State_initFields();
    return TouchListener$State$moved_instance;
  }
  var TouchListener$State$ended_instance;
  function TouchListener$State$ended_getInstance() {
    TouchListener$State_initFields();
    return TouchListener$State$ended_instance;
  }
  var TouchListener$State$cancelled_instance;
  function TouchListener$State$cancelled_getInstance() {
    TouchListener$State_initFields();
    return TouchListener$State$cancelled_instance;
  }
  var TouchListener$State$scroll_instance;
  function TouchListener$State$scroll_getInstance() {
    TouchListener$State_initFields();
    return TouchListener$State$scroll_instance;
  }
  var TouchListener$State$back_instance;
  function TouchListener$State$back_getInstance() {
    TouchListener$State_initFields();
    return TouchListener$State$back_instance;
  }
  var TouchListener$State$keydown_instance;
  function TouchListener$State$keydown_getInstance() {
    TouchListener$State_initFields();
    return TouchListener$State$keydown_instance;
  }
  TouchListener$State.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'State',
    interfaces: [Enum]
  };
  function TouchListener$State$values() {
    return [TouchListener$State$began_getInstance(), TouchListener$State$moved_getInstance(), TouchListener$State$ended_getInstance(), TouchListener$State$cancelled_getInstance(), TouchListener$State$scroll_getInstance(), TouchListener$State$back_getInstance(), TouchListener$State$keydown_getInstance()];
  }
  TouchListener$State.values = TouchListener$State$values;
  function TouchListener$State$valueOf(name) {
    switch (name) {
      case 'began':
        return TouchListener$State$began_getInstance();
      case 'moved':
        return TouchListener$State$moved_getInstance();
      case 'ended':
        return TouchListener$State$ended_getInstance();
      case 'cancelled':
        return TouchListener$State$cancelled_getInstance();
      case 'scroll':
        return TouchListener$State$scroll_getInstance();
      case 'back':
        return TouchListener$State$back_getInstance();
      case 'keydown':
        return TouchListener$State$keydown_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.device.TouchListener.State.' + name);
    }
  }
  TouchListener$State.valueOf_61zpoe$ = TouchListener$State$valueOf;
  function TouchListener$Code() {
    TouchListener$Code_instance = this;
    this.ANY_KEY = -1;
    this.NUM_0 = 7;
    this.NUM_1 = 8;
    this.NUM_2 = 9;
    this.NUM_3 = 10;
    this.NUM_4 = 11;
    this.NUM_5 = 12;
    this.NUM_6 = 13;
    this.NUM_7 = 14;
    this.NUM_8 = 15;
    this.NUM_9 = 16;
    this.A = 29;
    this.ALT_LEFT = 57;
    this.ALT_RIGHT = 58;
    this.APOSTROPHE = 75;
    this.AT = 77;
    this.B = 30;
    this.BACK = 4;
    this.BACKSLASH = 73;
    this.C = 31;
    this.CALL = 5;
    this.CAMERA = 27;
    this.CLEAR = 28;
    this.COMMA = 55;
    this.D = 32;
    this.DEL = 67;
    this.BACKSPACE = 67;
    this.FORWARD_DEL = 112;
    this.DPAD_CENTER = 23;
    this.DPAD_DOWN = 20;
    this.DPAD_LEFT = 21;
    this.DPAD_RIGHT = 22;
    this.DPAD_UP = 19;
    this.CENTER = 23;
    this.DOWN = 20;
    this.LEFT = 21;
    this.RIGHT = 22;
    this.UP = 19;
    this.E = 33;
    this.ENDCALL = 6;
    this.ENTER = 66;
    this.ENVELOPE = 65;
    this.EQUALS = 70;
    this.EXPLORER = 64;
    this.F = 34;
    this.FOCUS = 80;
    this.G = 35;
    this.GRAVE = 68;
    this.H = 36;
    this.HEADSETHOOK = 79;
    this.HOME = 3;
    this.I = 37;
    this.J = 38;
    this.K = 39;
    this.L = 40;
    this.LEFT_BRACKET = 71;
    this.M = 41;
    this.MEDIA_FAST_FORWARD = 90;
    this.MEDIA_NEXT = 87;
    this.MEDIA_PLAY_PAUSE = 85;
    this.MEDIA_PREVIOUS = 88;
    this.MEDIA_REWIND = 89;
    this.MEDIA_STOP = 86;
    this.MENU = 82;
    this.MINUS = 69;
    this.MUTE = 91;
    this.N = 42;
    this.NOTIFICATION = 83;
    this.NUM = 78;
    this.O = 43;
    this.P = 44;
    this.PERIOD = 56;
    this.PLUS = 81;
    this.POUND = 18;
    this.POWER = 26;
    this.Q = 45;
    this.R = 46;
    this.RIGHT_BRACKET = 72;
    this.S = 47;
    this.SEARCH = 84;
    this.SEMICOLON = 74;
    this.SHIFT_LEFT = 59;
    this.SHIFT_RIGHT = 60;
    this.SLASH = 76;
    this.SOFT_LEFT = 1;
    this.SOFT_RIGHT = 2;
    this.SPACE = 62;
    this.STAR = 17;
    this.SYM = 63;
    this.T = 48;
    this.TAB = 61;
    this.U = 49;
    this.UNKNOWN = 0;
    this.V = 50;
    this.VOLUME_DOWN = 25;
    this.VOLUME_UP = 24;
    this.W = 51;
    this.X = 52;
    this.Y = 53;
    this.Z = 54;
    this.META_ALT_LEFT_ON = 16;
    this.META_ALT_ON = 2;
    this.META_ALT_RIGHT_ON = 32;
    this.META_SHIFT_LEFT_ON = 64;
    this.META_SHIFT_ON = 1;
    this.META_SHIFT_RIGHT_ON = 128;
    this.META_SYM_ON = 4;
    this.CONTROL_LEFT = 129;
    this.CONTROL_RIGHT = 130;
    this.ESCAPE = 131;
    this.END = 132;
    this.INSERT = 133;
    this.PAGE_UP = 92;
    this.PAGE_DOWN = 93;
    this.PICTSYMBOLS = 94;
    this.SWITCH_CHARSET = 95;
    this.BUTTON_CIRCLE = 255;
    this.BUTTON_A = 96;
    this.BUTTON_B = 97;
    this.BUTTON_C = 98;
    this.BUTTON_X = 99;
    this.BUTTON_Y = 100;
    this.BUTTON_Z = 101;
    this.BUTTON_L1 = 102;
    this.BUTTON_R1 = 103;
    this.BUTTON_L2 = 104;
    this.BUTTON_R2 = 105;
    this.BUTTON_THUMBL = 106;
    this.BUTTON_THUMBR = 107;
    this.BUTTON_START = 108;
    this.BUTTON_SELECT = 109;
    this.BUTTON_MODE = 110;
    this.NUMPAD_0 = 144;
    this.NUMPAD_1 = 145;
    this.NUMPAD_2 = 146;
    this.NUMPAD_3 = 147;
    this.NUMPAD_4 = 148;
    this.NUMPAD_5 = 149;
    this.NUMPAD_6 = 150;
    this.NUMPAD_7 = 151;
    this.NUMPAD_8 = 152;
    this.NUMPAD_9 = 153;
    this.COLON = 243;
    this.F1 = 244;
    this.F2 = 245;
    this.F3 = 246;
    this.F4 = 247;
    this.F5 = 248;
    this.F6 = 249;
    this.F7 = 250;
    this.F8 = 251;
    this.F9 = 252;
    this.F10 = 253;
    this.F11 = 254;
    this.F12 = 255;
  }
  TouchListener$Code.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Code',
    interfaces: []
  };
  var TouchListener$Code_instance = null;
  function TouchListener$Code_getInstance() {
    if (TouchListener$Code_instance === null) {
      new TouchListener$Code();
    }
    return TouchListener$Code_instance;
  }
  TouchListener.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TouchListener',
    interfaces: []
  };
  TouchListener.prototype.component1 = function () {
    return this.name;
  };
  TouchListener.prototype.component2 = function () {
    return this.x;
  };
  TouchListener.prototype.component3 = function () {
    return this.y;
  };
  TouchListener.prototype.component4 = function () {
    return this.width;
  };
  TouchListener.prototype.component5 = function () {
    return this.height;
  };
  TouchListener.prototype.component6 = function () {
    return this.receiveAlways;
  };
  TouchListener.prototype.component7 = function () {
    return this.callback;
  };
  TouchListener.prototype.copy_ru3o4y$ = function (name, x, y, width, height, receiveAlways, callback) {
    return new TouchListener(name === void 0 ? this.name : name, x === void 0 ? this.x : x, y === void 0 ? this.y : y, width === void 0 ? this.width : width, height === void 0 ? this.height : height, receiveAlways === void 0 ? this.receiveAlways : receiveAlways, callback === void 0 ? this.callback : callback);
  };
  TouchListener.prototype.toString = function () {
    return 'TouchListener(name=' + Kotlin.toString(this.name) + (', x=' + Kotlin.toString(this.x)) + (', y=' + Kotlin.toString(this.y)) + (', width=' + Kotlin.toString(this.width)) + (', height=' + Kotlin.toString(this.height)) + (', receiveAlways=' + Kotlin.toString(this.receiveAlways)) + (', callback=' + Kotlin.toString(this.callback)) + ')';
  };
  TouchListener.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.x) | 0;
    result = result * 31 + Kotlin.hashCode(this.y) | 0;
    result = result * 31 + Kotlin.hashCode(this.width) | 0;
    result = result * 31 + Kotlin.hashCode(this.height) | 0;
    result = result * 31 + Kotlin.hashCode(this.receiveAlways) | 0;
    result = result * 31 + Kotlin.hashCode(this.callback) | 0;
    return result;
  };
  TouchListener.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.x, other.x) && Kotlin.equals(this.y, other.y) && Kotlin.equals(this.width, other.width) && Kotlin.equals(this.height, other.height) && Kotlin.equals(this.receiveAlways, other.receiveAlways) && Kotlin.equals(this.callback, other.callback)))));
  };
  function Animation(frame, interval, repeatCount, width, height, startDelay, repeatDelay) {
    if (interval === void 0)
      interval = 0.1;
    if (repeatCount === void 0)
      repeatCount = -1;
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (startDelay === void 0)
      startDelay = 0.0;
    if (repeatDelay === void 0)
      repeatDelay = 0.0;
    this.animationFrame = frame;
    this.animationStartFrame = 0;
    this.animationEndFrame = frame.length - 1 | 0;
    this.animationInterval = interval;
    this.animationStartDelay = startDelay;
    this.animationRepeat = repeatCount;
    this.animationRepeatDelay = repeatDelay;
    this.animationWidth = width;
    this.animationHeight = height;
    this.elapsedTime = 0.0;
    this.currentFrame = -1;
    this.repeatCount = 0;
  }
  Animation.prototype.SetStartFrame_za3lpa$ = function (start) {
    this.animationStartFrame = start;
  };
  Animation.prototype.SetEndFrame_za3lpa$ = function (end) {
    this.animationEndFrame = end;
  };
  Animation.prototype.update_mx4ult$ = function (elapsed) {
    this.elapsedTime += elapsed;
    if (this.elapsedTime > this.animationStartDelay) {
      if (this.currentFrame === -1) {
        this.currentFrame = this.animationStartFrame;
        this.elapsedTime -= this.animationStartDelay;
        this.animationStartDelay = 0.0;
      }
      if (this.elapsedTime >= this.animationInterval) {
        this.currentFrame = this.currentFrame + numberToInt(this.elapsedTime / this.animationInterval) | 0;
        if (this.currentFrame > this.animationEndFrame) {
          if (this.animationRepeat === -1) {
            if (this.animationRepeatDelay > 0) {
              this.animationStartDelay = this.animationRepeatDelay - (this.currentFrame - this.animationEndFrame | 0) * this.animationInterval;
              this.currentFrame = -1;
            }
             else {
              this.currentFrame = this.currentFrame % (this.animationEndFrame + 1 | 0);
            }
          }
           else {
            this.repeatCount = this.repeatCount + 1 | 0;
            if (this.repeatCount >= this.animationRepeat) {
              this.currentFrame = this.animationEndFrame;
            }
             else {
              if (this.animationRepeatDelay > 0) {
                this.animationStartDelay = this.animationRepeatDelay - (this.currentFrame - this.animationEndFrame | 0) * this.animationInterval;
                this.currentFrame = -1;
              }
               else {
                this.currentFrame = this.currentFrame % (this.animationEndFrame + 1 | 0);
              }
            }
          }
        }
        this.elapsedTime = this.elapsedTime % this.animationInterval;
      }
    }
  };
  Animation.prototype.GetCurrentFrame = function () {
    if (this.currentFrame === -1) {
      return null;
    }
    return this.animationFrame[this.currentFrame];
  };
  Animation.prototype.GetWidth = function () {
    return this.animationWidth;
  };
  Animation.prototype.GetHeight = function () {
    return this.animationHeight;
  };
  Animation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Animation',
    interfaces: []
  };
  function BlankNode() {
    this.allowXDragging = false;
    this.allowYDragging = false;
    this.onDragging = false;
    this.lastPosition = Position_init();
    this.lastTime = 0.0;
    this.speed = Position_init();
    this.accel = Position_init();
  }
  BlankNode.prototype.SetSize_dleff0$ = function (width, height) {
    var tmp$;
    var dummy = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (dummy != null) {
      dummy.SetSize_dleff0$(width, height);
    }
    NodeWrapper.prototype.SetSize_dleff0$.call(this, width, height);
    this.SetVerticalAlign_qn2em6$(this.verticalAlign);
    this.SetHorizontalAlign_jdpdm8$(this.horizontalAlign);
  };
  BlankNode.prototype.onPress_dleff0$ = function (x, y) {
    this.onPressInternal_dleff0$(x, y);
    return NodeWrapper.prototype.onPress_dleff0$.call(this, x, y);
  };
  BlankNode.prototype.onPressInternal_dleff0$ = function (x, y) {
    this.lastPosition.x = x;
    this.lastPosition.y = y;
    this.lastTime = this.age;
    return true;
  };
  BlankNode.prototype.onDrag_dleff0$ = function (deltaX, deltaY) {
    this.onDragInternal_dleff0$(deltaX, deltaY);
    return NodeWrapper.prototype.onDrag_dleff0$.call(this, deltaX, deltaY);
  };
  var Math_0 = Math;
  BlankNode.prototype.onDragInternal_dleff0$ = function (deltaX, deltaY) {
    var deltaX_0 = deltaX;
    var deltaY_0 = deltaY;
    if (this.drag === true) {
      this.onDragging = true;
      var prevPosition = this.GetPosition();
      this.lastPosition.x = this.lastPosition.x + deltaX_0;
      this.lastPosition.y = this.lastPosition.y + deltaY_0;
      var elapsed = this.age - this.lastTime;
      if (elapsed === 0.0) {
        elapsed = 0.001;
      }
      if (this.allowXDragging === true) {
        this.speed.x = deltaX_0 / elapsed;
        var x = this.speed.x;
        if (Math_0.abs(x) > ensureNotNull(this.GetParent()).GetSize().width * 2) {
          var tmp$ = this.speed;
          var tmp$_0 = this.speed.x;
          var x_0 = this.speed.x;
          tmp$.x = tmp$_0 / Math_0.abs(x_0) * ensureNotNull(this.GetParent()).GetSize().width * 2;
        }
      }
       else {
        deltaX_0 = 0.0;
      }
      if (this.allowYDragging === true) {
        this.speed.y = deltaY_0 / elapsed;
        var x_1 = this.speed.y;
        if (Math_0.abs(x_1) > ensureNotNull(this.GetParent()).GetSize().height * 2) {
          var tmp$_1 = this.speed;
          var tmp$_2 = this.speed.y;
          var x_2 = this.speed.y;
          tmp$_1.y = tmp$_2 / Math_0.abs(x_2) * ensureNotNull(this.GetParent()).GetSize().height * 2;
        }
      }
       else {
        deltaY_0 = 0.0;
      }
      var pos = this.GetPosition();
      if (this.onDragging === true) {
        if (this.allowXDragging === true) {
          pos.x = pos.x + deltaX_0;
          if (pos.x < 0) {
            pos.x = 0.0;
          }
           else if (pos.x > ensureNotNull(this.GetParent()).GetSize().width) {
            pos.x = ensureNotNull(this.GetParent()).GetSize().width;
          }
          this.SetPosition_dleff0$(pos.x, pos.y);
        }
        if (this.allowYDragging === true) {
          pos.y = pos.y + deltaY_0;
          if (pos.y < 0) {
            pos.y = 0.0;
          }
           else if (pos.y > ensureNotNull(this.GetParent()).GetSize().height) {
            pos.y = ensureNotNull(this.GetParent()).GetSize().height;
          }
          this.SetPosition_dleff0$(pos.x, pos.y);
        }
      }
      if (this.allowXDragging === true) {
        this.speed.x = this.speed.x;
        var tmp$_3 = this.accel;
        var tmp$_4 = -1 * this.speed.x;
        var x_3 = this.speed.x;
        tmp$_3.x = tmp$_4 / Math_0.abs(x_3) * ensureNotNull(this.GetParent()).GetSize().width * 2 * 1.8;
      }
      if (this.allowYDragging === true) {
        this.speed.y = this.speed.y;
        var tmp$_5 = this.accel;
        var tmp$_6 = -1 * this.speed.y;
        var x_4 = this.speed.y;
        tmp$_5.y = tmp$_6 / Math_0.abs(x_4) * ensureNotNull(this.GetParent()).GetSize().width * 2 * 1.8;
      }
      this.lastTime = this.age;
      if (prevPosition.x !== pos.x || prevPosition.y !== pos.y) {
        this.sendMessage_iaw1dj$(Event$move_getInstance(), this.GetParent());
      }
    }
    return true;
  };
  BlankNode.prototype.onRelease_fzxzdm$ = function (x, y, speed) {
    this.onReleaseInternal_dleff0$(x, y);
    return NodeWrapper.prototype.onRelease_fzxzdm$.call(this, x, y, speed);
  };
  BlankNode.prototype.onReleaseInternal_dleff0$ = function (x, y) {
    this.onDragging = false;
    return true;
  };
  BlankNode.prototype.onCancel = function () {
    this.onCancelInternal();
    return NodeWrapper.prototype.onCancel.call(this);
  };
  BlankNode.prototype.onCancelInternal = function () {
    this.onDragging = false;
    return true;
  };
  BlankNode.prototype.update_mx4ult$ = function (elapsed) {
    NodeWrapper.prototype.update_mx4ult$.call(this, elapsed);
    var prevPosition = this.GetPosition();
    var pos = this.GetPosition();
    if (this.onDragging === true) {
      return;
    }
    if (this.speed.x !== 0.0) {
      this.speed.x = this.speed.x + this.accel.x * elapsed;
      var deltaX = this.speed.x * elapsed + 0.5 * this.accel.x * elapsed * elapsed;
      if (this.accel.x > 0) {
        if (deltaX > 0) {
          deltaX = 0.0;
          this.accel.x = 0.0;
          this.speed.x = 0.0;
        }
      }
       else {
        if (deltaX < 0) {
          deltaX = 0.0;
          this.accel.x = 0.0;
          this.speed.x = 0.0;
        }
      }
      pos.x = pos.x + deltaX;
      if (pos.x < 0) {
        pos.x = 0.0;
        this.speed.x = 0.0;
        this.accel.x = 0.0;
      }
       else if (pos.x > ensureNotNull(this.GetParent()).GetSize().width) {
        pos.x = ensureNotNull(this.GetParent()).GetSize().width;
        this.speed.x = 0.0;
        this.accel.x = 0.0;
      }
      this.SetPosition_dleff0$(pos.x, pos.y);
    }
    if (this.speed.y !== 0.0) {
      this.speed.y = this.speed.y + this.accel.y * elapsed;
      var deltaY = this.speed.y * elapsed + 0.5 * this.accel.y * elapsed * elapsed;
      if (this.accel.y > 0) {
        if (deltaY > 0) {
          deltaY = 0.0;
          this.accel.y = 0.0;
          this.speed.y = 0.0;
        }
      }
       else {
        if (deltaY < 0) {
          deltaY = 0.0;
          this.accel.y = 0.0;
          this.speed.y = 0.0;
        }
      }
      pos.y = pos.y + deltaY;
      if (pos.y < 0) {
        pos.y = 0.0;
        this.speed.y = 0.0;
        this.accel.y = 0.0;
      }
       else if (pos.y > ensureNotNull(this.GetParent()).GetSize().height) {
        pos.y = ensureNotNull(this.GetParent()).GetSize().height;
        this.speed.y = 0.0;
        this.accel.y = 0.0;
      }
      this.SetPosition_dleff0$(pos.x, pos.y);
    }
    if (prevPosition.x !== pos.x || prevPosition.y !== pos.y) {
      this.sendMessage_iaw1dj$(Event$move_getInstance(), this.GetParent());
    }
  };
  BlankNode.prototype.SetBlendFactor_mx4ult$$default = function (factor) {
    var tmp$, tmp$_0;
    this.SetBlendFactor_mx4ult$(factor, NodeWrapper.prototype.SetBlendFactor_mx4ult$$default.bind(this));
    tmp$ = this.GetChildList().iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var child_0 = Kotlin.isType(tmp$_0 = child, NodeWrapper) ? tmp$_0 : null;
      if (child_0 != null) {
        child_0.SetBlendFactor_mx4ult$(factor);
      }
    }
  };
  BlankNode.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    var tmp$, tmp$_0;
    NodeWrapper.prototype.SetBlendMode_ieo8yr$.call(this, mode);
    tmp$ = this.GetChildList().iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var child_0 = Kotlin.isType(tmp$_0 = child, NodeWrapper) ? tmp$_0 : null;
      if (child_0 != null) {
        child_0.SetBlendMode_ieo8yr$(mode);
      }
    }
  };
  BlankNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlankNode',
    interfaces: [NodeWrapper]
  };
  function BlankNode_init(x, y, z, $this) {
    if (z === void 0)
      z = 0.0;
    $this = $this || Object.create(BlankNode.prototype);
    NodeWrapper_init(x, y, z, $this);
    BlankNode.call($this);
    var tmp$;
    $this.lastPosition = Position_init();
    $this.speed = Position_init();
    $this.accel = Position_init();
    var dummy = HAL$Companion_getInstance().shared().createGuestSprite();
    if (HAL$Companion_getInstance().shared().GetDebug() === true) {
      dummy.SetColor_7b5o5w$(1.0, 0.0, 0.0, 0.5);
    }
     else {
      dummy.SetColor_7b5o5w$(0.0, 0.0, 0.0, 0.0);
    }
    $this.addObject_s8jyv4$(Kotlin.isType(tmp$ = dummy, Any) ? tmp$ : throwCCE());
    $this.lastPosition.x = $this.GetPosition().x;
    $this.lastPosition.y = $this.GetPosition().y;
    return $this;
  }
  function Button() {
    this.buttonImageFrame = [null, null, null, null];
    this.clickAdjust = Position_init(0.0, 0.0);
    this.autoSize = false;
    this.widthGap = 10;
    this.heightGap = 10;
    this.state = 0;
    this.enable = true;
    this.sizeBackup = null;
    this.labelSizeBackup = null;
    this.reaction = true;
    this.cancelWhenDrag = false;
    this.pressPoint = Position_init();
  }
  Button.prototype.freeAdditionalResource = function () {
    this.buttonImageFrame = [];
  };
  Button.prototype.SetDrag_6taknv$ = function (drag) {
    var tmp$;
    this.drag = drag;
    tmp$ = this.GetChildList().iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.SetDrag_6taknv$(drag);
    }
  };
  function Button$onPress$lambda(closure$motion, this$Button, closure$originSize, closure$labelOriginSize) {
    return function (info) {
      var tmp$, tmp$_0;
      closure$motion.update_mx4ult$(info.elapsed);
      var pos = closure$motion.GetPosition();
      var degree = closure$motion.GetAccumulateDegree();
      if (degree >= 180) {
        this$Button.SetImageSize_dleff0$(closure$originSize.width, closure$originSize.height);
        var label = Kotlin.isType(tmp$ = this$Button.GetChild_za3lpa$(1), TextArea) ? tmp$ : null;
        if (label != null) {
          label.SetSize_dleff0$(ensureNotNull(closure$labelOriginSize.v).width, ensureNotNull(closure$labelOriginSize.v).height);
          label.SetPosition_dleff0$(this$Button.GetSize().width * 0.5, this$Button.GetSize().height * 0.5);
          label.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          label.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          label.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          label.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        }
        return false;
      }
      this$Button.SetImageSize_dleff0$(closure$originSize.width * (1 + pos), closure$originSize.height * (1 + pos));
      var label_0 = Kotlin.isType(tmp$_0 = this$Button.GetChild_za3lpa$(1), TextArea) ? tmp$_0 : null;
      if (label_0 != null) {
        label_0.SetSize_dleff0$(ensureNotNull(closure$labelOriginSize.v).width * (1 + pos), ensureNotNull(closure$labelOriginSize.v).height * (1 + pos));
        label_0.SetPosition_dleff0$(this$Button.GetSize().width * 0.5, this$Button.GetSize().height * 0.5);
        label_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        label_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        label_0.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        label_0.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      }
      return true;
    };
  }
  Button.prototype.onPress_dleff0$ = function (x, y) {
    var tmp$;
    this.pressPoint.x = x;
    this.pressPoint.y = y;
    if (this.GetEnable() === false) {
      var local = this.convertGlobalToLocalCoordinate_dleff0$(x, y);
      return this.sendMessage_79egny$(new Message(Event$button_DISABLED_PRESS_getInstance(), void 0, void 0, listOf(Position_init(local.first, local.second))), this);
    }
     else {
      var local_0 = this.convertGlobalToLocalCoordinate_dleff0$(x, y);
      if (this.sendMessage_79egny$(new Message(Event$button_PRESS_getInstance(), void 0, void 0, listOf(Position_init(local_0.first, local_0.second))), this) === false) {
        return false;
      }
    }
    if (this.state !== 0) {
      return false;
    }
    this.state = 1;
    this.SetButtonImage();
    if (this.reaction === true) {
      this.sizeBackup = Size_init(this.GetSize().width, this.GetSize().height);
      var originSize = Size_init(this.GetSize().width, this.GetSize().height);
      var labelOriginSize = {v: null};
      var label = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(1), TextArea) ? tmp$ : null;
      if (label != null) {
        labelOriginSize.v = Size_init(label.GetSize().width, label.GetSize().height);
      }
      var motion = Wave_init(0.8, 0.0);
      motion.SetTimeMultiplier_mx4ult$(3.0);
      motion.SetScale_mx4ult$(0.2);
      this.addUpdateCallback_sds54w$('button_action', false, false, true, void 0, void 0, Button$onPress$lambda(motion, this, originSize, labelOriginSize));
    }
    BlankNode.prototype.onPress_dleff0$.call(this, x, y);
    return true;
  };
  Button.prototype.onDrag_dleff0$ = function (deltaX, deltaY) {
    BlankNode.prototype.onDrag_dleff0$.call(this, deltaX, deltaY);
    return true;
  };
  function Button$onRelease$lambda(this$Button, closure$position, closure$motion) {
    return function (info) {
      if (info.elapsed === 0.0) {
        this$Button.SetPosition_dleff0$(closure$position.x, closure$position.y);
        return false;
      }
      if (info.age > 0.5) {
        this$Button.SetPosition_dleff0$(closure$position.x, closure$position.y);
        return false;
      }
      closure$motion.update_mx4ult$(info.elapsed);
      var delta = closure$motion.GetPosition();
      this$Button.SetPosition_dleff0$(closure$position.x + delta, closure$position.y);
      return true;
    };
  }
  function Button$onRelease$lambda_0(this$Button, closure$local) {
    return function (info) {
      if (info.elapsed === 0.0) {
        this$Button.state = 0;
        if (this$Button.sendMessage_79egny$(new Message(Event$button_RELEASE_getInstance(), void 0, void 0, listOf(Position_init(closure$local.first, closure$local.second))), this$Button) === true) {
          this$Button.changeState();
        }
        return false;
      }
      return true;
    };
  }
  Button.prototype.onRelease_fzxzdm$ = function (x, y, speed) {
    var local = this.convertGlobalToLocalCoordinate_dleff0$(x, y);
    if (this.GetEnable() === false) {
      if (this.sendMessage_79egny$(new Message(Event$button_DISABLED_RELEASE_getInstance(), void 0, void 0, listOf(Position_init(local.first, local.second))), this) === false) {
        return false;
      }
      if (this.reaction === true) {
        var position = Position_init(this.GetPosition().x, this.GetPosition().y);
        var motion = Wave_init(10.0, 0.0);
        motion.SetScale_mx4ult$(this.GetRoot().sizeScale.xRatio * 1.2);
        this.addUpdateCallback_sds54w$('button_disabled_action', false, false, true, void 0, void 0, Button$onRelease$lambda(this, position, motion));
      }
      return false;
    }
    if (this.state === 0) {
      return false;
    }
    if (this.cancelWhenDrag === true) {
      var x_0 = this.pressPoint.x - x;
      var tmp$ = Math_0.abs(x_0) > 5 * this.GetRoot().sizeScale.xRatio;
      if (!tmp$) {
        var x_1 = this.pressPoint.y - y;
        tmp$ = Math_0.abs(x_1) > 5 * this.GetRoot().sizeScale.yRatio;
      }
      if (tmp$) {
        return this.onCancel();
      }
    }
    if (this.reaction === true) {
      var motion_0 = new Motion(-80.0, 0.0, 30.0);
      motion_0.SetTimeMultiplier_mx4ult$(2.0);
      this.addUpdateCallback_sds54w$('button_action', true, false, true, 0.0, void 0, Button$onRelease$lambda_0(this, local));
    }
     else {
      this.state = 0;
      var local_0 = this.convertGlobalToLocalCoordinate_dleff0$(x, y);
      if (this.sendMessage_79egny$(new Message(Event$button_RELEASE_getInstance(), void 0, void 0, listOf(Position_init(local_0.first, local_0.second))), this) === true) {
        this.changeState();
      }
    }
    BlankNode.prototype.onRelease_fzxzdm$.call(this, x, y, speed);
    return true;
  };
  Button.prototype.onCancel = function () {
    if (this.GetEnable() === false) {
      return false;
    }
    if (this.reaction === true) {
      this.state = 0;
    }
     else {
      this.state = 0;
    }
    BlankNode.prototype.onCancel.call(this);
    return true;
  };
  Button.prototype.SetSize_dleff0$ = function (width, height) {
    var tmp$, tmp$_0;
    BlankNode.prototype.SetSize_dleff0$.call(this, width, height);
    var sprite = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(0), Sprite) ? tmp$ : null;
    if (sprite != null) {
      sprite.SetSize_dleff0$(width, height);
      sprite.SetPosition_dleff0$(width * 0.5, height * 0.5);
    }
    var label = Kotlin.isType(tmp$_0 = this.GetChild_za3lpa$(1), TextArea) ? tmp$_0 : null;
    if (label != null) {
      label.SetSize_dleff0$(width, height);
      label.SetPosition_dleff0$(width * 0.5, height * 0.5);
      label.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      label.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      label.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      label.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    }
  };
  Button.prototype.SetImageSize_dleff0$ = function (width, height) {
    var tmp$;
    var sprite = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(0), Sprite) ? tmp$ : null;
    if (sprite != null) {
      sprite.SetSize_dleff0$(width, height);
    }
  };
  Button.prototype.SetCenterRect_3fx80m$ = function (rect) {
    var tmp$;
    var sprite = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(0), Sprite) ? tmp$ : null;
    if (sprite != null) {
      sprite.SetCenterRect_3fx80m$(rect);
    }
  };
  Button.prototype.adjustSize = function () {
  };
  Button.prototype.SetReaction_6taknv$ = function (reaction) {
    if (reaction === void 0)
      reaction = true;
    this.reaction = reaction;
  };
  Button.prototype.SetCancelWhenDrag_6taknv$ = function (cancel) {
    if (cancel === void 0)
      cancel = true;
    this.cancelWhenDrag = cancel;
  };
  Button.prototype.SetText_61zpoe$ = function (text) {
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(1), Label) ? tmp$ : null;
    if (label != null) {
      label.SetText_61zpoe$(text);
      this.adjustSize();
    }
  };
  Button.prototype.SetFontColor_3nzkge$ = function (color) {
    if (color === void 0)
      color = Color_init_1(0, 0, 0);
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(1), Label) ? tmp$ : null;
    if (label != null) {
      label.SetFontColor_3nzkge$(color);
    }
  };
  Button.prototype.SetFontSize_mx4ult$ = function (size) {
    if (size === void 0)
      size = 32.0;
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(1), Label) ? tmp$ : null;
    if (label != null) {
      label.SetFontSize_mx4ult$(size);
      this.adjustSize();
    }
  };
  Button.prototype.GetImageFrame = function () {
    return this.buttonImageFrame;
  };
  Button.prototype.SetImageFrame_a3w2ab$ = function (image) {
    for (var i = 0; i !== image.length; ++i) {
      var img = image[i];
      if (i >= this.buttonImageFrame.length || img == null) {
        this.buttonImageFrame[i] = image[0];
        continue;
      }
      if (ResourceManager$Companion_getInstance().shared().GetTexture_61zpoe$(img) != null) {
        this.buttonImageFrame[i] = img;
      }
       else {
        this.buttonImageFrame[i] = image[0];
      }
    }
    this.SetButtonImage();
  };
  Button.prototype.SetClickAdjust_dleff0$ = function (x, y) {
    this.clickAdjust.x = x;
    this.clickAdjust.y = y;
  };
  Button.prototype.SetEnable_6taknv$ = function (enable) {
    this.enable = enable;
    this.SetButtonImage();
  };
  Button.prototype.GetEnable = function () {
    return this.enable;
  };
  Button.prototype.SetButtonImage = function () {
    var tmp$;
    var sprite = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(0), Sprite) ? tmp$ : null;
    if (sprite != null) {
      if (this.enable === false) {
        if (this.buttonImageFrame[1] != null) {
          sprite.SetImage_9xt0da$(ensureNotNull(this.buttonImageFrame[1]), this.GetSize().width, this.GetSize().height);
        }
      }
       else {
        if (this.state === 0) {
          if (this.buttonImageFrame[0] != null) {
            sprite.SetImage_9xt0da$(ensureNotNull(this.buttonImageFrame[0]), this.GetSize().width, this.GetSize().height);
          }
        }
         else {
          if (this.buttonImageFrame[2] != null) {
            sprite.SetImage_9xt0da$(ensureNotNull(this.buttonImageFrame[2]), this.GetSize().width, this.GetSize().height);
          }
        }
      }
    }
  };
  Button.prototype.changeState = function () {
    this.SetButtonImage();
  };
  Button.prototype.click = function () {
    if (this.sendMessage_79egny$(new Message(Event$button_RELEASE_getInstance(), void 0, void 0, listOf(Position_init(-1.0, -1.0))), this) === true) {
      this.changeState();
    }
  };
  Button.prototype.defaultMessageHandler_sad1na$ = function (message) {
    var parent = this.GetParent();
    if (parent != null) {
      if (this.sendMessage_2iuq6n$(parent, message) === false) {
        return false;
      }
    }
    return BlankNode.prototype.defaultMessageHandler_sad1na$.call(this, message);
  };
  Button.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Button',
    interfaces: [BlankNode]
  };
  function Button_init(x, y, z, image, text, fontName, fontColor, fontSize, $this) {
    if (z === void 0)
      z = 0.0;
    if (image === void 0)
      image = null;
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = 'Main/';
    if (fontColor === void 0)
      fontColor = Color$Companion_getInstance().white_mx4ult$();
    if (fontSize === void 0)
      fontSize = 24.0;
    $this = $this || Object.create(Button.prototype);
    BlankNode_init(x, y, z, $this);
    Button.call($this);
    var image_0 = image;
    var sprite = null;
    if (image_0 == null) {
      sprite = Sprite_init(0.0, 0.0, void 0, null);
      sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      sprite.SetAlpha_8ca0d4$(0.0);
      $this.addChild_g5h3xp$(sprite);
      $this.SetSize_dleff0$(sprite.GetSize().width, sprite.GetSize().height);
    }
     else {
      sprite = Sprite_init(0.0, 0.0, void 0, image_0[0]);
      sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      $this.addChild_g5h3xp$(sprite);
      $this.SetSize_dleff0$(sprite.GetSize().width, sprite.GetSize().height);
      $this.SetImageFrame_a3w2ab$(image_0);
    }
    sprite.SetInputOwner_3hy050$($this);
    var label = TextArea_init($this.GetSize().width / 2.0, $this.GetSize().height / 2.0, void 0, $this.GetSize().width, $this.GetSize().height, fontName, fontSize, void 0, void 0, void 0, void 0, void 0, void 0, void 0, fontColor);
    label.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    label.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    label.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    label.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    label.addText_r4v59z$(text);
    $this.addChild_g5h3xp$(label);
    label.SetInputOwner_3hy050$($this);
    $this.adjustSize();
    $this.drag = false;
    $this.SetInputOwner_3hy050$($this);
    return $this;
  }
  function BlendMode(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function BlendMode_initFields() {
    BlendMode_initFields = function () {
    };
    BlendMode$alpha_instance = new BlendMode('alpha', 0);
    BlendMode$add_instance = new BlendMode('add', 1);
    BlendMode$subtract_instance = new BlendMode('subtract', 2);
    BlendMode$multiply_instance = new BlendMode('multiply', 3);
    BlendMode$multiplyX2_instance = new BlendMode('multiplyX2', 4);
    BlendMode$screen_instance = new BlendMode('screen', 5);
    BlendMode$replace_instance = new BlendMode('replace', 6);
  }
  var BlendMode$alpha_instance;
  function BlendMode$alpha_getInstance() {
    BlendMode_initFields();
    return BlendMode$alpha_instance;
  }
  var BlendMode$add_instance;
  function BlendMode$add_getInstance() {
    BlendMode_initFields();
    return BlendMode$add_instance;
  }
  var BlendMode$subtract_instance;
  function BlendMode$subtract_getInstance() {
    BlendMode_initFields();
    return BlendMode$subtract_instance;
  }
  var BlendMode$multiply_instance;
  function BlendMode$multiply_getInstance() {
    BlendMode_initFields();
    return BlendMode$multiply_instance;
  }
  var BlendMode$multiplyX2_instance;
  function BlendMode$multiplyX2_getInstance() {
    BlendMode_initFields();
    return BlendMode$multiplyX2_instance;
  }
  var BlendMode$screen_instance;
  function BlendMode$screen_getInstance() {
    BlendMode_initFields();
    return BlendMode$screen_instance;
  }
  var BlendMode$replace_instance;
  function BlendMode$replace_getInstance() {
    BlendMode_initFields();
    return BlendMode$replace_instance;
  }
  BlendMode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlendMode',
    interfaces: [Enum]
  };
  function BlendMode$values() {
    return [BlendMode$alpha_getInstance(), BlendMode$add_getInstance(), BlendMode$subtract_getInstance(), BlendMode$multiply_getInstance(), BlendMode$multiplyX2_getInstance(), BlendMode$screen_getInstance(), BlendMode$replace_getInstance()];
  }
  BlendMode.values = BlendMode$values;
  function BlendMode$valueOf(name) {
    switch (name) {
      case 'alpha':
        return BlendMode$alpha_getInstance();
      case 'add':
        return BlendMode$add_getInstance();
      case 'subtract':
        return BlendMode$subtract_getInstance();
      case 'multiply':
        return BlendMode$multiply_getInstance();
      case 'multiplyX2':
        return BlendMode$multiplyX2_getInstance();
      case 'screen':
        return BlendMode$screen_getInstance();
      case 'replace':
        return BlendMode$replace_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.graphic.BlendMode.' + name);
    }
  }
  BlendMode.valueOf_61zpoe$ = BlendMode$valueOf;
  function Color() {
    Color$Companion_getInstance();
    this.r = 1.0;
    this.g = 1.0;
    this.b = 1.0;
    this.a = 1.0;
  }
  Color.prototype.hexa2Bytes_61zpoe$ = function (hex) {
    var tmp$;
    var hexa = new Int32Array(hex.length / 2 | 0);
    tmp$ = hex.length - 1 | 0;
    for (var i = 0; i <= tmp$; i += 2) {
      if ((i + 1 | 0) < hex.length) {
        var word = slice(hex, new IntRange(i, i + 1 | 0));
        try {
          hexa[i / 2 | 0] = toInt(word, 16);
        }
         catch (e) {
          if (Kotlin.isType(e, NumberFormatException)) {
            hexa[i / 2 | 0] = 0;
            println(e.toString());
          }
           else
            throw e;
        }
      }
    }
    return hexa;
  };
  Color.prototype.compare_3nzkge$ = function (color) {
    if (this.r === color.r && this.g === color.g && this.b === color.b) {
      return true;
    }
    return false;
  };
  Color.prototype.compareWithAlpha_3nzkge$ = function (color) {
    if (this.r === color.r && this.g === color.g && this.b === color.b && this.a === color.a) {
      return true;
    }
    return false;
  };
  Color.prototype.morph_v56z0p$ = function (target, delta) {
    if (this.r < target.r) {
      this.r = this.r + delta;
      if (this.r > target.r) {
        this.r = target.r;
      }
    }
     else if (this.r > target.r) {
      this.r = this.r - delta;
      if (this.r < target.r) {
        this.r = target.r;
      }
    }
    if (this.g < target.g) {
      this.g = this.g + delta;
      if (this.g > target.g) {
        this.g = target.g;
      }
    }
     else if (this.g > target.g) {
      this.g = this.g - delta;
      if (this.g < target.g) {
        this.g = target.g;
      }
    }
    if (this.b < target.b) {
      this.b = this.b + delta;
      if (this.b > target.b) {
        this.b = target.b;
      }
    }
     else if (this.b > target.b) {
      this.b = this.b - delta;
      if (this.b < target.b) {
        this.b = target.b;
      }
    }
    if (this.a < target.a) {
      this.a = this.a + delta;
      if (this.a > target.a) {
        this.a = target.a;
      }
    }
     else if (this.a > target.a) {
      this.a = this.a - delta;
      if (this.a < target.a) {
        this.a = target.a;
      }
    }
  };
  Color.prototype.morphOld_v56z0p$ = function (target, delta) {
    if (this.r < target.r) {
      this.r = this.r + 0.5 * delta;
      if (this.r > target.r) {
        this.r = target.r;
      }
    }
     else if (this.r > target.r) {
      this.r = this.r - 0.5 * delta;
      if (this.r < target.r) {
        this.r = target.r;
      }
    }
    if (this.g < target.g) {
      this.g = this.g + 0.5 * delta;
      if (this.g > target.g) {
        this.g = target.g;
      }
    }
     else if (this.g > target.g) {
      this.g = this.g - 0.5 * delta;
      if (this.g < target.g) {
        this.g = target.g;
      }
    }
    if (this.b < target.b) {
      this.b = this.b + 0.5 * delta;
      if (this.b > target.b) {
        this.b = target.b;
      }
    }
     else if (this.b > target.b) {
      this.b = this.b - 0.5 * delta;
      if (this.b < target.b) {
        this.b = target.b;
      }
    }
  };
  function Color$Companion() {
    Color$Companion_instance = this;
  }
  Color$Companion.prototype.black_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 0, 0, a);
  };
  Color$Companion.prototype.white_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_0(1.0, 1.0, 1.0, a);
  };
  Color$Companion.prototype.gray_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_0(0.5, 0.5, 0.5, a);
  };
  Color$Companion.prototype.clear_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_0(0.0, 0.0, 0.0, 0.0);
  };
  Color$Companion.prototype.yellow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 251, 0, a);
  };
  Color$Companion.prototype.red_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 38, 0, a);
  };
  Color$Companion.prototype.purple_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(148, 33, 146, a);
  };
  Color$Companion.prototype.orange_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 147, 0, a);
  };
  Color$Companion.prototype.magenta_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 64, 255, a);
  };
  Color$Companion.prototype.green_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 249, 0, a);
  };
  Color$Companion.prototype.cyan_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 253, 255, a);
  };
  Color$Companion.prototype.brown_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(170, 121, 66, a);
  };
  Color$Companion.prototype.blue_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(4, 51, 255, a);
  };
  Color$Companion.prototype.tangerine_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 128, 0, a);
  };
  Color$Companion.prototype.lemon_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 255, 0, a);
  };
  Color$Companion.prototype.salmon_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 102, 102, a);
  };
  Color$Companion.prototype.banana_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 255, 102, a);
  };
  Color$Companion.prototype.strawberry_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 47, 146, a);
  };
  Color$Companion.prototype.maraschino_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 38, 0, a);
  };
  Color$Companion.prototype.grape_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(148, 55, 255, a);
  };
  Color$Companion.prototype.spring_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 249, 0, a);
  };
  Color$Companion.prototype.sky_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(118, 214, 255, a);
  };
  Color$Companion.prototype.orchid_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(122, 129, 255, a);
  };
  Color$Companion.prototype.plum_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(148, 33, 147, a);
  };
  Color$Companion.prototype.aqua_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 128, 255, a);
  };
  Color$Companion.prototype.ocean_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 64, 128, a);
  };
  Color$Companion.prototype.midnight_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 0, 128, a);
  };
  Color$Companion.prototype.eggplant_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(64, 0, 128, a);
  };
  Color$Companion.prototype.customYellow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(220, 195, 86, a);
  };
  Color$Companion.prototype.customYellow2_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(240, 244, 54, a);
  };
  Color$Companion.prototype.customYellow3_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(253, 219, 54, a);
  };
  Color$Companion.prototype.customSky_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(131, 182, 204, a);
  };
  Color$Companion.prototype.customSky2_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(54, 178, 253, a);
  };
  Color$Companion.prototype.customSky3_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(54, 129, 253, a);
  };
  Color$Companion.prototype.customSky4_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(42, 92, 195, a);
  };
  Color$Companion.prototype.customGreen_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(124, 219, 0, a);
  };
  Color$Companion.prototype.customGameSky_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(140, 208, 232, a);
  };
  Color$Companion.prototype.customDeepSpace_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(40, 47, 128, a);
  };
  Color$Companion.prototype.customDeepSpace2_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(39, 16, 96, a);
  };
  Color$Companion.prototype.customDeepSpace3_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(64, 26, 159, a);
  };
  Color$Companion.prototype.customDeepSpace4_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(21, 79, 99, a);
  };
  Color$Companion.prototype.customDeepSpace5_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(27, 93, 119, a);
  };
  Color$Companion.prototype.customDeepSpace6_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(50, 77, 92, a);
  };
  Color$Companion.prototype.customFlat0_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(50, 77, 92, a);
  };
  Color$Companion.prototype.customFlat1_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(70, 178, 157, a);
  };
  Color$Companion.prototype.customFlat2_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(240, 202, 77, a);
  };
  Color$Companion.prototype.customFlat3_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(227, 123, 64, a);
  };
  Color$Companion.prototype.customFlat4_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(222, 91, 73, a);
  };
  Color$Companion.prototype.customFlatUI0_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(52, 152, 219, a);
  };
  Color$Companion.prototype.customFlatUI1_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(52, 73, 94, a);
  };
  Color$Companion.prototype.customFlatUI2_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(46, 204, 113, a);
  };
  Color$Companion.prototype.customFlatUI3_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(231, 76, 60, a);
  };
  Color$Companion.prototype.customFlatUI4_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(241, 196, 15, a);
  };
  Color$Companion.prototype.customFranky0_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(34, 72, 94, a);
  };
  Color$Companion.prototype.customFranky1_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(116, 176, 137, a);
  };
  Color$Companion.prototype.customFranky2_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(240, 230, 151, a);
  };
  Color$Companion.prototype.customFranky3_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 158, 133, a);
  };
  Color$Companion.prototype.customFranky4_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(255, 84, 97, a);
  };
  Color$Companion.prototype.puzzleRed_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(236, 67, 57, a);
  };
  Color$Companion.prototype.puzzleRedShadow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(193, 31, 29, a);
  };
  Color$Companion.prototype.puzzleRedBright_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(175, 255, 72, a);
  };
  Color$Companion.prototype.puzzleYellow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(239, 185, 32, a);
  };
  Color$Companion.prototype.puzzleYellowShadow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(202, 148, 0, a);
  };
  Color$Companion.prototype.puzzleYellowBright_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(251, 255, 52, a);
  };
  Color$Companion.prototype.puzzleGreen_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(124, 184, 47, a);
  };
  Color$Companion.prototype.puzzleGreenShadow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(78, 143, 19, a);
  };
  Color$Companion.prototype.puzzleBlue_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 160, 220, a);
  };
  Color$Companion.prototype.puzzleBlueShadow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(0, 119, 181, a);
  };
  Color$Companion.prototype.puzzleBlueBright_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(65, 235, 255, a);
  };
  Color$Companion.prototype.puzzlePurple_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(140, 104, 203, a);
  };
  Color$Companion.prototype.puzzlePurpleShadow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(106, 75, 167, a);
  };
  Color$Companion.prototype.puzzleOrange_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(244, 123, 22, a);
  };
  Color$Companion.prototype.puzzlePink_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(237, 71, 149, a);
  };
  Color$Companion.prototype.puzzlePinkShadow_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(201, 24, 110, a);
  };
  Color$Companion.prototype.puzzleTileGray_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(58, 58, 58, a);
  };
  Color$Companion.prototype.puzzleBoardGray_mx4ult$ = function (a) {
    if (a === void 0)
      a = 1.0;
    return Color_init_1(42, 42, 42, a);
  };
  Color$Companion.prototype.copy_3nzkge$ = function (color) {
    return Color_init_0(color.r, color.g, color.b, color.a);
  };
  Color$Companion.prototype.morphColor_u1nt5b$ = function (from, to, percent) {
    var percent_0 = percent;
    if (percent_0 >= 1.0) {
      percent_0 = 1.0;
      return Color_init_0(to.r, to.g, to.b, to.a);
    }
    if (percent_0 <= 0) {
      percent_0 = 0.0;
      return Color_init_0(from.r, from.g, from.b, from.a);
    }
    var r = (to.r - from.r) * percent_0;
    r = from.r + r;
    var g = (to.g - from.g) * percent_0;
    g = from.g + g;
    var b = (to.b - from.b) * percent_0;
    b = from.b + b;
    var a = (to.a - from.a) * percent_0;
    a = from.a + a;
    return Color_init_0(r, g, b, a);
  };
  Color$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Color$Companion_instance = null;
  function Color$Companion_getInstance() {
    if (Color$Companion_instance === null) {
      new Color$Companion();
    }
    return Color$Companion_instance;
  }
  Color.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Color',
    interfaces: []
  };
  function Color_init(hex, a, $this) {
    if (a === void 0)
      a = 1.0;
    $this = $this || Object.create(Color.prototype);
    Color.call($this);
    var value = $this.hexa2Bytes_61zpoe$(hex);
    $this.r = value[0] / 255.0;
    $this.g = value[1] / 255.0;
    $this.b = value[2] / 255.0;
    $this.a = a;
    return $this;
  }
  function Color_init_0(r, g, b, a, $this) {
    if (r === void 0)
      r = 1.0;
    if (g === void 0)
      g = 1.0;
    if (b === void 0)
      b = 1.0;
    if (a === void 0)
      a = 1.0;
    $this = $this || Object.create(Color.prototype);
    Color.call($this);
    $this.r = r;
    $this.g = g;
    $this.b = b;
    $this.a = a;
    return $this;
  }
  function Color_init_1(r, g, b, a, $this) {
    if (a === void 0)
      a = 1.0;
    $this = $this || Object.create(Color.prototype);
    Color.call($this);
    $this.r = r / 255;
    $this.g = g / 255;
    $this.b = b / 255;
    $this.a = a;
    return $this;
  }
  function CompositeLabel() {
    this.text = '';
    this.fontColor = Color_init_0();
    this.fontStrokeColor = Color_init_0();
    this.fontScale = 0;
    this.fontName = '';
    this.fontSize = 0.0;
    this.thick = -3.0;
    this.fontWidth = 0.0;
    this.fontHeight = 0.0;
    this.fontSpaceRatio = 0;
    this.whiteSpaceRatio = 0;
    this.textureImage = null;
    this.justUseImage = false;
    this.texturePrefix = null;
  }
  CompositeLabel.prototype.SetSpace_mx4ult$ = function (ratio) {
    if (ratio === void 0)
      ratio = 0.2;
    this.fontSpaceRatio = ratio;
  };
  CompositeLabel.prototype.SetWhiteSpace_mx4ult$ = function (ratio) {
    if (ratio === void 0)
      ratio = 1.0;
    this.whiteSpaceRatio = ratio;
  };
  CompositeLabel.prototype.SetText_61zpoe$ = function (text) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var temp = toList(this.childList);
    tmp$ = temp.iterator();
    while (tmp$.hasNext()) {
      var label = tmp$.next();
      label.removeFromParent();
    }
    this.childList.clear();
    this.text = text;
    var offset = 0.0;
    var height = this.fontHeight;
    tmp$_0 = iterator(text);
    while (tmp$_0.hasNext()) {
      var ch = unboxChar(tmp$_0.next());
      if (ch === 32 || ch === 160) {
        offset += this.fontWidth * this.whiteSpaceRatio;
        continue;
      }
      if (this.justUseImage === true) {
        var label_0 = Sprite_init(offset, 0.0, void 0, this.texturePrefix + String.fromCharCode(ch));
        label_0.SetScale_mx4ult$(this.fontScale);
        label_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        label_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
        this.addChild_g5h3xp$(label_0);
        offset = offset + label_0.GetSize().width + this.fontWidth * this.fontSpaceRatio;
        if (label_0.GetSize().height > height) {
          height = label_0.GetSize().height;
        }
      }
    }
    BlankNode.prototype.SetSize_dleff0$.call(this, offset, height);
    tmp$_1 = this.childList.iterator();
    while (tmp$_1.hasNext()) {
      var child = tmp$_1.next();
      var label_1 = Kotlin.isType(tmp$_2 = child, Sprite) ? tmp$_2 : null;
      if (label_1 != null) {
        label_1.SetPosition_dleff0$(label_1.GetPosition().x, height / 2);
      }
    }
    this.SetVerticalAlign_qn2em6$(this.verticalAlign);
    this.SetHorizontalAlign_jdpdm8$(this.horizontalAlign);
    this.SetColor_vnjrmz$(this.GetColor());
    this.SetBlendFactor_mx4ult$(this.GetBlendFactor());
    this.SetBlendMode_ieo8yr$(this.GetBlendMode());
  };
  CompositeLabel.prototype.SetScale_mx4ult$$default = function (scale) {
    var tmp$, tmp$_0, tmp$_1;
    var scale_0 = scale;
    if (scale_0 < 0) {
      scale_0 = 0.0;
    }
    this.fontScale = this.fontScale * scale_0;
    var label = Sprite_init(0.0, 0.0, void 0, this.texturePrefix + '0');
    label.SetScale_mx4ult$(this.fontScale);
    this.fontWidth = label.GetSize().width;
    this.fontHeight = label.GetSize().height;
    var offset = 0.0;
    var height = this.fontHeight;
    var spriteIndex = 0;
    tmp$ = iterator(this.text);
    while (tmp$.hasNext()) {
      var ch = unboxChar(tmp$.next());
      if (ch === 32 || ch === 160) {
        offset += this.fontWidth * this.whiteSpaceRatio;
        continue;
      }
      var sprite = this.childList.get_za3lpa$(spriteIndex);
      sprite.SetSize_dleff0$(sprite.GetSize().width * scale_0, sprite.GetSize().height * scale_0);
      sprite.SetPosition_dleff0$(offset, 0.0);
      offset = offset + sprite.GetSize().width + this.fontWidth * this.fontSpaceRatio;
      if (sprite.GetSize().height > height) {
        height = sprite.GetSize().height;
      }
      spriteIndex = spriteIndex + 1 | 0;
    }
    BlankNode.prototype.SetSize_dleff0$.call(this, offset, height);
    tmp$_0 = this.childList.iterator();
    while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      var label_0 = Kotlin.isType(tmp$_1 = child, Sprite) ? tmp$_1 : null;
      if (label_0 != null) {
        label_0.SetPosition_dleff0$(label_0.GetPosition().x, height / 2);
      }
    }
    this.SetVerticalAlign_qn2em6$(this.verticalAlign);
    this.SetHorizontalAlign_jdpdm8$(this.horizontalAlign);
  };
  CompositeLabel.prototype.SetScaleOriginal_mx4ult$ = function (scale) {
    if (scale === void 0)
      scale = 1.0;
    var tmp$, tmp$_0;
    var scale_0 = scale;
    if (scale_0 < 0) {
      scale_0 = 0.0;
    }
    this.fontScale = scale_0;
    var label = Sprite_init(0.0, 0.0, void 0, this.texturePrefix + '0');
    label.SetScale_mx4ult$(this.fontScale);
    this.fontWidth = label.GetSize().width;
    var offset = 0.0;
    var height = 0.0;
    var i = 0;
    var spriteIndex = 0;
    while (spriteIndex < this.childList.size) {
      var ch = this.text.charCodeAt(i);
      i = i + 1 | 0;
      if (ch === 32 || ch === 160) {
        offset += this.fontWidth * this.whiteSpaceRatio;
        continue;
      }
      var sprite = this.childList.get_za3lpa$(spriteIndex);
      sprite.SetSize_dleff0$(sprite.GetOriginalSize().width * scale_0, sprite.GetOriginalSize().height * scale_0);
      sprite.SetPosition_dleff0$(offset, 0.0);
      offset = offset + sprite.GetSize().width + this.fontWidth * this.fontSpaceRatio;
      if (sprite.GetSize().height > height) {
        height = sprite.GetSize().height;
      }
      spriteIndex = spriteIndex + 1 | 0;
    }
    BlankNode.prototype.SetSize_dleff0$.call(this, offset, height);
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var label_0 = Kotlin.isType(tmp$_0 = child, Sprite) ? tmp$_0 : null;
      if (label_0 != null) {
        label_0.SetPosition_dleff0$(label_0.GetPosition().x, height / 2);
      }
    }
    this.SetVerticalAlign_qn2em6$(this.verticalAlign);
    this.SetHorizontalAlign_jdpdm8$(this.horizontalAlign);
  };
  CompositeLabel.prototype.GetScale = function () {
    return this.fontScale;
  };
  CompositeLabel.prototype.SetSize_dleff0$ = function (width, height) {
    var size = this.GetSize();
    if (width > 0) {
      var newScale = width / size.width;
      this.SetScale_mx4ult$(newScale);
    }
     else if (height > 0) {
      var newScale_0 = height / size.height;
      this.SetScale_mx4ult$(newScale_0);
    }
  };
  CompositeLabel.prototype.GetFontColor = function () {
    return this.fontColor;
  };
  CompositeLabel.prototype.SetFontColor_7b5o5w$ = function (red, green, blue, alpha) {
    if (red === void 0)
      red = 1.0;
    if (green === void 0)
      green = 1.0;
    if (blue === void 0)
      blue = 1.0;
    if (alpha === void 0)
      alpha = 1.0;
    var tmp$, tmp$_0;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var sprite = Kotlin.isType(tmp$_0 = child, Sprite) ? tmp$_0 : null;
      if (sprite != null) {
        sprite.SetColor_sczwbf$(red, green, blue, alpha);
      }
    }
    this.fontColor.r = red;
    this.fontColor.g = green;
    this.fontColor.b = blue;
    this.fontColor.a = alpha;
  };
  CompositeLabel.prototype.GetFontAlpha = function () {
    return this.fontColor.a;
  };
  CompositeLabel.prototype.SetFontAlpha_mx4ult$ = function (alpha) {
    if (alpha === void 0)
      alpha = 1.0;
    this.SetFontColor_7b5o5w$(this.fontColor.r, this.fontColor.g, this.fontColor.b, alpha);
  };
  CompositeLabel.prototype.SetFontSize_mx4ult$ = function (size) {
    if (size === void 0)
      size = 32.0;
  };
  CompositeLabel.prototype.SetFontName_61zpoe$ = function (name) {
  };
  CompositeLabel.prototype.SetBlendFactor_mx4ult$$default = function (factor) {
    var tmp$, tmp$_0;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var child_0 = Kotlin.isType(tmp$_0 = child, NodeWrapper) ? tmp$_0 : null;
      if (child_0 != null) {
        child_0.SetBlendFactor_mx4ult$(factor);
      }
    }
    this.SetBlendFactor_mx4ult$(factor, BlankNode.prototype.SetBlendFactor_mx4ult$$default.bind(this));
  };
  CompositeLabel.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    var tmp$, tmp$_0;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var child_0 = Kotlin.isType(tmp$_0 = child, NodeWrapper) ? tmp$_0 : null;
      if (child_0 != null) {
        child_0.SetBlendMode_ieo8yr$(mode);
      }
    }
    BlankNode.prototype.SetBlendMode_ieo8yr$.call(this, mode);
  };
  CompositeLabel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompositeLabel',
    interfaces: [BlankNode]
  };
  function CompositeLabel_init(x, y, z, text, fontScale, fontSpaceRatio, whiteSpaceRatio, image, resourcePrefix, justUseImage, $this) {
    if (z === void 0)
      z = 0.0;
    if (text === void 0)
      text = '';
    if (fontScale === void 0)
      fontScale = 1.0;
    if (fontSpaceRatio === void 0)
      fontSpaceRatio = 0.0;
    if (whiteSpaceRatio === void 0)
      whiteSpaceRatio = 0.0;
    if (image === void 0)
      image = null;
    if (justUseImage === void 0)
      justUseImage = true;
    $this = $this || Object.create(CompositeLabel.prototype);
    BlankNode_init(x, y, z, $this);
    CompositeLabel.call($this);
    $this.textureImage = image;
    $this.texturePrefix = resourcePrefix;
    $this.fontScale = fontScale;
    $this.fontSpaceRatio = fontSpaceRatio;
    $this.whiteSpaceRatio = whiteSpaceRatio;
    $this.justUseImage = justUseImage;
    var label = Sprite_init(0.0, 0.0, void 0, $this.texturePrefix + '0');
    label.SetScale_mx4ult$(fontScale);
    $this.fontWidth = label.GetSize().width;
    $this.fontHeight = label.GetSize().height;
    $this.SetText_61zpoe$(text);
    return $this;
  }
  function Object3D() {
    Object3D$Companion_getInstance();
    this.age = 0.0;
    this.timeToLive = -1.0;
    this.name = '';
    this.position = Position_init();
    this.prevPosition = Position_init();
    this.local = Position_init();
    this.movement = Position_init();
    this.movementMax = kotlin_js_internal_FloatCompanionObject.POSITIVE_INFINITY;
    this.rotation = Position_init();
    this.keepDirection = false;
    this.direction = Position_init();
    this.accel = Position_init();
    this.accelRetain = Position_init();
    this.drag = Position_init();
    this.normal = Position_init(0.0, 0.0, 1.0);
    this.size = 1.0;
    this.convertPosition = Position_init();
    this.screenPosition = Position_init();
    this.screenSize = Size_init();
    this.fixScreenZ = false;
    this.screenZ = 0.0;
    this.xMotion = null;
    this.yMotion = null;
    this.zMotion = null;
    this.originalAlpha_oxgaai$_0 = 1.0;
    this.subAlpha_fnduof$_0 = 1.0;
    this.currentAlpha_o3wgi0$_0 = 1.0;
    this.willBeDestroyed = null;
    this.localVariables = LinkedHashMap_init();
  }
  Object3D.prototype.initialize = function () {
    this.age = 0.0;
    this.timeToLive = -1.0;
    this.position.x = 0.0;
    this.position.y = 0.0;
    this.position.z = 0.0;
    this.prevPosition.x = 0.0;
    this.prevPosition.y = 0.0;
    this.prevPosition.z = 0.0;
    this.local.x = 0.0;
    this.local.y = 0.0;
    this.local.z = 0.0;
    this.movement.x = 0.0;
    this.movement.y = 0.0;
    this.movement.z = 0.0;
    this.rotation.x = 0.0;
    this.rotation.y = 0.0;
    this.rotation.z = 0.0;
    this.direction.x = 0.0;
    this.direction.y = 0.0;
    this.direction.z = 0.0;
    this.keepDirection = false;
    this.accel.x = 0.0;
    this.accel.y = 0.0;
    this.accel.z = 0.0;
    this.accelRetain.x = 0.0;
    this.accelRetain.y = 0.0;
    this.accelRetain.z = 0.0;
    this.drag.x = 0.0;
    this.drag.y = 0.0;
    this.drag.z = 0.0;
    this.normal.x = 0.0;
    this.normal.y = 0.0;
    this.normal.z = 1.0;
    this.xMotion = null;
    this.yMotion = null;
    this.zMotion = null;
    this.originalAlpha_oxgaai$_0 = 1.0;
    this.subAlpha_fnduof$_0 = 1.0;
    this.currentAlpha_o3wgi0$_0 = 1.0;
    this.willBeDestroyed = null;
    this.localVariables.clear();
  };
  Object3D.prototype.destroy = function () {
    this.xMotion = null;
    this.yMotion = null;
    this.zMotion = null;
    this.willBeDestroyed = null;
    this.localVariables.clear();
  };
  Object3D.prototype.addLocalVariables_bm4g0d$ = function (key, obj) {
    this.localVariables.put_xwzc9p$(key, obj);
  };
  Object3D.prototype.GetLocalVariables_61zpoe$ = function (key) {
    return this.localVariables.get_11rb$(key);
  };
  Object3D.prototype.removeLocalVariables_61zpoe$ = function (key) {
    return this.localVariables.remove_11rb$(key);
  };
  Object3D.prototype.rotateX_8ca0d4$ = function (degree, direction) {
    if (direction === void 0)
      direction = false;
    if (degree === 0.0) {
      return;
    }
    var theta = degree % 360.0 * (math.PI / 180.0);
    var y = this.position.y * Math_0.cos(theta) - this.position.z * Math_0.sin(theta);
    var z = this.position.y * Math_0.sin(theta) + this.position.z * Math_0.cos(theta);
    this.position.y = y;
    this.position.z = z;
    if (direction === true) {
      this.direction.x = this.direction.x + degree;
      this.direction.x = this.direction.x % 360.0;
      var y_0 = this.normal.y * Math_0.cos(theta) - this.normal.z * Math_0.sin(theta);
      var z_0 = this.normal.y * Math_0.sin(theta) + this.normal.z * Math_0.cos(theta);
      this.normal.y = y_0;
      this.normal.z = z_0;
    }
  };
  Object3D.prototype.rotateX_t6gch2$ = function (center, degree, direction) {
    if (direction === void 0)
      direction = false;
    this.position.x = this.position.x - center.x;
    this.position.y = this.position.y - center.y;
    this.position.z = this.position.z - center.z;
    this.rotateX_8ca0d4$(degree, direction);
    this.position.x = this.position.x + center.x;
    this.position.y = this.position.y + center.y;
    this.position.z = this.position.z + center.z;
  };
  Object3D.prototype.rotateY_8ca0d4$ = function (degree, direction) {
    if (direction === void 0)
      direction = false;
    if (degree === 0.0) {
      return;
    }
    var theta = degree % 360.0 * (math.PI / 180.0);
    var x = this.position.x * Math_0.cos(theta) + this.position.z * Math_0.sin(theta);
    var z = -this.position.x * Math_0.sin(theta) + this.position.z * Math_0.cos(theta);
    this.position.x = x;
    this.position.z = z;
    if (direction === true) {
      this.direction.y = this.direction.y + degree;
      this.direction.y = this.direction.y % 360.0;
      var x_0 = this.normal.x * Math_0.cos(theta) + this.normal.z * Math_0.sin(theta);
      var z_0 = -this.normal.x * Math_0.sin(theta) + this.normal.z * Math_0.cos(theta);
      this.normal.x = x_0;
      this.normal.z = z_0;
    }
  };
  Object3D.prototype.rotateY_t6gch2$ = function (center, degree, direction) {
    if (direction === void 0)
      direction = false;
    this.position.x = this.position.x - center.x;
    this.position.y = this.position.y - center.y;
    this.position.z = this.position.z - center.z;
    this.rotateY_8ca0d4$(degree, direction);
    this.position.x = this.position.x + center.x;
    this.position.y = this.position.y + center.y;
    this.position.z = this.position.z + center.z;
  };
  Object3D.prototype.rotateZ_8ca0d4$ = function (degree, direction) {
    if (direction === void 0)
      direction = false;
    if (degree === 0.0) {
      return;
    }
    var theta = degree % 360.0 * (math.PI / 180.0);
    var x = this.position.x * Math_0.cos(theta) - this.position.y * Math_0.sin(theta);
    var y = this.position.x * Math_0.sin(theta) + this.position.y * Math_0.cos(theta);
    this.position.x = x;
    this.position.y = y;
    if (direction === true) {
      this.direction.z = this.direction.z + degree;
      this.direction.z = this.direction.z % 360.0;
      var x_0 = this.normal.x * Math_0.cos(theta) - this.normal.y * Math_0.sin(theta);
      var y_0 = this.normal.x * Math_0.sin(theta) + this.normal.y * Math_0.cos(theta);
      this.normal.x = x_0;
      this.normal.y = y_0;
    }
  };
  Object3D.prototype.rotateZ_t6gch2$ = function (center, degree, direction) {
    if (direction === void 0)
      direction = false;
    this.position.x = this.position.x - center.x;
    this.position.y = this.position.y - center.y;
    this.position.z = this.position.z - center.z;
    this.rotateZ_8ca0d4$(degree, direction);
    this.position.x = this.position.x + center.x;
    this.position.y = this.position.y + center.y;
    this.position.z = this.position.z + center.z;
  };
  Object3D.prototype.rotateLocalX_mx4ult$ = function (degree) {
    if (degree === 0.0) {
      return;
    }
    var theta = degree % 360.0 * (math.PI / 180.0);
    var y = this.local.y * Math_0.cos(theta) - this.local.z * Math_0.sin(theta);
    var z = this.local.y * Math_0.sin(theta) + this.local.z * Math_0.cos(theta);
    this.local.y = y;
    this.local.z = z;
    if (this.keepDirection === true) {
      this.direction.x = this.direction.x + degree;
      this.direction.x = this.direction.x % 360.0;
      y = this.normal.y * Math_0.cos(theta) - this.normal.z * Math_0.sin(theta);
      z = this.normal.y * Math_0.sin(theta) + this.normal.z * Math_0.cos(theta);
      this.normal.y = y;
      this.normal.z = z;
    }
  };
  Object3D.prototype.rotateLocalY_mx4ult$ = function (degree) {
    if (degree === 0.0) {
      return;
    }
    var theta = degree % 360 * (math.PI / 180.0);
    var x = this.local.x * Math_0.cos(theta) + this.local.z * Math_0.sin(theta);
    var z = -this.local.x * Math_0.sin(theta) + this.local.z * Math_0.cos(theta);
    this.local.x = x;
    this.local.z = z;
    if (this.keepDirection === true) {
      this.direction.y = this.direction.y + degree;
      this.direction.y = this.direction.y % 360.0;
      x = this.normal.x * Math_0.cos(theta) + this.normal.z * Math_0.sin(theta);
      z = -this.normal.x * Math_0.sin(theta) + this.normal.z * Math_0.cos(theta);
      this.normal.x = x;
      this.normal.z = z;
    }
  };
  Object3D.prototype.rotateLocalZ_mx4ult$ = function (degree) {
    if (degree === 0.0) {
      return;
    }
    var theta = degree % 360.0 * (math.PI / 180.0);
    var x = this.local.x * Math_0.cos(theta) - this.local.y * Math_0.sin(theta);
    var y = this.local.x * Math_0.sin(theta) + this.local.y * Math_0.cos(theta);
    this.local.x = x;
    this.local.y = y;
    if (this.keepDirection === true) {
      this.direction.z = this.direction.z + degree;
      this.direction.z = this.direction.z % 360.0;
      x = this.normal.x * Math_0.cos(theta) - this.normal.y * Math_0.sin(theta);
      y = this.normal.x * Math_0.sin(theta) + this.normal.y * Math_0.cos(theta);
      this.normal.x = x;
      this.normal.y = y;
    }
  };
  Object3D.prototype.forward_mx4ult$ = function (distance) {
    this.position.x = this.position.x + distance * this.normal.x;
    this.position.y = this.position.y + distance * this.normal.y;
    this.position.z = this.position.z + distance * this.normal.z;
  };
  Object3D.prototype.distance_jfpljn$ = function (target, projection) {
    if (projection === void 0)
      projection = 0;
    var x = target.position.z - this.position.z;
    var z = Math_0.abs(x);
    if (projection === 1) {
      var x_0 = z * z;
      return Math_0.sqrt(x_0);
    }
    var x_1 = target.position.x - this.position.x;
    var x_2 = Math_0.abs(x_1);
    var x_3 = target.position.y - this.position.y;
    var y = Math_0.abs(x_3);
    var x_4 = x_2 * x_2 + y * y + z * z;
    return Math_0.sqrt(x_4);
  };
  Object3D.prototype.distance_qgvyiu$ = function (target) {
    var x = target.x - this.position.x;
    var x_0 = Math_0.abs(x);
    var x_1 = target.y - this.position.y;
    var y = Math_0.abs(x_1);
    var x_2 = target.z - this.position.z;
    var z = Math_0.abs(x_2);
    var x_3 = x_0 * x_0 + y * y + z * z;
    return Math_0.sqrt(x_3);
  };
  function Object3D$Companion() {
    Object3D$Companion_instance = this;
  }
  Object3D$Companion.prototype.copy_xovnep$ = function (obj) {
    var newObject = new Object3D();
    newObject.position = Position$Companion_getInstance().copy_qgvyiu$(obj.position);
    newObject.direction = Position$Companion_getInstance().copy_qgvyiu$(obj.direction);
    newObject.movement = Position$Companion_getInstance().copy_qgvyiu$(obj.movement);
    newObject.size = obj.size;
    newObject.rotation = Position$Companion_getInstance().copy_qgvyiu$(obj.rotation);
    newObject.screenPosition = Position$Companion_getInstance().copy_qgvyiu$(obj.screenPosition);
    newObject.screenSize = Size$Companion_getInstance().copy_g5e0xa$(obj.screenSize);
    newObject.fixScreenZ = obj.fixScreenZ;
    newObject.screenZ = obj.screenZ;
    return newObject;
  };
  Object3D$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Object3D$Companion_instance = null;
  function Object3D$Companion_getInstance() {
    if (Object3D$Companion_instance === null) {
      new Object3D$Companion();
    }
    return Object3D$Companion_instance;
  }
  Object3D.prototype.SetXMotion_vn0wwp$ = function (motion, relative, time, callback) {
    if (relative === void 0)
      relative = false;
    if (time === void 0)
      time = -1.0;
    if (callback === void 0)
      callback = null;
    this.xMotion = new MotionInfo(motion, relative, time, this.age, callback);
  };
  Object3D.prototype.SetYMotion_vn0wwp$ = function (motion, relative, time, callback) {
    if (relative === void 0)
      relative = false;
    if (time === void 0)
      time = -1.0;
    if (callback === void 0)
      callback = null;
    this.yMotion = new MotionInfo(motion, relative, time, this.age, callback);
  };
  Object3D.prototype.SetZMotion_vn0wwp$ = function (motion, relative, time, callback) {
    if (relative === void 0)
      relative = false;
    if (time === void 0)
      time = -1.0;
    if (callback === void 0)
      callback = null;
    this.zMotion = new MotionInfo(motion, relative, time, this.age, callback);
  };
  Object3D.prototype.SetOriginalAlpha_mx4ult$ = function (alpha) {
    if (alpha === void 0)
      alpha = 1.0;
    var alpha_0 = alpha;
    if (alpha_0 < 0) {
      alpha_0 = 0.0;
    }
    if (alpha_0 > 1.0) {
      alpha_0 = 1.0;
    }
    this.originalAlpha_oxgaai$_0 = alpha_0;
    this.currentAlpha_o3wgi0$_0 = alpha_0 * this.subAlpha_fnduof$_0;
  };
  Object3D.prototype.GetOriginalAlpha = function () {
    return this.originalAlpha_oxgaai$_0;
  };
  Object3D.prototype.SetSubAlpha_mx4ult$$default = function (alpha) {
    this.subAlpha_fnduof$_0 = alpha;
    if (this.subAlpha_fnduof$_0 < 0) {
      this.subAlpha_fnduof$_0 = 0.0;
    }
    if (this.subAlpha_fnduof$_0 > 1.0) {
      this.subAlpha_fnduof$_0 = 1.0;
    }
    this.currentAlpha_o3wgi0$_0 = this.originalAlpha_oxgaai$_0 * this.subAlpha_fnduof$_0;
  };
  Object3D.prototype.SetSubAlpha_mx4ult$ = function (alpha, callback$default) {
    if (alpha === void 0)
      alpha = 1.0;
    callback$default ? callback$default(alpha) : this.SetSubAlpha_mx4ult$$default(alpha);
  };
  Object3D.prototype.GetSubAlpha = function () {
    return this.subAlpha_fnduof$_0;
  };
  Object3D.prototype.GetCurrentAlpha = function () {
    return this.currentAlpha_o3wgi0$_0;
  };
  Object3D.prototype.SetCallback_lnidq9$ = function (callback) {
    this.willBeDestroyed = null;
    this.willBeDestroyed = callback;
  };
  Object3D.prototype.update_mx4ult$ = function (elapsed) {
    var tmp$, tmp$_0, tmp$_1;
    this.age += elapsed;
    var info = this.xMotion;
    if (info != null) {
      if (info.time !== -1.0 && info.startTime + info.time < this.age || info.motion.isFinish() === true) {
        (tmp$ = info.callback) != null ? tmp$() : null;
        this.xMotion = null;
      }
       else {
        if (info.relative === true) {
          info.motion.update_mx4ult$(elapsed);
          this.position.x = this.position.x + info.motion.GetPositionDelta();
        }
         else {
          this.position.x = info.motion.update_mx4ult$(elapsed);
        }
      }
    }
    info = this.yMotion;
    if (info != null) {
      if (info.time !== -1.0 && info.startTime + info.time < this.age || info.motion.isFinish() === true) {
        (tmp$_0 = info.callback) != null ? tmp$_0() : null;
        this.yMotion = null;
      }
       else {
        if (info.relative === true) {
          info.motion.update_mx4ult$(elapsed);
          this.position.y = this.position.y + info.motion.GetPositionDelta();
        }
         else {
          this.position.y = info.motion.update_mx4ult$(elapsed);
        }
      }
    }
    info = this.zMotion;
    if (info != null) {
      if (info.time !== -1.0 && info.startTime + info.time < this.age || info.motion.isFinish() === true) {
        (tmp$_1 = info.callback) != null ? tmp$_1() : null;
        this.zMotion = null;
      }
       else {
        if (info.relative === true) {
          info.motion.update_mx4ult$(elapsed);
          this.position.z = this.position.z + info.motion.GetPositionDelta();
        }
         else {
          this.position.z = info.motion.update_mx4ult$(elapsed);
        }
      }
    }
  };
  Object3D.prototype.screenHitTestCircle_y2kzbl$ = function (x, y, percent) {
    if (percent === void 0)
      percent = 1.0;
    if (this.currentAlpha_o3wgi0$_0 === 0.0) {
      return false;
    }
    var dx = this.screenPosition.x - x;
    var dy = this.screenPosition.y - y;
    var x_0 = dx * dx + dy * dy;
    var distance = Math_0.sqrt(x_0);
    if (distance <= this.screenSize.width / 2 * percent) {
      return true;
    }
    return false;
  };
  Object3D.prototype.screenHitTestSquare_dleff0$ = function (x, y) {
    if (this.currentAlpha_o3wgi0$_0 === 0.0) {
      return false;
    }
    if (x >= this.screenPosition.x && x <= this.screenPosition.x + this.screenSize.width) {
      if (y >= this.screenPosition.y && y <= this.screenPosition.y + this.screenSize.height) {
        return true;
      }
    }
    return false;
  };
  Object3D.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Object3D',
    interfaces: []
  };
  function Vector() {
    Vector$Companion_getInstance();
    this.length = 0;
    this.degree = 0;
    this.point = Position_init();
    this.theta = 0.0;
  }
  Vector.prototype.SetLength_mx4ult$ = function (length) {
    this.length = length;
    this.calculate();
  };
  Vector.prototype.GetLength = function () {
    return this.length;
  };
  Vector.prototype.SetDegree_mx4ult$ = function (degree) {
    this.degree = degree;
    this.calculate();
  };
  Vector.prototype.GetDegree = function () {
    return this.degree;
  };
  Vector.prototype.GetX = function () {
    return this.point.x;
  };
  Vector.prototype.GetY = function () {
    return this.point.y;
  };
  Vector.prototype.calculate = function () {
    this.theta = this.degree * (math.PI / 180.0);
    var tmp$ = this.point;
    var tmp$_0 = this.length;
    var x = this.theta;
    tmp$.x = tmp$_0 * Math_0.cos(x);
    var tmp$_1 = this.point;
    var tmp$_2 = this.length;
    var x_0 = this.theta;
    tmp$_1.y = tmp$_2 * Math_0.sin(x_0);
  };
  Vector.prototype.angleBetween_qgvyiu$ = function (target) {
    var t = Vector_init(target.x, target.y);
    return this.angleBetween_xsbbqk$(t);
  };
  Vector.prototype.angleBetween_xsbbqk$ = function (target) {
    var tDegree = target.GetDegree();
    return tDegree - this.degree;
  };
  function Vector$Companion() {
    Vector$Companion_instance = this;
  }
  Vector$Companion.prototype.copy_xsbbqk$ = function (vector) {
    var v = Vector_init();
    v.length = vector.length;
    v.degree = vector.degree;
    v.calculate();
    return v;
  };
  Vector$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Vector$Companion_instance = null;
  function Vector$Companion_getInstance() {
    if (Vector$Companion_instance === null) {
      new Vector$Companion();
    }
    return Vector$Companion_instance;
  }
  Vector.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vector',
    interfaces: []
  };
  function Vector_init(x, y, $this) {
    if (x === void 0)
      x = 1.0;
    if (y === void 0)
      y = 1.0;
    $this = $this || Object.create(Vector.prototype);
    Vector.call($this);
    $this.point.x = x;
    $this.point.y = y;
    var x_0 = x * x + y * y;
    $this.length = Math_0.sqrt(x_0);
    $this.theta = Math_0.atan2(x, y);
    $this.degree = $this.theta / (math.PI / 180.0);
    return $this;
  }
  function Vector_init_0(a, b, $this) {
    $this = $this || Object.create(Vector.prototype);
    Vector.call($this);
    var x = b.x - a.x;
    var y = b.y - a.y;
    $this.point.x = x;
    $this.point.y = y;
    var x_0 = x * x + y * y;
    $this.length = Math_0.sqrt(x_0);
    $this.theta = Math_0.atan2(x, y);
    $this.degree = $this.theta / (math.PI / 180.0);
    return $this;
  }
  function Position() {
    Position$Companion_getInstance();
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.length = 0.0;
    this.normalX = 0.0;
    this.normalY = 0.0;
    this.normalZ = 0.0;
  }
  Position.prototype.length2D = function () {
    var x = this.x * this.x + this.y * this.y;
    return Math_0.sqrt(x);
  };
  Position.prototype.SetLength2D_mx4ult$ = function (length) {
    var x = this.x * this.x + this.y * this.y;
    var cur = Math_0.sqrt(x);
    var normalX = this.x / cur;
    var normalY = this.y / cur;
    this.x = normalX * length;
    this.y = normalY * length;
  };
  Position.prototype.distance2D_qgvyiu$ = function (p) {
    var x = p.x - this.x;
    var y = p.y - this.y;
    var x_0 = x * x + y * y;
    return Math_0.sqrt(x_0);
  };
  Position.prototype.normalize = function () {
    var x = this.x * this.x + this.y * this.y + this.z * this.z;
    this.length = Math_0.sqrt(x);
    this.normalX = this.x / this.length;
    this.normalY = this.y / this.length;
    this.normalZ = this.z / this.length;
  };
  Position.prototype.GetDegree = function () {
    var y = this.x;
    var x = this.y;
    var theta = Math_0.atan2(y, x);
    return theta / (math.PI / 180.0);
  };
  Position.prototype.rotateX_mx4ult$ = function (degree) {
    var degree_0 = degree % 360.0;
    if (degree_0 === 0.0) {
      return;
    }
    var theta = degree_0 * (math.PI / 180.0);
    var yy = this.y * Math_0.cos(theta) - this.z * Math_0.sin(theta);
    var zz = this.y * Math_0.sin(theta) + this.z * Math_0.cos(theta);
    this.y = yy;
    this.z = zz;
  };
  Position.prototype.rotateY_mx4ult$ = function (degree) {
    var degree_0 = degree % 360.0;
    if (degree_0 === 0.0) {
      return;
    }
    var theta = degree_0 * (math.PI / 180.0);
    var xx = this.x * Math_0.cos(theta) + this.z * Math_0.sin(theta);
    var zz = -this.x * Math_0.sin(theta) + this.z * Math_0.cos(theta);
    this.x = xx;
    this.z = zz;
  };
  Position.prototype.rotateZ_mx4ult$ = function (degree) {
    var degree_0 = degree % 360.0;
    if (degree_0 === 0.0) {
      return;
    }
    var theta = degree_0 * (math.PI / 180.0);
    var xx = this.x * Math_0.cos(theta) - this.y * Math_0.sin(theta);
    var yy = this.x * Math_0.sin(theta) + this.y * Math_0.cos(theta);
    this.x = xx;
    this.y = yy;
  };
  function Position$Companion() {
    Position$Companion_instance = this;
  }
  Position$Companion.prototype.distanceToSegment_tnhs7q$ = function (p1, p2, p3) {
    var xDelta = p2.x - p1.x;
    var yDelta = p2.y - p1.y;
    if (xDelta === 0.0 && yDelta === 0.0) {
      return p1.distance2D_qgvyiu$(p3);
    }
    var u = ((p3.x - p1.x) * xDelta + (p3.y - p1.y) * yDelta) / (xDelta * xDelta + yDelta * yDelta);
    var closestPosition = Position_init();
    if (u < 0) {
      closestPosition = p1;
    }
     else if (u > 1) {
      closestPosition = p2;
    }
     else {
      closestPosition = Position_init(p1.x + u * xDelta, p1.y + u * yDelta);
    }
    return closestPosition.distance2D_qgvyiu$(p3);
  };
  Position$Companion.prototype.copy_qgvyiu$ = function (position) {
    return Position_init(position.x, position.y, position.z);
  };
  Position$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Position$Companion_instance = null;
  function Position$Companion_getInstance() {
    if (Position$Companion_instance === null) {
      new Position$Companion();
    }
    return Position$Companion_instance;
  }
  Position.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Position',
    interfaces: []
  };
  function Position_init(x, y, z, $this) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (z === void 0)
      z = 0.0;
    $this = $this || Object.create(Position.prototype);
    Position.call($this);
    $this.x = x;
    $this.y = y;
    $this.z = z;
    return $this;
  }
  function Plane() {
    this.a = 0;
    this.b = 0;
    this.c = 0;
    this.d = 0;
  }
  Plane.prototype.test_qgvyiu$ = function (v) {
    return this.a * v.x + this.b * v.y + this.c * v.z + this.d;
  };
  Plane.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Plane',
    interfaces: []
  };
  function Plane_init(a, b, c, d, $this) {
    if (a === void 0)
      a = 0.0;
    if (b === void 0)
      b = 0.0;
    if (c === void 0)
      c = 0.0;
    if (d === void 0)
      d = 0.0;
    $this = $this || Object.create(Plane.prototype);
    Plane.call($this);
    $this.a = a;
    $this.b = b;
    $this.c = c;
    $this.d = d;
    return $this;
  }
  function Size() {
    Size$Companion_getInstance();
    this.width = 0;
    this.height = 0;
  }
  function Size$Companion() {
    Size$Companion_instance = this;
  }
  Size$Companion.prototype.copy_g5e0xa$ = function (size) {
    return Size_init(size.width, size.height);
  };
  Size$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Size$Companion_instance = null;
  function Size$Companion_getInstance() {
    if (Size$Companion_instance === null) {
      new Size$Companion();
    }
    return Size$Companion_instance;
  }
  Size.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Size',
    interfaces: []
  };
  function Size_init(width, height, $this) {
    if (width === void 0)
      width = 0.0;
    if (height === void 0)
      height = 0.0;
    $this = $this || Object.create(Size.prototype);
    Size.call($this);
    $this.width = width;
    $this.height = height;
    return $this;
  }
  function Rect() {
    Rect$Companion_getInstance();
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
  }
  function Rect$Companion() {
    Rect$Companion_instance = this;
  }
  Rect$Companion.prototype.copy_g5erez$ = function (rect) {
    return Rect_init(rect.x, rect.y, rect.width, rect.height);
  };
  Rect$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Rect$Companion_instance = null;
  function Rect$Companion_getInstance() {
    if (Rect$Companion_instance === null) {
      new Rect$Companion();
    }
    return Rect$Companion_instance;
  }
  Rect.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Rect',
    interfaces: []
  };
  function Rect_init(x, y, width, height, $this) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (width === void 0)
      width = 0.0;
    if (height === void 0)
      height = 0.0;
    $this = $this || Object.create(Rect.prototype);
    Rect.call($this);
    $this.x = x;
    $this.y = y;
    $this.width = width;
    $this.height = height;
    return $this;
  }
  function Scale(originX, originY, xRatio, yRatio, newX, newY) {
    Scale$Companion_getInstance();
    if (originX === void 0)
      originX = 320.0;
    if (originY === void 0)
      originY = 480.0;
    if (xRatio === void 0)
      xRatio = -1.0;
    if (yRatio === void 0)
      yRatio = -1.0;
    if (newX === void 0)
      newX = -1.0;
    if (newY === void 0)
      newY = -1.0;
    this.originX = 0;
    this.originY = 0;
    this.newX = 0;
    this.newY = 0;
    this.xRatio = 0;
    this.yRatio = 0;
    this.originalRatio = 0;
    this.originX = originX;
    this.originY = originY;
    if (xRatio !== -1.0 && yRatio !== -1.0) {
      this.xRatio = xRatio;
      this.yRatio = yRatio;
      this.newX = this.originX * xRatio;
      this.newY = this.originY * yRatio;
    }
     else if (newX !== -1.0 && newY !== -1.0) {
      this.newX = newX;
      this.newY = newY;
      this.xRatio = newX / originX;
      this.yRatio = newY / originY;
    }
     else {
      this.xRatio = 1.0;
      this.yRatio = 1.0;
      this.newX = this.originX * xRatio;
      this.newY = this.originY * yRatio;
    }
    this.originalRatio = this.originX / this.originY;
  }
  Scale.prototype.SetSize_dleff0$ = function (width, height) {
    this.originX = this.newX;
    this.originY = this.newY;
    this.newX = width;
    this.newY = height;
    this.xRatio = this.newX / this.originX;
    this.yRatio = this.newY / this.originY;
    this.originalRatio = this.originX / this.originY;
  };
  Scale.prototype.GetConstraintSmall = function () {
    if (this.xRatio < this.yRatio) {
      return this.xRatio;
    }
    return this.yRatio;
  };
  Scale.prototype.GetConstraintBig = function () {
    if (this.xRatio > this.yRatio) {
      return this.xRatio;
    }
    return this.yRatio;
  };
  Scale.prototype.keepOriginalRatio_6taknv$ = function (fitSmall) {
    if (fitSmall === void 0)
      fitSmall = true;
    if (fitSmall === true) {
      if (this.xRatio < this.yRatio) {
        this.newY = this.newX / this.originalRatio;
        this.yRatio = this.newY / this.originY;
      }
       else {
        this.newX = this.newY * this.originalRatio;
        this.xRatio = this.newX / this.originX;
      }
    }
     else {
      if (this.xRatio < this.yRatio) {
        this.newX = this.newY * this.originalRatio;
        this.xRatio = this.newX / this.originX;
      }
       else {
        this.newY = this.newX / this.originalRatio;
        this.yRatio = this.newY / this.originY;
      }
    }
  };
  function Scale$Companion() {
    Scale$Companion_instance = this;
  }
  Scale$Companion.prototype.copy_3fer1j$ = function (scale) {
    return new Scale(scale.originX, scale.originY, void 0, void 0, scale.newX, scale.newY);
  };
  Scale$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Scale$Companion_instance = null;
  function Scale$Companion_getInstance() {
    if (Scale$Companion_instance === null) {
      new Scale$Companion();
    }
    return Scale$Companion_instance;
  }
  Scale.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Scale',
    interfaces: []
  };
  function Event(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Event_initFields() {
    Event_initFields = function () {
    };
    Event$touch_BEGIN_instance = new Event('touch_BEGIN', 0);
    Event$touch_DRAG_instance = new Event('touch_DRAG', 1);
    Event$touch_END_instance = new Event('touch_END', 2);
    Event$touch_CANCEL_instance = new Event('touch_CANCEL', 3);
    Event$window_CLOSE_instance = new Event('window_CLOSE', 4);
    Event$window_CANCEL_instance = new Event('window_CANCEL', 5);
    Event$window_OK_instance = new Event('window_OK', 6);
    Event$window_SIZE_instance = new Event('window_SIZE', 7);
    Event$window_MOVE_instance = new Event('window_MOVE', 8);
    Event$window_SHOW_instance = new Event('window_SHOW', 9);
    Event$window_HIDE_instance = new Event('window_HIDE', 10);
    Event$button_PRESS_instance = new Event('button_PRESS', 11);
    Event$button_DISABLED_PRESS_instance = new Event('button_DISABLED_PRESS', 12);
    Event$button_RELEASE_instance = new Event('button_RELEASE', 13);
    Event$button_DISABLED_RELEASE_instance = new Event('button_DISABLED_RELEASE', 14);
    Event$button_CANCEL_instance = new Event('button_CANCEL', 15);
    Event$button_STARTDRAG_instance = new Event('button_STARTDRAG', 16);
    Event$button_DRAGGING_instance = new Event('button_DRAGGING', 17);
    Event$button_ENDDRAG_instance = new Event('button_ENDDRAG', 18);
    Event$slider_MOVE_instance = new Event('slider_MOVE', 19);
    Event$move_instance = new Event('move', 20);
    Event$update_instance = new Event('update', 21);
  }
  var Event$touch_BEGIN_instance;
  function Event$touch_BEGIN_getInstance() {
    Event_initFields();
    return Event$touch_BEGIN_instance;
  }
  var Event$touch_DRAG_instance;
  function Event$touch_DRAG_getInstance() {
    Event_initFields();
    return Event$touch_DRAG_instance;
  }
  var Event$touch_END_instance;
  function Event$touch_END_getInstance() {
    Event_initFields();
    return Event$touch_END_instance;
  }
  var Event$touch_CANCEL_instance;
  function Event$touch_CANCEL_getInstance() {
    Event_initFields();
    return Event$touch_CANCEL_instance;
  }
  var Event$window_CLOSE_instance;
  function Event$window_CLOSE_getInstance() {
    Event_initFields();
    return Event$window_CLOSE_instance;
  }
  var Event$window_CANCEL_instance;
  function Event$window_CANCEL_getInstance() {
    Event_initFields();
    return Event$window_CANCEL_instance;
  }
  var Event$window_OK_instance;
  function Event$window_OK_getInstance() {
    Event_initFields();
    return Event$window_OK_instance;
  }
  var Event$window_SIZE_instance;
  function Event$window_SIZE_getInstance() {
    Event_initFields();
    return Event$window_SIZE_instance;
  }
  var Event$window_MOVE_instance;
  function Event$window_MOVE_getInstance() {
    Event_initFields();
    return Event$window_MOVE_instance;
  }
  var Event$window_SHOW_instance;
  function Event$window_SHOW_getInstance() {
    Event_initFields();
    return Event$window_SHOW_instance;
  }
  var Event$window_HIDE_instance;
  function Event$window_HIDE_getInstance() {
    Event_initFields();
    return Event$window_HIDE_instance;
  }
  var Event$button_PRESS_instance;
  function Event$button_PRESS_getInstance() {
    Event_initFields();
    return Event$button_PRESS_instance;
  }
  var Event$button_DISABLED_PRESS_instance;
  function Event$button_DISABLED_PRESS_getInstance() {
    Event_initFields();
    return Event$button_DISABLED_PRESS_instance;
  }
  var Event$button_RELEASE_instance;
  function Event$button_RELEASE_getInstance() {
    Event_initFields();
    return Event$button_RELEASE_instance;
  }
  var Event$button_DISABLED_RELEASE_instance;
  function Event$button_DISABLED_RELEASE_getInstance() {
    Event_initFields();
    return Event$button_DISABLED_RELEASE_instance;
  }
  var Event$button_CANCEL_instance;
  function Event$button_CANCEL_getInstance() {
    Event_initFields();
    return Event$button_CANCEL_instance;
  }
  var Event$button_STARTDRAG_instance;
  function Event$button_STARTDRAG_getInstance() {
    Event_initFields();
    return Event$button_STARTDRAG_instance;
  }
  var Event$button_DRAGGING_instance;
  function Event$button_DRAGGING_getInstance() {
    Event_initFields();
    return Event$button_DRAGGING_instance;
  }
  var Event$button_ENDDRAG_instance;
  function Event$button_ENDDRAG_getInstance() {
    Event_initFields();
    return Event$button_ENDDRAG_instance;
  }
  var Event$slider_MOVE_instance;
  function Event$slider_MOVE_getInstance() {
    Event_initFields();
    return Event$slider_MOVE_instance;
  }
  var Event$move_instance;
  function Event$move_getInstance() {
    Event_initFields();
    return Event$move_instance;
  }
  var Event$update_instance;
  function Event$update_getInstance() {
    Event_initFields();
    return Event$update_instance;
  }
  Event.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Event',
    interfaces: [Enum]
  };
  function Event$values() {
    return [Event$touch_BEGIN_getInstance(), Event$touch_DRAG_getInstance(), Event$touch_END_getInstance(), Event$touch_CANCEL_getInstance(), Event$window_CLOSE_getInstance(), Event$window_CANCEL_getInstance(), Event$window_OK_getInstance(), Event$window_SIZE_getInstance(), Event$window_MOVE_getInstance(), Event$window_SHOW_getInstance(), Event$window_HIDE_getInstance(), Event$button_PRESS_getInstance(), Event$button_DISABLED_PRESS_getInstance(), Event$button_RELEASE_getInstance(), Event$button_DISABLED_RELEASE_getInstance(), Event$button_CANCEL_getInstance(), Event$button_STARTDRAG_getInstance(), Event$button_DRAGGING_getInstance(), Event$button_ENDDRAG_getInstance(), Event$slider_MOVE_getInstance(), Event$move_getInstance(), Event$update_getInstance()];
  }
  Event.values = Event$values;
  function Event$valueOf(name) {
    switch (name) {
      case 'touch_BEGIN':
        return Event$touch_BEGIN_getInstance();
      case 'touch_DRAG':
        return Event$touch_DRAG_getInstance();
      case 'touch_END':
        return Event$touch_END_getInstance();
      case 'touch_CANCEL':
        return Event$touch_CANCEL_getInstance();
      case 'window_CLOSE':
        return Event$window_CLOSE_getInstance();
      case 'window_CANCEL':
        return Event$window_CANCEL_getInstance();
      case 'window_OK':
        return Event$window_OK_getInstance();
      case 'window_SIZE':
        return Event$window_SIZE_getInstance();
      case 'window_MOVE':
        return Event$window_MOVE_getInstance();
      case 'window_SHOW':
        return Event$window_SHOW_getInstance();
      case 'window_HIDE':
        return Event$window_HIDE_getInstance();
      case 'button_PRESS':
        return Event$button_PRESS_getInstance();
      case 'button_DISABLED_PRESS':
        return Event$button_DISABLED_PRESS_getInstance();
      case 'button_RELEASE':
        return Event$button_RELEASE_getInstance();
      case 'button_DISABLED_RELEASE':
        return Event$button_DISABLED_RELEASE_getInstance();
      case 'button_CANCEL':
        return Event$button_CANCEL_getInstance();
      case 'button_STARTDRAG':
        return Event$button_STARTDRAG_getInstance();
      case 'button_DRAGGING':
        return Event$button_DRAGGING_getInstance();
      case 'button_ENDDRAG':
        return Event$button_ENDDRAG_getInstance();
      case 'slider_MOVE':
        return Event$slider_MOVE_getInstance();
      case 'move':
        return Event$move_getInstance();
      case 'update':
        return Event$update_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.graphic.Event.' + name);
    }
  }
  Event.valueOf_61zpoe$ = Event$valueOf;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  function Message(event, sender, receiver, parameter, value, valueFloat, broadcast) {
    if (sender === void 0)
      sender = null;
    if (receiver === void 0)
      receiver = null;
    if (parameter === void 0) {
      parameter = emptyList();
    }
    if (value === void 0)
      value = -1;
    if (valueFloat === void 0)
      valueFloat = 0.0;
    if (broadcast === void 0)
      broadcast = false;
    this.event = event;
    this.sender = sender;
    this.receiver = receiver;
    this.parameter = parameter;
    this.value = value;
    this.valueFloat = valueFloat;
    this.isBroadcast = false;
  }
  Message.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Message',
    interfaces: []
  };
  function Label() {
    this.autoSizeAdjust = false;
    this.text = '';
    this.fontColor = null;
    this.fontName = '';
    this.fontSize = 0.0;
  }
  Label.prototype.SetRotation_mx4ult$$default = function (radian) {
    var tmp$;
    if (this.rotation === radian) {
      return;
    }
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetZRotation_mx4ult$(radian);
      this.rotation = radian;
    }
  };
  Label.prototype.SetAlign_vkgmrm$ = function (vertical, horizontal) {
    this.SetVerticalAlign_qn2em6$(vertical);
    this.SetHorizontalAlign_jdpdm8$(horizontal);
  };
  Label.prototype.SetVerticalAlign_qn2em6$ = function (align) {
    this.verticalAlign = align;
    switch (align.name) {
      case 'top':
        this.positionOffset.y = 0.0;
        break;
      case 'center':
        this.positionOffset.y = -1 * (this.GetSize().height + 1) * 0.5;
        break;
      case 'bottom':
        this.positionOffset.y = -1 * (this.GetSize().height + 1);
        break;
    }
  };
  Label.prototype.GetVerticalAlign = function () {
    return this.verticalAlign;
  };
  Label.prototype.GetHorizontalAlign = function () {
    return this.horizontalAlign;
  };
  Label.prototype.GetText = function () {
    return this.text;
  };
  Label.prototype.SetText_61zpoe$ = function (text) {
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetText_61zpoe$(text);
      this.text = text;
      if (this.autoSizeAdjust === true) {
        this.SetSize_dleff0$(label.GetFrameSize().width, label.GetFrameSize().height);
      }
    }
  };
  Label.prototype.SetFontColor_hu04m1$ = function (red, green, blue, alpha) {
    if (red === void 0)
      red = 255;
    if (green === void 0)
      green = 255;
    if (blue === void 0)
      blue = 255;
    if (alpha === void 0)
      alpha = 1.0;
    this.SetFontColor_7b5o5w$(red / 255.0, green / 255.0, blue / 255.0, alpha);
  };
  Label.prototype.SetFontColor_7b5o5w$ = function (red, green, blue, alpha) {
    if (red === void 0)
      red = 1.0;
    if (green === void 0)
      green = 1.0;
    if (blue === void 0)
      blue = 1.0;
    if (alpha === void 0)
      alpha = 1.0;
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetFontColor_7b5o5w$(red, green, blue, alpha);
    }
    this.fontColor.r = red;
    this.fontColor.g = green;
    this.fontColor.b = blue;
    this.fontColor.a = alpha;
  };
  Label.prototype.GetFontColor = function () {
    return this.fontColor;
  };
  Label.prototype.SetFontAlpha_mx4ult$ = function (alpha) {
    if (alpha === void 0)
      alpha = 1.0;
    this.SetFontColor_7b5o5w$(this.fontColor.r, this.fontColor.g, this.fontColor.b, alpha);
  };
  Label.prototype.SetFontColor_3nzkge$ = function (color) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetFontColor_7b5o5w$(color.r, color.g, color.b, color.a);
    }
  };
  Label.prototype.SetFontSize_mx4ult$ = function (size) {
    if (size === void 0)
      size = 32.0;
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetFontSize_mx4ult$(size);
      if (this.autoSizeAdjust === true) {
        this.SetSize_dleff0$(label.GetFrameSize().width, label.GetFrameSize().height);
      }
    }
    this.fontSize = size;
  };
  Label.prototype.GetSize = function () {
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      return label.GetSize();
    }
    return Size_init();
  };
  Label.prototype.SetSize_dleff0$ = function (width, height) {
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetSize_dleff0$(width, height);
      this.originalSize = Size_init(width, height);
    }
    this.SetAlign_vkgmrm$(this.verticalAlign, this.horizontalAlign);
  };
  Label.prototype.SetScaleOriginal_mx4ult$ = function (scale) {
    var tmp$;
    var height = this.originalSize.height * scale;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetSize_dleff0$(-1.0, height);
    }
    this.SetAlign_vkgmrm$(this.verticalAlign, this.horizontalAlign);
  };
  Label.prototype.GetScaleOriginal = function () {
    return this.GetSize().height / this.originalSize.height;
  };
  Label.prototype.GetFontSize = function () {
    return this.fontSize;
  };
  Label.prototype.SetColor_sczwbf$$default = function (r, g, b, a, applyChild) {
    var tmp$;
    this.SetColor_sczwbf$(r, g, b, a, applyChild, NodeWrapper.prototype.SetColor_sczwbf$$default.bind(this));
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetColor_7b5o5w$(r, g, b, a);
    }
  };
  Label.prototype.SetAlpha_8ca0d4$$default = function (a, applyChild) {
    var tmp$;
    this.SetAlpha_8ca0d4$(a, applyChild, NodeWrapper.prototype.SetAlpha_8ca0d4$$default.bind(this));
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetAlpha_mx4ult$(this.color.a);
    }
  };
  Label.prototype.SetBlendFactor_mx4ult$$default = function (factor) {
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetColorBlendFactor_mx4ult$(factor);
    }
    this.SetBlendFactor_mx4ult$(factor, NodeWrapper.prototype.SetBlendFactor_mx4ult$$default.bind(this));
  };
  Label.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    var tmp$;
    var label = Kotlin.isType(tmp$ = this.GetObject(), GuestLabel) ? tmp$ : null;
    if (label != null) {
      label.SetBlendMode_ieo8yr$(mode);
    }
    NodeWrapper.prototype.SetBlendMode_ieo8yr$.call(this, mode);
  };
  Label.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Label',
    interfaces: [NodeWrapper]
  };
  function Label_init(x, y, z, text, fontName, fontSize, fontColor, $this) {
    if (z === void 0)
      z = 0.0;
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = 'ChalkboardSE-Bold';
    if (fontSize === void 0)
      fontSize = 10.0;
    if (fontColor === void 0)
      fontColor = Color$Companion_getInstance().white_mx4ult$();
    $this = $this || Object.create(Label.prototype);
    NodeWrapper_init(x, y, z, $this);
    Label.call($this);
    var tmp$;
    $this.fontColor = fontColor;
    $this.fontName = fontName;
    $this.fontSize = fontSize;
    var label = HAL$Companion_getInstance().shared().createGuestLabel_61zpoe$(fontName);
    label.SetText_61zpoe$(text);
    label.SetFontSize_mx4ult$(fontSize);
    $this.addObject_s8jyv4$(Kotlin.isType(tmp$ = label, Any) ? tmp$ : throwCCE());
    if ($this.autoSizeAdjust === true) {
      $this.SetSize_dleff0$(label.GetFrameSize().width, label.GetFrameSize().height);
    }
    $this.SetFontColor_3nzkge$(fontColor);
    $this.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    $this.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    $this.text = text;
    return $this;
  }
  function Mask() {
    this.delegateConvertCoordinate = true;
  }
  Mask.prototype.SetSize_dleff0$ = function (width, height) {
    var tmp$;
    var skMask = Kotlin.isType(tmp$ = this.GetObject(), GuestMask) ? tmp$ : null;
    if (skMask != null) {
      skMask.SetSize_dleff0$(width, height);
      NodeWrapper.prototype.SetSize_dleff0$.call(this, width, height);
    }
  };
  Mask.prototype.GetTextureSize = function () {
    var tmp$;
    var mask = Kotlin.isType(tmp$ = this.GetObject(), GuestMask) ? tmp$ : null;
    if (mask != null) {
      return mask.GetTextureSize();
    }
    return null;
  };
  Mask.prototype.SetColor_sczwbf$$default = function (r, g, b, a, applyChild) {
    var tmp$;
    this.SetColor_sczwbf$(r, g, b, a, applyChild, NodeWrapper.prototype.SetColor_sczwbf$$default.bind(this));
    var skMask = Kotlin.isType(tmp$ = this.GetObject(), GuestMask) ? tmp$ : null;
    if (skMask != null) {
      skMask.SetColor_7b5o5w$(this.color.r, this.color.g, this.color.b, this.color.a);
    }
  };
  Mask.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Mask',
    interfaces: [NodeWrapper]
  };
  function Mask_init(x, y, z, image, width, height, delegate, $this) {
    if (z === void 0)
      z = 0.0;
    if (width === void 0)
      width = 0.0;
    if (height === void 0)
      height = 0.0;
    if (delegate === void 0)
      delegate = true;
    $this = $this || Object.create(Mask.prototype);
    NodeWrapper_init(x, y, z, $this);
    Mask.call($this);
    var tmp$;
    $this.delegateConvertCoordinate = delegate;
    var skMask = HAL$Companion_getInstance().shared().createGuestMask_h2vgz3$(ResourceManager$Companion_getInstance().shared().GetTexture_61zpoe$(image));
    skMask.SetZPosition_mx4ult$(z);
    $this.addObject_s8jyv4$(Kotlin.isType(tmp$ = skMask, Any) ? tmp$ : throwCCE());
    if (width > 0) {
      $this.SetSize_dleff0$(width, height);
    }
     else {
      NodeWrapper.prototype.SetSize_dleff0$.call($this, skMask.GetSize().width, skMask.GetSize().height);
    }
    return $this;
  }
  function Mask_init_0(x, y, texture, z, delegate, $this) {
    if (z === void 0)
      z = 0.0;
    if (delegate === void 0)
      delegate = true;
    $this = $this || Object.create(Mask.prototype);
    NodeWrapper_init(x, y, z, $this);
    Mask.call($this);
    var tmp$;
    $this.delegateConvertCoordinate = delegate;
    var skMask = HAL$Companion_getInstance().shared().createGuestMask_h2vgz3$(texture);
    $this.addObject_s8jyv4$(Kotlin.isType(tmp$ = skMask, Any) ? tmp$ : throwCCE());
    $this.SetSize_dleff0$(texture.GetSize().width, texture.GetSize().height);
    return $this;
  }
  function MotionInfo(motion, relative, time, startTime, callback) {
    this.motion = motion;
    this.relative = relative;
    this.time = time;
    this.startTime = startTime;
    this.callback = callback;
  }
  MotionInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MotionInfo',
    interfaces: []
  };
  MotionInfo.prototype.component1 = function () {
    return this.motion;
  };
  MotionInfo.prototype.component2 = function () {
    return this.relative;
  };
  MotionInfo.prototype.component3 = function () {
    return this.time;
  };
  MotionInfo.prototype.component4 = function () {
    return this.startTime;
  };
  MotionInfo.prototype.component5 = function () {
    return this.callback;
  };
  MotionInfo.prototype.copy_yrjqrw$ = function (motion, relative, time, startTime, callback) {
    return new MotionInfo(motion === void 0 ? this.motion : motion, relative === void 0 ? this.relative : relative, time === void 0 ? this.time : time, startTime === void 0 ? this.startTime : startTime, callback === void 0 ? this.callback : callback);
  };
  MotionInfo.prototype.toString = function () {
    return 'MotionInfo(motion=' + Kotlin.toString(this.motion) + (', relative=' + Kotlin.toString(this.relative)) + (', time=' + Kotlin.toString(this.time)) + (', startTime=' + Kotlin.toString(this.startTime)) + (', callback=' + Kotlin.toString(this.callback)) + ')';
  };
  MotionInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.motion) | 0;
    result = result * 31 + Kotlin.hashCode(this.relative) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.startTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.callback) | 0;
    return result;
  };
  MotionInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.motion, other.motion) && Kotlin.equals(this.relative, other.relative) && Kotlin.equals(this.time, other.time) && Kotlin.equals(this.startTime, other.startTime) && Kotlin.equals(this.callback, other.callback)))));
  };
  function CallbackInfo(caller, name, exclusive, timeToLive, interval, mode, callback) {
    if (name === void 0)
      name = '';
    if (exclusive === void 0)
      exclusive = false;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (interval === void 0)
      interval = 0.0;
    if (mode === void 0)
      mode = 0;
    this.caller = caller;
    this.name = name;
    this.exclusive = exclusive;
    this.timeToLive = timeToLive;
    this.interval = interval;
    this.mode = mode;
    this.age = 0.0;
    this.elapsed = 0.0;
    this.count = 0;
    this.callback = callback;
  }
  CallbackInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CallbackInfo',
    interfaces: []
  };
  function LocalVariables() {
    this.parameter = ArrayList_init();
    this.value = null;
    this.floatValue = 0.0;
  }
  LocalVariables.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalVariables',
    interfaces: []
  };
  function VerticalAlign(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function VerticalAlign_initFields() {
    VerticalAlign_initFields = function () {
    };
    VerticalAlign$top_instance = new VerticalAlign('top', 0);
    VerticalAlign$center_instance = new VerticalAlign('center', 1);
    VerticalAlign$bottom_instance = new VerticalAlign('bottom', 2);
  }
  var VerticalAlign$top_instance;
  function VerticalAlign$top_getInstance() {
    VerticalAlign_initFields();
    return VerticalAlign$top_instance;
  }
  var VerticalAlign$center_instance;
  function VerticalAlign$center_getInstance() {
    VerticalAlign_initFields();
    return VerticalAlign$center_instance;
  }
  var VerticalAlign$bottom_instance;
  function VerticalAlign$bottom_getInstance() {
    VerticalAlign_initFields();
    return VerticalAlign$bottom_instance;
  }
  VerticalAlign.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VerticalAlign',
    interfaces: [Enum]
  };
  function VerticalAlign$values() {
    return [VerticalAlign$top_getInstance(), VerticalAlign$center_getInstance(), VerticalAlign$bottom_getInstance()];
  }
  VerticalAlign.values = VerticalAlign$values;
  function VerticalAlign$valueOf(name) {
    switch (name) {
      case 'top':
        return VerticalAlign$top_getInstance();
      case 'center':
        return VerticalAlign$center_getInstance();
      case 'bottom':
        return VerticalAlign$bottom_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.graphic.VerticalAlign.' + name);
    }
  }
  VerticalAlign.valueOf_61zpoe$ = VerticalAlign$valueOf;
  function HorizontalAlign(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function HorizontalAlign_initFields() {
    HorizontalAlign_initFields = function () {
    };
    HorizontalAlign$left_instance = new HorizontalAlign('left', 0);
    HorizontalAlign$center_instance = new HorizontalAlign('center', 1);
    HorizontalAlign$right_instance = new HorizontalAlign('right', 2);
  }
  var HorizontalAlign$left_instance;
  function HorizontalAlign$left_getInstance() {
    HorizontalAlign_initFields();
    return HorizontalAlign$left_instance;
  }
  var HorizontalAlign$center_instance;
  function HorizontalAlign$center_getInstance() {
    HorizontalAlign_initFields();
    return HorizontalAlign$center_instance;
  }
  var HorizontalAlign$right_instance;
  function HorizontalAlign$right_getInstance() {
    HorizontalAlign_initFields();
    return HorizontalAlign$right_instance;
  }
  HorizontalAlign.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HorizontalAlign',
    interfaces: [Enum]
  };
  function HorizontalAlign$values() {
    return [HorizontalAlign$left_getInstance(), HorizontalAlign$center_getInstance(), HorizontalAlign$right_getInstance()];
  }
  HorizontalAlign.values = HorizontalAlign$values;
  function HorizontalAlign$valueOf(name) {
    switch (name) {
      case 'left':
        return HorizontalAlign$left_getInstance();
      case 'center':
        return HorizontalAlign$center_getInstance();
      case 'right':
        return HorizontalAlign$right_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.graphic.HorizontalAlign.' + name);
    }
  }
  HorizontalAlign.valueOf_61zpoe$ = HorizontalAlign$valueOf;
  function Node() {
    this.active = true;
    this.name = '';
    this.x_nkfebn$_0 = 0.0;
    this.y_nkfeas$_0 = 0.0;
    this.z_nkfe9x$_0 = 0.0;
    this.parent = null;
    this.verticalAlign = VerticalAlign$top_getInstance();
    this.horizontalAlign = HorizontalAlign$left_getInstance();
    this.positionOffset = Position_init();
    this.percentCoordinate = false;
    this.originalSize = Size_init();
    this.size = Size_init();
    this.scale = 1.0;
    this.positionScale = new Scale();
    this.sizeScale = new Scale();
    this.color = Color$Companion_getInstance().white_mx4ult$();
    this.masterAlpha = 1.0;
    this.originalAlpha = 1.0;
    this.childList = ArrayList_init();
    this.objectList = ArrayList_init();
    this.timeToLive = -1.0;
    this.age = 0.0;
    this.timeScale = 1.0;
    this.updateCallback = ArrayList_init();
    this.inputOwner = null;
    this.drag = false;
    this.show = true;
    this.modal = false;
    this.localVariables = new LocalVariables();
    this.messageHandler = null;
    this.xMotion = null;
    this.yMotion = null;
    this.zMotion = null;
    this.motionAdjust = Position_init();
  }
  Object.defineProperty(Node.prototype, 'x', {
    get: function () {
      return this.x_nkfebn$_0 + this.motionAdjust.x;
    },
    set: function (x) {
      this.x_nkfebn$_0 = x;
    }
  });
  Object.defineProperty(Node.prototype, 'y', {
    get: function () {
      return this.y_nkfeas$_0 + this.motionAdjust.y;
    },
    set: function (y) {
      this.y_nkfeas$_0 = y;
    }
  });
  Object.defineProperty(Node.prototype, 'z', {
    get: function () {
      return this.z_nkfe9x$_0 + this.motionAdjust.z;
    },
    set: function (z) {
      this.z_nkfe9x$_0 = z;
    }
  });
  Node.prototype.afterAttached = function () {
  };
  Node.prototype.beforeDetached = function () {
  };
  Node.prototype.SetTimeToLive_mx4ult$ = function (timeToLive) {
    this.timeToLive = this.age + timeToLive;
  };
  Node.prototype.GetTimeToLive = function () {
    return this.timeToLive;
  };
  Node.prototype.SetInactive = function () {
    this.active = false;
    this.updateCallback.clear();
    if (this.messageHandler != null) {
      this.messageHandler = null;
    }
    this.xMotion = null;
    this.yMotion = null;
    this.zMotion = null;
  };
  Node.prototype.SetActive = function () {
    this.active = true;
  };
  Node.prototype.SetName_61zpoe$ = function (name) {
    this.name = name;
  };
  Node.prototype.GetName = function () {
    return this.name;
  };
  Node.prototype.SetParent_3hy050$ = function (parent) {
    this.parent = parent;
  };
  Node.prototype.SetSizeScale_3fer1j$ = function (scale) {
    this.sizeScale = scale;
  };
  Node.prototype.GetSizeScale = function () {
    return this.sizeScale;
  };
  Node.prototype.GetParent = function () {
    return this.parent;
  };
  Node.prototype.GetRoot = function () {
    var parent = this.GetParent();
    if (parent != null) {
      return parent.GetRoot();
    }
    return this;
  };
  Node.prototype.GetObjectList = function () {
    return this.objectList;
  };
  Node.prototype.GetObject = function () {
    if (this.objectList.size === 0) {
      return null;
    }
    return this.objectList.get_za3lpa$(0);
  };
  Node.prototype.GetObject_za3lpa$ = function (index) {
    if (index < this.objectList.size) {
      return this.objectList.get_za3lpa$(index);
    }
    return null;
  };
  Node.prototype.addObject_s8jyv4$ = function (target) {
    this.objectList.add_11rb$(target);
  };
  Node.prototype.addChild_g5h3xp$ = function (child) {
    child.SetParent_3hy050$(this);
    this.childList.add_11rb$(child);
    child.afterAttached();
  };
  Node.prototype.removeObject_za3lpa$ = function (index) {
    if (index < this.objectList.size) {
      if (this.objectList.get_za3lpa$(index) != null) {
        this.objectList.removeAt_za3lpa$(index);
      }
    }
  };
  Node.prototype.detachChild_g5h3xp$ = function (child) {
    var tmp$;
    var i = 0;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var ch = tmp$.next();
      if (ch === child) {
        ch.beforeDetached();
        ch.SetParent_3hy050$(null);
        this.childList.removeAt_za3lpa$(i);
        break;
      }
      i = i + 1 | 0;
    }
  };
  Node.prototype.freeAdditionalResource = function () {
  };
  Node.prototype.freeObject = function () {
    var tmp$;
    tmp$ = this.objectList;
    for (var i = 0; i !== tmp$.size; ++i) {
      this.objectList.set_wxm5ur$(i, null);
    }
    this.objectList.clear();
  };
  Node.prototype.removeFromParent = function () {
    var tmp$, tmp$_0;
    this.update_mx4ult$(0.0);
    this.updateCallback.clear();
    this.xMotion = null;
    this.yMotion = null;
    this.zMotion = null;
    tmp$ = reversed(this.childList).iterator();
    while (tmp$.hasNext()) {
      var ch = tmp$.next();
      ch.removeFromParent();
    }
    this.childList.clear();
    if (this.messageHandler != null) {
      this.messageHandler = null;
    }
    this.freeAdditionalResource();
    this.freeObject();
    if (this.parent != null) {
      (tmp$_0 = this.parent) != null ? (tmp$_0.detachChild_g5h3xp$(this), Unit) : null;
    }
  };
  Node.prototype.isChild_g5h3xp$ = function (node) {
    var tmp$;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (child === node) {
        return true;
      }
       else {
        if (child.isChild_g5h3xp$(node) === true) {
          return true;
        }
      }
    }
    return false;
  };
  Node.prototype.GetChildList = function () {
    return this.childList;
  };
  Node.prototype.GetChild_za3lpa$ = function (index) {
    if (index >= this.childList.size) {
      return null;
    }
    return this.childList.get_za3lpa$(index);
  };
  Node.prototype.GetInputOwner = function () {
    return this.inputOwner;
  };
  Node.prototype.SetInputOwner_3hy050$ = function (owner) {
    if (owner == null) {
      this.inputOwner = null;
    }
     else {
      this.inputOwner = owner;
    }
  };
  Node.prototype.GetDrag = function () {
    return this.drag;
  };
  Node.prototype.SetDrag_6taknv$ = function (drag) {
    this.drag = drag;
  };
  Node.prototype.GetPosition = function () {
    return Position_init(this.x, this.y);
  };
  Node.prototype.SetPosition_dleff0$ = function (x, y) {
    this.x = x;
    this.y = y;
  };
  Node.prototype.convertCoordinateUniversal_f8jzzg$ = function (pos, scale) {
    if (scale === void 0)
      scale = null;
    var scale_0 = scale;
    if (scale_0 == null) {
      scale_0 = this.positionScale;
    }
    var x = pos.x;
    var y = pos.y;
    var relativePos = Position_init(x * scale_0.xRatio, y * scale_0.yRatio);
    return relativePos;
  };
  Node.prototype.SetPositionUniversal_8nqnh6$ = function (x, y, scale) {
    if (scale === void 0)
      scale = null;
    var tmp$;
    var scale_0 = scale;
    if (scale_0 == null) {
      scale_0 = (tmp$ = this.parent) != null ? tmp$.sizeScale : null;
    }
    var relativePos = this.convertCoordinateUniversal_f8jzzg$(Position_init(x, y), scale_0);
    this.SetPosition_dleff0$(relativePos.x, relativePos.y);
  };
  Node.prototype.GetZPosition = function () {
    return this.z;
  };
  Node.prototype.SetZPosition_8ca0d4$ = function (z, applyChild) {
    if (applyChild === void 0)
      applyChild = false;
    var tmp$;
    this.z = z;
    if (applyChild === true) {
      tmp$ = this.childList.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        child.SetZPosition_8ca0d4$(z, true);
      }
    }
  };
  Node.prototype.addZPosition_8ca0d4$ = function (z, applyChild) {
    if (applyChild === void 0)
      applyChild = false;
    var tmp$;
    this.z = this.z + z;
    if (applyChild === true) {
      tmp$ = this.childList.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        child.addZPosition_8ca0d4$(z, true);
      }
    }
  };
  Node.prototype.SetOriginalSize_dleff0$ = function (width, height) {
    this.originalSize.width = width;
    this.originalSize.height = height;
  };
  Node.prototype.GetOriginalSize = function () {
    return this.originalSize;
  };
  Node.prototype.SetSize_dleff0$ = function (width, height) {
    this.size.width = width;
    this.size.height = height;
  };
  Node.prototype.GetSize = function () {
    return this.size;
  };
  Node.prototype.SetScale_mx4ult$$default = function (scale) {
    this.scale = scale;
  };
  Node.prototype.SetScale_mx4ult$ = function (scale, callback$default) {
    if (scale === void 0)
      scale = 1.0;
    callback$default ? callback$default(scale) : this.SetScale_mx4ult$$default(scale);
  };
  Node.prototype.GetScale = function () {
    return this.scale;
  };
  Node.prototype.SetPercentCoordinate_6taknv$ = function (percent) {
    this.percentCoordinate = percent;
  };
  Node.prototype.GetPercentCoordinate = function () {
    return this.percentCoordinate;
  };
  Node.prototype.GetDrawingCoordinate_dleff0$ = function (x, y) {
    if (this.parent != null) {
      if (this.percentCoordinate === true) {
        return ensureNotNull(this.parent).convertCoordinatePercent_dleff0$(x, y);
      }
       else {
        return Position_init(x, y);
      }
    }
    return Position_init();
  };
  Node.prototype.convertCoordinate_dleff0$ = function (x, y) {
    return Position_init(x, y);
  };
  Node.prototype.convertCoordinatePercent_dleff0$ = function (xPercent, yPercent) {
    return Position_init(this.GetSize().width * xPercent, this.GetSize().height * yPercent);
  };
  Node.prototype.convertChildToParentCoordinate_dleff0$ = function (x, y) {
    if (this.percentCoordinate === true) {
      return new Pair(this.x + this.GetSize().width * x, this.y + this.GetSize().height * y);
    }
    return new Pair(this.x + x, this.y + y);
  };
  Node.prototype.convertLocalToGlobalCoordinate_dleff0$ = function (x, y) {
    var localToParent = this.convertChildToParentCoordinate_dleff0$(x, y);
    if (this.parent != null) {
      return ensureNotNull(this.parent).convertLocalToGlobalCoordinate_dleff0$(localToParent.first, localToParent.second);
    }
    return new Pair(localToParent.first, localToParent.second);
  };
  Node.prototype.convertGlobalToLocalCoordinate_dleff0$ = function (x, y) {
    var global = this.convertLocalToGlobalCoordinate_dleff0$(0.0, 0.0);
    return new Pair(x - global.first, y - global.second);
  };
  Node.prototype.SetColor_sczwbf$$default = function (r, g, b, a, applyChild) {
    var tmp$;
    this.color.r = r;
    this.color.g = g;
    this.color.b = b;
    this.color.a = a;
    if (this.color.r < 0) {
      this.color.r = 0.0;
    }
     else if (this.color.r > 1.0) {
      this.color.r = 1.0;
    }
    if (this.color.g < 0) {
      this.color.g = 0.0;
    }
     else if (this.color.g > 1.0) {
      this.color.g = 1.0;
    }
    if (this.color.b < 0) {
      this.color.b = 0.0;
    }
     else if (this.color.b > 1.0) {
      this.color.b = 1.0;
    }
    var alpha = a;
    if (alpha < 0) {
      alpha = 0.0;
    }
     else if (alpha > 1.0) {
      alpha = 1.0;
    }
    this.originalAlpha = alpha;
    this.color.a = alpha * this.masterAlpha;
    if (applyChild === true) {
      tmp$ = this.childList.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (Kotlin.isType(child, NodeWrapper)) {
          child.SetColor_sczwbf$(r, g, b, alpha);
        }
      }
    }
  };
  Node.prototype.SetColor_sczwbf$ = function (r, g, b, a, applyChild, callback$default) {
    if (a === void 0)
      a = 1.0;
    if (applyChild === void 0)
      applyChild = true;
    callback$default ? callback$default(r, g, b, a, applyChild) : this.SetColor_sczwbf$$default(r, g, b, a, applyChild);
  };
  Node.prototype.SetColor_b53zri$$default = function (r, g, b, a, applyChild) {
    this.SetColor_sczwbf$(r / 255.0, g / 255.0, b / 255.0, a, applyChild);
  };
  Node.prototype.SetColor_b53zri$ = function (r, g, b, a, applyChild, callback$default) {
    if (r === void 0)
      r = 255;
    if (g === void 0)
      g = 255;
    if (b === void 0)
      b = 255;
    if (a === void 0)
      a = 1.0;
    if (applyChild === void 0)
      applyChild = true;
    callback$default ? callback$default(r, g, b, a, applyChild) : this.SetColor_b53zri$$default(r, g, b, a, applyChild);
  };
  Node.prototype.SetColor_vnjrmz$$default = function (color, applyChild) {
    this.SetColor_sczwbf$(color.r, color.g, color.b, color.a, applyChild);
  };
  Node.prototype.SetColor_vnjrmz$ = function (color, applyChild, callback$default) {
    if (applyChild === void 0)
      applyChild = true;
    callback$default ? callback$default(color, applyChild) : this.SetColor_vnjrmz$$default(color, applyChild);
  };
  Node.prototype.SetChildColor_edr4a3$$default = function (from, to, color, applyChild) {
    var tmp$, tmp$_0;
    var to_0 = to;
    if (to_0 === -1 || to_0 > this.childList.size) {
      to_0 = this.childList.size;
    }
    tmp$ = to_0 - 1 | 0;
    for (var i = from; i <= tmp$; i++) {
      var child = Kotlin.isType(tmp$_0 = this.GetChild_za3lpa$(i), NodeWrapper) ? tmp$_0 : null;
      if (child != null) {
        child.SetColor_vnjrmz$(color);
      }
    }
  };
  Node.prototype.SetChildColor_edr4a3$ = function (from, to, color, applyChild, callback$default) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = -1;
    if (applyChild === void 0)
      applyChild = true;
    callback$default ? callback$default(from, to, color, applyChild) : this.SetChildColor_edr4a3$$default(from, to, color, applyChild);
  };
  Node.prototype.SetChildAlpha_qiya20$$default = function (from, to, a, applyChild) {
    var tmp$, tmp$_0;
    var to_0 = to;
    if (to_0 === -1 || to_0 > this.childList.size) {
      to_0 = this.childList.size;
    }
    tmp$ = to_0 - 1 | 0;
    for (var i = from; i <= tmp$; i++) {
      var child = Kotlin.isType(tmp$_0 = this.GetChild_za3lpa$(i), NodeWrapper) ? tmp$_0 : null;
      if (child != null) {
        child.SetAlpha_8ca0d4$(a);
      }
    }
  };
  Node.prototype.SetChildAlpha_qiya20$ = function (from, to, a, applyChild, callback$default) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = -1;
    if (applyChild === void 0)
      applyChild = true;
    callback$default ? callback$default(from, to, a, applyChild) : this.SetChildAlpha_qiya20$$default(from, to, a, applyChild);
  };
  Node.prototype.GetColor = function () {
    return this.color;
  };
  Node.prototype.GetMasterAlpha = function () {
    return this.masterAlpha;
  };
  Node.prototype.SetMasterAlpha_mx4ult$ = function (a) {
    var tmp$, tmp$_0;
    var alpha = a;
    if (alpha < 0) {
      alpha = 0.0;
    }
     else if (alpha > 1.0) {
      alpha = 1.0;
    }
    this.masterAlpha = alpha;
    this.color.a = alpha * this.originalAlpha;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var child_0 = Kotlin.isType(tmp$_0 = child, NodeWrapper) ? tmp$_0 : null;
      if (child_0 != null) {
        child_0.SetMasterAlpha_mx4ult$(alpha);
      }
    }
  };
  Node.prototype.GetAlpha = function () {
    return this.originalAlpha;
  };
  Node.prototype.SetAlpha_8ca0d4$$default = function (alpha, applyChild) {
    var tmp$, tmp$_0;
    var alpha_0 = alpha;
    if (alpha_0 < 0) {
      alpha_0 = 0.0;
    }
     else if (alpha_0 > 1.0) {
      alpha_0 = 1.0;
    }
    this.originalAlpha = alpha_0;
    this.color.a = alpha_0 * this.masterAlpha;
    if (applyChild === true) {
      tmp$ = this.childList.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        var child_0 = Kotlin.isType(tmp$_0 = child, NodeWrapper) ? tmp$_0 : null;
        if (child_0 != null) {
          child_0.SetAlpha_8ca0d4$(alpha_0, applyChild);
        }
      }
    }
  };
  Node.prototype.SetAlpha_8ca0d4$ = function (alpha, applyChild, callback$default) {
    if (applyChild === void 0)
      applyChild = true;
    callback$default ? callback$default(alpha, applyChild) : this.SetAlpha_8ca0d4$$default(alpha, applyChild);
  };
  Node.prototype.update_mx4ult$ = function (elapsed) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    tmp$ = HAL$Companion_getInstance().shared();
    tmp$.nodeUpdateCounter = tmp$.nodeUpdateCounter + 1 | 0;
    if (elapsed > 0) {
      this.age += elapsed * this.timeScale;
      if (this.timeToLive >= 0) {
        if (this.age > this.timeToLive) {
          this.removeFromParent();
          return;
        }
      }
    }
    var exclusive = LinkedHashMap_init();
    var i = 0;
    while (i < this.updateCallback.size) {
      var callbackInfo = this.updateCallback.get_za3lpa$(i);
      if (elapsed === 0.0) {
        callbackInfo.elapsed = 0.0;
        callbackInfo.count = callbackInfo.count + 1 | 0;
        i = i + 1 | 0;
        callbackInfo.callback(callbackInfo);
        continue;
      }
       else {
        callbackInfo.elapsed = callbackInfo.elapsed + elapsed * this.timeScale;
      }
      callbackInfo.age = callbackInfo.age + elapsed * this.timeScale;
      if (callbackInfo.mode === 0) {
        if (this.GetShow() === false) {
          i = i + 1 | 0;
          continue;
        }
      }
      if (callbackInfo.exclusive === true) {
        var name = callbackInfo.name;
        if (exclusive.get_11rb$(name) != null) {
          i = i + 1 | 0;
          continue;
        }
         else {
          exclusive.put_xwzc9p$(name, 1);
        }
      }
      if (callbackInfo.timeToLive !== -1.0 && callbackInfo.timeToLive < callbackInfo.age) {
        callbackInfo.elapsed = 0.0;
        callbackInfo.count = callbackInfo.count + 1 | 0;
        callbackInfo.callback(callbackInfo);
        this.updateCallback.removeAt_za3lpa$(i);
        continue;
      }
       else if (callbackInfo.count === 0) {
        callbackInfo.count = callbackInfo.count + 1 | 0;
        if (callbackInfo.callback(callbackInfo) === false) {
          this.updateCallback.removeAt_za3lpa$(i);
          continue;
        }
        callbackInfo.elapsed = 0.0;
      }
       else if (callbackInfo.elapsed > callbackInfo.interval) {
        callbackInfo.count = callbackInfo.count + 1 | 0;
        if (callbackInfo.callback(callbackInfo) === false) {
          this.updateCallback.removeAt_za3lpa$(i);
          continue;
        }
        callbackInfo.elapsed = 0.0;
      }
      i = i + 1 | 0;
    }
    this.name.length;
    var childList = toList(this.childList);
    tmp$_0 = childList.iterator();
    while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      if (child.active === true) {
        child.update_mx4ult$(elapsed * this.timeScale);
      }
    }
    if ((tmp$_1 = this.xMotion) != null) {
      var tmp$_4;
      var info = tmp$_1;
      if (info.time !== -1.0 && info.startTime + info.time < this.age) {
        (tmp$_4 = info.callback) != null ? tmp$_4() : null;
        this.xMotion = null;
      }
       else {
        if (info.relative === true) {
          info.motion.update_mx4ult$(elapsed * this.timeScale);
          this.motionAdjust.x = this.motionAdjust.x + info.motion.GetPositionDelta();
        }
         else {
          this.x = info.motion.update_mx4ult$(elapsed * this.timeScale);
        }
      }
    }
    if ((tmp$_2 = this.yMotion) != null) {
      var tmp$_5;
      var info_0 = tmp$_2;
      if (info_0.time !== -1.0 && info_0.startTime + info_0.time < this.age) {
        (tmp$_5 = info_0.callback) != null ? tmp$_5() : null;
        this.yMotion = null;
      }
       else {
        if (info_0.relative === true) {
          info_0.motion.update_mx4ult$(elapsed * this.timeScale);
          this.motionAdjust.y = this.motionAdjust.y + info_0.motion.GetPositionDelta();
        }
         else {
          this.y = info_0.motion.update_mx4ult$(elapsed * this.timeScale);
        }
      }
    }
    if ((tmp$_3 = this.zMotion) != null) {
      var tmp$_6;
      var info_1 = tmp$_3;
      if (info_1.time !== -1.0 && info_1.startTime + info_1.time < this.age) {
        (tmp$_6 = info_1.callback) != null ? tmp$_6() : null;
        this.zMotion = null;
      }
       else {
        if (info_1.relative === true) {
          info_1.motion.update_mx4ult$(elapsed * this.timeScale);
          this.motionAdjust.z = this.motionAdjust.z + info_1.motion.GetPositionDelta();
        }
         else {
          this.z = info_1.motion.update_mx4ult$(elapsed * this.timeScale);
        }
      }
    }
  };
  Node.prototype.draw = function () {
    var tmp$;
    if (this.show === true) {
      var list = this.childList;
      tmp$ = list.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        child.draw();
      }
    }
  };
  Node.prototype.findChildByName_3m52m6$ = function (name, depthLimit, depth) {
    if (depthLimit === void 0)
      depthLimit = 999;
    if (depth === void 0)
      depth = 0;
    var tmp$, tmp$_0;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (equals(child.GetName(), name)) {
        return child;
      }
    }
    if (depth >= depthLimit) {
      return null;
    }
    tmp$_0 = this.childList.iterator();
    while (tmp$_0.hasNext()) {
      var child_0 = tmp$_0.next();
      var find = child_0.findChildByName_3m52m6$(name, depthLimit, depth + 1 | 0);
      if (find != null) {
        return find;
      }
    }
    return null;
  };
  Node.prototype.findAllChildByName_ay8g63$ = function (name, result) {
    var tmp$;
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (equals(child.GetName(), name)) {
        result.add_11rb$(child);
      }
      child.findAllChildByName_ay8g63$(name, result);
    }
  };
  Node.prototype.findNodeByObject_wympo9$ = function (target, exclude) {
    if (exclude === void 0)
      exclude = null;
    var tmp$, tmp$_0;
    tmp$ = this.objectList.iterator();
    while (tmp$.hasNext()) {
      var ob = tmp$.next();
      if (ob === target) {
        return this;
      }
    }
    tmp$_0 = this.childList.iterator();
    while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      if (child === exclude) {
        continue;
      }
      var find = child.findNodeByObject_wympo9$(target);
      if (find != null) {
        return find;
      }
    }
    return null;
  };
  Node.prototype.findUIResponseNodeByObject_wympo9$ = function (target, exclude) {
    if (exclude === void 0)
      exclude = null;
    var owner;
    var find = this.findNodeByObject_wympo9$(target, exclude);
    if (find != null && find.GetInputOwner() != null) {
      owner = find.GetInputOwner();
      while ((owner != null ? owner.GetInputOwner() : null) != null && (owner != null ? owner.GetInputOwner() : null) !== owner) {
        owner = owner != null ? owner.GetInputOwner() : null;
      }
      return owner;
    }
    return null;
  };
  Node.prototype.onPress_dleff0$ = function (x, y) {
    var local = this.convertGlobalToLocalCoordinate_dleff0$(x, y);
    this.sendMessage_79egny$(new Message(Event$touch_BEGIN_getInstance(), void 0, void 0, mutableListOf([Position_init(local.first, local.second), Position_init(x, y)])), this);
    return true;
  };
  Node.prototype.onDrag_dleff0$ = function (deltaX, deltaY) {
    return true;
  };
  Node.prototype.onRelease_fzxzdm$ = function (x, y, speed) {
    return true;
  };
  Node.prototype.onCancel = function () {
    return true;
  };
  Node.prototype.addUpdateCallback_sds54w$ = function (name, duplicate, replace, exclusive, timeToLive, interval, callback) {
    if (name === void 0)
      name = '';
    if (duplicate === void 0)
      duplicate = true;
    if (replace === void 0)
      replace = false;
    if (exclusive === void 0)
      exclusive = false;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (interval === void 0)
      interval = 0.0;
    var tmp$;
    if (duplicate === false) {
      tmp$ = reversed_0(get_indices(this.updateCallback)).iterator();
      while (tmp$.hasNext()) {
        var i = tmp$.next();
        var c = this.updateCallback.get_za3lpa$(i);
        if (equals(c.name, name)) {
          if (replace === false) {
            return;
          }
           else {
            c.elapsed = 0.0;
            c.age = c.age + 0.0;
            c.count = c.count + 1 | 0;
            c.callback(c);
            this.updateCallback.removeAt_za3lpa$(i);
            var callbackInfo = new CallbackInfo(this, name, exclusive, timeToLive, interval, void 0, callback);
            this.updateCallback.add_11rb$(callbackInfo);
            return;
          }
        }
      }
    }
    var callbackInfo_0 = new CallbackInfo(this, name, exclusive, timeToLive, interval, void 0, callback);
    this.updateCallback.add_11rb$(callbackInfo_0);
  };
  Node.prototype.removeUpdateCallback_9sobi5$ = function (name, delay) {
    if (delay === void 0)
      delay = 0.0;
    var tmp$;
    tmp$ = reversed(withIndex(this.updateCallback)).iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var i = tmp$_0.component1()
      , callbackInfo = tmp$_0.component2();
      if (equals(callbackInfo.name, name)) {
        if (delay > 0) {
          callbackInfo.timeToLive = callbackInfo.age + delay;
        }
         else {
          var c = this.updateCallback.get_za3lpa$(i);
          c.elapsed = 0.0;
          c.age = c.age + 0;
          c.count = c.count + 1 | 0;
          c.callback(c);
          this.updateCallback.removeAt_za3lpa$(i);
        }
      }
    }
    return false;
  };
  Node.prototype.removeAllUpdateCallback_6taknv$ = function (signal) {
    if (signal === void 0)
      signal = true;
    var tmp$;
    tmp$ = reversed_0(get_indices(this.updateCallback)).iterator();
    while (tmp$.hasNext()) {
      var i = tmp$.next();
      var c = this.updateCallback.get_za3lpa$(i);
      c.elapsed = 0.0;
      c.age = c.age + 0;
      c.count = c.count + 1 | 0;
      if (signal === true) {
        c.callback(c);
      }
      this.updateCallback.removeAt_za3lpa$(i);
    }
  };
  Node.prototype.GetShow = function () {
    return this.show;
  };
  Node.prototype.SetShow_6taknv$ = function (show) {
    this.show = show;
  };
  Node.prototype.SetModal_6taknv$ = function (modal) {
    this.modal = modal;
  };
  Node.prototype.isModal = function () {
    return this.modal;
  };
  Node.prototype.SetMessageHandler_4mjqr2$ = function (handler) {
    this.messageHandler = null;
    this.messageHandler = handler;
  };
  Node.prototype.SetLocalVariables_za3lpa$ = function (value) {
    this.localVariables.value = value;
  };
  Node.prototype.GetLocalVariables = function () {
    return this.localVariables.value;
  };
  Node.prototype.SetLocalVariablesFloat_mx4ult$ = function (value) {
    this.localVariables.floatValue = value;
  };
  Node.prototype.GetLocalVariablesFloat = function () {
    return this.localVariables.floatValue;
  };
  Node.prototype.addLocalVariablesObject_za3rmp$ = function (target) {
    this.localVariables.parameter.add_11rb$(target);
  };
  Node.prototype.GetLocalVariablesObjectList = function () {
    return toList(this.localVariables.parameter);
  };
  Node.prototype.GetLocalVariablesObject_za3lpa$ = function (order) {
    return this.localVariables.parameter.get_za3lpa$(order);
  };
  Node.prototype.sendMessage_iaw1dj$ = function (event, receiver, parameter) {
    if (receiver === void 0)
      receiver = null;
    if (parameter === void 0) {
      parameter = emptyList();
    }
    var message = new Message(event, this, receiver, parameter);
    if (receiver != null) {
      return receiver.processMessage_sad1na$(message);
    }
     else {
      message.receiver = this;
      return this.processMessage_sad1na$(message);
    }
  };
  Node.prototype.sendMessage_79egny$ = function (message, receiver) {
    if (receiver === void 0)
      receiver = null;
    var message_0 = message;
    message_0.sender = this;
    if (receiver != null) {
      return receiver.processMessage_sad1na$(message_0);
    }
     else {
      message_0.receiver = this;
      return this.processMessage_sad1na$(message_0);
    }
  };
  Node.prototype.sendMessageParent_4hc9e7$ = function (event, parameter) {
    if (parameter === void 0) {
      parameter = emptyList();
    }
    var parent = this.parent;
    if (parent != null) {
      var message = new Message(event, this, parent, parameter);
      return parent.processMessage_sad1na$(message);
    }
    return false;
  };
  Node.prototype.sendMessage_2iuq6n$ = function (receiver, message) {
    var message_0 = message;
    message_0.receiver = receiver;
    return receiver.processMessage_sad1na$(message_0);
  };
  Node.prototype.sendMessage_cpy62s$ = function (receiverName, message) {
    var message_0 = message;
    var receiver = this.GetRoot().findChildByName_3m52m6$(receiverName);
    if (receiver != null) {
      message_0.receiver = receiver;
      return receiver.processMessage_sad1na$(message_0);
    }
    return false;
  };
  Node.prototype.postMessage_cpy62s$ = function (receiverName, message) {
    var tmp$;
    var message_0 = message;
    var result = ArrayList_init();
    this.GetRoot().findAllChildByName_ay8g63$(receiverName, result);
    tmp$ = result.iterator();
    while (tmp$.hasNext()) {
      var receiver = tmp$.next();
      if (message_0.sender !== receiver) {
        message_0.receiver = receiver;
        receiver.processMessage_sad1na$(message_0);
      }
    }
  };
  Node.prototype.broadcastMessage_4hc9e7$ = function (event, parameter) {
    if (parameter === void 0) {
      parameter = emptyList();
    }
    var tmp$;
    var message = new Message(event, this, void 0, parameter, void 0, void 0, true);
    tmp$ = this.GetChildList().iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.processMessage_sad1na$(message);
      child.broadcastMessage_sad1na$(message);
    }
  };
  Node.prototype.broadcastMessage_sad1na$ = function (message) {
    var tmp$;
    tmp$ = this.GetChildList().iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.processMessage_sad1na$(message);
      child.broadcastMessage_sad1na$(message);
    }
  };
  Node.prototype.processMessage_sad1na$ = function (message) {
    var tmp$;
    if (this.messageHandler != null) {
      if (((tmp$ = this.messageHandler) != null ? tmp$(message) : null) === false) {
        return false;
      }
    }
    return this.defaultMessageHandler_sad1na$(message);
  };
  Node.prototype.defaultMessageHandler_sad1na$ = function (message) {
    var message_0 = message;
    var parent = this.GetParent();
    if (parent != null) {
      message_0.receiver = parent;
      return parent.processMessage_sad1na$(message_0);
    }
    return true;
  };
  Node.prototype.SetXMotion_vn0wwp$ = function (motion, relative, time, callback) {
    if (relative === void 0)
      relative = false;
    if (time === void 0)
      time = -1.0;
    if (callback === void 0)
      callback = null;
    this.xMotion = null;
    this.xMotion = new MotionInfo(motion, relative, time, this.age, callback);
  };
  Node.prototype.SetYMotion_vn0wwp$ = function (motion, relative, time, callback) {
    if (relative === void 0)
      relative = false;
    if (time === void 0)
      time = -1.0;
    if (callback === void 0)
      callback = null;
    this.yMotion = null;
    this.yMotion = new MotionInfo(motion, relative, time, this.age, callback);
  };
  Node.prototype.SetZMotion_vn0wwp$ = function (motion, relative, time, callback) {
    if (relative === void 0)
      relative = false;
    if (time === void 0)
      time = -1.0;
    if (callback === void 0)
      callback = null;
    this.zMotion = null;
    this.zMotion = new MotionInfo(motion, relative, time, this.age, callback);
  };
  Node.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Node',
    interfaces: []
  };
  function Node_init(x, y, z, $this) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (z === void 0)
      z = 0.0;
    $this = $this || Object.create(Node.prototype);
    Node.call($this);
    $this.SetPosition_dleff0$(x, y);
    $this.SetZPosition_8ca0d4$(z);
    return $this;
  }
  function NodeWrapper() {
    this.anchor = Position_init(0.0, 1.0);
    this.rotation = 0.0;
    this.colorBlendFactor = 1.0;
    this.blendMode = BlendMode$alpha_getInstance();
  }
  NodeWrapper.prototype.freeObject = function () {
    var tmp$;
    tmp$ = this.GetObjectList().iterator();
    while (tmp$.hasNext()) {
      var obj = tmp$.next();
      if (Kotlin.isType(obj, GuestNode)) {
        obj.remove();
      }
    }
    Node.prototype.freeObject.call(this);
  };
  NodeWrapper.prototype.addChild_g5h3xp$ = function (child) {
    var tmp$, tmp$_0, tmp$_1;
    if (child.GetParent() != null) {
      return;
    }
    child.SetMasterAlpha_mx4ult$(this.masterAlpha);
    Node.prototype.addChild_g5h3xp$.call(this, child);
    var skNode = Kotlin.isType(tmp$ = this.GetObject(), GuestNode) ? tmp$ : null;
    if (skNode != null) {
      tmp$_0 = child.GetObjectList().iterator();
      while (tmp$_0.hasNext()) {
        var ob = tmp$_0.next();
        var skChild = Kotlin.isType(tmp$_1 = ob, GuestNode) ? tmp$_1 : null;
        if (skChild != null) {
          skNode.addChild_jrj3jl$(skChild);
          break;
        }
      }
    }
  };
  NodeWrapper.prototype.addChildByObjectSelection_nacd7f$ = function (child, index) {
    if (index === void 0)
      index = 0;
    var tmp$, tmp$_0;
    if (child.GetParent() != null) {
      return;
    }
    Node.prototype.addChild_g5h3xp$.call(this, child);
    var skNode = Kotlin.isType(tmp$ = this.GetObject_za3lpa$(index), GuestNode) ? tmp$ : null;
    if (skNode != null) {
      var skChild = Kotlin.isType(tmp$_0 = child.GetObject(), GuestNode) ? tmp$_0 : null;
      if (skChild != null) {
        skNode.addChild_jrj3jl$(skChild);
      }
    }
  };
  NodeWrapper.prototype.SetShow_6taknv$ = function (show) {
    var tmp$, tmp$_0;
    if (show === false) {
      var skNode = Kotlin.isType(tmp$ = this.GetObject(), GuestNode) ? tmp$ : null;
      if (skNode != null) {
        skNode.SetShow_6taknv$(show);
      }
    }
     else {
      var skNode_0 = Kotlin.isType(tmp$_0 = this.GetObject(), GuestNode) ? tmp$_0 : null;
      if (skNode_0 != null) {
        skNode_0.SetShow_6taknv$(show);
      }
    }
    Node.prototype.SetShow_6taknv$.call(this, show);
    this.processModal_6taknv$(show);
  };
  NodeWrapper.prototype.processModal_6taknv$ = function (show) {
    var tmp$, tmp$_0;
    if (this.modal === true) {
      if (show === true) {
        var screen = Kotlin.isType(tmp$ = this.GetRoot(), Screen) ? tmp$ : null;
        if (screen != null) {
          screen.pushModal_g5h3xp$(this);
        }
      }
       else {
        var screen_0 = Kotlin.isType(tmp$_0 = this.GetRoot(), Screen) ? tmp$_0 : null;
        if (screen_0 != null) {
          screen_0.popModal_g5h3xp$(this);
        }
      }
    }
  };
  NodeWrapper.prototype.SetPosition_dleff0$ = function (x, y) {
    Node.prototype.SetPosition_dleff0$.call(this, x, y);
    this.SetVerticalAlign_qn2em6$(this.verticalAlign);
    this.SetHorizontalAlign_jdpdm8$(this.horizontalAlign);
  };
  NodeWrapper.prototype.draw = function () {
    var tmp$, tmp$_0;
    var dummy = Kotlin.isType(tmp$ = this.GetObject(), GuestNode) ? tmp$ : null;
    if (dummy != null) {
      var convert = this.GetDrawingCoordinate_dleff0$(this.x, this.y);
      convert.x = convert.x + this.positionOffset.x;
      convert.y = convert.y + this.positionOffset.y;
      var parent = this.GetParent();
      if (parent != null) {
        var p = Kotlin.isType(tmp$_0 = parent.GetObject(), GuestNode) ? tmp$_0 : null;
        if (p != null) {
          convert = p.convertCoordinate_dleff0$(convert.x, convert.y);
        }
      }
      dummy.draw_4tzqwv$(convert, this.GetZPosition());
    }
    Node.prototype.draw.call(this);
  };
  NodeWrapper.prototype.convertChildToParentCoordinate_dleff0$ = function (x, y) {
    if (this.percentCoordinate === true) {
      return new Pair(this.GetPosition().x + this.positionOffset.x + this.GetSize().width * x, this.GetPosition().y + this.positionOffset.y + this.GetSize().height * y);
    }
    return new Pair(this.GetPosition().x + this.positionOffset.x + x, this.GetPosition().y + this.positionOffset.y + y);
  };
  NodeWrapper.prototype.SetVerticalAlign_qn2em6$ = function (align) {
    this.verticalAlign = align;
    switch (align.name) {
      case 'top':
        this.positionOffset.y = 1 * this.GetSize().height / 2;
        break;
      case 'center':
        this.positionOffset.y = 0.0;
        break;
      case 'bottom':
        this.positionOffset.y = -1 * this.GetSize().height / 2;
        break;
    }
  };
  NodeWrapper.prototype.SetHorizontalAlign_jdpdm8$ = function (align) {
    this.horizontalAlign = align;
    switch (align.name) {
      case 'left':
        this.positionOffset.x = 1 * this.GetSize().width / 2;
        break;
      case 'center':
        this.positionOffset.x = 0.0;
        break;
      case 'right':
        this.positionOffset.x = -1 * this.GetSize().width / 2;
        break;
    }
  };
  NodeWrapper.prototype.GetVerticalAlign = function () {
    return this.verticalAlign;
  };
  NodeWrapper.prototype.GetHorizontalAlign = function () {
    return this.horizontalAlign;
  };
  NodeWrapper.prototype.SetBlendFactor_mx4ult$$default = function (factor) {
    this.colorBlendFactor = factor;
  };
  NodeWrapper.prototype.SetBlendFactor_mx4ult$ = function (factor, callback$default) {
    if (factor === void 0)
      factor = 0.0;
    callback$default ? callback$default(factor) : this.SetBlendFactor_mx4ult$$default(factor);
  };
  NodeWrapper.prototype.GetBlendFactor = function () {
    return this.colorBlendFactor;
  };
  NodeWrapper.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    this.blendMode = mode;
  };
  NodeWrapper.prototype.GetBlendMode = function () {
    return this.blendMode;
  };
  NodeWrapper.prototype.SetRotation_mx4ult$$default = function (radian) {
  };
  NodeWrapper.prototype.SetRotation_mx4ult$ = function (radian, callback$default) {
    if (radian === void 0)
      radian = 0.0;
    callback$default ? callback$default(radian) : this.SetRotation_mx4ult$$default(radian);
  };
  NodeWrapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeWrapper',
    interfaces: [Node]
  };
  function NodeWrapper_init(x, y, z, $this) {
    if (z === void 0)
      z = 0.0;
    $this = $this || Object.create(NodeWrapper.prototype);
    Node_init(x, y, z, $this);
    NodeWrapper.call($this);
    $this.anchor = Position_init(0.5, 0.5);
    return $this;
  }
  function Random() {
    Random_instance = this;
  }
  Random.prototype.arc4random_uniform_za3lpa$ = function (n) {
    return numberToInt(Math.random() * n);
  };
  Random.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Random',
    interfaces: []
  };
  var Random_instance = null;
  function Random_getInstance() {
    if (Random_instance === null) {
      new Random();
    }
    return Random_instance;
  }
  function Camera() {
    Camera$Companion_getInstance();
    this.projection = 0;
    this.lensSize = 100.0;
    this.focalLength = 50.0;
    this.farMost = 500.0;
    this.farFog = 250.0;
    this.nearFog = 100.0;
    this.sinCalcX = 0.0;
    this.cosCalcX = 0.0;
    this.sinCalcY = 0.0;
    this.cosCalcY = 0.0;
    this.sinCalcZ = 0.0;
    this.cosCalcZ = 0.0;
  }
  Camera.prototype.rotate_y2kzbl$ = function (x, y, z) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (z === void 0)
      z = 0.0;
    var thetaX = x * (math.PI / 180);
    var thetaY = y * (math.PI / 180);
    var thetaZ = z * (math.PI / 180);
    var sinCalc = Math_0.sin(thetaX);
    var cosCalc = Math_0.cos(thetaX);
    var newY = this.direction.y * cosCalc - this.direction.z * sinCalc;
    var newZ = this.direction.y * sinCalc + this.direction.z * cosCalc;
    this.direction.y = newY;
    this.direction.z = newZ;
    sinCalc = Math_0.sin(thetaY);
    cosCalc = Math_0.cos(thetaY);
    var newX = this.direction.x * cosCalc + this.direction.z * sinCalc;
    newZ = -this.direction.x * sinCalc + this.direction.z * cosCalc;
    this.direction.x = newX;
    this.direction.z = newZ;
    sinCalc = Math_0.sin(thetaZ);
    cosCalc = Math_0.cos(thetaZ);
    newX = this.direction.x * cosCalc - this.direction.y * sinCalc;
    newY = this.direction.x * sinCalc + this.direction.y * cosCalc;
    this.direction.x = newX;
    this.direction.y = newY;
  };
  Camera.prototype.SetFOV_mx4ult$ = function (degree) {
    var theta = degree / 2 * (math.PI / 180);
    this.focalLength = this.lensSize / 2.0 * Math_0.cos(theta) / Math_0.sin(theta);
  };
  Camera.prototype.SetFOV_dleff0$ = function (degree, focalLength) {
    var theta = degree / 2 * (math.PI / 180);
    this.lensSize = focalLength * Math_0.sin(theta) / Math_0.cos(theta) * 2.0;
    this.focalLength = focalLength;
  };
  Camera.prototype.prepare = function () {
    var thetaX = (360 - this.direction.x) * (math.PI / 180);
    this.sinCalcX = Math_0.sin(thetaX);
    this.cosCalcX = Math_0.cos(thetaX);
    var thetaY = (360 - this.direction.y) * (math.PI / 180);
    this.sinCalcY = Math_0.sin(thetaY);
    this.cosCalcY = Math_0.cos(thetaY);
    var thetaZ = (360 - this.direction.z) * (math.PI / 180);
    this.sinCalcZ = Math_0.sin(thetaZ);
    this.cosCalcZ = Math_0.cos(thetaZ);
  };
  Camera.prototype.convertToLocal_qgvyiu$ = function (position) {
    var newX = position.x - this.position.x;
    var newY = position.y - this.position.y;
    var newZ = position.z - this.position.z;
    var newX2 = newX * this.cosCalcY + newZ * this.sinCalcY;
    var newZ2 = -newX * this.sinCalcY + newZ * this.cosCalcY;
    var newY2 = newY * this.cosCalcX - newZ2 * this.sinCalcX;
    var newZ3 = newY * this.sinCalcX + newZ2 * this.cosCalcX;
    var newX3 = newX2 * this.cosCalcZ - newY2 * this.sinCalcZ;
    var newY3 = newX2 * this.sinCalcZ + newY2 * this.cosCalcZ;
    position.x = newX3;
    position.y = newY3;
    position.z = newZ3;
  };
  Camera.prototype.convertToLocal_xovnep$ = function (obj) {
    var tmp$, tmp$_0;
    obj.convertPosition.x = obj.position.x + obj.local.x;
    obj.convertPosition.y = obj.position.y + obj.local.y;
    obj.convertPosition.z = obj.position.z + obj.local.z;
    this.convertToLocal_qgvyiu$(obj.convertPosition);
    var polygon = Kotlin.isType(tmp$ = obj, Polygon) ? tmp$ : null;
    if (polygon != null) {
      tmp$_0 = polygon.GetVertexCount() - 1 | 0;
      for (var i = 0; i <= tmp$_0; i++) {
        polygon.convertedVertex.get_za3lpa$(i).x = obj.position.x + polygon.vertex.get_za3lpa$(i).x;
        polygon.convertedVertex.get_za3lpa$(i).y = obj.position.y + polygon.vertex.get_za3lpa$(i).y;
        polygon.convertedVertex.get_za3lpa$(i).z = obj.position.z + polygon.vertex.get_za3lpa$(i).z;
        this.convertToLocal_qgvyiu$(polygon.convertedVertex.get_za3lpa$(i));
      }
    }
  };
  Camera.prototype.convertToScreen_yjiq68$ = function (obj, screenSize, adjustWithX) {
    var s = 1.0;
    if (this.projection === 0) {
      obj.screenPosition.x = this.focalLength / obj.convertPosition.z * obj.convertPosition.x;
      obj.screenPosition.y = this.focalLength / obj.convertPosition.z * obj.convertPosition.y;
      s = screenSize.width / this.lensSize;
      if (adjustWithX === false) {
        s = screenSize.height / this.lensSize;
      }
      obj.screenPosition.x = obj.screenPosition.x * s;
      obj.screenPosition.y = obj.screenPosition.y * s;
      obj.screenPosition.y = obj.screenPosition.y * -1;
      obj.screenPosition.x = obj.screenPosition.x + screenSize.width / 2;
      obj.screenPosition.y = obj.screenPosition.y + screenSize.height / 2;
    }
     else {
      obj.screenPosition.x = obj.convertPosition.x;
      obj.screenPosition.y = obj.convertPosition.y;
    }
    var newSize = this.focalLength / obj.convertPosition.z * obj.size;
    obj.screenSize.width = newSize * s;
    obj.screenSize.height = newSize * s;
  };
  Camera.prototype.convertToScreen_l3vh3t$ = function (vertex, screenSize, adjustWithX) {
    var screenPosition = Position_init();
    screenPosition.x = this.focalLength / vertex.z * vertex.x;
    screenPosition.y = this.focalLength / vertex.z * vertex.y;
    var s = 1.0;
    s = screenSize.width / this.lensSize;
    if (adjustWithX === false) {
      s = screenSize.height / this.lensSize;
    }
    screenPosition.x = screenPosition.x * s;
    screenPosition.y = screenPosition.y * s;
    screenPosition.y = screenPosition.y * -1;
    screenPosition.x = screenPosition.x + screenSize.width / 2;
    screenPosition.y = screenPosition.y + screenSize.height / 2;
    return screenPosition;
  };
  function Camera$Companion() {
    Camera$Companion_instance = this;
  }
  Camera$Companion.prototype.copy_s6wt6e$ = function (camera) {
    var newCamera = Camera_init(camera.lensSize, void 0, void 0, void 0, camera.focalLength, camera.farMost);
    newCamera.position = Position$Companion_getInstance().copy_qgvyiu$(camera.position);
    newCamera.direction = Position$Companion_getInstance().copy_qgvyiu$(camera.direction);
    newCamera.movement = Position$Companion_getInstance().copy_qgvyiu$(camera.movement);
    newCamera.size = camera.size;
    newCamera.rotation = Position$Companion_getInstance().copy_qgvyiu$(camera.rotation);
    newCamera.screenPosition = Position$Companion_getInstance().copy_qgvyiu$(camera.screenPosition);
    newCamera.screenSize = Size$Companion_getInstance().copy_g5e0xa$(camera.screenSize);
    newCamera.farFog = camera.farFog;
    newCamera.nearFog = camera.nearFog;
    return newCamera;
  };
  Camera$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Camera$Companion_instance = null;
  function Camera$Companion_getInstance() {
    if (Camera$Companion_instance === null) {
      new Camera$Companion();
    }
    return Camera$Companion_instance;
  }
  Camera.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Camera',
    interfaces: [Object3D]
  };
  function Camera_init(lensSize, position, direction, movement, focalLength, farMost, $this) {
    if (position === void 0)
      position = Position_init();
    if (direction === void 0)
      direction = Position_init(0.0, 0.0, 0.0);
    if (movement === void 0)
      movement = Position_init();
    if (focalLength === void 0)
      focalLength = 10.0;
    if (farMost === void 0)
      farMost = 500.0;
    $this = $this || Object.create(Camera.prototype);
    Object3D.call($this);
    Camera.call($this);
    $this.lensSize = lensSize;
    $this.position = position;
    $this.direction = direction;
    $this.movement = movement;
    $this.focalLength = focalLength;
    $this.farMost = farMost;
    return $this;
  }
  function Camera_init_0(lensSize, position, direction, movement, fov, farMost, farFog, nearFog, $this) {
    if (position === void 0)
      position = Position_init();
    if (direction === void 0)
      direction = Position_init(0.0, 0.0, 0.0);
    if (movement === void 0)
      movement = Position_init();
    if (fov === void 0)
      fov = 90.0;
    if (farMost === void 0)
      farMost = 500.0;
    if (farFog === void 0)
      farFog = 250.0;
    if (nearFog === void 0)
      nearFog = 100.0;
    $this = $this || Object.create(Camera.prototype);
    Object3D.call($this);
    Camera.call($this);
    $this.lensSize = lensSize;
    $this.position = position;
    $this.direction = direction;
    $this.movement = movement;
    $this.farMost = farMost;
    $this.farFog = farFog;
    $this.nearFog = nearFog;
    $this.SetFOV_mx4ult$(fov);
    return $this;
  }
  function Particle() {
    Particle$Companion_getInstance();
    Object3D.call(this);
    this.poolable = false;
    this.sprite = null;
  }
  Particle.prototype.destroy = function () {
    var tmp$;
    if (this.sprite != null) {
      (tmp$ = this.sprite) != null ? (tmp$.removeFromParent(), Unit) : null;
      this.sprite = null;
    }
    Object3D.prototype.destroy.call(this);
  };
  Particle.prototype.SetSprite_eyqfr4$ = function (sprite) {
    var tmp$;
    if (this.sprite != null) {
      (tmp$ = this.sprite) != null ? (tmp$.removeFromParent(), Unit) : null;
      this.sprite = null;
    }
    this.sprite = sprite;
  };
  Particle.prototype.GetSprite = function () {
    return this.sprite;
  };
  Particle.prototype.changeImage_61zpoe$ = function (image) {
    var tmp$;
    var sprite = Kotlin.isType(tmp$ = this.sprite, Sprite) ? tmp$ : null;
    if (sprite != null) {
      sprite.SetRotation_mx4ult$(0.0);
      sprite.SetImage_9xt0da$(image);
    }
  };
  Particle.prototype.SetSubAlpha_mx4ult$$default = function (alpha) {
    var tmp$;
    this.SetSubAlpha_mx4ult$(alpha, Object3D.prototype.SetSubAlpha_mx4ult$$default.bind(this));
    (tmp$ = this.sprite) != null ? (tmp$.SetAlpha_8ca0d4$(this.GetCurrentAlpha()), Unit) : null;
  };
  function Particle$Companion() {
    Particle$Companion_instance = this;
  }
  Particle$Companion.prototype.copy_j6asyx$ = function (r1) {
    var particle = new Particle();
    particle.position = Position$Companion_getInstance().copy_qgvyiu$(r1.position);
    particle.direction = Position$Companion_getInstance().copy_qgvyiu$(r1.direction);
    particle.movement = Position$Companion_getInstance().copy_qgvyiu$(r1.movement);
    particle.size = r1.size;
    particle.rotation = Position$Companion_getInstance().copy_qgvyiu$(r1.rotation);
    particle.screenPosition = Position$Companion_getInstance().copy_qgvyiu$(r1.screenPosition);
    particle.screenSize = Size$Companion_getInstance().copy_g5e0xa$(r1.screenSize);
    particle.timeToLive = r1.timeToLive;
    particle.SetOriginalAlpha_mx4ult$(r1.GetOriginalAlpha());
    particle.SetSubAlpha_mx4ult$(r1.GetSubAlpha());
    particle.accel = Position$Companion_getInstance().copy_qgvyiu$(r1.accel);
    particle.accelRetain = Position$Companion_getInstance().copy_qgvyiu$(r1.accelRetain);
    particle.drag = Position$Companion_getInstance().copy_qgvyiu$(r1.drag);
    return particle;
  };
  Particle$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Particle$Companion_instance = null;
  function Particle$Companion_getInstance() {
    if (Particle$Companion_instance === null) {
      new Particle$Companion();
    }
    return Particle$Companion_instance;
  }
  Particle.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Particle',
    interfaces: [Object3D]
  };
  function Background() {
    Particle.call(this);
  }
  Background.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Background',
    interfaces: [Particle]
  };
  function Polygon() {
    this.vertex = ArrayList_init();
    this.convertedVertex = ArrayList_init();
    this.isLined = true;
    this.isClosed = true;
    this.spriteList = ArrayList_init();
  }
  Polygon.prototype.destroy = function () {
    var tmp$;
    tmp$ = this.spriteList.iterator();
    while (tmp$.hasNext()) {
      var sprite = tmp$.next();
      sprite.removeFromParent();
    }
    this.spriteList.clear();
    Object3D.prototype.destroy.call(this);
  };
  Polygon.prototype.addVertex_vwn7ta$ = function (vertex, sprite) {
    this.vertex.add_11rb$(vertex);
    this.convertedVertex.add_11rb$(Position_init());
    this.spriteList.add_11rb$(sprite);
  };
  Polygon.prototype.GetVertex_za3lpa$ = function (index) {
    if (index >= this.vertex.size) {
      return null;
    }
    return this.vertex.get_za3lpa$(index);
  };
  Polygon.prototype.GetVertexCount = function () {
    return this.vertex.size;
  };
  Polygon.prototype.GetSprite_za3lpa$ = function (index) {
    if (index >= this.spriteList.size) {
      return null;
    }
    return this.spriteList.get_za3lpa$(index);
  };
  Polygon.prototype.SetSubAlpha_mx4ult$$default = function (alpha) {
    var tmp$;
    this.SetSubAlpha_mx4ult$(alpha, Object3D.prototype.SetSubAlpha_mx4ult$$default.bind(this));
    tmp$ = this.spriteList.iterator();
    while (tmp$.hasNext()) {
      var sprite = tmp$.next();
      sprite.SetAlpha_8ca0d4$(this.GetCurrentAlpha());
    }
  };
  Polygon.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Polygon',
    interfaces: [Object3D]
  };
  function Polygon_init(isClosed, $this) {
    if (isClosed === void 0)
      isClosed = true;
    $this = $this || Object.create(Polygon.prototype);
    Object3D.call($this);
    Polygon.call($this);
    $this.isClosed = isClosed;
    return $this;
  }
  function Polygon_init_0(vertex, sprite, isClosed, $this) {
    if (isClosed === void 0)
      isClosed = true;
    $this = $this || Object.create(Polygon.prototype);
    Object3D.call($this);
    Polygon.call($this);
    var i = 0;
    for (var tmp$ = vertex.iterator(); tmp$.hasNext(); ++i) {
      var v = tmp$.next();
      $this.vertex.add_11rb$(v);
      $this.convertedVertex.add_11rb$(Position_init());
      $this.spriteList.add_11rb$(sprite.get_za3lpa$(i));
    }
    $this.isClosed = isClosed;
    return $this;
  }
  function ParticleManager() {
    this.screen = null;
    this.spriteParent = null;
    this.objList = ArrayList_init();
    this.particlePool = ArrayList_init();
    this.camera = null;
    this.gravity = 0.0;
    this.maxParticle = 100;
    this.paused = false;
    this.timeScale = 1.0;
  }
  ParticleManager.prototype.SetCamera_s6wt6e$ = function (camera) {
    this.camera = camera;
  };
  ParticleManager.prototype.SetMaxParticle_za3lpa$ = function (max) {
    this.maxParticle = max;
  };
  ParticleManager.prototype.GetMaxParticle = function () {
    return this.maxParticle;
  };
  ParticleManager.prototype.GetAvailableParticleAmount = function () {
    return this.maxParticle - this.objList.size | 0;
  };
  ParticleManager.prototype.clearParticlePool = function () {
    var tmp$;
    tmp$ = this.particlePool.iterator();
    while (tmp$.hasNext()) {
      var particle = tmp$.next();
      var sprite = particle.sprite;
      if (sprite != null) {
        sprite.removeFromParent();
      }
    }
    this.particlePool.clear();
  };
  ParticleManager.prototype.pause = function () {
    this.paused = true;
  };
  ParticleManager.prototype.resume = function () {
    this.paused = false;
  };
  ParticleManager.prototype.SetTimeScale_mx4ult$ = function (scale) {
    this.timeScale = scale;
  };
  ParticleManager.prototype.GetTotalParticleCount = function () {
    return this.objList.size + this.particlePool.size | 0;
  };
  ParticleManager.prototype.GetCurrentParticleCount = function () {
    return this.objList.size;
  };
  ParticleManager.prototype.addObject_293dsg$ = function (obj, swappable) {
    if (swappable === void 0)
      swappable = false;
    if (swappable === true) {
      this.objList.add_11rb$(obj);
      return;
    }
    this.objList.add_11rb$(obj);
  };
  ParticleManager.prototype.removeObject_xovnep$ = function (obj) {
    obj.timeToLive = 0.0;
  };
  ParticleManager.prototype.GetObjectList = function () {
    return this.objList;
  };
  ParticleManager.prototype.SetGravity_mx4ult$ = function (gravity) {
    this.gravity = gravity;
  };
  ParticleManager.prototype.updateObject_mx4ult$ = function (elapsed) {
    var tmp$;
    (tmp$ = this.camera) != null ? (tmp$.update_mx4ult$(elapsed), Unit) : null;
    if (this.paused === false) {
      this.updateObject_38oe80$(this.objList, elapsed * this.timeScale);
    }
  };
  ParticleManager.prototype.updateObject_38oe80$ = function (objList, elapsed) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var halfelapsed2 = 0.5 * elapsed * elapsed;
    var i = objList.size - 1 | 0;
    while (i >= 0) {
      var obj = objList.get_za3lpa$(i);
      obj.update_mx4ult$(elapsed);
      if (obj.timeToLive >= 0) {
        if (obj.age > obj.timeToLive) {
          (tmp$ = obj.willBeDestroyed) != null ? tmp$(obj, ensureNotNull(this.camera), 0.0) : null;
          var particle = Kotlin.isType(tmp$_0 = obj, Particle) ? tmp$_0 : null;
          if (particle != null) {
            particle.destroy();
          }
           else {
            obj.destroy();
          }
          objList.removeAt_za3lpa$(i);
          i = i - 1 | 0;
          continue;
        }
      }
      if (obj.willBeDestroyed != null && ((tmp$_1 = obj.willBeDestroyed) != null ? tmp$_1(obj, ensureNotNull(this.camera), elapsed) : null) === true) {
        var particle_0 = Kotlin.isType(tmp$_2 = obj, Particle) ? tmp$_2 : null;
        if (particle_0 != null) {
          particle_0.destroy();
        }
         else {
          obj.destroy();
        }
        objList.removeAt_za3lpa$(i);
        i = i - 1 | 0;
        continue;
      }
      obj.prevPosition.x = obj.position.x;
      obj.prevPosition.y = obj.position.y;
      obj.prevPosition.z = obj.position.z;
      if (obj.accelRetain.x > 0) {
        obj.accelRetain.x = obj.accelRetain.x - elapsed;
        if (obj.accelRetain.x <= 0) {
          obj.accelRetain.x = 0.0;
          obj.accel.x = 0.0;
        }
      }
      if (obj.accelRetain.y > 0) {
        obj.accelRetain.y = obj.accelRetain.y - elapsed;
        if (obj.accelRetain.y <= 0) {
          obj.accelRetain.y = 0.0;
          obj.accel.y = 0.0;
        }
      }
      if (obj.accelRetain.z > 0) {
        obj.accelRetain.z = obj.accelRetain.z - elapsed;
        if (obj.accelRetain.z <= 0) {
          obj.accelRetain.z = 0.0;
          obj.accel.z = 0.0;
        }
      }
      if (obj.accel.x === 0.0 && obj.movement.x !== 0.0) {
        var tmp$_3 = obj.movement.x;
        var x = obj.movement.x;
        var direction = tmp$_3 / Math_0.abs(x);
        var x_0 = obj.movement.x;
        var move = Math_0.abs(x_0) - obj.drag.x * elapsed;
        if (move < 0) {
          move = 0.0;
        }
        obj.movement.x = direction * move;
      }
      if (obj.accel.y === 0.0 && obj.movement.y !== 0.0) {
        var tmp$_4 = obj.movement.y;
        var x_1 = obj.movement.y;
        var direction_0 = tmp$_4 / Math_0.abs(x_1);
        var x_2 = obj.movement.y;
        var move_0 = Math_0.abs(x_2) - obj.drag.y * elapsed;
        if (move_0 < 0) {
          move_0 = 0.0;
        }
        obj.movement.y = direction_0 * move_0;
      }
      if (obj.accel.z === 0.0 && obj.movement.z !== 0.0) {
        var tmp$_5 = obj.movement.z;
        var x_3 = obj.movement.z;
        var direction_1 = tmp$_5 / Math_0.abs(x_3);
        var x_4 = obj.movement.z;
        var move_1 = Math_0.abs(x_4) - obj.drag.z * elapsed;
        if (move_1 < 0) {
          move_1 = 0.0;
        }
        obj.movement.z = direction_1 * move_1;
      }
      obj.position.x = obj.position.x + (obj.movement.x * elapsed + obj.accel.x * halfelapsed2);
      obj.movement.x = obj.movement.x + obj.accel.x * elapsed;
      obj.position.y = obj.position.y + (obj.movement.y * elapsed + (obj.accel.y + this.gravity) * halfelapsed2);
      obj.movement.y = obj.movement.y + (obj.accel.y + this.gravity) * elapsed;
      if (obj.movement.length2D() > obj.movementMax) {
        obj.movement.SetLength2D_mx4ult$(obj.movementMax);
      }
      obj.position.z = obj.position.z + (obj.movement.z * elapsed + obj.accel.z * halfelapsed2);
      obj.movement.z = obj.movement.z + obj.accel.z * elapsed;
      obj.rotateLocalX_mx4ult$(elapsed * obj.rotation.x);
      obj.rotateLocalY_mx4ult$(elapsed * obj.rotation.y);
      obj.rotateLocalZ_mx4ult$(elapsed * obj.rotation.z);
      i = i - 1 | 0;
    }
  };
  ParticleManager.prototype.projection_1s1xds$ = function (size, center, adjustWithX, cameraRotation) {
    if (center === void 0)
      center = Position_init();
    if (adjustWithX === void 0)
      adjustWithX = true;
    if (cameraRotation === void 0)
      cameraRotation = true;
    var tmp$;
    (tmp$ = this.camera) != null ? (tmp$.prepare(), Unit) : null;
    this.projection_xjshzw$(this.objList, size, center, adjustWithX, cameraRotation);
  };
  ParticleManager.prototype.vectorCross_g3jz9k$ = function (a, b) {
    var v = Position_init();
    v.x = a.y * b.z - a.z * b.y;
    v.y = a.z * b.x - a.x * b.z;
    v.z = a.x * b.y - a.y * b.x;
    return v;
  };
  ParticleManager.prototype.vectorMinus_g3jz9k$ = function (a, b) {
    var v = Position_init();
    v.x = a.x - b.x;
    v.y = a.y - b.y;
    v.z = a.z - b.z;
    return v;
  };
  ParticleManager.prototype.planeFromPoints_tnhs7q$ = function (v0, v1, v2) {
    var vv1 = this.vectorMinus_g3jz9k$(v1, v0);
    var vv2 = this.vectorMinus_g3jz9k$(v2, v0);
    var N = this.vectorCross_g3jz9k$(vv1, vv2);
    var d = -(N.x * v0.x + N.y * v0.y + N.z * v0.z);
    var plane = Plane_init(N.x, N.y, N.z, d);
    return plane;
  };
  ParticleManager.prototype.projection_xjshzw$ = function (objList, size, center, adjustWithX, cameraRotation) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15;
    var camera = this.camera;
    if (camera == null) {
      return;
    }
    var i = 0;
    while (i < objList.size) {
      var obj = objList.get_za3lpa$(i);
      camera != null ? (camera.convertToLocal_xovnep$(obj), Unit) : null;
      if (!Kotlin.isType(obj, Background)) {
        var distance = obj.distance_jfpljn$(camera, camera.projection);
        if (distance < camera.focalLength + camera.nearFog) {
          obj.SetSubAlpha_mx4ult$((distance - camera.focalLength) / camera.nearFog);
        }
         else if (distance > camera.farMost - camera.farFog) {
          obj.SetSubAlpha_mx4ult$((camera.farMost - distance) / camera.farFog);
        }
         else {
          obj.SetSubAlpha_mx4ult$(1.0);
        }
      }
      if (obj.convertPosition.z > camera.focalLength && obj.convertPosition.z < camera.farMost || (obj.convertPosition.z > camera.focalLength && Kotlin.isType(obj, Background))) {
        var particle = Kotlin.isType(tmp$ = obj, Particle) ? tmp$ : null;
        if (particle != null) {
          camera.convertToScreen_yjiq68$(obj, this.screen.size, adjustWithX);
          (tmp$_0 = particle.sprite) != null ? (tmp$_0.SetPosition_dleff0$(obj.screenPosition.x + center.x, obj.screenPosition.y + center.y), Unit) : null;
          if (particle.fixScreenZ === true) {
            (tmp$_1 = particle.sprite) != null ? (tmp$_1.SetZPosition_8ca0d4$(particle.screenZ), Unit) : null;
          }
           else {
            (tmp$_2 = particle.sprite) != null ? (tmp$_2.SetZPosition_8ca0d4$(-obj.convertPosition.z + center.z), Unit) : null;
          }
          (tmp$_3 = particle.sprite) != null ? (tmp$_3.SetRotation_mx4ult$(obj.direction.z * (math.PI / 180.0)), Unit) : null;
          if (Kotlin.isType(obj, Background)) {
            (tmp$_4 = particle.sprite) != null ? (tmp$_4.SetSize_dleff0$(obj.size, obj.size), Unit) : null;
          }
           else {
            var tmp$_16 = obj.screenSize.width;
            var x = obj.direction.x;
            var x_0 = Math_0.cos(x);
            var width = tmp$_16 * Math_0.abs(x_0);
            var tmp$_17 = obj.screenSize.height;
            var x_1 = obj.direction.y;
            var x_2 = Math_0.cos(x_1);
            var height = tmp$_17 * Math_0.abs(x_2);
            (tmp$_5 = particle.sprite) != null ? (tmp$_5.SetSize_dleff0$(width, height), Unit) : null;
          }
        }
        var polygon = Kotlin.isType(tmp$_6 = obj, Polygon) ? tmp$_6 : null;
        if (polygon != null) {
          var isCliped = false;
          var screenVertex = ArrayList_init();
          tmp$_7 = polygon.GetVertexCount() - 1 | 0;
          for (var i_0 = 0; i_0 <= tmp$_7; i_0++) {
            if (polygon.convertedVertex.get_za3lpa$(i_0).z > camera.focalLength && polygon.convertedVertex.get_za3lpa$(i_0).z < camera.farMost) {
              var v = camera.convertToScreen_l3vh3t$(polygon.convertedVertex.get_za3lpa$(i_0), this.screen.size, adjustWithX);
              screenVertex.add_11rb$(v);
              (tmp$_8 = polygon.GetSprite_za3lpa$(i_0)) != null ? (tmp$_8.SetPosition_dleff0$(v.x + center.x, v.y + center.y), Unit) : null;
              (tmp$_9 = polygon.GetSprite_za3lpa$(i_0)) != null ? (tmp$_9.SetZPosition_8ca0d4$(-v.z), Unit) : null;
            }
             else {
              isCliped = true;
            }
          }
          if (isCliped === false) {
            if (polygon.isLined === true) {
              tmp$_10 = polygon.GetVertexCount() - 1 | 0;
              for (var i_1 = 0; i_1 <= tmp$_10; i_1++) {
                var deltaX = screenVertex.get_za3lpa$(i_1 + 1 | 0).x - screenVertex.get_za3lpa$(i_1).x;
                var deltaY = screenVertex.get_za3lpa$(i_1 + 1 | 0).y - screenVertex.get_za3lpa$(i_1).y;
                var x_3 = deltaX * deltaX + deltaY * deltaY;
                var length = Math_0.sqrt(x_3);
                (tmp$_11 = polygon.GetSprite_za3lpa$(i_1)) != null ? (tmp$_11.SetSize_dleff0$(length, 1.0), Unit) : null;
                var y = -deltaY;
                var r = Math_0.atan2(y, deltaX);
                (tmp$_12 = polygon.GetSprite_za3lpa$(i_1)) != null ? (tmp$_12.SetRotation_mx4ult$(r), Unit) : null;
              }
              var end = polygon.GetVertexCount() - 1 | 0;
              if (polygon.isClosed === true) {
                var end_0 = polygon.GetVertexCount() - 1 | 0;
                var deltaX_0 = screenVertex.get_za3lpa$(0).x - screenVertex.get_za3lpa$(end_0).x;
                var deltaY_0 = screenVertex.get_za3lpa$(0).y - screenVertex.get_za3lpa$(end_0).y;
                var x_4 = deltaX_0 * deltaX_0 + deltaY_0 * deltaY_0;
                var length_0 = Math_0.sqrt(x_4);
                (tmp$_13 = polygon.GetSprite_za3lpa$(end_0)) != null ? (tmp$_13.SetSize_dleff0$(length_0, 1.0), Unit) : null;
                var y_0 = -deltaY_0;
                var r_0 = Math_0.atan2(y_0, deltaX_0);
                (tmp$_14 = polygon.GetSprite_za3lpa$(end_0)) != null ? (tmp$_14.SetRotation_mx4ult$(r_0), Unit) : null;
              }
               else {
                (tmp$_15 = polygon.GetSprite_za3lpa$(end)) != null ? (tmp$_15.SetSize_dleff0$(0.0, 0.0), Unit) : null;
              }
            }
          }
           else {
            polygon.SetSubAlpha_mx4ult$(0.0);
          }
        }
      }
       else {
        obj.SetSubAlpha_mx4ult$(0.0);
      }
      i = i + 1 | 0;
    }
  };
  ParticleManager.prototype.GetParticle_dqye30$ = function (ignoreMax, poolable) {
    if (ignoreMax === void 0)
      ignoreMax = false;
    if (ignoreMax === true || this.GetTotalParticleCount() < this.maxParticle) {
      var obj = new Particle();
      if (this.GetTotalParticleCount() >= this.maxParticle) {
        this.addObject_293dsg$(obj, false);
      }
       else {
        this.addObject_293dsg$(obj, poolable);
      }
      return obj;
    }
    return null;
  };
  ParticleManager.prototype.createParticle_t3d6nt$ = function (x, y, z, mx, my, mz, rx, ry, rz, size, timeToLive, image, ignoreMax, poolable, fixScreenZ, screenZ, parent, callback) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (z === void 0)
      z = 0.0;
    if (mx === void 0)
      mx = 0.0;
    if (my === void 0)
      my = 0.0;
    if (mz === void 0)
      mz = 0.0;
    if (rx === void 0)
      rx = 0.0;
    if (ry === void 0)
      ry = 0.0;
    if (rz === void 0)
      rz = 0.0;
    if (size === void 0)
      size = 1.0;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (ignoreMax === void 0)
      ignoreMax = false;
    if (poolable === void 0)
      poolable = false;
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (parent === void 0)
      parent = null;
    if (callback === void 0)
      callback = null;
    var tmp$;
    var obj = this.GetParticle_dqye30$(ignoreMax, poolable);
    if (obj != null) {
      obj.position.x = x;
      obj.position.y = y;
      obj.position.z = z;
      obj.movement.x = mx;
      obj.movement.y = my;
      obj.movement.z = mz;
      obj.rotation.x = rx;
      obj.rotation.y = ry;
      obj.rotation.z = rz;
      obj.size = size;
      obj.fixScreenZ = fixScreenZ;
      obj.screenZ = screenZ;
      obj.timeToLive = timeToLive;
      obj.poolable = poolable;
      var sprite = Sprite_init(x, y, z, image);
      sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      var parent_0 = parent;
      if (parent_0 == null) {
        parent_0 = this.spriteParent;
      }
      ensureNotNull(parent_0).addChild_g5h3xp$(sprite);
      if (obj.sprite != null) {
        (tmp$ = obj.sprite) != null ? (tmp$.removeFromParent(), Unit) : null;
        obj.sprite = null;
      }
      obj.sprite = sprite;
      obj.SetOriginalAlpha_mx4ult$(0.0);
      obj.willBeDestroyed = null;
      if (callback != null) {
        obj.willBeDestroyed = callback;
      }
      return obj;
    }
    return null;
  };
  ParticleManager.prototype.createParticle_eg0pll$ = function (x, y, z, mx, my, mz, rx, ry, rz, size, timeToLive, sprite, ignoreMax, poolable, fixScreenZ, screenZ, callback) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (z === void 0)
      z = 0.0;
    if (mx === void 0)
      mx = 0.0;
    if (my === void 0)
      my = 0.0;
    if (mz === void 0)
      mz = 0.0;
    if (rx === void 0)
      rx = 0.0;
    if (ry === void 0)
      ry = 0.0;
    if (rz === void 0)
      rz = 0.0;
    if (size === void 0)
      size = 1.0;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (ignoreMax === void 0)
      ignoreMax = false;
    if (poolable === void 0)
      poolable = false;
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (callback === void 0)
      callback = null;
    var tmp$;
    var obj = this.GetParticle_dqye30$(ignoreMax, poolable);
    if (obj != null) {
      obj.position.x = x;
      obj.position.y = y;
      obj.position.z = z;
      obj.movement.x = mx;
      obj.movement.y = my;
      obj.movement.z = mz;
      obj.rotation.x = rx;
      obj.rotation.y = ry;
      obj.rotation.z = rz;
      obj.size = size;
      obj.fixScreenZ = fixScreenZ;
      obj.screenZ = screenZ;
      obj.timeToLive = timeToLive;
      obj.poolable = false;
      if (obj.sprite != null) {
        (tmp$ = obj.sprite) != null ? (tmp$.removeFromParent(), Unit) : null;
      }
      obj.sprite = sprite;
      obj.SetOriginalAlpha_mx4ult$(0.0);
      obj.willBeDestroyed = null;
      if (callback != null) {
        obj.willBeDestroyed = callback;
      }
      return obj;
    }
    return null;
  };
  ParticleManager.prototype.createBackground_sabvgg$ = function (x, y, z, mx, my, mz, rx, ry, rz, size, timeToLive, sprite, ignoreMax, callback) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (z === void 0)
      z = 0.0;
    if (mx === void 0)
      mx = 0.0;
    if (my === void 0)
      my = 0.0;
    if (mz === void 0)
      mz = 0.0;
    if (rx === void 0)
      rx = 0.0;
    if (ry === void 0)
      ry = 0.0;
    if (rz === void 0)
      rz = 0.0;
    if (size === void 0)
      size = 1.0;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (ignoreMax === void 0)
      ignoreMax = false;
    if (callback === void 0)
      callback = null;
    var obj = new Background();
    obj.position.x = x;
    obj.position.y = y;
    obj.position.z = z;
    obj.movement.x = mx;
    obj.movement.y = my;
    obj.movement.z = mz;
    obj.rotation.x = rx;
    obj.rotation.y = ry;
    obj.rotation.z = rz;
    obj.size = size;
    obj.timeToLive = timeToLive;
    obj.poolable = false;
    obj.sprite = sprite;
    if (callback != null) {
      obj.willBeDestroyed = callback;
    }
    this.addObject_293dsg$(obj, false);
    return obj;
  };
  ParticleManager.prototype.createPolygon_r7vjov$ = function (position, v1, v2, v3, image, isClosed) {
    if (isClosed === void 0)
      isClosed = true;
    return this.createPolygon_yfyqk0$(position, listOf_0([v1, v2, v3]), image, isClosed);
  };
  ParticleManager.prototype.createPolygon_yfyqk0$ = function (position, vertex, image, isClosed) {
    if (isClosed === void 0)
      isClosed = true;
    var tmp$, tmp$_0;
    var spriteList = ArrayList_init();
    tmp$ = vertex.iterator();
    while (tmp$.hasNext()) {
      var i = tmp$.next();
      var sprite = Sprite_init(0.0, 0.0, 0.0, image);
      sprite.SetAlpha_8ca0d4$(0.0);
      sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
      (tmp$_0 = this.spriteParent) != null ? (tmp$_0.addChild_g5h3xp$(sprite), Unit) : null;
      spriteList.add_11rb$(sprite);
    }
    var polygon = Polygon_init_0(vertex, spriteList, isClosed);
    polygon.position = Position$Companion_getInstance().copy_qgvyiu$(position);
    this.objList.add_11rb$(polygon);
    return polygon;
  };
  ParticleManager.prototype.createBackground_yde864$ = function (x, y, z, size, image, color, blendMode, callback) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (blendMode === void 0)
      blendMode = 0;
    if (callback === void 0)
      callback = null;
    var tmp$;
    var sprite = Sprite_init(x, y, z, image);
    sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    sprite.SetColor_vnjrmz$(color);
    sprite.SetAlpha_8ca0d4$(1.0);
    sprite.SetBlendFactor_mx4ult$(1.0);
    if (blendMode === 0) {
      sprite.SetBlendMode_ieo8yr$(BlendMode$alpha_getInstance());
    }
    if (blendMode === 1) {
      sprite.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
    }
    (tmp$ = this.spriteParent) != null ? (tmp$.addChild_g5h3xp$(sprite), Unit) : null;
    var obj = this.createBackground_sabvgg$(x, y, z, void 0, void 0, void 0, void 0, void 0, void 0, size, void 0, sprite, void 0, callback);
    return obj;
  };
  ParticleManager.prototype.createStar_2a19qk$ = function (x, y, z, size, image, color, blendMode, ignoreMax, poolable, fixScreenZ, screenZ, parent, callback) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (blendMode === void 0)
      blendMode = 1;
    if (ignoreMax === void 0)
      ignoreMax = false;
    if (poolable === void 0)
      poolable = false;
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (parent === void 0)
      parent = null;
    if (callback === void 0)
      callback = null;
    var obj = this.createParticle_t3d6nt$(x, y, z, void 0, void 0, void 0, void 0, void 0, void 0, size, void 0, image, ignoreMax, poolable, fixScreenZ, screenZ, parent, callback);
    if (obj != null) {
      var sprite = obj.GetSprite();
      if (sprite != null) {
        sprite.SetColor_vnjrmz$(color);
        sprite.SetAlpha_8ca0d4$(0.0);
        sprite.SetBlendFactor_mx4ult$(1.0);
        if (blendMode === 0) {
          sprite.SetBlendMode_ieo8yr$(BlendMode$alpha_getInstance());
        }
        if (blendMode === 1) {
          sprite.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
        }
      }
      obj.SetOriginalAlpha_mx4ult$(1.0);
      return obj;
    }
    return null;
  };
  ParticleManager.prototype.createPaper_k1bx6r$ = function (x, y, z, accel, size, image, color, poolable, fixScreenZ, screenZ, callback) {
    if (z === void 0)
      z = 100.0;
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (poolable === void 0)
      poolable = false;
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (callback === void 0)
      callback = null;
    var obj = this.createParticle_t3d6nt$(x, y, z, void 0, void 0, void 0, void 0, void 0, void 0, size, void 0, image, void 0, poolable, fixScreenZ, screenZ, void 0, callback);
    if (obj != null) {
      var sprite = obj.GetSprite();
      if (sprite != null) {
        sprite.SetColor_vnjrmz$(color);
        sprite.SetBlendFactor_mx4ult$(1.0);
      }
      obj.rotation.z = Random_getInstance().arc4random_uniform_za3lpa$(10) - 5;
      if (obj.rotation.z === 0.0) {
        obj.rotation.z = 1.0;
      }
      obj.rotation.x = Random_getInstance().arc4random_uniform_za3lpa$(10) + 10.0;
      obj.rotation.x = obj.rotation.x * (Random_getInstance().arc4random_uniform_za3lpa$(2) === 0 ? 1 : -1);
      obj.rotation.x = obj.rotation.x / 10;
      obj.rotation.y = 0.0;
      obj.movement.y = 0.0;
      if (obj.position.x > 0) {
        obj.movement.x = obj.movement.x * -1;
      }
      obj.accel.x = accel.x;
      obj.accel.y = accel.y;
      return obj;
    }
    return null;
  };
  function ParticleManager$createExplosion$lambda(closure$particle) {
    return function (obj, camera, elapsed) {
      if (obj.age > obj.timeToLive - 1.0) {
        closure$particle.SetOriginalAlpha_mx4ult$(1 - (obj.age - (obj.timeToLive - 1.0)));
      }
      return false;
    };
  }
  ParticleManager.prototype.createExplosion_3jyyep$ = function (pos, r, num, size, time, image, color, mStart, mEnd, fixScreenZ, screenZ) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    var tmp$;
    var startDegree = Random_getInstance().arc4random_uniform_za3lpa$(360);
    var delta = 360 / num;
    tmp$ = num - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var createPos = Position_init(r, 0.0, 0.0);
      createPos.rotateZ_mx4ult$(startDegree + i * delta);
      var particle = this.createStar_2a19qk$(pos.x + createPos.x, pos.y + createPos.y, pos.z, size, image, color, void 0, void 0, true, fixScreenZ, screenZ);
      if (particle != null) {
        particle.timeToLive = time + Random_getInstance().arc4random_uniform_za3lpa$(3) / 10.0;
        particle.SetOriginalAlpha_mx4ult$(1.0);
        createPos.normalize();
        var x = mEnd.x - mStart.x;
        var mxRange = numberToInt(Math_0.abs(x));
        particle.movement.x = createPos.normalX * (Random_getInstance().arc4random_uniform_za3lpa$(mxRange) + mStart.x);
        var x_0 = mEnd.y - mStart.y;
        var myRange = numberToInt(Math_0.abs(x_0));
        particle.movement.y = createPos.normalY * (Random_getInstance().arc4random_uniform_za3lpa$(myRange) + mStart.y);
        var x_1 = mEnd.z - mStart.z;
        var mzRange = numberToInt(Math_0.abs(x_1));
        if (mEnd.z < mStart.z) {
          particle.movement.z = (-1 * Random_getInstance().arc4random_uniform_za3lpa$(mzRange) | 0) + mStart.z;
        }
         else {
          particle.movement.z = Random_getInstance().arc4random_uniform_za3lpa$(mzRange) + mStart.z;
        }
        particle.rotation.z = (Random_getInstance().arc4random_uniform_za3lpa$(20) - 10) / 10.0;
        particle.keepDirection = true;
        particle.SetCallback_lnidq9$(ParticleManager$createExplosion$lambda(particle));
      }
    }
  };
  function ParticleManager$createFairy$lambda(closure$particle, closure$color, closure$blink) {
    return function (obj, camera, elapsed) {
      if (obj.age < 0.5) {
        closure$particle.SetOriginalAlpha_mx4ult$(closure$color.a * (obj.age * 2));
      }
       else if (obj.age > obj.timeToLive - 1.0) {
        closure$particle.SetOriginalAlpha_mx4ult$(closure$color.a - (obj.age - (obj.timeToLive - 1.0)));
      }
       else {
        if (closure$blink === true) {
          var r = Random_getInstance().arc4random_uniform_za3lpa$(200);
          if (r < 5) {
            closure$particle.SetOriginalAlpha_mx4ult$(closure$color.a * 0.5);
          }
           else if (r < 10) {
            closure$particle.SetOriginalAlpha_mx4ult$(0.0);
          }
           else {
            closure$particle.SetOriginalAlpha_mx4ult$(closure$color.a);
          }
        }
      }
      return false;
    };
  }
  ParticleManager.prototype.createFairy_hcj0m5$ = function (pos, r, num, size, time, image, color, mStart, mEnd, movementMax, blink, fixScreenZ, screenZ, parent) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (movementMax === void 0)
      movementMax = kotlin_js_internal_FloatCompanionObject.POSITIVE_INFINITY;
    if (blink === void 0)
      blink = false;
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (parent === void 0)
      parent = null;
    var tmp$;
    tmp$ = num - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var createPos = Position_init(r, 0.0, 0.0);
      createPos.rotateZ_mx4ult$(Random_getInstance().arc4random_uniform_za3lpa$(360));
      var particle = this.createStar_2a19qk$(pos.x + createPos.x, pos.y + createPos.y, pos.z, size, image, color, void 0, void 0, true, fixScreenZ, screenZ, parent);
      if (particle != null) {
        particle.timeToLive = time + Random_getInstance().arc4random_uniform_za3lpa$(5) / 10.0;
        particle.SetOriginalAlpha_mx4ult$(color.a);
        createPos.normalize();
        var x = mEnd.x - mStart.x;
        var mxRange = numberToInt(Math_0.abs(x));
        particle.movement.x = createPos.normalX * (Random_getInstance().arc4random_uniform_za3lpa$(mxRange) + mStart.x);
        var x_0 = mEnd.y - mStart.y;
        var myRange = numberToInt(Math_0.abs(x_0));
        particle.movement.y = createPos.normalY * (Random_getInstance().arc4random_uniform_za3lpa$(myRange) + mStart.y);
        particle.movementMax = movementMax;
        var x_1 = mEnd.z - mStart.z;
        var mzRange = numberToInt(Math_0.abs(x_1));
        if (mEnd.z < mStart.z) {
          particle.movement.z = (-1 * Random_getInstance().arc4random_uniform_za3lpa$(mzRange) | 0) + mStart.z;
        }
         else {
          particle.movement.z = Random_getInstance().arc4random_uniform_za3lpa$(mzRange) + mStart.z;
        }
        particle.rotation.z = (Random_getInstance().arc4random_uniform_za3lpa$(20) - 10 | 0) / 10.0;
        particle.keepDirection = true;
        particle.SetCallback_lnidq9$(ParticleManager$createFairy$lambda(particle, color, blink));
      }
    }
  };
  function ParticleManager$createFairy2$lambda(closure$particle, closure$color, closure$blink) {
    return function (obj, camera, elapsed) {
      if (obj.age < 0.5) {
        closure$particle.SetOriginalAlpha_mx4ult$(closure$color.a * (obj.age * 2));
      }
       else if (obj.age > obj.timeToLive - 1.0) {
        closure$particle.SetOriginalAlpha_mx4ult$(closure$color.a - (obj.age - (obj.timeToLive - 1.0)));
      }
       else {
        if (closure$blink === true) {
          if (closure$particle.GetOriginalAlpha() === 0.0) {
            var r = Random_getInstance().arc4random_uniform_za3lpa$(100);
            if (r < 50) {
              closure$particle.SetOriginalAlpha_mx4ult$(closure$color.a);
            }
          }
           else {
            var r_0 = Random_getInstance().arc4random_uniform_za3lpa$(200);
            if (r_0 < 5) {
              closure$particle.SetOriginalAlpha_mx4ult$(0.0);
            }
          }
        }
      }
      var degree = Random_getInstance().arc4random_uniform_za3lpa$(300);
      if (degree < 60) {
        closure$particle.movement.rotateZ_mx4ult$(degree - 30 | 0);
      }
      return false;
    };
  }
  ParticleManager.prototype.createFairy2_emwd81$ = function (pos, r, size, time, image, color, mStart, mEnd, movementMax, blink, fixScreenZ, screenZ, parent) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (movementMax === void 0)
      movementMax = kotlin_js_internal_FloatCompanionObject.POSITIVE_INFINITY;
    if (blink === void 0)
      blink = false;
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (parent === void 0)
      parent = null;
    var createPos = Position_init(r, 0.0, 0.0);
    createPos.rotateZ_mx4ult$(Random_getInstance().arc4random_uniform_za3lpa$(360));
    var particle = this.createStar_2a19qk$(pos.x, pos.y, pos.z, size, image, color, void 0, void 0, true, fixScreenZ, screenZ, parent);
    if (particle != null) {
      particle.timeToLive = time + Random_getInstance().arc4random_uniform_za3lpa$(5) / 10.0;
      particle.SetOriginalAlpha_mx4ult$(color.a);
      createPos.normalize();
      var x = mEnd.x - mStart.x;
      var mxRange = numberToInt(Math_0.abs(x));
      particle.movement.x = createPos.normalX * (Random_getInstance().arc4random_uniform_za3lpa$(mxRange) + mStart.x);
      var x_0 = mEnd.y - mStart.y;
      var myRange = numberToInt(Math_0.abs(x_0));
      particle.movement.y = createPos.normalY * (Random_getInstance().arc4random_uniform_za3lpa$(myRange) + mStart.y);
      particle.movementMax = movementMax;
      var x_1 = mEnd.z - mStart.z;
      var mzRange = numberToInt(Math_0.abs(x_1));
      if (mEnd.z < mStart.z) {
        particle.movement.z = (-1 * Random_getInstance().arc4random_uniform_za3lpa$(mzRange) | 0) + mStart.z;
      }
       else {
        particle.movement.z = Random_getInstance().arc4random_uniform_za3lpa$(mzRange) + mStart.z;
      }
      particle.SetCallback_lnidq9$(ParticleManager$createFairy2$lambda(particle, color, blink));
      return particle;
    }
    return null;
  };
  function ParticleManager$createHoming$lambda(closure$particle, closure$target, closure$fix, closure$delta) {
    return function (obj, camera, elapsed) {
      if (obj.age > obj.timeToLive - 1) {
        closure$particle.SetOriginalAlpha_mx4ult$(1 - (obj.age - (obj.timeToLive - 1)));
      }
      if (obj.age < 0.25) {
        return false;
      }
       else {
        var v = Vector_init_0(closure$particle.position, closure$target);
        var distance = Position$Companion_getInstance().distanceToSegment_tnhs7q$(obj.prevPosition, obj.position, closure$target);
        if (distance >= 0 && distance < 10) {
          obj.accel.x = 0.0;
          obj.accel.y = 0.0;
          obj.movement.x = 0.0;
          obj.movement.y = 0.0;
        }
         else if (obj.position.y - closure$target.y < 10) {
          closure$fix.v = false;
          closure$delta.v = v.angleBetween_qgvyiu$(closure$particle.movement);
          if (closure$delta.v > 180) {
            closure$delta.v -= 360;
          }
          if (closure$delta.v < -180) {
            closure$delta.v += 360;
          }
          closure$delta.v = closure$delta.v / 0.05;
        }
        if (closure$fix.v === true) {
          obj.accel.x = v.point.x * 20;
          obj.accel.y = v.point.y * 20;
        }
         else {
          obj.accel.x = v.point.x * 15;
          obj.accel.y = v.point.y * 15;
          var gap = v.angleBetween_qgvyiu$(obj.movement);
          if (gap > 180) {
            gap -= 360;
          }
          if (gap < -180) {
            gap += 360;
          }
          var add = closure$delta.v * elapsed;
          var x = add;
          if (Math_0.abs(x) >= gap) {
            add = gap;
            obj.accel.x = v.point.x * 20;
            obj.accel.y = v.point.y * 20;
            closure$fix.v = true;
          }
          obj.movement.rotateZ_mx4ult$(add);
        }
      }
      return false;
    };
  }
  ParticleManager.prototype.createHoming_nxmntm$ = function (target, pos, r, num, size, time, image, color, mStart, mEnd, fixScreenZ, screenZ, ignoreMax) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (ignoreMax === void 0)
      ignoreMax = false;
    var tmp$;
    tmp$ = num - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var createPos = Position_init(r, 0.0, 0.0);
      createPos.rotateZ_mx4ult$(Random_getInstance().arc4random_uniform_za3lpa$(360));
      var particle = this.createStar_2a19qk$(pos.x, pos.y, pos.z, size, image, color, 1, ignoreMax, true, fixScreenZ, screenZ);
      if (particle != null) {
        particle.timeToLive = time;
        particle.SetOriginalAlpha_mx4ult$(1.0);
        createPos.normalize();
        var x = mEnd.x - mStart.x;
        var mxRange = numberToInt(Math_0.abs(x));
        particle.movement.x = createPos.normalX * (Random_getInstance().arc4random_uniform_za3lpa$(mxRange) + mStart.x) * 4;
        var x_0 = mEnd.y - mStart.y;
        var myRange = numberToInt(Math_0.abs(x_0));
        particle.movement.y = createPos.normalY * (Random_getInstance().arc4random_uniform_za3lpa$(myRange) + mStart.y) * 4;
        var x_1 = mEnd.z - mStart.z;
        var mzRange = numberToInt(Math_0.abs(x_1));
        if (mEnd.z < mStart.z) {
          particle.movement.z = (-1 * Random_getInstance().arc4random_uniform_za3lpa$(mzRange) | 0) + mStart.z;
        }
         else {
          particle.movement.z = Random_getInstance().arc4random_uniform_za3lpa$(mzRange) + mStart.z;
        }
        particle.accel.x = particle.movement.x * 3;
        particle.accel.y = particle.movement.y * 3;
        particle.accel.z = 0.0;
        particle.rotation.z = (Random_getInstance().arc4random_uniform_za3lpa$(20) - 10 | 0) / 10.0;
        particle.keepDirection = true;
        var fix = {v: false};
        var v = Vector_init_0(particle.position, target);
        var delta = {v: v.angleBetween_qgvyiu$(particle.movement)};
        if (delta.v > 180) {
          delta.v -= 360;
        }
        if (delta.v < -180) {
          delta.v += 360;
        }
        delta.v = delta.v / 0.3;
        particle.SetCallback_lnidq9$(ParticleManager$createHoming$lambda(particle, target, fix, delta));
      }
    }
  };
  function ParticleManager$createHoming2$lambda(closure$particle, closure$fix, closure$target) {
    return function (obj, camera, elapsed) {
      if (obj.age > obj.timeToLive - 1) {
        closure$particle.SetOriginalAlpha_mx4ult$(1 - (obj.age - (obj.timeToLive - 1)));
      }
      if (obj.age < 0.2) {
        return false;
      }
       else {
        if (closure$fix.v === true) {
          var v = Vector_init_0(closure$particle.position, closure$target);
          obj.accel.x = v.point.x * 15;
          obj.accel.y = v.point.y * 15;
        }
         else {
          obj.movement.x = 0.0;
          obj.movement.y = 0.0;
          obj.movement.z = 0.0;
          obj.accel.x = 0.0;
          obj.accel.y = 0.0;
          obj.accel.z = 0.0;
          closure$fix.v = true;
        }
      }
      if (obj.position.y < closure$target.y) {
        obj.movement.y = obj.movement.y / obj.movement.y;
        obj.movement.y = obj.movement.y * 3;
        obj.movement.x = obj.movement.x / obj.movement.x;
        obj.movement.x = obj.movement.x * 3;
      }
      return false;
    };
  }
  ParticleManager.prototype.createHoming2_nxmntm$ = function (target, pos, r, num, size, time, image, color, mStart, mEnd, fixScreenZ, screenZ, ignoreMax) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (fixScreenZ === void 0)
      fixScreenZ = false;
    if (screenZ === void 0)
      screenZ = 0.0;
    if (ignoreMax === void 0)
      ignoreMax = false;
    var tmp$;
    tmp$ = num - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var createPos = Position_init(r, 0.0, 0.0);
      createPos.rotateZ_mx4ult$(Random_getInstance().arc4random_uniform_za3lpa$(360));
      var particle = this.createStar_2a19qk$(pos.x, pos.y, pos.z, size, image, color, 1, ignoreMax, true, fixScreenZ, screenZ);
      if (particle != null) {
        particle.timeToLive = time;
        particle.SetOriginalAlpha_mx4ult$(1.0);
        createPos.normalize();
        var x = mEnd.x - mStart.x;
        var mxRange = numberToInt(Math_0.abs(x));
        particle.movement.x = createPos.normalX * (Random_getInstance().arc4random_uniform_za3lpa$(mxRange) + mStart.x) * 4;
        particle.accel.x = particle.movement.x * 10;
        var x_0 = mEnd.y - mStart.y;
        var myRange = numberToInt(Math_0.abs(x_0));
        particle.movement.y = createPos.normalY * (Random_getInstance().arc4random_uniform_za3lpa$(myRange) + mStart.y) * 4;
        particle.accel.y = particle.movement.y * 10;
        var x_1 = mEnd.z - mStart.z;
        var mzRange = numberToInt(Math_0.abs(x_1));
        if (mEnd.z < mStart.z) {
          particle.movement.z = (-1 * Random_getInstance().arc4random_uniform_za3lpa$(mzRange) | 0) + mStart.z;
        }
         else {
          particle.movement.z = Random_getInstance().arc4random_uniform_za3lpa$(mzRange) + mStart.z;
        }
        particle.rotation.z = (Random_getInstance().arc4random_uniform_za3lpa$(20) - 10 | 0) / 10.0;
        particle.keepDirection = true;
        var fix = {v: false};
        particle.SetCallback_lnidq9$(ParticleManager$createHoming2$lambda(particle, fix, target));
      }
    }
  };
  ParticleManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ParticleManager',
    interfaces: []
  };
  function ParticleManager_init(screen, spriteParent, $this) {
    if (spriteParent === void 0)
      spriteParent = null;
    $this = $this || Object.create(ParticleManager.prototype);
    ParticleManager.call($this);
    $this.screen = screen;
    if (spriteParent == null) {
      $this.spriteParent = screen;
    }
     else {
      $this.spriteParent = spriteParent;
    }
    $this.camera = Camera_init_0(20.0, Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 100.0);
    return $this;
  }
  function Motion(speed, accel, position) {
    if (speed === void 0)
      speed = 0.0;
    if (accel === void 0)
      accel = 0.0;
    if (position === void 0)
      position = 0.0;
    this.scale = 1.0;
    this.time = 0.0;
    this.timeMultiplier = 1.0;
    this.initialSpeed = speed;
    this.initialAccel = accel;
    this.initialPosition = position;
    this.speed = speed;
    this.accel = accel;
    this.position = position;
    this.speedDelta = 0.0;
    this.accelDelta = 0.0;
    this.positionDelta = 0.0;
    this.flip = false;
    this.peakRetain = 0.0;
    this.peakHeight = 0.0;
    this.targetTime = 0.0;
    this.reentryTime = 0.0;
    this.finish = false;
  }
  Motion.prototype.reset_y2kzbl$ = function (speed, accel, position) {
    if (speed === void 0)
      speed = 0.0;
    if (accel === void 0)
      accel = 0.0;
    if (position === void 0)
      position = 0.0;
    this.initialSpeed = speed;
    this.initialAccel = accel;
    this.initialPosition = position;
    this.speed = this.initialSpeed;
    this.accel = this.initialAccel;
    this.position = this.initialPosition;
    this.speedDelta = 0.0;
    this.accelDelta = 0.0;
    this.positionDelta = 0.0;
    this.time = 0.0;
    this.timeMultiplier = 1.0;
    this.flip = false;
    this.peakRetain = 0.0;
    this.peakHeight = 0.0;
    this.targetTime = 0.0;
    this.reentryTime = 0.0;
  };
  Motion.prototype.SetTarget_nfvrp9$ = function (height, accel, targetTime, flip, peakRetain) {
    if (targetTime === void 0)
      targetTime = 0.0;
    if (flip === void 0)
      flip = false;
    if (peakRetain === void 0)
      peakRetain = 0.0;
    var x = 2 * accel * (height - this.initialPosition);
    var x_0 = Math_0.abs(x);
    var speed = Math_0.sqrt(x_0);
    if (accel < 0) {
      var x_1 = speed;
      speed = Math_0.abs(x_1);
    }
    if (accel > 0) {
      var x_2 = speed;
      speed = -1 * Math_0.abs(x_2);
    }
    this.initialSpeed = speed;
    this.initialAccel = accel;
    this.speed = this.initialSpeed;
    this.accel = this.initialAccel;
    var time = -1 * speed / accel;
    if (targetTime !== 0.0) {
      this.timeMultiplier = time / targetTime;
    }
    this.peakHeight = height;
    this.flip = flip;
    this.peakRetain = peakRetain;
    this.targetTime = targetTime * this.timeMultiplier;
  };
  Motion.prototype.SetScale_mx4ult$ = function (scale) {
    if (scale === void 0)
      scale = 1.0;
    this.scale = scale;
  };
  Motion.prototype.SetTimeMultiplier_mx4ult$ = function (multi) {
    if (multi === void 0)
      multi = 1.0;
    this.timeMultiplier = multi;
  };
  Motion.prototype.update_mx4ult$ = function (elapsed) {
    var elapsed_0 = elapsed * this.timeMultiplier;
    this.time = this.time + elapsed_0;
    if (this.time < this.reentryTime || this.reentryTime === -1.0) {
      this.positionDelta = 0.0;
      return this.GetPosition();
    }
    var v0 = this.speed;
    var s0 = this.position;
    this.speed = this.speed + this.accel * elapsed_0;
    this.speedDelta = this.speed - v0;
    if (this.targetTime !== 0.0 && this.time >= this.targetTime) {
      var skip = false;
      if (this.flip === true) {
        this.accel = -1 * this.accel;
        this.speed = 0.0;
        this.speedDelta = this.speed - v0;
        this.position = this.peakHeight;
        this.positionDelta = this.position - s0;
        this.flip = false;
        this.targetTime = 0.0;
        skip = true;
      }
      if (this.peakRetain !== 0.0) {
        this.speedDelta = 0 - v0;
        this.position = this.peakHeight;
        this.positionDelta = this.peakHeight - s0;
        if (this.peakRetain === -1.0) {
          this.reentryTime = -1.0;
          this.finish = true;
        }
         else {
          this.reentryTime = this.time + this.peakRetain * this.timeMultiplier;
        }
        skip = true;
      }
      if (skip === true) {
        return this.GetPosition();
      }
    }
    this.position = s0 + v0 * elapsed_0 + 0.5 * (this.accel * elapsed_0 * elapsed_0);
    this.positionDelta = this.position - s0;
    return this.GetPosition();
  };
  Motion.prototype.GetSpeed = function () {
    return this.speed;
  };
  Motion.prototype.GetAccel = function () {
    return this.accel;
  };
  Motion.prototype.GetPosition = function () {
    return this.position * this.scale;
  };
  Motion.prototype.GetInitialSpeed = function () {
    return this.initialSpeed;
  };
  Motion.prototype.GetInitialAccel = function () {
    return this.initialAccel;
  };
  Motion.prototype.GetInitialPosition = function () {
    return this.initialPosition;
  };
  Motion.prototype.GetSpeedDelta = function () {
    return this.speedDelta;
  };
  Motion.prototype.GetAccelDelta = function () {
    return this.accelDelta;
  };
  Motion.prototype.GetPositionDelta = function () {
    return this.positionDelta * this.scale;
  };
  Motion.prototype.isFinish = function () {
    return this.finish;
  };
  Motion.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Motion',
    interfaces: []
  };
  function Bounce() {
    this.baseline = 0;
    this.reflection = 0;
    this.terminalVelocity = 0.0;
    this.bounceCount = 0;
    this.targetBounce = -1;
  }
  Bounce.prototype.SetTargetBounce_za3lpa$ = function (bounce) {
    this.targetBounce = bounce;
  };
  Bounce.prototype.update_mx4ult$ = function (elapsed) {
    if (this.targetBounce !== -1 && this.bounceCount >= this.targetBounce) {
      this.finish = true;
    }
    var elapsed_0 = elapsed * this.timeMultiplier;
    this.time = this.time + elapsed_0;
    var speedPrev = this.speed;
    this.speed = this.initialSpeed + this.accel * this.time;
    var prevPosition = this.position;
    this.position = this.initialPosition + this.initialSpeed * this.time + 0.5 * (this.accel * this.time * this.time);
    if (this.position <= this.baseline && this.baseline < prevPosition || (prevPosition < this.baseline && this.baseline <= this.position)) {
      var v = this.terminalVelocity;
      var t = (v - speedPrev) / this.accel;
      var t2 = elapsed_0 - t;
      if (t2 < 0) {
        t2 = 0.0;
      }
      this.initialSpeed = -v * this.reflection;
      this.initialPosition = this.baseline;
      this.time = t2;
      this.terminalVelocity = -this.initialSpeed;
      this.speed = this.initialSpeed + this.accel * this.time;
      this.position = this.initialPosition + this.initialSpeed * this.time + 0.5 * (this.accel * this.time * this.time);
      if (this.accel > 0 && this.position >= this.baseline) {
        this.position = this.baseline;
        this.initialSpeed = 0.0;
        this.initialPosition = this.baseline;
        this.accel = 0.0;
        this.speed = 0.0;
      }
      if (this.accel < 0 && this.position <= this.baseline) {
        this.position = this.baseline;
        this.initialSpeed = 0.0;
        this.initialPosition = this.baseline;
        this.accel = 0.0;
        this.speed = 0.0;
      }
      this.bounceCount = this.bounceCount + 1 | 0;
    }
    this.speedDelta = this.speed - speedPrev;
    this.positionDelta = this.position - prevPosition;
    return this.GetPosition();
  };
  Bounce.prototype.GetBounceCount = function () {
    return this.bounceCount;
  };
  Bounce.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Bounce',
    interfaces: [Motion]
  };
  function Bounce_init(speed, accel, position, baseline, reflection, $this) {
    if (speed === void 0)
      speed = 0.0;
    if (accel === void 0)
      accel = 0.0;
    if (position === void 0)
      position = 0.0;
    if (baseline === void 0)
      baseline = 0.0;
    if (reflection === void 0)
      reflection = 0.0;
    $this = $this || Object.create(Bounce.prototype);
    Motion.call($this, speed, accel, position);
    Bounce.call($this);
    var s = baseline - position;
    $this.baseline = baseline;
    $this.reflection = reflection;
    var x = 2 * accel * s + speed;
    var x_0 = Math_0.abs(x);
    $this.terminalVelocity = Math_0.sqrt(x_0);
    if (accel < 0) {
      var x_1 = $this.terminalVelocity;
      $this.terminalVelocity = -1 * Math_0.abs(x_1);
    }
    if (accel > 0) {
      var x_2 = $this.terminalVelocity;
      $this.terminalVelocity = Math_0.abs(x_2);
    }
    return $this;
  }
  function Wave() {
    this.initialAmplitude = 1.0;
    this.ampAccel = 0.0;
    this.theta = 0.0;
    this.thetaAccum = 0.0;
    this.adjust = 0.0;
    this.amplitude = 1.0;
  }
  Wave.prototype.update_mx4ult$ = function (elapsed) {
    var elapsed_0 = elapsed * this.timeMultiplier;
    this.time = this.time + elapsed_0;
    this.speedDelta = this.speed;
    this.speed = this.initialSpeed + this.accel * this.time;
    if (this.speed < 0) {
      this.speed = 0.0;
    }
    this.speedDelta = this.speed - this.speedDelta;
    this.amplitude = this.amplitude + this.ampAccel * elapsed_0;
    if (this.amplitude < 0) {
      this.amplitude = 0.0;
    }
    this.thetaAccum = this.initialPosition + this.initialSpeed * this.time + 0.5 * (this.accel * this.time * this.time);
    this.theta = this.thetaAccum * (2 * math.PI);
    this.theta = this.theta % (2 * math.PI);
    var temp = this.position;
    var x = this.theta;
    this.position = (Math_0.sin(x) + this.adjust) * this.amplitude;
    this.positionDelta = this.position - temp;
    return this.initialPosition + this.GetPosition();
  };
  Wave.prototype.updateNew_mx4ult$ = function (elapsed) {
    var elapsed_0 = elapsed * this.timeMultiplier;
    this.time = this.time + elapsed_0;
    this.speedDelta = this.speed;
    this.speed = this.speed + this.accel * elapsed_0;
    if (this.speed < 0) {
      this.speed = 0.0;
    }
    this.speedDelta = this.speed - this.speedDelta;
    this.amplitude = this.amplitude + this.ampAccel * elapsed_0;
    if (this.amplitude < 0) {
      this.amplitude = 0.0;
    }
    var distance = this.speed * elapsed_0 + 0.5 * (this.accel * elapsed_0 * elapsed_0);
    this.theta = this.theta + distance * (2 * math.PI);
    this.theta = this.theta % (2 * math.PI);
    this.positionDelta = this.position;
    var x = this.theta;
    this.position = (Math_0.sin(x) + this.adjust) * this.amplitude;
    this.positionDelta = this.position - this.positionDelta;
    return this.GetPosition();
  };
  Wave.prototype.SetAmplitude_mx4ult$ = function (amp) {
    this.amplitude = amp;
  };
  Wave.prototype.GetTheta = function () {
    return this.theta;
  };
  Wave.prototype.GetDegree = function () {
    return this.theta * (180 / math.PI);
  };
  Wave.prototype.GetAccumulateDegree = function () {
    return this.thetaAccum * 360.0;
  };
  Wave.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Wave',
    interfaces: [Motion]
  };
  function Wave_init(speed, accel, position, ampAccel, $this) {
    if (speed === void 0)
      speed = 1.0;
    if (accel === void 0)
      accel = 0.0;
    if (position === void 0)
      position = 0.0;
    if (ampAccel === void 0)
      ampAccel = 0.0;
    $this = $this || Object.create(Wave.prototype);
    Motion.call($this, speed, accel, position);
    Wave.call($this);
    $this.scale = 1.0;
    $this.initialSpeed = speed;
    $this.initialAccel = accel;
    $this.initialPosition = position;
    $this.ampAccel = ampAccel;
    $this.speed = $this.initialSpeed;
    $this.accel = $this.initialAccel;
    $this.position = $this.initialPosition;
    return $this;
  }
  function Wave_init_0(startDegree, speed, accel, position, ampAccel, $this) {
    if (speed === void 0)
      speed = 1.0;
    if (accel === void 0)
      accel = 0.0;
    if (position === void 0)
      position = 0.0;
    if (ampAccel === void 0)
      ampAccel = 0.0;
    $this = $this || Object.create(Wave.prototype);
    Wave_init(speed, accel, position, void 0, $this);
    var startDegree_0 = startDegree;
    startDegree_0 = startDegree_0 % 360;
    $this.initialPosition = startDegree_0;
    $this.position = startDegree_0;
    return $this;
  }
  function HyperTan() {
  }
  HyperTan.prototype.update_mx4ult$ = function (elapsed) {
    var elapsed_0 = elapsed * this.timeMultiplier;
    this.time = this.time + elapsed_0;
    this.speedDelta = this.speed;
    this.speed = this.initialSpeed + this.accel * this.time;
    this.speedDelta = this.speed - this.speedDelta;
    this.positionDelta = this.position;
    var x = this.time * this.initialSpeed;
    this.position = Math_0.tanh(x);
    this.positionDelta = this.position - this.positionDelta;
    return this.GetPosition();
  };
  HyperTan.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HyperTan',
    interfaces: [Motion]
  };
  function HyperTan_init(speed, accel, position, $this) {
    if (speed === void 0)
      speed = 0.0;
    if (accel === void 0)
      accel = 0.0;
    if (position === void 0)
      position = 0.0;
    $this = $this || Object.create(HyperTan.prototype);
    Motion.call($this, speed, accel, position);
    HyperTan.call($this);
    return $this;
  }
  function SceneLayer(name, ordinal, value) {
    Enum.call(this);
    this.value = value;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SceneLayer_initFields() {
    SceneLayer_initFields = function () {
    };
    SceneLayer$spaceDeep_instance = new SceneLayer('spaceDeep', 0, -10000.0);
    SceneLayer$backgroundBottom_instance = new SceneLayer('backgroundBottom', 1, 0.0);
    SceneLayer$background_instance = new SceneLayer('background', 2, 1.0);
    SceneLayer$backgroundTop_instance = new SceneLayer('backgroundTop', 3, 2.0);
    SceneLayer$gameBoardBottom_instance = new SceneLayer('gameBoardBottom', 4, 3.0);
    SceneLayer$gameBoard_instance = new SceneLayer('gameBoard', 5, 4.0);
    SceneLayer$gameBoardTop_instance = new SceneLayer('gameBoardTop', 6, 5.0);
    SceneLayer$gameTileBottom_instance = new SceneLayer('gameTileBottom', 7, 6.0);
    SceneLayer$gameTile_instance = new SceneLayer('gameTile', 8, 7.0);
    SceneLayer$gameTileTop_instance = new SceneLayer('gameTileTop', 9, 8.0);
    SceneLayer$gameEffectBottom_instance = new SceneLayer('gameEffectBottom', 10, 9.0);
    SceneLayer$gameEffect_instance = new SceneLayer('gameEffect', 11, 10.0);
    SceneLayer$gameEffectTop_instance = new SceneLayer('gameEffectTop', 12, 11.0);
    SceneLayer$uiBottom_instance = new SceneLayer('uiBottom', 13, 12.0);
    SceneLayer$ui_instance = new SceneLayer('ui', 14, 13.0);
    SceneLayer$uiTop_instance = new SceneLayer('uiTop', 15, 14.0);
    SceneLayer$uiForemost_instance = new SceneLayer('uiForemost', 16, 16.0);
    SceneLayer$uiModalMask_instance = new SceneLayer('uiModalMask', 17, 50.0);
    SceneLayer$uiModal_instance = new SceneLayer('uiModal', 18, 51.0);
    SceneLayer$parent_instance = new SceneLayer('parent', 19, 99.0);
  }
  var SceneLayer$spaceDeep_instance;
  function SceneLayer$spaceDeep_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$spaceDeep_instance;
  }
  var SceneLayer$backgroundBottom_instance;
  function SceneLayer$backgroundBottom_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$backgroundBottom_instance;
  }
  var SceneLayer$background_instance;
  function SceneLayer$background_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$background_instance;
  }
  var SceneLayer$backgroundTop_instance;
  function SceneLayer$backgroundTop_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$backgroundTop_instance;
  }
  var SceneLayer$gameBoardBottom_instance;
  function SceneLayer$gameBoardBottom_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameBoardBottom_instance;
  }
  var SceneLayer$gameBoard_instance;
  function SceneLayer$gameBoard_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameBoard_instance;
  }
  var SceneLayer$gameBoardTop_instance;
  function SceneLayer$gameBoardTop_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameBoardTop_instance;
  }
  var SceneLayer$gameTileBottom_instance;
  function SceneLayer$gameTileBottom_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameTileBottom_instance;
  }
  var SceneLayer$gameTile_instance;
  function SceneLayer$gameTile_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameTile_instance;
  }
  var SceneLayer$gameTileTop_instance;
  function SceneLayer$gameTileTop_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameTileTop_instance;
  }
  var SceneLayer$gameEffectBottom_instance;
  function SceneLayer$gameEffectBottom_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameEffectBottom_instance;
  }
  var SceneLayer$gameEffect_instance;
  function SceneLayer$gameEffect_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameEffect_instance;
  }
  var SceneLayer$gameEffectTop_instance;
  function SceneLayer$gameEffectTop_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$gameEffectTop_instance;
  }
  var SceneLayer$uiBottom_instance;
  function SceneLayer$uiBottom_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$uiBottom_instance;
  }
  var SceneLayer$ui_instance;
  function SceneLayer$ui_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$ui_instance;
  }
  var SceneLayer$uiTop_instance;
  function SceneLayer$uiTop_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$uiTop_instance;
  }
  var SceneLayer$uiForemost_instance;
  function SceneLayer$uiForemost_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$uiForemost_instance;
  }
  var SceneLayer$uiModalMask_instance;
  function SceneLayer$uiModalMask_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$uiModalMask_instance;
  }
  var SceneLayer$uiModal_instance;
  function SceneLayer$uiModal_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$uiModal_instance;
  }
  var SceneLayer$parent_instance;
  function SceneLayer$parent_getInstance() {
    SceneLayer_initFields();
    return SceneLayer$parent_instance;
  }
  SceneLayer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SceneLayer',
    interfaces: [Enum]
  };
  function SceneLayer$values() {
    return [SceneLayer$spaceDeep_getInstance(), SceneLayer$backgroundBottom_getInstance(), SceneLayer$background_getInstance(), SceneLayer$backgroundTop_getInstance(), SceneLayer$gameBoardBottom_getInstance(), SceneLayer$gameBoard_getInstance(), SceneLayer$gameBoardTop_getInstance(), SceneLayer$gameTileBottom_getInstance(), SceneLayer$gameTile_getInstance(), SceneLayer$gameTileTop_getInstance(), SceneLayer$gameEffectBottom_getInstance(), SceneLayer$gameEffect_getInstance(), SceneLayer$gameEffectTop_getInstance(), SceneLayer$uiBottom_getInstance(), SceneLayer$ui_getInstance(), SceneLayer$uiTop_getInstance(), SceneLayer$uiForemost_getInstance(), SceneLayer$uiModalMask_getInstance(), SceneLayer$uiModal_getInstance(), SceneLayer$parent_getInstance()];
  }
  SceneLayer.values = SceneLayer$values;
  function SceneLayer$valueOf(name) {
    switch (name) {
      case 'spaceDeep':
        return SceneLayer$spaceDeep_getInstance();
      case 'backgroundBottom':
        return SceneLayer$backgroundBottom_getInstance();
      case 'background':
        return SceneLayer$background_getInstance();
      case 'backgroundTop':
        return SceneLayer$backgroundTop_getInstance();
      case 'gameBoardBottom':
        return SceneLayer$gameBoardBottom_getInstance();
      case 'gameBoard':
        return SceneLayer$gameBoard_getInstance();
      case 'gameBoardTop':
        return SceneLayer$gameBoardTop_getInstance();
      case 'gameTileBottom':
        return SceneLayer$gameTileBottom_getInstance();
      case 'gameTile':
        return SceneLayer$gameTile_getInstance();
      case 'gameTileTop':
        return SceneLayer$gameTileTop_getInstance();
      case 'gameEffectBottom':
        return SceneLayer$gameEffectBottom_getInstance();
      case 'gameEffect':
        return SceneLayer$gameEffect_getInstance();
      case 'gameEffectTop':
        return SceneLayer$gameEffectTop_getInstance();
      case 'uiBottom':
        return SceneLayer$uiBottom_getInstance();
      case 'ui':
        return SceneLayer$ui_getInstance();
      case 'uiTop':
        return SceneLayer$uiTop_getInstance();
      case 'uiForemost':
        return SceneLayer$uiForemost_getInstance();
      case 'uiModalMask':
        return SceneLayer$uiModalMask_getInstance();
      case 'uiModal':
        return SceneLayer$uiModal_getInstance();
      case 'parent':
        return SceneLayer$parent_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.graphic.SceneLayer.' + name);
    }
  }
  SceneLayer.valueOf_61zpoe$ = SceneLayer$valueOf;
  function WindowProperty(name, ordinal, mask) {
    Enum.call(this);
    this.mask = mask;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function WindowProperty_initFields() {
    WindowProperty_initFields = function () {
    };
    WindowProperty$None_instance = new WindowProperty('None', 0, 0);
    WindowProperty$CloseButton_instance = new WindowProperty('CloseButton', 1, 1);
    WindowProperty$OkButton_instance = new WindowProperty('OkButton', 2, 2);
    WindowProperty$CancelButton_instance = new WindowProperty('CancelButton', 3, 4);
    WindowProperty$Sizable_instance = new WindowProperty('Sizable', 4, 8);
    WindowProperty$Movable_instance = new WindowProperty('Movable', 5, 16);
    WindowProperty$Modal_instance = new WindowProperty('Modal', 6, 32);
    WindowProperty$Tab_instance = new WindowProperty('Tab', 7, 64);
  }
  var WindowProperty$None_instance;
  function WindowProperty$None_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$None_instance;
  }
  var WindowProperty$CloseButton_instance;
  function WindowProperty$CloseButton_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$CloseButton_instance;
  }
  var WindowProperty$OkButton_instance;
  function WindowProperty$OkButton_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$OkButton_instance;
  }
  var WindowProperty$CancelButton_instance;
  function WindowProperty$CancelButton_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$CancelButton_instance;
  }
  var WindowProperty$Sizable_instance;
  function WindowProperty$Sizable_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$Sizable_instance;
  }
  var WindowProperty$Movable_instance;
  function WindowProperty$Movable_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$Movable_instance;
  }
  var WindowProperty$Modal_instance;
  function WindowProperty$Modal_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$Modal_instance;
  }
  var WindowProperty$Tab_instance;
  function WindowProperty$Tab_getInstance() {
    WindowProperty_initFields();
    return WindowProperty$Tab_instance;
  }
  WindowProperty.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WindowProperty',
    interfaces: [Enum]
  };
  function WindowProperty$values() {
    return [WindowProperty$None_getInstance(), WindowProperty$CloseButton_getInstance(), WindowProperty$OkButton_getInstance(), WindowProperty$CancelButton_getInstance(), WindowProperty$Sizable_getInstance(), WindowProperty$Movable_getInstance(), WindowProperty$Modal_getInstance(), WindowProperty$Tab_getInstance()];
  }
  WindowProperty.values = WindowProperty$values;
  function WindowProperty$valueOf(name) {
    switch (name) {
      case 'None':
        return WindowProperty$None_getInstance();
      case 'CloseButton':
        return WindowProperty$CloseButton_getInstance();
      case 'OkButton':
        return WindowProperty$OkButton_getInstance();
      case 'CancelButton':
        return WindowProperty$CancelButton_getInstance();
      case 'Sizable':
        return WindowProperty$Sizable_getInstance();
      case 'Movable':
        return WindowProperty$Movable_getInstance();
      case 'Modal':
        return WindowProperty$Modal_getInstance();
      case 'Tab':
        return WindowProperty$Tab_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.graphic.WindowProperty.' + name);
    }
  }
  WindowProperty.valueOf_61zpoe$ = WindowProperty$valueOf;
  function Screen() {
    this.view = null;
    this.viewChanging = false;
    this.prevViewName = '';
    this.mask = null;
    this.textArea = null;
    this.logging = false;
    this.touchListener = ArrayList_init();
    this.scrollListener = null;
    this.keydownListener = ArrayList_init();
    this.modalList = ArrayList_init();
    this.touchSensitivity = 1.0;
    this.currentFocus = null;
    this.previousPos = null;
    this.speed = null;
    this.previousUIFireTime = 0.0;
    this.skipFindUI = false;
    this.fontName = 'ChalkboardSE-Bold';
    this.fontSize = 16.0;
    this.fontColor = null;
    this.testColor = null;
    this.fontVerticalAlign = VerticalAlign$top_getInstance();
    this.fontHorizontalAlign = HorizontalAlign$left_getInstance();
    this.modalColor = Color$Companion_getInstance().black_mx4ult$(0.95);
    this.modalAlpha = 0.95;
    this.isDrawTouchMark = false;
    this.prevMarkerCreated = 0.0;
    this.debug = null;
    this.count = 0;
    this.accum = 0.0;
    this.fps = 0;
  }
  Screen.prototype.afterAttached = function () {
    var mask = Sprite_init(0.0, 0.0, SceneLayer$uiModalMask_getInstance().value, 'Resource/UI/Background', this.GetSize().width, this.GetSize().height);
    mask.SetName_61zpoe$('Fade Mask');
    mask.SetBlendFactor_mx4ult$(1.0);
    mask.SetColor_b53zri$(0, 0, 0, 0.0);
    mask.SetShow_6taknv$(true);
    this.addChild_g5h3xp$(mask);
    if (DataUtil$Companion_getInstance().GetInteger_rjan26$('Draw FPS', void 0, 0) === 1) {
      this.debug = Label_init(this.size.width * 0.5, 5.0, SceneLayer$uiModal_getInstance().value, '');
      ensureNotNull(this.debug).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      ensureNotNull(this.debug).SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
      ensureNotNull(this.debug).SetShow_6taknv$(true);
      ensureNotNull(this.debug).SetSize_dleff0$(-1.0, this.size.height * 0.02);
      this.addChild_g5h3xp$(ensureNotNull(this.debug));
    }
    Node.prototype.afterAttached.call(this);
  };
  Screen.prototype.freeAdditionalResource = function () {
    var tmp$;
    (tmp$ = this.mask) != null ? (tmp$.removeFromParent(), Unit) : null;
    this.mask = null;
    this.currentFocus = null;
    this.touchListener.clear();
  };
  Screen.prototype.removeFromParent = function () {
    Node.prototype.removeFromParent.call(this);
  };
  var Exception = Kotlin.kotlin.Exception;
  Screen.prototype.update_mx4ult$ = function (elapsed) {
    Node.prototype.update_mx4ult$.call(this, elapsed);
    this.count = this.count + 1 | 0;
    this.accum += elapsed;
    if (this.accum > 1) {
      var value = 1 / (this.accum / this.count);
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      this.fps = INT$result;
      this.count = 0;
      this.accum = 0.0;
      var str = this.fps.toString() + ' FPS, Node : ' + HAL$Companion_getInstance().shared().nodeUpdateCounter.toString();
      if (this.debug != null) {
        ensureNotNull(this.debug).SetText_61zpoe$(str);
        ensureNotNull(this.debug).SetSize_dleff0$(-1.0, this.size.height * 0.02);
      }
    }
  };
  Screen.prototype.moveToBackground = function () {
    var tmp$;
    (tmp$ = this.view) != null ? (tmp$.moveToBackground(), Unit) : null;
  };
  Screen.prototype.resume = function () {
    var tmp$;
    (tmp$ = this.view) != null ? (tmp$.resume(), Unit) : null;
  };
  Screen.prototype.printLog_61zpoe$ = function (str) {
    var tmp$;
    if (this.logging === false) {
      return;
    }
    (tmp$ = this.textArea) != null ? (tmp$.addText_r4v59z$(str + '\n'), Unit) : null;
  };
  Screen.prototype.clearLog = function () {
    var tmp$;
    if (this.logging === false) {
      return;
    }
    (tmp$ = this.textArea) != null ? (tmp$.clearText_gam257$(), Unit) : null;
  };
  function Screen$presentView$lambda$lambda(this$Screen) {
    return function () {
      this$Screen.viewChanging = false;
      return Unit;
    };
  }
  function Screen$presentView$lambda(this$Screen, closure$view, closure$mask, closure$time) {
    return function () {
      if (this$Screen.view != null) {
        ensureNotNull(this$Screen.view).SetShow_6taknv$(false);
        ensureNotNull(this$Screen.view).SetTimeToLive_mx4ult$(0.0);
        this$Screen.prevViewName = ensureNotNull(this$Screen.view).GetName();
      }
      closure$view.screen = this$Screen;
      closure$view.positionScale = Scale$Companion_getInstance().copy_3fer1j$(this$Screen.positionScale);
      closure$view.sizeScale = Scale$Companion_getInstance().copy_3fer1j$(this$Screen.sizeScale);
      closure$view.SetSize_dleff0$(this$Screen.size.width, this$Screen.size.height);
      HAL$Companion_getInstance().shared().clearInputQueue();
      HAL$Companion_getInstance().shared().SetInputMode_za3lpa$(0);
      HAL$Companion_getInstance().shared().SetInputPending_6taknv$(false);
      this$Screen.view = closure$view;
      this$Screen.addChild_g5h3xp$(closure$view);
      this$Screen.addConsole();
      this$Screen.actionFadeOut_7vo5wp$(closure$mask, void 0, void 0, closure$time, void 0, void 0, void 0, Screen$presentView$lambda$lambda(this$Screen));
      return Unit;
    };
  }
  Screen.prototype.presentView_xl35ob$ = function (view, time) {
    if (time === void 0)
      time = 0.3;
    var tmp$;
    if (this.viewChanging === true) {
      return;
    }
    this.viewChanging = true;
    this.resetModal();
    this.removeTouchListenerAll();
    var mask = Kotlin.isType(tmp$ = this.findChildByName_3m52m6$('Fade Mask'), Sprite) ? tmp$ : null;
    if (mask != null) {
      this.actionFadeIn_hkbjms$(mask, void 0, void 0, void 0, time, void 0, void 0, void 0, Screen$presentView$lambda(this, view, mask, time));
    }
  };
  function Screen$addConsole$lambda(this$Screen) {
    return function (pos, delta, speed, event, elapsed) {
      var tmp$;
      if (equals(event, TouchListener$State$ended_getInstance())) {
        if (pos.y < 30) {
          var console = this$Screen.findChildByName_3m52m6$('Console');
          if (console != null) {
            if (console.GetShow() === false) {
              console.SetShow_6taknv$(true);
            }
             else {
              console.SetShow_6taknv$(false);
            }
          }
        }
        if (pos.y > this$Screen.GetSize().height - 30) {
          var console_0 = this$Screen.findChildByName_3m52m6$('Console');
          if (console_0 != null) {
            if (console_0.GetShow() === true) {
              (tmp$ = this$Screen.textArea) != null ? (tmp$.clearText_gam257$(), Unit) : null;
            }
          }
        }
      }
    };
  }
  Screen.prototype.addConsole = function () {
    if (HAL$Companion_getInstance().shared().GetDebug() === true) {
      this.addTouchListener_dal58m$(new TouchListener('For Console', 0.0, 0.0, this.GetSize().width, this.GetSize().height, void 0, Screen$addConsole$lambda(this)));
    }
    if (HAL$Companion_getInstance().shared().GetDebug() === true) {
      this.logging = true;
      var console = Sprite_init(0.0, 0.0, SceneLayer$uiForemost_getInstance().value, void 0, this.GetSize().width, this.GetSize().height);
      console.SetName_61zpoe$('Console');
      console.SetBlendFactor_mx4ult$(1.0);
      console.SetColor_b53zri$(0, 0, 0, 0.9);
      console.SetShow_6taknv$(false);
      this.addChild_g5h3xp$(console);
      this.textArea = TextArea_init(0.0, 0.0, SceneLayer$uiForemost_getInstance().value, this.GetSize().width, this.GetSize().height, 'Avenir-Book', 12.0 * ensureNotNull(this.view).sizeScale.yRatio, void 0, void 0, 1.0, numberToInt(this.GetSize().height / 16.0), void 0, void 0, void 0, void 0, 1);
      ensureNotNull(this.textArea).SetName_61zpoe$('Console Text Area');
      ensureNotNull(this.textArea).SetShow_6taknv$(true);
      ensureNotNull(this.textArea).addText_r4v59z$('Welcome');
      console.addChild_g5h3xp$(ensureNotNull(this.textArea));
    }
  };
  Screen.prototype.GetCurrentView = function () {
    return this.view;
  };
  Screen.prototype.GetMask = function () {
    if (this.mask == null) {
      return this;
    }
    return ensureNotNull(this.mask);
  };
  Screen.prototype.createMask_vl24u5$ = function (x, y, image, z) {
    if (z === void 0)
      z = 0.0;
    var mask = Mask_init(x, y, z, image);
    this.addChild_g5h3xp$(mask);
    this.mask = mask;
    return mask;
  };
  Screen.prototype.addTouchListener_dal58m$ = function (listener) {
    this.touchListener.add_11rb$(listener);
  };
  Screen.prototype.removeTouchListenerAll = function () {
    this.touchListener.clear();
    this.removeAllKeydownListener();
    this.removeScrollListener();
  };
  Screen.prototype.removeTouchListener_61zpoe$ = function (name) {
    var tmp$;
    tmp$ = reversed(withIndex(this.touchListener)).iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var i = tmp$_0.component1()
      , listener = tmp$_0.component2();
      if (equals(listener.name, name)) {
        this.touchListener.removeAt_za3lpa$(i);
      }
    }
  };
  Screen.prototype.addScrollListener_d6xl6w$ = function (listener) {
    this.scrollListener = listener;
  };
  Screen.prototype.removeScrollListener = function () {
    this.scrollListener = null;
  };
  Screen.prototype.addKeydownListener_5ol7k9$ = function (name, listener) {
    this.keydownListener.add_11rb$(new Pair(name, listener));
  };
  Screen.prototype.removeKeydownListener_61zpoe$ = function (name) {
    var i = 0;
    for (var tmp$ = reversed(this.keydownListener).iterator(); tmp$.hasNext(); ++i) {
      var callback = tmp$.next();
      if (equals(callback.first, name)) {
        this.keydownListener.removeAt_za3lpa$(i);
        break;
      }
    }
  };
  Screen.prototype.removeAllKeydownListener = function () {
    this.keydownListener.clear();
  };
  Screen.prototype.SetSkipFindUI_6taknv$ = function (skip) {
    this.skipFindUI = skip;
  };
  Screen.prototype.GetScreenRect = function () {
    var tmp$;
    var skScene = Kotlin.isType(tmp$ = this.GetObject(), GuestScreen) ? tmp$ : null;
    if (skScene != null) {
      return new Pair(numberToInt(skScene.GetSize().width), numberToInt(skScene.GetSize().height));
    }
    return new Pair(0, 0);
  };
  Screen.prototype.addChild_g5h3xp$ = function (child) {
    var tmp$, tmp$_0, tmp$_1;
    if (child.GetParent() != null) {
      return;
    }
    var skNode = Kotlin.isType(tmp$ = this.GetObject(), GuestScreen) ? tmp$ : null;
    if (skNode != null) {
      tmp$_0 = child.GetObjectList().iterator();
      while (tmp$_0.hasNext()) {
        var ob = tmp$_0.next();
        var skChild = Kotlin.isType(tmp$_1 = ob, GuestNode) ? tmp$_1 : null;
        if (skChild != null) {
          skNode.addChild_jrj3jl$(skChild);
        }
      }
    }
    Node.prototype.addChild_g5h3xp$.call(this, child);
  };
  Screen.prototype.SetModalColor_3nzkge$ = function (color) {
    var tmp$;
    this.modalColor = Color$Companion_getInstance().copy_3nzkge$(color);
    var mask = (tmp$ = this.view) != null ? tmp$.GetModalMask() : null;
    if (mask != null) {
      mask.SetColor_vnjrmz$(Color_init_0(color.r, color.g, color.b, mask.color.a));
    }
  };
  Screen.prototype.SetModalAlpha_mx4ult$ = function (alpha) {
    if (alpha === void 0)
      alpha = 0.95;
    this.modalAlpha = alpha;
  };
  function Screen$pushModal$lambda() {
    return Unit;
  }
  Screen.prototype.pushModal_g5h3xp$ = function (node) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.modalList.iterator();
    while (tmp$.hasNext()) {
      var modal = tmp$.next();
      if (modal === node) {
        return this.modalList.size;
      }
    }
    this.modalList.add_11rb$(node);
    var count = this.modalList.size;
    node.SetZPosition_8ca0d4$(SceneLayer$uiModal_getInstance().value + (count * 2 | 0), true);
    if (this.modalList.size === 1) {
      var mask = (tmp$_0 = this.view) != null ? tmp$_0.GetModalMask() : null;
      if (mask != null) {
        this.actionFadeIn_hkbjms$(mask, void 0, this.modalAlpha, void 0, 0.3, void 0, void 0, void 0, Screen$pushModal$lambda);
      }
    }
     else {
      var mask_0 = (tmp$_1 = this.view) != null ? tmp$_1.GetModalMask() : null;
      if (mask_0 != null) {
        mask_0.SetZPosition_8ca0d4$(node.GetZPosition() - 1);
      }
    }
    return this.modalList.size;
  };
  function Screen$popModal$lambda(closure$mask) {
    return function () {
      closure$mask.SetZPosition_8ca0d4$(SceneLayer$uiModalMask_getInstance().value);
      return Unit;
    };
  }
  Screen.prototype.popModal_g5h3xp$ = function (node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (this.modalList.size > 0) {
      var i = 0;
      tmp$ = this.modalList.iterator();
      while (tmp$.hasNext()) {
        var modal = tmp$.next();
        if (modal === node) {
          this.modalList.removeAt_za3lpa$(i);
          break;
        }
        i = i + 1 | 0;
      }
    }
     else {
      return 0;
    }
    var count = this.modalList.size;
    node.SetZPosition_8ca0d4$(SceneLayer$uiModal_getInstance().value + (count * 2 | 0), true);
    if (this.modalList.size === 0) {
      var mask = Kotlin.isType(tmp$_0 = this.findChildByName_3m52m6$('Modal Mask'), Sprite) ? tmp$_0 : null;
      if (mask != null) {
        this.actionFadeOut_7vo5wp$(mask, void 0, void 0, 0.3, void 0, void 0, void 0, Screen$popModal$lambda(mask));
      }
    }
     else {
      var mask_0 = Kotlin.isType(tmp$_1 = this.findChildByName_3m52m6$('Modal Mask'), Sprite) ? tmp$_1 : null;
      if (mask_0 != null) {
        var last_0 = Kotlin.isType(tmp$_2 = last(this.modalList), Node) ? tmp$_2 : null;
        if (last_0 != null) {
          mask_0.SetZPosition_8ca0d4$(last_0.GetZPosition() - 1);
        }
      }
    }
    return this.modalList.size;
  };
  Screen.prototype.resetModal = function () {
    var tmp$;
    tmp$ = reversed_0(get_indices(this.modalList)).iterator();
    while (tmp$.hasNext()) {
      var i = tmp$.next();
      this.modalList.removeAt_za3lpa$(i);
    }
  };
  Screen.prototype.GetTopModal = function () {
    if (this.modalList.size === 0) {
      return null;
    }
    return last(this.modalList);
  };
  Screen.prototype.GetUIResponseNodeAtPointNew_dleff0$ = function (x, y) {
    var tmp$, tmp$_0;
    var skScene = Kotlin.isType(tmp$ = this.GetObject(), GuestScreen) ? tmp$ : null;
    var convert = HAL$Companion_getInstance().shared().convertCoordinate_dleff0$(x, y);
    var nodeList = ensureNotNull(skScene).nodeListAtPoint_qgvyiu$(convert);
    tmp$_0 = nodeList.iterator();
    while (tmp$_0.hasNext()) {
      var node = tmp$_0.next();
      var find = this.findUIResponseNodeByObject_wympo9$(node, this.mask);
      if (find != null) {
        return find;
      }
    }
    return null;
  };
  function Screen$drawTouchMark$lambda(closure$marker, closure$scale) {
    return function (info) {
      closure$marker.SetScaleFromOriginal_mx4ult$(closure$scale.v);
      if (closure$scale.v > 1.0) {
        closure$marker.SetAlpha_8ca0d4$(1.0 - (closure$scale.v - 1.0));
      }
       else if (closure$scale.v > 0.2) {
        closure$marker.SetAlpha_8ca0d4$(1.0);
      }
       else {
        closure$marker.SetAlpha_8ca0d4$(0.0);
      }
      closure$scale.v += info.elapsed * 3;
      if (closure$scale.v > 2.0) {
        closure$marker.SetTimeToLive_mx4ult$(0.0);
        return false;
      }
      return true;
    };
  }
  Screen.prototype.drawTouchMark_r6mt3r$ = function (x, y, event) {
    switch (event.name) {
      case 'began':
        this.prevMarkerCreated = this.age;
        var scale = {v: 0.0};
        var marker = Sprite_init(0.0, 0.0, SceneLayer$uiTop_getInstance().value, 'Resource/UI/IconMarker', 40.0 * this.sizeScale.xRatio, 40.0 * this.sizeScale.xRatio);
        marker.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        marker.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        marker.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
        marker.SetBlendFactor_mx4ult$(1.0);
        marker.SetColor_vnjrmz$(Color$Companion_getInstance().puzzleBlue_mx4ult$());
        marker.SetAlpha_8ca0d4$(0.0);
        this.addChild_g5h3xp$(marker);
        marker.SetPosition_dleff0$(x, y);
        marker.addUpdateCallback_sds54w$('Marker', void 0, void 0, void 0, void 0, void 0, Screen$drawTouchMark$lambda(marker, scale));
        break;
      case 'moved':
        break;
    }
  };
  Screen.prototype.onTouchEvent_a3vp0k$ = function (x, y, event, elapsed, code) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16;
    if (this.viewChanging === true) {
      return;
    }
    if (event === TouchListener$State$scroll_getInstance()) {
      if (this.scrollListener != null) {
        (tmp$ = this.scrollListener) != null ? tmp$(y) : null;
      }
      return;
    }
    if (event === TouchListener$State$keydown_getInstance()) {
      tmp$_0 = reversed(this.keydownListener).iterator();
      while (tmp$_0.hasNext()) {
        var listener = tmp$_0.next();
        var result = listener.second(code);
        if (result === true) {
          break;
        }
      }
      return;
    }
    var convert = HAL$Companion_getInstance().shared().convertCoordinate_dleff0$(x, y);
    var modal = this.GetTopModal();
    var find = null;
    var delta = Position_init();
    if (this.isDrawTouchMark === true) {
      this.drawTouchMark_r6mt3r$(convert.x, convert.y, event);
    }
    var skipUI = false;
    if (this.skipFindUI === true) {
      if (modal == null) {
        tmp$_1 = this.touchListener.iterator();
        while (tmp$_1.hasNext()) {
          var listener_0 = tmp$_1.next();
          if (convert.x >= listener_0.x && convert.x <= listener_0.x + listener_0.width) {
            if (convert.y >= listener_0.y && convert.y <= listener_0.y + listener_0.height) {
              skipUI = true;
              break;
            }
          }
        }
      }
    }
    if (skipUI === false) {
      find = this.GetUIResponseNodeAtPointNew_dleff0$(convert.x, convert.y);
    }
    if (find != null) {
      if (modal != null) {
        if (find !== modal) {
          if (modal.isChild_g5h3xp$(find) === false) {
            if (this.currentFocus != null) {
              (tmp$_2 = this.currentFocus) != null ? tmp$_2.onCancel() : null;
              this.currentFocus = null;
            }
            return;
          }
        }
      }
      switch (event.name) {
        case 'began':
          if (this.previousUIFireTime + 0.3 <= this.age) {
            this.speed.x = 0.0;
            this.speed.y = 0.0;
            this.previousPos = convert;
            if (this.currentFocus != null) {
              if (this.currentFocus !== find) {
                (tmp$_3 = this.currentFocus) != null ? tmp$_3.onCancel() : null;
              }
            }
            if (find.onPress_dleff0$(convert.x, convert.y) === true) {
              this.currentFocus = find;
            }
             else {
              this.currentFocus = null;
            }
          }

          break;
        case 'moved':
          var elapsed_0 = elapsed;
          if (elapsed_0 !== 0.0) {
            delta.x = convert.x - this.previousPos.x;
            delta.y = convert.y - this.previousPos.y;
            this.speed.x = delta.x / elapsed_0;
            this.speed.y = delta.y / elapsed_0;
            if (this.currentFocus != null) {
              if (((tmp$_4 = this.currentFocus) != null ? tmp$_4.drag : null) === true) {
                (tmp$_5 = this.currentFocus) != null ? tmp$_5.onDrag_dleff0$(delta.x, delta.y) : null;
              }
               else {
                if (this.currentFocus !== find) {
                  (tmp$_6 = this.currentFocus) != null ? tmp$_6.onCancel() : null;
                  this.currentFocus = null;
                }
              }
            }
            this.previousPos = convert;
          }

          break;
        case 'ended':
          var elapsed_1 = elapsed;
          if (elapsed_1 !== 0.0) {
            delta.x = convert.x - this.previousPos.x;
            delta.y = convert.y - this.previousPos.y;
            this.speed.x = delta.x / elapsed_1;
            this.speed.y = delta.y / elapsed_1;
            if (this.currentFocus === find) {
              find.onRelease_fzxzdm$(convert.x, convert.y, this.speed);
              this.previousUIFireTime = this.age;
              this.currentFocus = null;
            }
             else {
              if (this.currentFocus != null) {
                if (((tmp$_7 = this.currentFocus) != null ? tmp$_7.isChild_g5h3xp$(find) : null) === false) {
                  (tmp$_8 = this.currentFocus) != null ? tmp$_8.onCancel() : null;
                  this.currentFocus = null;
                }
                 else {
                  (tmp$_9 = this.currentFocus) != null ? tmp$_9.onRelease_fzxzdm$(convert.x, convert.y, this.speed) : null;
                  this.currentFocus = null;
                }
              }
            }
          }

          break;
        case 'cancelled':
          if (this.currentFocus != null) {
            (tmp$_10 = this.currentFocus) != null ? tmp$_10.onCancel() : null;
            this.currentFocus = null;
          }

          break;
        case 'scroll':
          break;
      }
    }
     else {
      switch (event.name) {
        case 'began':
          this.speed.x = 0.0;
          this.speed.y = 0.0;
          this.previousPos = convert;
          break;
        case 'moved':
          var elapsed_2 = elapsed;
          if (elapsed_2 !== 0.0) {
            delta.x = convert.x - this.previousPos.x;
            delta.y = convert.y - this.previousPos.y;
            this.speed.x = delta.y / elapsed_2;
            this.speed.y = delta.y / elapsed_2;
            if (this.currentFocus != null && ((tmp$_11 = this.currentFocus) != null ? tmp$_11.drag : null) === true) {
              (tmp$_12 = this.currentFocus) != null ? tmp$_12.onDrag_dleff0$(delta.x, delta.y) : null;
            }
             else {
              if (this.currentFocus != null) {
                (tmp$_13 = this.currentFocus) != null ? tmp$_13.onCancel() : null;
                this.currentFocus = null;
              }
            }
            this.previousPos = convert;
          }

          break;
        case 'ended':
          var elapsed_3 = elapsed;
          if (elapsed_3 !== 0.0) {
            delta.x = convert.x - this.previousPos.x;
            delta.y = convert.y - this.previousPos.y;
            this.speed.x = delta.x / elapsed_3;
            this.speed.y = delta.y / elapsed_3;
            if (this.currentFocus != null) {
              (tmp$_14 = this.currentFocus) != null ? tmp$_14.onCancel() : null;
              this.currentFocus = null;
            }
          }

          break;
        default:if (this.currentFocus != null) {
            (tmp$_15 = this.currentFocus) != null ? tmp$_15.onCancel() : null;
            this.currentFocus = null;
          }

          break;
      }
    }
    if (modal != null) {
      return;
    }
    tmp$_16 = this.touchListener.iterator();
    while (tmp$_16.hasNext()) {
      var listener_1 = tmp$_16.next();
      if (convert.x >= listener_1.x && convert.x <= listener_1.x + listener_1.width) {
        if (convert.y >= listener_1.y && convert.y <= listener_1.y + listener_1.height) {
          if (listener_1.receiveAlways === false && (find != null || this.currentFocus != null)) {
            continue;
          }
          listener_1.callback(convert, delta, this.speed, event, elapsed);
        }
      }
    }
  };
  Screen.prototype.GetModalNode_g5h3xp$ = function (parent) {
    var tmp$;
    tmp$ = parent.childList.iterator();
    while (tmp$.hasNext()) {
      var node = tmp$.next();
      if (node.isModal() === true && node.GetShow() === true) {
        return node;
      }
      var modal = this.GetModalNode_g5h3xp$(node);
      if (modal != null) {
        return modal;
      }
    }
    return null;
  };
  Screen.prototype.reloadTexture_g5h3xp$ = function (node) {
    var tmp$, tmp$_0;
    var sprite = Kotlin.isType(tmp$ = node, Sprite) ? tmp$ : null;
    if (sprite != null) {
      sprite.reloadTexture();
    }
    tmp$_0 = node.GetChildList().iterator();
    while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      this.reloadTexture_g5h3xp$(child);
    }
  };
  Screen.prototype.createAction_xcdeti$ = function (name, duplicate, replace, exclusive, timeToLive, interval, parent, callback) {
    if (duplicate === void 0)
      duplicate = false;
    if (replace === void 0)
      replace = false;
    if (exclusive === void 0)
      exclusive = false;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (interval === void 0)
      interval = 0.0;
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = ensureNotNull(parent_0).findChildByName_3m52m6$('NodeForAction', 0);
    if (node != null) {
      node.addUpdateCallback_sds54w$(name, duplicate, replace, exclusive, timeToLive, interval, callback);
    }
     else {
      var node_0 = Node_init();
      node_0.SetName_61zpoe$('NodeForAction');
      ensureNotNull(parent_0).addChild_g5h3xp$(node_0);
      equals(ensureNotNull(parent_0).GetName(), 'GameView');
      node_0.addUpdateCallback_sds54w$(name, duplicate, replace, exclusive, timeToLive, interval, callback);
    }
  };
  Screen.prototype.removeAction_81ngrp$ = function (name, delay, parent) {
    if (delay === void 0)
      delay = 0.0;
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = ensureNotNull(parent_0).findChildByName_3m52m6$('NodeForAction', 0);
    if (node != null) {
      node.removeUpdateCallback_9sobi5$(name, delay);
    }
  };
  Screen.prototype.removeAllAction_3hy050$ = function (parent) {
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = ensureNotNull(parent_0).findChildByName_3m52m6$('NodeForAction', 0);
    if (node != null) {
      node.removeAllUpdateCallback_6taknv$();
    }
  };
  function Screen$actionInstant$lambda$lambda(closure$callback) {
    return function (info) {
      if (info.elapsed === 0.0) {
        closure$callback(info);
        return false;
      }
      closure$callback(info);
      return true;
    };
  }
  function Screen$actionInstant$lambda(this$Screen, closure$timeToLive, closure$interval, closure$parent, closure$callback) {
    return function () {
      this$Screen.createAction_xcdeti$('Instant Action', true, void 0, void 0, closure$timeToLive, closure$interval, closure$parent.v, Screen$actionInstant$lambda$lambda(closure$callback));
      return Unit;
    };
  }
  Screen.prototype.actionInstant_cinp1s$ = function (delay, timeToLive, interval, parent, callback) {
    if (delay === void 0)
      delay = 0.0;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (interval === void 0)
      interval = 0.0;
    if (parent === void 0)
      parent = null;
    var parent_0 = {v: parent};
    if (parent_0.v == null) {
      parent_0.v = this;
    }
    this.actionDelay_ab0iom$(delay, parent_0.v, Screen$actionInstant$lambda(this, timeToLive, interval, parent_0, callback));
  };
  function Screen$actionOnce$lambda(closure$delay, closure$callback, closure$node) {
    return function (info) {
      if (info.age > closure$delay) {
        closure$callback();
        closure$node.SetTimeToLive_mx4ult$(0.0);
        return false;
      }
      return true;
    };
  }
  Screen.prototype.actionOnce_ab0iom$ = function (delay, parent, callback) {
    if (delay === void 0)
      delay = 0.0;
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = Node_init();
    ensureNotNull(parent_0).addChild_g5h3xp$(node);
    node.addUpdateCallback_sds54w$('One Time Action', true, void 0, void 0, void 0, void 0, Screen$actionOnce$lambda(delay, callback, node));
  };
  function Screen$actionSequence$lambda(closure$fired, closure$lastFire, closure$delay, closure$callback, closure$index) {
    return function (info) {
      if (closure$fired.v === false) {
        if (info.age > closure$lastFire.v + closure$delay) {
          closure$callback.get_za3lpa$(closure$index.v)();
          closure$fired.v = true;
          closure$index.v = closure$index.v + 1 | 0;
          if (closure$index.v >= closure$callback.size) {
            return false;
          }
        }
      }
       else {
        closure$lastFire.v = info.age;
        closure$fired.v = false;
      }
      return true;
    };
  }
  Screen.prototype.actionSequence_92c9p5$ = function (delay, parent, callback) {
    if (delay === void 0)
      delay = 0.0;
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = Node_init();
    ensureNotNull(parent_0).addChild_g5h3xp$(node);
    var index = {v: 0};
    var lastFire = {v: 0.0};
    var fired = {v: false};
    node.addUpdateCallback_sds54w$('Sequence Action', true, void 0, void 0, void 0, void 0, Screen$actionSequence$lambda(fired, lastFire, delay, callback, index));
  };
  function Screen$actionDelay$lambda(closure$callback) {
    return function () {
      closure$callback();
      return Unit;
    };
  }
  Screen.prototype.actionDelay_ab0iom$ = function (time, parent, callback) {
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    this.actionOnce_ab0iom$(time, parent_0, Screen$actionDelay$lambda(callback));
  };
  function Screen$actionFadeIn$lambda$lambda$lambda(closure$callback) {
    return function () {
      closure$callback != null ? closure$callback() : null;
      return Unit;
    };
  }
  function Screen$actionFadeIn$lambda$lambda(closure$global, closure$node, closure$to, closure$applyChild, this$Screen, closure$parent, closure$callback, closure$current, closure$time) {
    return function (info) {
      if (info.elapsed === 0.0) {
        if (closure$global === true) {
          closure$node.SetMasterAlpha_mx4ult$(closure$to);
        }
         else {
          closure$node.SetAlpha_8ca0d4$(closure$to, closure$applyChild);
        }
        this$Screen.actionDelay_ab0iom$(0.0, closure$parent.v, Screen$actionFadeIn$lambda$lambda$lambda(closure$callback));
        return false;
      }
      if (closure$global === true) {
        closure$node.SetMasterAlpha_mx4ult$(closure$current + info.age * ((closure$to - closure$current) / closure$time));
      }
       else {
        closure$node.SetAlpha_8ca0d4$(closure$current + info.age * ((closure$to - closure$current) / closure$time), closure$applyChild);
      }
      return true;
    };
  }
  function Screen$actionFadeIn$lambda(this$Screen, closure$time, closure$parent, closure$global, closure$node, closure$to, closure$applyChild, closure$callback, closure$current) {
    return function () {
      this$Screen.createAction_xcdeti$('Action Fade In', true, void 0, void 0, closure$time, void 0, closure$parent.v, Screen$actionFadeIn$lambda$lambda(closure$global, closure$node, closure$to, closure$applyChild, this$Screen, closure$parent, closure$callback, closure$current, closure$time));
      return Unit;
    };
  }
  Screen.prototype.actionFadeIn_hkbjms$ = function (node, from, to, delay, time, global, applyChild, parent, callback) {
    if (from === void 0)
      from = 0.0;
    if (to === void 0)
      to = 1.0;
    if (delay === void 0)
      delay = 0.0;
    if (global === void 0)
      global = false;
    if (applyChild === void 0)
      applyChild = true;
    if (parent === void 0)
      parent = null;
    if (callback === void 0)
      callback = null;
    var parent_0 = {v: parent};
    if (parent_0.v == null) {
      parent_0.v = this;
    }
    var current = from;
    this.actionDelay_ab0iom$(delay, parent_0.v, Screen$actionFadeIn$lambda(this, time, parent_0, global, node, to, applyChild, callback, current));
  };
  function Screen$actionFadeOut$lambda$lambda$lambda(closure$callback) {
    return function () {
      closure$callback != null ? closure$callback() : null;
      return Unit;
    };
  }
  function Screen$actionFadeOut$lambda$lambda(closure$global, closure$node, closure$applyChild, this$Screen, closure$parent, closure$callback, closure$current, closure$delta) {
    return function (info) {
      if (info.elapsed === 0.0) {
        if (closure$global === true) {
          closure$node.SetMasterAlpha_mx4ult$(0.0);
        }
         else {
          closure$node.SetAlpha_8ca0d4$(0.0, closure$applyChild);
        }
        this$Screen.actionDelay_ab0iom$(0.0, closure$parent.v, Screen$actionFadeOut$lambda$lambda$lambda(closure$callback));
        return false;
      }
      if (closure$global === true) {
        closure$node.SetMasterAlpha_mx4ult$(closure$current - info.age * closure$delta);
      }
       else {
        closure$node.SetAlpha_8ca0d4$(closure$current - info.age * closure$delta, closure$applyChild);
      }
      return true;
    };
  }
  function Screen$actionFadeOut$lambda(this$Screen, closure$time, closure$parent, closure$global, closure$node, closure$applyChild, closure$callback, closure$current, closure$delta) {
    return function () {
      this$Screen.createAction_xcdeti$('Action Fade Out', true, void 0, void 0, closure$time, void 0, closure$parent.v, Screen$actionFadeOut$lambda$lambda(closure$global, closure$node, closure$applyChild, this$Screen, closure$parent, closure$callback, closure$current, closure$delta));
      return Unit;
    };
  }
  Screen.prototype.actionFadeOut_7vo5wp$ = function (node, from, delay, time, parent, global, applyChild, callback) {
    if (from === void 0)
      from = 1.0;
    if (delay === void 0)
      delay = 0.0;
    if (parent === void 0)
      parent = null;
    if (global === void 0)
      global = false;
    if (applyChild === void 0)
      applyChild = true;
    if (callback === void 0)
      callback = null;
    var parent_0 = {v: parent};
    if (parent_0.v == null) {
      parent_0.v = this;
    }
    var current = from;
    var delta = current / time;
    this.actionDelay_ab0iom$(delay, parent_0.v, Screen$actionFadeOut$lambda(this, time, parent_0, global, node, applyChild, callback, current, delta));
  };
  function Screen$actionFade$lambda(closure$callback, closure$end, closure$begin, closure$delta) {
    return function (info) {
      if (info.elapsed === 0.0) {
        closure$callback(closure$end, true);
        return false;
      }
      var current = closure$begin + info.age * closure$delta;
      if (closure$delta > 0) {
        if (current >= closure$end) {
          closure$callback(closure$end, true);
          return false;
        }
         else {
          closure$callback(current, false);
        }
      }
      if (closure$delta < 0) {
        if (current <= closure$end) {
          closure$callback(closure$end, true);
          return false;
        }
         else {
          closure$callback(current, false);
        }
      }
      return true;
    };
  }
  Screen.prototype.actionFade_ntk7i0$ = function (time, begin, end, parent, callback) {
    if (parent === void 0)
      parent = null;
    if (begin === end) {
      return;
    }
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var delta = (end - begin) / time;
    this.createAction_xcdeti$('Action Fade', true, void 0, void 0, time, void 0, parent_0, Screen$actionFade$lambda(callback, end, begin, delta));
  };
  function Screen$actionFadeLoop$lambda(closure$gain, closure$increase, closure$current, closure$callback, closure$end, closure$begin) {
    return function (info) {
      closure$current.v += info.elapsed * closure$gain * closure$increase.v;
      if (info.elapsed === 0.0) {
        closure$callback(0.0, true);
        return false;
      }
      if (closure$gain > 0) {
        if (closure$increase.v > 0) {
          if (closure$current.v >= closure$end) {
            closure$current.v = closure$end;
            closure$increase.v *= -1;
          }
        }
         else {
          if (closure$current.v <= closure$begin) {
            closure$current.v = closure$begin;
            closure$increase.v *= -1;
          }
        }
      }
       else {
        if (closure$increase.v > 0) {
          if (closure$current.v <= closure$end) {
            closure$current.v = closure$end;
            closure$increase.v *= -1;
          }
        }
         else {
          if (closure$current.v >= closure$begin) {
            closure$current.v = closure$begin;
            closure$increase.v *= -1;
          }
        }
      }
      if (closure$callback(closure$current.v, false) === false) {
        return false;
      }
      return true;
    };
  }
  Screen.prototype.actionFadeLoop_xukj3e$ = function (name, time, begin, end, parent, callback) {
    if (parent === void 0)
      parent = null;
    if (begin === end) {
      return;
    }
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var gain = (end - begin) / time;
    var x = end - begin;
    var increase = {v: (end - begin) / Math_0.abs(x)};
    var current = {v: begin};
    this.createAction_xcdeti$(name, void 0, void 0, void 0, void 0, void 0, parent_0, Screen$actionFadeLoop$lambda(gain, increase, current, callback, end, begin));
  };
  Screen.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Screen',
    interfaces: [Node]
  };
  function Screen_init(deviceScene, $this) {
    $this = $this || Object.create(Screen.prototype);
    Node_init(void 0, void 0, void 0, $this);
    Screen.call($this);
    $this.previousPos = Position_init();
    $this.speed = Position_init();
    $this.fontColor = Color_init_0();
    $this.testColor = Color_init_0();
    $this.SetName_61zpoe$('Screen');
    $this.addObject_s8jyv4$(deviceScene);
    $this.SetSize_dleff0$(deviceScene.GetSize().width, deviceScene.GetSize().height);
    $this.positionScale = new Scale(320.0, 480.0, void 0, void 0, $this.GetSize().width, $this.GetSize().height);
    $this.sizeScale = new Scale(320.0, 480.0, void 0, void 0, $this.GetSize().width, $this.GetSize().height);
    return $this;
  }
  function Sprite() {
    this.image = null;
    this.animation = null;
    this.centerRect = null;
  }
  Sprite.prototype.SetSize_dleff0$ = function (width, height) {
    var tmp$;
    if (this.size.width === width && this.size.height === height) {
      return;
    }
    var width_0 = width;
    var height_0 = height;
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      var texture = skSprite.GetTexture();
      if (texture != null) {
        if (width_0 < 0) {
          width_0 = texture.GetSize().width;
        }
        if (height_0 < 0) {
          height_0 = texture.GetSize().height;
        }
        if (this.centerRect != null) {
          var tWidth = texture.GetSize().width;
          var tHeight = texture.GetSize().height;
          var xScale = width_0 / tWidth;
          var yScale = height_0 / tHeight;
          skSprite.SetScale_dleff0$(1.0, 1.0);
          skSprite.SetSize_dleff0$(width_0, height_0);
          skSprite.SetScale_dleff0$(xScale, yScale);
        }
         else {
          skSprite.SetSize_dleff0$(width_0, height_0);
        }
      }
       else {
        if (width_0 < 0) {
          width_0 = this.size.width;
        }
        if (height_0 < 0) {
          height_0 = this.size.height;
        }
        if (this.centerRect != null) {
          skSprite.SetScale_dleff0$(1.0, 1.0);
        }
         else {
          skSprite.SetSize_dleff0$(width_0, height_0);
        }
      }
      NodeWrapper.prototype.SetSize_dleff0$.call(this, width_0, height_0);
      this.SetVerticalAlign_qn2em6$(this.verticalAlign);
      this.SetHorizontalAlign_jdpdm8$(this.horizontalAlign);
    }
  };
  Sprite.prototype.SetScale_mx4ult$$default = function (scale) {
    var tmp$;
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      if (skSprite.GetTexture() != null) {
        var newWidth = this.GetSize().width * scale;
        var newHeight = this.GetSize().height * scale;
        skSprite.SetSize_dleff0$(newWidth, newHeight);
        NodeWrapper.prototype.SetSize_dleff0$.call(this, newWidth, newHeight);
      }
    }
  };
  Sprite.prototype.SetScaleFromOriginal_mx4ult$ = function (scale) {
    var tmp$;
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      if (skSprite.GetTexture() != null) {
        var newWidth = this.GetOriginalSize().width * scale;
        var newHeight = this.GetOriginalSize().height * scale;
        skSprite.SetSize_dleff0$(newWidth, newHeight);
        NodeWrapper.prototype.SetSize_dleff0$.call(this, newWidth, newHeight);
        this.SetScale_mx4ult$(scale, NodeWrapper.prototype.SetScale_mx4ult$$default.bind(this));
      }
    }
  };
  Sprite.prototype.update_mx4ult$ = function (elapsed) {
    NodeWrapper.prototype.update_mx4ult$.call(this, elapsed);
    if (this.animation != null) {
      ensureNotNull(this.animation).update_mx4ult$(elapsed);
      var image = ensureNotNull(this.animation).GetCurrentFrame();
      if (image != null) {
        this.SetImage_9xt0da$(image, ensureNotNull(this.animation).GetWidth(), ensureNotNull(this.animation).GetHeight());
        this.SetBlendMode_ieo8yr$(this.blendMode);
        this.SetBlendFactor_mx4ult$(this.colorBlendFactor);
        this.SetColor_vnjrmz$(this.GetColor());
        this.SetAlpha_8ca0d4$(this.GetAlpha());
      }
    }
  };
  Sprite.prototype.GetTextureSize = function () {
    var tmp$;
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      var texture = skSprite.GetTexture();
      if (texture != null) {
        return Size_init(texture.GetSize().width, texture.GetSize().height);
      }
    }
    return null;
  };
  Sprite.prototype.GetImage = function () {
    return this.image;
  };
  Sprite.prototype.SetCenterRect_3fx80m$ = function (rect) {
    var tmp$;
    this.centerRect = rect;
    var rect_0 = rect;
    if (rect_0 != null) {
      var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
      if (skSprite != null) {
        var texture = skSprite.GetTexture();
        if (texture != null) {
          var size = texture.GetSize();
          rect_0.x = rect_0.x / size.width;
          rect_0.y = rect_0.y / size.height;
          rect_0.height = rect_0.height / size.height;
          skSprite.SetCenterRect_g5erez$(rect_0);
        }
      }
    }
    var width = this.size.width;
    var height = this.size.height;
    this.size.width = 0.0;
    this.size.height = 0.0;
    this.SetSize_dleff0$(width, height);
  };
  Sprite.prototype.SetImage_9xt0da$ = function (image, width, height) {
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    var tmp$, tmp$_0;
    if (!equals(image, this.image)) {
      var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
      if (skSprite != null) {
        this.image = image;
        skSprite.SetTexture_h2vgz3$(ResourceManager$Companion_getInstance().shared().GetTexture_61zpoe$(image));
        skSprite.SetAnchorPoint_qgvyiu$(Position_init(0.5, 0.5));
        this.SetCenterRect_3fx80m$(this.centerRect);
      }
       else {
        this.image = image;
        var skSprite_0 = HAL$Companion_getInstance().shared().createGuestSprite_h2vgz3$(ResourceManager$Companion_getInstance().shared().GetTexture_61zpoe$(image));
        skSprite_0.SetAnchorPoint_qgvyiu$(Position_init(0.5, 0.5));
        this.SetCenterRect_3fx80m$(this.centerRect);
        this.addObject_s8jyv4$(Kotlin.isType(tmp$_0 = skSprite_0, Any) ? tmp$_0 : throwCCE());
      }
    }
    this.SetSize_dleff0$(width, height);
  };
  Sprite.prototype.SetTexture_shkjqq$ = function (texture, width, height) {
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    var tmp$, tmp$_0;
    this.image = texture.GetName();
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      skSprite.SetTexture_h2vgz3$(texture);
      this.SetCenterRect_3fx80m$(this.centerRect);
    }
     else {
      var skSprite_0 = HAL$Companion_getInstance().shared().createGuestSprite_h2vgz3$(texture);
      if (skSprite_0 != null) {
        this.SetCenterRect_3fx80m$(this.centerRect);
        this.addObject_s8jyv4$(Kotlin.isType(tmp$_0 = skSprite_0, Any) ? tmp$_0 : throwCCE());
      }
    }
    this.SetSize_dleff0$(width, height);
  };
  Sprite.prototype.SetColor_sczwbf$$default = function (r, g, b, a, applyChild) {
    var tmp$;
    this.SetColor_sczwbf$(r, g, b, a, applyChild, NodeWrapper.prototype.SetColor_sczwbf$$default.bind(this));
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      skSprite.SetColor_7b5o5w$(this.color.r, this.color.g, this.color.b, this.color.a);
      skSprite.SetAlpha_mx4ult$(this.color.a);
    }
  };
  Sprite.prototype.SetAlpha_8ca0d4$$default = function (a, applyChild) {
    var tmp$;
    this.SetAlpha_8ca0d4$(a, applyChild, NodeWrapper.prototype.SetAlpha_8ca0d4$$default.bind(this));
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      skSprite.SetColor_7b5o5w$(this.color.r, this.color.g, this.color.b, this.color.a);
      skSprite.SetAlpha_mx4ult$(this.color.a);
    }
  };
  Sprite.prototype.SetMasterAlpha_mx4ult$ = function (a) {
    var tmp$;
    NodeWrapper.prototype.SetMasterAlpha_mx4ult$.call(this, a);
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      skSprite.SetAlpha_mx4ult$(this.color.a);
    }
  };
  Sprite.prototype.SetBlendFactor_mx4ult$$default = function (factor) {
    var tmp$;
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      skSprite.SetColorBlendFactor_mx4ult$(factor);
    }
    this.SetBlendFactor_mx4ult$(factor, NodeWrapper.prototype.SetBlendFactor_mx4ult$$default.bind(this));
  };
  Sprite.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    var tmp$;
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      skSprite.SetBlendMode_ieo8yr$(mode);
    }
    NodeWrapper.prototype.SetBlendMode_ieo8yr$.call(this, mode);
  };
  Sprite.prototype.SetAnimation_pe1q5w$ = function (animation) {
    this.animation = animation;
  };
  Sprite.prototype.reloadTexture = function () {
    var tmp$;
    if (this.image != null) {
      var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
      if (skSprite != null) {
        skSprite.SetTexture_h2vgz3$(ResourceManager$Companion_getInstance().shared().GetTexture_61zpoe$(ensureNotNull(this.image)));
        this.SetCenterRect_3fx80m$(this.centerRect);
        this.SetSize_dleff0$(this.GetSize().width, this.GetSize().height);
      }
    }
  };
  Sprite.prototype.SetRotation_mx4ult$$default = function (radian) {
    var tmp$;
    if (this.rotation === radian) {
      return;
    }
    var skSprite = Kotlin.isType(tmp$ = this.GetObject(), GuestSprite) ? tmp$ : null;
    if (skSprite != null) {
      skSprite.SetZRotation_mx4ult$(radian);
      this.rotation = radian;
    }
  };
  Sprite.prototype.GetRotation = function () {
    return this.rotation;
  };
  Sprite.prototype.SetRotationDegree_mx4ult$ = function (degree) {
    if (degree === void 0)
      degree = 0.0;
    this.SetRotation_mx4ult$(degree * (math.PI / 180.0));
  };
  Sprite.prototype.GetRotationDegree = function () {
    return this.rotation * (180.0 / math.PI);
  };
  Sprite.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Sprite',
    interfaces: [NodeWrapper]
  };
  function Sprite_init(x, y, z, image, width, height, $this) {
    if (z === void 0)
      z = 0.0;
    if (image === void 0)
      image = null;
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    $this = $this || Object.create(Sprite.prototype);
    NodeWrapper_init(x, y, z, $this);
    Sprite.call($this);
    var tmp$;
    var width_0 = width;
    var height_0 = height;
    if (image != null) {
      $this.name = image;
    }
    if (image != null) {
      $this.SetImage_9xt0da$(image, width_0, height_0);
    }
     else {
      if (width_0 < 0 || height_0 < 0) {
        width_0 = 0.0;
        height_0 = 0.0;
      }
      var skSprite = HAL$Companion_getInstance().shared().createGuestSprite();
      skSprite.SetAnchorPoint_qgvyiu$(Position_init(0.5, 0.5));
      $this.addObject_s8jyv4$(Kotlin.isType(tmp$ = skSprite, Any) ? tmp$ : throwCCE());
    }
    $this.SetColor_sczwbf$(1.0, 1.0, 1.0, 1.0);
    $this.SetSize_dleff0$(width_0, height_0);
    $this.SetOriginalSize_dleff0$($this.GetSize().width, $this.GetSize().height);
    return $this;
  }
  function Sprite_init_0(x, y, texture, z, width, height, $this) {
    if (z === void 0)
      z = 0.0;
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    $this = $this || Object.create(Sprite.prototype);
    NodeWrapper_init(x, y, z, $this);
    Sprite.call($this);
    $this.SetTexture_shkjqq$(texture, width, height);
    return $this;
  }
  function SwitchState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SwitchState_initFields() {
    SwitchState_initFields = function () {
    };
    SwitchState$on_instance = new SwitchState('on', 0);
    SwitchState$off_instance = new SwitchState('off', 1);
  }
  var SwitchState$on_instance;
  function SwitchState$on_getInstance() {
    SwitchState_initFields();
    return SwitchState$on_instance;
  }
  var SwitchState$off_instance;
  function SwitchState$off_getInstance() {
    SwitchState_initFields();
    return SwitchState$off_instance;
  }
  SwitchState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SwitchState',
    interfaces: [Enum]
  };
  function SwitchState$values() {
    return [SwitchState$on_getInstance(), SwitchState$off_getInstance()];
  }
  SwitchState.values = SwitchState$values;
  function SwitchState$valueOf(name) {
    switch (name) {
      case 'on':
        return SwitchState$on_getInstance();
      case 'off':
        return SwitchState$off_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.phantom.graphic.SwitchState.' + name);
    }
  }
  SwitchState.valueOf_61zpoe$ = SwitchState$valueOf;
  function Switch() {
    this.isOn = SwitchState$on_getInstance();
  }
  Switch.prototype.changeState = function () {
    if (this.isOn === SwitchState$on_getInstance()) {
      this.isOn = SwitchState$off_getInstance();
    }
     else {
      this.isOn = SwitchState$on_getInstance();
    }
    this.SetButtonImage();
  };
  Switch.prototype.SetEnable_6taknv$ = function (enable) {
    this.enable = enable;
    this.SetButtonImage();
  };
  Switch.prototype.SetButtonImage = function () {
    var tmp$;
    var sprite = Kotlin.isType(tmp$ = this.GetChild_za3lpa$(0), Sprite) ? tmp$ : null;
    if (sprite != null) {
      if (this.enable === true) {
        if (this.GetOnOff() === SwitchState$on_getInstance()) {
          var image = this.GetImageFrame()[0];
          if (image != null) {
            sprite.SetImage_9xt0da$(image, this.GetSize().width, this.GetSize().height);
          }
        }
         else {
          var image_0 = this.GetImageFrame()[1];
          if (image_0 != null) {
            sprite.SetImage_9xt0da$(image_0, this.GetSize().width, this.GetSize().height);
          }
        }
      }
       else {
        if (this.GetOnOff() === SwitchState$on_getInstance()) {
          var image_1 = this.GetImageFrame()[2];
          if (image_1 != null) {
            sprite.SetImage_9xt0da$(image_1, this.GetSize().width, this.GetSize().height);
          }
        }
         else {
          var image_2 = this.GetImageFrame()[3];
          if (image_2 != null) {
            sprite.SetImage_9xt0da$(image_2, this.GetSize().width, this.GetSize().height);
          }
        }
      }
    }
  };
  Switch.prototype.SetOnOff_abhado$ = function (isOn) {
    if (this.isOn === isOn) {
      return;
    }
    this.isOn = isOn;
    this.SetButtonImage();
  };
  Switch.prototype.GetOnOff = function () {
    return this.isOn;
  };
  Switch.prototype.toggle = function () {
    if (this.isOn === SwitchState$on_getInstance()) {
      this.isOn = SwitchState$off_getInstance();
    }
     else {
      this.isOn = SwitchState$on_getInstance();
    }
    this.SetButtonImage();
  };
  Switch.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Switch',
    interfaces: [Button]
  };
  function Switch_init(x, y, z, image, text, fontName, fontColor, fontSize, $this) {
    if (z === void 0)
      z = 0.0;
    if (image === void 0)
      image = null;
    if (text === void 0)
      text = '';
    if (fontName === void 0)
      fontName = 'Main/';
    if (fontColor === void 0)
      fontColor = Color$Companion_getInstance().white_mx4ult$();
    if (fontSize === void 0)
      fontSize = 24.0;
    $this = $this || Object.create(Switch.prototype);
    Button_init(x, y, z, image, text, fontName, fontColor, fontSize, $this);
    Switch.call($this);
    return $this;
  }
  function TextArea() {
    this.fontNameDefault = '';
    this.fontName = '';
    this.fontSize = 10.0;
    this.fontScale = 1.0;
    this.defaultFontColor = null;
    this.fontColor = null;
    this.fontSpace = 0.1;
    this.whiteSpace = 0.5;
    this.lineGap = 10.0;
    this.lineMax = 30;
    this.heightAdjust = 1.0;
    this.characterPerLine = 20;
    this.wrapType = 0;
    this.lineCount = 0;
    this.lineOffset = 0.0;
    this.textHeight = 0.0;
    this.fontHeight = 0.0;
    this.periodCharacterHeight = 0.0;
    this.characterCount = 0;
    this.currentContainer = null;
    this.textVerticalAlign = VerticalAlign$top_getInstance();
    this.textHorizontalAlign = HorizontalAlign$left_getInstance();
    this.labelType = 0;
    this.buttonCount = 0;
    this.fadeMode = 0;
  }
  TextArea.prototype.SetFadeMode_za3lpa$ = function (mode) {
    this.fadeMode = mode;
  };
  function TextArea$addTextInternal$lambda(closure$callback) {
    return function () {
      closure$callback != null ? closure$callback() : null;
      return Unit;
    };
  }
  TextArea.prototype.addTextInternal_r4v59z$ = function (text, delay, callback) {
    if (delay === void 0)
      delay = 0.0;
    if (callback === void 0)
      callback = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (this.currentContainer == null) {
      this.currentContainer = BlankNode_init(0.0, this.lineGap * this.lineCount + this.textHeight, 0.0);
      this.addChild_g5h3xp$(ensureNotNull(this.currentContainer));
      ensureNotNull(this.currentContainer).SetSize_dleff0$(0.0, this.fontHeight * this.fontScale);
      ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      ensureNotNull(this.currentContainer).SetInputOwner_3hy050$(this);
    }
    var label = null;
    if (this.labelType === 0) {
      label = CompositeLabel_init(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height / 2, 0.0, text, 1.0, this.fontSpace, this.whiteSpace, null, this.fontName);
      label.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      label.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
      label.SetColor_vnjrmz$(this.fontColor);
      label.SetBlendFactor_mx4ult$(1.0);
      label.SetSize_dleff0$(-1.0, this.fontSize * this.fontScale);
    }
     else {
      label = Label_init(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height / 2, 0.0, text, this.fontName, this.fontSize * this.fontScale, this.fontColor);
      label.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      label.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
      label.SetColor_vnjrmz$(this.fontColor);
      label.SetSize_dleff0$(-1.0, this.fontSize * this.fontScale);
    }
    if (this.wrapType > 0) {
      if (this.lineOffset + label.GetSize().width > this.GetSize().width) {
        this.lineOffset = 0.0;
        this.lineCount = this.lineCount + 1 | 0;
        this.characterCount = 0;
        this.textHeight = this.textHeight + ensureNotNull(this.currentContainer).GetSize().height;
        this.currentContainer = null;
        if (this.lineCount > this.lineMax) {
          this.clearTop();
        }
        this.currentContainer = BlankNode_init(0.0, this.lineGap * this.lineCount + this.textHeight, 0.0);
        this.addChild_g5h3xp$(ensureNotNull(this.currentContainer));
        ensureNotNull(this.currentContainer).SetSize_dleff0$(0.0, this.fontHeight * this.fontScale);
        ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        ensureNotNull(this.currentContainer).SetInputOwner_3hy050$(this);
        label.SetPosition_dleff0$(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height / 2.0);
      }
    }
    (tmp$ = this.currentContainer) != null ? (tmp$.addChild_g5h3xp$(label), Unit) : null;
    label.SetInputOwner_3hy050$(this);
    if (delay !== 0.0) {
      var screen = Kotlin.isType(tmp$_0 = this.GetRoot(), Screen) ? tmp$_0 : null;
      if (screen != null) {
        var start = 0.0;
        if (this.fadeMode === 0) {
          start = this.lineCount * delay;
        }
        label.SetAlpha_8ca0d4$(0.0, true);
        screen.actionFadeIn_hkbjms$(label, void 0, void 0, start, delay, void 0, true, void 0, TextArea$addTextInternal$lambda(callback));
      }
    }
     else {
      callback != null ? callback() : null;
    }
    this.lineOffset = this.lineOffset + label.GetSize().width;
    if (label.GetSize().height > ensureNotNull(this.currentContainer).GetSize().height) {
      ensureNotNull(this.currentContainer).SetSize_dleff0$(ensureNotNull(this.currentContainer).GetSize().width, label.GetSize().height);
    }
    tmp$_1 = ensureNotNull(this.currentContainer).GetChildList().iterator();
    while (tmp$_1.hasNext()) {
      var child = tmp$_1.next();
      child.SetPosition_dleff0$(child.GetPosition().x, ensureNotNull(this.currentContainer).GetSize().height / 2);
    }
    if (label.GetSize().height < this.fontHeight) {
      if (equals(text, '.') || equals(text, ',')) {
        label.SetPosition_dleff0$(label.GetPosition().x, ensureNotNull(this.currentContainer).GetSize().height / 2 + (this.fontHeight - this.periodCharacterHeight));
      }
    }
    ensureNotNull(this.currentContainer).SetSize_dleff0$(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height * this.heightAdjust);
    ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    tmp$_2 = ensureNotNull(this.currentContainer).GetChildList().iterator();
    while (tmp$_2.hasNext()) {
      var child_0 = tmp$_2.next();
      child_0.SetPosition_dleff0$(child_0.GetPosition().x, ensureNotNull(this.currentContainer).GetSize().height / 2);
    }
    this.adjustTextPosition();
    return label;
  };
  function TextArea$addImageInternal$lambda(closure$callback) {
    return function () {
      closure$callback != null ? closure$callback() : null;
      return Unit;
    };
  }
  TextArea.prototype.addImageInternal_1e04p$ = function (image, width, height, delay, callback) {
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (delay === void 0)
      delay = 0.0;
    if (callback === void 0)
      callback = null;
    var tmp$, tmp$_0, tmp$_1;
    if (this.currentContainer == null) {
      this.currentContainer = BlankNode_init(0.0, this.lineGap * this.lineCount + this.textHeight, 0.0);
      this.addChild_g5h3xp$(ensureNotNull(this.currentContainer));
      ensureNotNull(this.currentContainer).SetSize_dleff0$(0.0, this.fontHeight);
      ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      ensureNotNull(this.currentContainer).SetInputOwner_3hy050$(this);
    }
    var sprite = Sprite_init(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height / 2.0, 0.0, image, width, height);
    sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    sprite.SetBlendFactor_mx4ult$(1.0);
    sprite.SetSize_dleff0$(width, height);
    (tmp$ = this.currentContainer) != null ? (tmp$.addChild_g5h3xp$(sprite), Unit) : null;
    sprite.SetInputOwner_3hy050$(this);
    if (delay !== 0.0) {
      var screen = Kotlin.isType(tmp$_0 = this.GetRoot(), Screen) ? tmp$_0 : null;
      if (screen != null) {
        var start = 0.0;
        if (this.fadeMode === 0) {
          start = this.lineCount * delay;
        }
        sprite.SetAlpha_8ca0d4$(0.0, true);
        screen.actionFadeIn_hkbjms$(sprite, void 0, void 0, start, delay, void 0, true, void 0, TextArea$addImageInternal$lambda(callback));
      }
    }
     else {
      callback != null ? callback() : null;
    }
    this.lineOffset = this.lineOffset + sprite.GetSize().width;
    if (sprite.GetSize().height > ensureNotNull(this.currentContainer).GetSize().height) {
      ensureNotNull(this.currentContainer).SetSize_dleff0$(ensureNotNull(this.currentContainer).GetSize().width, sprite.GetSize().height);
    }
    tmp$_1 = ensureNotNull(this.currentContainer).GetChildList().iterator();
    while (tmp$_1.hasNext()) {
      var child = tmp$_1.next();
      child.SetPosition_dleff0$(child.GetPosition().x, ensureNotNull(this.currentContainer).GetSize().height / 2.0);
    }
    ensureNotNull(this.currentContainer).SetSize_dleff0$(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height * this.heightAdjust);
    ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.adjustTextPosition();
    return sprite;
  };
  function TextArea$addButtonInternal$lambda(closure$callback) {
    return function () {
      closure$callback != null ? closure$callback() : null;
      return Unit;
    };
  }
  TextArea.prototype.addButtonInternal_1e04p$ = function (image, width, height, delay, callback) {
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (delay === void 0)
      delay = 0.0;
    if (callback === void 0)
      callback = null;
    var tmp$, tmp$_0, tmp$_1;
    if (this.currentContainer == null) {
      this.currentContainer = BlankNode_init(0.0, this.lineGap * this.lineCount + this.textHeight, 0.0);
      this.addChild_g5h3xp$(ensureNotNull(this.currentContainer));
      ensureNotNull(this.currentContainer).SetSize_dleff0$(0.0, this.fontHeight);
      ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      ensureNotNull(this.currentContainer).SetInputOwner_3hy050$(this);
    }
    var button = Button_init(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height / 2.0, 0.0, [image], '', this.fontName, this.fontColor);
    button.SetFontSize_mx4ult$(this.fontSize * this.fontScale);
    button.SetClickAdjust_dleff0$(0.0, 0.0);
    button.SetSize_dleff0$(width, height);
    button.SetName_61zpoe$(this.buttonCount.toString());
    this.buttonCount = this.buttonCount + 1 | 0;
    button.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    button.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    button.SetBlendFactor_mx4ult$(1.0);
    (tmp$ = this.currentContainer) != null ? (tmp$.addChild_g5h3xp$(button), Unit) : null;
    if (delay !== 0.0) {
      var screen = Kotlin.isType(tmp$_0 = this.GetRoot(), Screen) ? tmp$_0 : null;
      if (screen != null) {
        var start = 0.0;
        if (this.fadeMode === 0) {
          start = this.lineCount * delay;
        }
        button.SetAlpha_8ca0d4$(0.0, true);
        screen.actionFadeIn_hkbjms$(button, void 0, void 0, start, delay, void 0, true, void 0, TextArea$addButtonInternal$lambda(callback));
      }
    }
     else {
      callback != null ? callback() : null;
    }
    this.lineOffset = this.lineOffset + button.GetSize().width;
    if (button.GetSize().height > ensureNotNull(this.currentContainer).GetSize().height) {
      ensureNotNull(this.currentContainer).SetSize_dleff0$(ensureNotNull(this.currentContainer).GetSize().width, button.GetSize().height);
    }
    tmp$_1 = ensureNotNull(this.currentContainer).GetChildList().iterator();
    while (tmp$_1.hasNext()) {
      var child = tmp$_1.next();
      child.SetPosition_dleff0$(child.GetPosition().x, ensureNotNull(this.currentContainer).GetSize().height / 2.0);
    }
    ensureNotNull(this.currentContainer).SetSize_dleff0$(this.lineOffset, ensureNotNull(this.currentContainer).GetSize().height * this.heightAdjust);
    ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.adjustTextPosition();
    return button;
  };
  var toDoubleOrNull = Kotlin.kotlin.text.toDoubleOrNull_pdl1vz$;
  TextArea.prototype.addText_r4v59z$ = function (text, delay, callback) {
    if (delay === void 0)
      delay = 0.0;
    if (callback === void 0)
      callback = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14;
    var trunc = '';
    var openCommand = false;
    var openString = false;
    var commandList = ArrayList_init();
    var command = '';
    tmp$ = iterator(text);
    while (tmp$.hasNext()) {
      var ch = unboxChar(tmp$.next());
      if (openString === true && openCommand === false) {
        if (ch === 34) {
          openString = false;
        }
         else {
          trunc += String.fromCharCode(ch);
        }
        continue;
      }
      if (openCommand === true) {
        if (openString === true) {
          if (ch === 34) {
            openString = false;
          }
           else {
            command += String.fromCharCode(ch);
          }
          continue;
        }
        switch (ch) {
          case 91:
            openCommand = false;
            trunc += String.fromCharCode(ch);
            break;
          case 93:
            openCommand = false;
            commandList.add_11rb$(command);
            command = '';
            if (commandList.size > 0) {
              if (trunc.length !== 0) {
                if (this.wrapType === 1) {
                  tmp$_0 = iterator(trunc);
                  while (tmp$_0.hasNext()) {
                    var ch_0 = unboxChar(tmp$_0.next());
                    this.addTextInternal_r4v59z$(String.fromCharCode(ch_0), delay);
                  }
                  this.addTextInternal_r4v59z$('', delay, callback);
                }
                 else {
                  this.addTextInternal_r4v59z$(trunc, delay);
                }
                trunc = '';
              }
              var c = commandList.get_za3lpa$(0).toLowerCase();
              if (equals(c, 'button')) {
                if (commandList.size === 2) {
                  var image = commandList.get_za3lpa$(1);
                  if (image != null) {
                    this.addButtonInternal_1e04p$(image, void 0, void 0, delay);
                  }
                }
                 else if (commandList.size === 3) {
                  var size = toDoubleOrNull(commandList.get_za3lpa$(2));
                  if (size != null) {
                    var image_0 = commandList.get_za3lpa$(1);
                    if (image_0 != null) {
                      var screen = Kotlin.isType(tmp$_1 = this.GetRoot(), Screen) ? tmp$_1 : null;
                      if (screen != null) {
                        var convSize = (tmp$_2 = screen.GetCurrentView()) != null ? tmp$_2.sizeUniversalToDevice_1lj1ir$(image_0, size) : null;
                        if (convSize != null) {
                          this.addButtonInternal_1e04p$(image_0, convSize.width, convSize.height, delay);
                        }
                      }
                    }
                  }
                }
                 else if (commandList.size === 4) {
                  var name = commandList.get_za3lpa$(3);
                  var size_0 = toDoubleOrNull(commandList.get_za3lpa$(2));
                  if (size_0 != null) {
                    var image_1 = commandList.get_za3lpa$(1);
                    if (image_1 != null) {
                      var screen_0 = Kotlin.isType(tmp$_3 = this.GetRoot(), Screen) ? tmp$_3 : null;
                      if (screen_0 != null) {
                        var convSize_0 = (tmp$_4 = screen_0.GetCurrentView()) != null ? tmp$_4.sizeUniversalToDevice_1lj1ir$(image_1, size_0) : null;
                        if (convSize_0 != null) {
                          var button = this.addButtonInternal_1e04p$(image_1, convSize_0.width, convSize_0.height, delay);
                          button.SetName_61zpoe$(name);
                        }
                      }
                    }
                  }
                }
                 else if (commandList.size === 5) {
                  var active = commandList.get_za3lpa$(4);
                  var name_0 = commandList.get_za3lpa$(3);
                  var size_1 = toDoubleOrNull(commandList.get_za3lpa$(2));
                  if (size_1 != null) {
                    var image_2 = commandList.get_za3lpa$(1);
                    if (image_2 != null) {
                      var screen_1 = Kotlin.isType(tmp$_5 = this.GetRoot(), Screen) ? tmp$_5 : null;
                      if (screen_1 != null) {
                        var convSize_1 = (tmp$_6 = screen_1.GetCurrentView()) != null ? tmp$_6.sizeUniversalToDevice_1lj1ir$(image_2, size_1) : null;
                        if (convSize_1 != null) {
                          var button_0 = this.addButtonInternal_1e04p$(image_2, convSize_1.width, convSize_1.height, delay);
                          button_0.SetName_61zpoe$(name_0);
                          if (equals(active, 'false')) {
                            button_0.SetEnable_6taknv$(false);
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (equals(c, 'image')) {
                if (commandList.size === 2) {
                  var image_3 = commandList.get_za3lpa$(1);
                  if (image_3 != null) {
                    this.addImageInternal_1e04p$(image_3, void 0, void 0, delay);
                  }
                }
                 else if (commandList.size === 3) {
                  var size_2 = toDoubleOrNull(commandList.get_za3lpa$(2));
                  if (size_2 != null) {
                    var image_4 = commandList.get_za3lpa$(1);
                    if (image_4 != null) {
                      var screen_2 = Kotlin.isType(tmp$_7 = this.GetRoot(), Screen) ? tmp$_7 : null;
                      if (screen_2 != null) {
                        var convSize_2 = (tmp$_8 = screen_2.GetCurrentView()) != null ? tmp$_8.sizeUniversalToDevice_1lj1ir$(image_4, size_2) : null;
                        if (convSize_2 != null) {
                          this.addImageInternal_1e04p$(image_4, convSize_2.width, convSize_2.height, delay);
                        }
                      }
                    }
                  }
                }
              }
              if (equals(c, 'font')) {
                if (commandList.size === 2) {
                  var fontName = commandList.get_za3lpa$(1);
                  if (fontName != null) {
                    this.fontName = fontName;
                  }
                }
                 else {
                  this.fontName = this.fontNameDefault;
                }
              }
              if (equals(c, 'scale')) {
                if (commandList.size === 2) {
                  var scale = toDoubleOrNull(commandList.get_za3lpa$(1));
                  if (scale != null) {
                    this.fontScale = scale;
                  }
                }
                 else {
                  this.fontScale = 1.0;
                }
              }
              if (equals(c, 'color') || equals(c, 'c')) {
                if (commandList.size >= 4) {
                  var r = (tmp$_9 = toIntOrNull(commandList.get_za3lpa$(1))) != null ? tmp$_9 : 0;
                  var g = (tmp$_10 = toIntOrNull(commandList.get_za3lpa$(2))) != null ? tmp$_10 : 0;
                  var b = (tmp$_11 = toIntOrNull(commandList.get_za3lpa$(3))) != null ? tmp$_11 : 0;
                  var a = 1.0;
                  if (commandList.size >= 5) {
                    a = ((tmp$_12 = toIntOrNull(commandList.get_za3lpa$(4))) != null ? tmp$_12 : 0) / 255.0;
                  }
                  this.fontColor = Color_init_1(r, g, b, a);
                }
                 else if (commandList.size >= 2) {
                  var alias = commandList.get_za3lpa$(1);
                  var a_0 = 1.0;
                  if (commandList.size === 3) {
                    a_0 = ((tmp$_13 = toDoubleOrNull(commandList.get_za3lpa$(4))) != null ? tmp$_13 : 0.0) / 255.0;
                  }
                  switch (alias.toLowerCase()) {
                    case 'yellow':
                      this.fontColor = Color$Companion_getInstance().puzzleYellow_mx4ult$(a_0);
                      break;
                    case 'green':
                      this.fontColor = Color$Companion_getInstance().puzzleGreen_mx4ult$(a_0);
                      break;
                    case 'red':
                      this.fontColor = Color$Companion_getInstance().puzzleRed_mx4ult$(a_0);
                      break;
                    case 'blue':
                      this.fontColor = Color$Companion_getInstance().puzzleBlue_mx4ult$(a_0);
                      break;
                    case 'gray':
                      this.fontColor = Color_init_1(196, 196, 196);
                      break;
                    case 'pink':
                      this.fontColor = Color$Companion_getInstance().puzzlePink_mx4ult$(a_0);
                      break;
                    case 'purple':
                      this.fontColor = Color$Companion_getInstance().puzzlePurple_mx4ult$(a_0);
                      break;
                    case 'white':
                      this.fontColor = Color$Companion_getInstance().white_mx4ult$(a_0);
                      break;
                    default:this.fontColor = Color_init(alias);
                      break;
                  }
                }
                 else {
                  this.fontColor = this.defaultFontColor;
                }
              }
              commandList.clear();
              command = '';
            }

            break;
          case 32:
            commandList.add_11rb$(command);
            command = '';
            break;
          case 34:
            openString = true;
            break;
          default:command += String.fromCharCode(ch);
            break;
        }
        continue;
      }
      switch (ch) {
        case 32:
          trunc += String.fromCharCode(ch);
          this.addTextInternal_r4v59z$(trunc, delay);
          trunc = '';
          break;
        case 10:
          var length = trunc.length;
          if (length > 0) {
            this.addTextInternal_r4v59z$(trunc, delay);
          }
           else {
            if (this.currentContainer == null) {
              this.currentContainer = BlankNode_init(0.0, this.lineGap * this.lineCount + this.textHeight, 0.0);
              this.addChild_g5h3xp$(ensureNotNull(this.currentContainer));
              ensureNotNull(this.currentContainer).SetSize_dleff0$(0.0, this.fontHeight * this.fontScale);
              ensureNotNull(this.currentContainer).SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
              ensureNotNull(this.currentContainer).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
              ensureNotNull(this.currentContainer).SetInputOwner_3hy050$(this);
            }
          }

          trunc = '';
          this.lineOffset = 0.0;
          this.lineCount = this.lineCount + 1 | 0;
          this.characterCount = 0;
          this.textHeight = this.textHeight + ensureNotNull(this.currentContainer).GetSize().height;
          this.currentContainer = null;
          if (this.lineCount > this.lineMax) {
            this.clearTop();
          }

          break;
        case 91:
          openCommand = true;
          break;
        case 34:
          openString = true;
          break;
        default:if (this.wrapType === 1) {
            this.addTextInternal_r4v59z$(String.fromCharCode(ch), delay);
          }
           else {
            trunc += String.fromCharCode(ch);
          }

          break;
      }
    }
    if (trunc.length > 0) {
      if (this.wrapType === 1) {
        tmp$_14 = iterator(trunc);
        while (tmp$_14.hasNext()) {
          var ch_1 = unboxChar(tmp$_14.next());
          this.addTextInternal_r4v59z$(String.fromCharCode(ch_1), delay);
        }
        this.addTextInternal_r4v59z$('', delay, callback);
      }
       else {
        this.addTextInternal_r4v59z$(trunc, delay, callback);
      }
    }
     else {
      this.addTextInternal_r4v59z$('', delay, callback);
    }
  };
  TextArea.prototype.addTextList_fux00f$ = function (textList, delay) {
    if (textList === void 0)
      textList = null;
    if (delay === void 0)
      delay = 0.0;
    var tmp$;
    var textList_0 = textList;
    if (textList_0 != null) {
      tmp$ = textList_0.iterator();
      while (tmp$.hasNext()) {
        var text = tmp$.next();
        this.addText_r4v59z$(text, delay);
        this.addText_r4v59z$('\n');
        this.currentContainer = null;
      }
    }
  };
  function TextArea$clearText$lambda(closure$callback) {
    return function () {
      closure$callback != null ? closure$callback() : null;
      return Unit;
    };
  }
  function TextArea$clearText$lambda_0(closure$child, this$TextArea, closure$callback) {
    return function () {
      closure$child.SetShow_6taknv$(false);
      closure$child.removeFromParent();
      if (this$TextArea.childList.size === 0) {
        this$TextArea.lineOffset = 0.0;
        this$TextArea.lineCount = 0;
        this$TextArea.characterCount = 0;
        this$TextArea.textHeight = 0.0;
        this$TextArea.currentContainer = null;
        this$TextArea.buttonCount = 0;
        closure$callback != null ? closure$callback() : null;
      }
      return Unit;
    };
  }
  TextArea.prototype.clearText_gam257$ = function (delay, callback) {
    if (delay === void 0)
      delay = 0.0;
    if (callback === void 0)
      callback = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.childList.size === 0) {
      this.lineOffset = 0.0;
      this.lineCount = 0;
      this.characterCount = 0;
      this.textHeight = 0.0;
      this.currentContainer = null;
      this.buttonCount = 0;
      var screen = Kotlin.isType(tmp$ = this.GetRoot(), Screen) ? tmp$ : null;
      if (screen != null) {
        screen.actionDelay_ab0iom$(0.0, void 0, TextArea$clearText$lambda(callback));
      }
      return;
    }
    var screen_0 = Kotlin.isType(tmp$_0 = this.GetRoot(), Screen) ? tmp$_0 : null;
    if (screen_0 != null) {
      if (delay > 0) {
        tmp$_1 = this.childList;
        for (var i = 0; i !== tmp$_1.size; ++i) {
          var tmp$_4;
          var child = Kotlin.isType(tmp$_4 = this.childList.get_za3lpa$(i), BlankNode) ? tmp$_4 : null;
          if (child != null) {
            screen_0.actionFadeOut_7vo5wp$(child, void 0, void 0, delay, void 0, void 0, true, TextArea$clearText$lambda_0(child, this, callback));
          }
        }
      }
       else {
        tmp$_2 = reversed_0(get_indices(this.childList)).iterator();
        while (tmp$_2.hasNext()) {
          var i_0 = tmp$_2.next();
          var child_0 = Kotlin.isType(tmp$_3 = this.childList.get_za3lpa$(i_0), BlankNode) ? tmp$_3 : null;
          if (child_0 != null) {
            child_0.removeFromParent();
          }
        }
        this.lineOffset = 0.0;
        this.lineCount = 0;
        this.characterCount = 0;
        this.textHeight = 0.0;
        this.currentContainer = null;
        this.buttonCount = 0;
        callback != null ? callback() : null;
      }
    }
  };
  TextArea.prototype.clearTop = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = reversed_0(get_indices(this.childList)).iterator();
    while (tmp$.hasNext()) {
      var i = tmp$.next();
      if (i === 0) {
        var child = Kotlin.isType(tmp$_0 = this.childList.get_za3lpa$(i), BlankNode) ? tmp$_0 : null;
        if (child != null) {
          child.removeFromParent();
          this.lineOffset = 0.0;
          this.lineCount = this.lineCount - 1 | 0;
          this.currentContainer = null;
          this.textHeight = this.textHeight - child.GetSize().height;
        }
      }
       else {
        var child_0 = Kotlin.isType(tmp$_1 = this.childList.get_za3lpa$(i), BlankNode) ? tmp$_1 : null;
        if (child_0 != null) {
          child_0.SetPosition_dleff0$(child_0.GetPosition().x, child_0.GetPosition().y - this.lineGap);
        }
      }
    }
  };
  TextArea.prototype.SetTextVerticalAlign_qn2em6$ = function (align) {
    if (align === void 0)
      align = VerticalAlign$top_getInstance();
    this.textVerticalAlign = align;
    this.adjustTextPosition();
  };
  TextArea.prototype.SetTextHorizontalAlign_jdpdm8$ = function (align) {
    if (align === void 0)
      align = HorizontalAlign$left_getInstance();
    this.textHorizontalAlign = align;
    this.adjustTextPosition();
  };
  TextArea.prototype.adjustTextPosition = function () {
    var tmp$, tmp$_0;
    var textHeight = this.textHeight;
    var xOffset = 0.0;
    var yOffset = 0.0;
    switch (this.textVerticalAlign.name) {
      case 'center':
        yOffset = (this.GetSize().height - textHeight) * 0.5;
        break;
      case 'bottom':
        yOffset = this.GetSize().height - textHeight;
        break;
    }
    switch (this.textHorizontalAlign.name) {
      case 'center':
        xOffset = this.GetSize().width * 0.5;
        break;
      case 'right':
        xOffset = this.GetSize().width;
        break;
    }
    var heightAccum = 0.0;
    tmp$ = this.childList.size - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var child = Kotlin.isType(tmp$_0 = this.childList.get_za3lpa$(i), BlankNode) ? tmp$_0 : null;
      if (child != null) {
        switch (this.textHorizontalAlign.name) {
          case 'left':
            child.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
            break;
          case 'center':
            child.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
            break;
          case 'right':
            child.SetHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
            break;
        }
        var curHeight = 0.0;
        switch (this.textVerticalAlign.name) {
          case 'top':
            curHeight = child.GetSize().height * 0.5;
            break;
          case 'bottom':
            curHeight = -1 * child.GetSize().height * 0.5;
            break;
        }
        child.SetPosition_dleff0$(xOffset, yOffset + heightAccum + curHeight);
        heightAccum += child.GetSize().height;
      }
    }
  };
  TextArea.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextArea',
    interfaces: [BlankNode]
  };
  function TextArea_init(x, y, z, width, height, fontName, fontSize, fontSpace, whiteSpace, lineGap, lineMax, characterPerLine, wrapType, heightAdjust, fontColor, labelType, $this) {
    if (z === void 0)
      z = 0.0;
    if (fontName === void 0)
      fontName = 'Main/';
    if (fontSize === void 0)
      fontSize = 12.0;
    if (fontSpace === void 0)
      fontSpace = 0.1;
    if (whiteSpace === void 0)
      whiteSpace = 0.5;
    if (lineGap === void 0)
      lineGap = 1.0;
    if (lineMax === void 0)
      lineMax = 10;
    if (characterPerLine === void 0)
      characterPerLine = -1;
    if (wrapType === void 0)
      wrapType = 0;
    if (heightAdjust === void 0)
      heightAdjust = 1.0;
    if (fontColor === void 0)
      fontColor = Color$Companion_getInstance().white_mx4ult$();
    if (labelType === void 0)
      labelType = 1;
    $this = $this || Object.create(TextArea.prototype);
    BlankNode_init(x, y, z, $this);
    TextArea.call($this);
    $this.defaultFontColor = Color$Companion_getInstance().copy_3nzkge$(fontColor);
    $this.fontColor = Color$Companion_getInstance().copy_3nzkge$(fontColor);
    $this.fontName = fontName;
    $this.fontNameDefault = fontName;
    $this.fontSize = fontSize * 1.2;
    $this.fontSpace = fontSpace;
    $this.whiteSpace = whiteSpace;
    $this.lineGap = lineGap;
    $this.lineMax = lineMax;
    $this.characterPerLine = characterPerLine;
    $this.wrapType = wrapType;
    $this.heightAdjust = heightAdjust;
    $this.labelType = labelType;
    $this.SetSize_dleff0$(width, height);
    if (labelType === 0) {
      var label = CompositeLabel_init(0.0, 0.0, 0.0, '0', 1.0, fontSpace, whiteSpace, null, fontName);
      label.SetSize_dleff0$(-1.0, fontSize);
      $this.fontHeight = label.GetSize().height;
      if (characterPerLine === -1) {
        $this.characterPerLine = numberToInt(width / label.GetSize().width);
      }
      var label2 = CompositeLabel_init(0.0, 0.0, 0.0, '.', 1.0, fontSpace, whiteSpace, null, fontName);
      label.SetSize_dleff0$(-1.0, fontSize);
      $this.periodCharacterHeight = label2.GetSize().height;
    }
     else {
      $this.fontHeight = fontSize;
      if (characterPerLine === -1) {
        $this.characterPerLine = numberToInt(width / fontSize);
      }
      $this.periodCharacterHeight = fontSize;
    }
    return $this;
  }
  function View() {
    this.screen_hd7mxi$_0 = null;
    this.mask = null;
    this.modalMask = null;
    this.fontName = 'Main/';
    this.fontSize = 16.0;
    this.fontColor = Color_init_0();
    this.childVerticalAlign = VerticalAlign$top_getInstance();
    this.childHorizontalAlign = HorizontalAlign$left_getInstance();
    this.fontVerticalAlign = VerticalAlign$top_getInstance();
    this.fontHorizontalAlign = HorizontalAlign$left_getInstance();
  }
  Object.defineProperty(View.prototype, 'screen', {
    get: function () {
      var tmp$;
      return Kotlin.isType(tmp$ = this.GetRoot(), Screen) ? tmp$ : null;
    },
    set: function (screen) {
      this.screen_hd7mxi$_0 = screen;
    }
  });
  View.prototype.SetSize_dleff0$ = function (width, height) {
    var tmp$;
    this.size.width = width;
    this.size.height = height;
    BlankNode.prototype.SetSize_dleff0$.call(this, width, height);
    (tmp$ = this.modalMask) != null ? (tmp$.SetSize_dleff0$(width, height), Unit) : null;
  };
  View.prototype.moveToBackground = function () {
  };
  View.prototype.resume = function () {
  };
  View.prototype.SetMask_g5i0xv$ = function (mask) {
    this.mask = mask;
  };
  View.prototype.GetMask = function () {
    var mask = this.mask;
    if (mask == null) {
      return this;
    }
    return mask;
  };
  View.prototype.GetModalMask = function () {
    return this.modalMask;
  };
  View.prototype.addTouchListener_dal58m$ = function (listener) {
    var tmp$;
    var screen = Kotlin.isType(tmp$ = this.GetRoot(), Screen) ? tmp$ : null;
    if (screen != null) {
      screen.addTouchListener_dal58m$(listener);
    }
  };
  View.prototype.removeTouchListener = function () {
    var tmp$;
    var screen = Kotlin.isType(tmp$ = this.GetRoot(), Screen) ? tmp$ : null;
    if (screen != null) {
      screen.removeTouchListenerAll();
    }
  };
  View.prototype.SetFontName_61zpoe$ = function (name) {
    if (name === void 0)
      name = 'Main/';
    this.fontName = name;
  };
  View.prototype.SetFontSize_mx4ult$ = function (size) {
    if (size === void 0)
      size = 16.0;
    this.fontSize = size;
  };
  View.prototype.SetFontColor_hu04m1$ = function (red, green, blue, alpha) {
    this.SetFontColor_7b5o5w$(red / 255.0, green / 255.0, blue / 255.0, alpha);
  };
  View.prototype.SetFontColor_7b5o5w$ = function (red, green, blue, alpha) {
    this.fontColor.r = red;
    this.fontColor.g = green;
    this.fontColor.b = blue;
    this.fontColor.a = alpha;
  };
  View.prototype.SetFontColor_3nzkge$ = function (color) {
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    this.SetFontColor_7b5o5w$(color.r, color.g, color.b, color.a);
  };
  View.prototype.GetFontColor = function () {
    return this.fontColor;
  };
  View.prototype.SetFontVerticalAlign_qn2em6$ = function (align) {
    if (align === void 0)
      align = VerticalAlign$top_getInstance();
    this.fontVerticalAlign = align;
  };
  View.prototype.SetFontHorizontalAlign_jdpdm8$ = function (align) {
    if (align === void 0)
      align = HorizontalAlign$left_getInstance();
    this.fontHorizontalAlign = align;
  };
  View.prototype.SetChildVerticalAlign_qn2em6$ = function (align) {
    this.childVerticalAlign = align;
  };
  View.prototype.SetChildHorizontalAlign_jdpdm8$ = function (align) {
    this.childHorizontalAlign = align;
  };
  View.prototype.positionDeviceToUniversal_xpb3zu$ = function (x, y, parent, scale) {
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    var scale_0 = scale;
    if (scale_0 == null) {
      return Position_init(x / this.sizeScale.xRatio, y / this.sizeScale.yRatio);
    }
     else {
      return Position_init(x / scale_0.xRatio, y / scale_0.yRatio);
    }
  };
  View.prototype.positionUniversalToDevice_xpb3zu$ = function (x, y, parent, scale) {
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    var scale_0 = scale;
    if (scale_0 == null) {
      return Position_init(x * this.sizeScale.xRatio, y * this.sizeScale.yRatio);
    }
     else {
      return Position_init(x * scale_0.xRatio, y * scale_0.yRatio);
    }
  };
  View.prototype.sizeScaleUniversalToDevice_1lj1ir$ = function (image, width, height, parent, scale, constraint, fitSmall, percentCoordinate) {
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (constraint === void 0)
      constraint = true;
    if (fitSmall === void 0)
      fitSmall = true;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    var parent_0 = parent;
    var scale_0 = scale;
    if (parent_0 == null) {
      parent_0 = this;
    }
    if (scale_0 == null) {
      scale_0 = ensureNotNull(parent_0).sizeScale;
    }
    var sizeScale = null;
    if (width <= 0 || height <= 0) {
      var texture = TextureManager$Companion_getInstance().shared().GetTexture_61zpoe$(image);
      if (texture != null) {
        if (width > 0) {
          var ratio = width / texture.GetSize().width;
          sizeScale = new Scale(width, texture.GetSize().height * ratio, scale_0.xRatio, scale_0.yRatio);
        }
         else if (height > 0) {
          var ratio_0 = height / texture.GetSize().height;
          sizeScale = new Scale(texture.GetSize().width * ratio_0, height, scale_0.xRatio, scale_0.yRatio);
        }
      }
    }
     else {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (sizeScale == null) {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (constraint === true) {
      sizeScale.keepOriginalRatio_6taknv$(fitSmall);
    }
    return sizeScale;
  };
  View.prototype.sizeUniversalToDevice_1lj1ir$ = function (image, width, height, parent, scale, constraint, fitSmall, percentCoordinate) {
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (constraint === void 0)
      constraint = true;
    if (fitSmall === void 0)
      fitSmall = true;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    var newScale = this.sizeScaleUniversalToDevice_1lj1ir$(image, width, height, parent, scale, constraint, fitSmall, percentCoordinate);
    return Size_init(newScale.newX, newScale.newY);
  };
  View.prototype.createMask_jga54f$ = function (x, y, z, image, width, height, parent, scale, constraint, fitSmall, percentCoordinate, delegate) {
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (constraint === void 0)
      constraint = true;
    if (fitSmall === void 0)
      fitSmall = true;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    if (delegate === void 0)
      delegate = true;
    var parent_0 = parent;
    var scale_0 = scale;
    if (parent_0 == null) {
      parent_0 = this;
    }
    if (scale_0 == null) {
      scale_0 = this.sizeScale;
    }
    var relativePos = Position_init(x, y);
    if (percentCoordinate === false) {
      relativePos = this.convertCoordinateUniversal_f8jzzg$(relativePos, scale_0);
    }
    var sizeScale = null;
    if (width <= 0 || height <= 0) {
      var texture = TextureManager$Companion_getInstance().shared().GetTexture_61zpoe$(image);
      if (texture != null) {
        if (width > 0) {
          var ratio = width / texture.GetSize().width;
          sizeScale = new Scale(width, texture.GetSize().height * ratio, scale_0.xRatio, scale_0.yRatio);
        }
         else if (height > 0) {
          var ratio_0 = height / texture.GetSize().height;
          sizeScale = new Scale(texture.GetSize().width * ratio_0, height, scale_0.xRatio, scale_0.yRatio);
        }
      }
    }
     else {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (sizeScale == null) {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (constraint === true) {
      sizeScale.keepOriginalRatio_6taknv$(fitSmall);
    }
    var sprite = Mask_init(relativePos.x, relativePos.y, z, image, sizeScale.newX, sizeScale.newY, delegate);
    sprite.SetPercentCoordinate_6taknv$(percentCoordinate);
    sprite.SetVerticalAlign_qn2em6$(this.childVerticalAlign);
    sprite.SetHorizontalAlign_jdpdm8$(this.childHorizontalAlign);
    parent_0.addChild_g5h3xp$(sprite);
    return sprite;
  };
  View.prototype.createSprite_vzsiy1$ = function (x, y, z, image, parent) {
    if (z === void 0)
      z = 0.0;
    if (parent === void 0)
      parent = null;
    return this.createSprite_591x4d$(x, y, z, image, void 0, void 0, parent, null);
  };
  View.prototype.createSprite_591x4d$ = function (x, y, z, image, width, height, parent, scale, constraint, fitSmall, percentCoordinate) {
    if (image === void 0)
      image = null;
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (constraint === void 0)
      constraint = true;
    if (fitSmall === void 0)
      fitSmall = true;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    var parent_0 = parent;
    var scale_0 = scale;
    if (parent_0 == null) {
      parent_0 = this;
    }
    if (scale_0 == null) {
      scale_0 = this.sizeScale;
    }
    var relativePos = Position_init(x, y);
    if (percentCoordinate === false) {
      relativePos = this.convertCoordinateUniversal_f8jzzg$(relativePos, scale_0);
    }
    var sizeScale = null;
    if (width <= 0 || height <= 0) {
      if (image != null) {
        var texture = TextureManager$Companion_getInstance().shared().GetTexture_61zpoe$(image);
        if (texture != null) {
          if (width > 0) {
            var ratio = width / texture.GetSize().width;
            sizeScale = new Scale(width, texture.GetSize().height * ratio, scale_0.xRatio, scale_0.yRatio);
          }
           else if (height > 0) {
            var ratio_0 = height / texture.GetSize().height;
            sizeScale = new Scale(texture.GetSize().width * ratio_0, height, scale_0.xRatio, scale_0.yRatio);
          }
        }
      }
    }
     else {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (sizeScale == null) {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (constraint === true) {
      sizeScale.keepOriginalRatio_6taknv$(fitSmall);
    }
    var sprite = Sprite_init(relativePos.x, relativePos.y, z, image, sizeScale.newX, sizeScale.newY);
    sprite.SetPercentCoordinate_6taknv$(percentCoordinate);
    sprite.SetVerticalAlign_qn2em6$(this.childVerticalAlign);
    sprite.SetHorizontalAlign_jdpdm8$(this.childHorizontalAlign);
    sprite.SetBlendFactor_mx4ult$(1.0);
    sprite.SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$());
    parent_0.addChild_g5h3xp$(sprite);
    return sprite;
  };
  View.prototype.createSprite_9wuqyc$ = function (x, y, z, image, width, height, parent, scale, constraint, fitSmall, percentCoordinate) {
    if (z === void 0)
      z = SceneLayer$parent_getInstance();
    if (image === void 0)
      image = null;
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (constraint === void 0)
      constraint = true;
    if (fitSmall === void 0)
      fitSmall = true;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    var newZ = z.value;
    if (z === SceneLayer$parent_getInstance()) {
      newZ = 0.0;
    }
    return this.createSprite_591x4d$(x, y, newZ, image, width, height, parent, scale, constraint, fitSmall, percentCoordinate);
  };
  View.prototype.createLabel_hnp01c$ = function (x, y, z, text, parent, texture, image, scale, percentCoordinate) {
    if (text === void 0)
      text = '';
    if (parent === void 0)
      parent = null;
    if (texture === void 0)
      texture = false;
    if (image === void 0)
      image = 'Resource/UI/font_texture';
    if (scale === void 0)
      scale = null;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    var parent_0 = parent;
    var scale_0 = scale;
    if (parent_0 == null) {
      parent_0 = this;
    }
    if (scale_0 == null) {
      scale_0 = parent_0.sizeScale;
    }
    var relativePos = Position_init(x, y);
    if (percentCoordinate === false) {
      relativePos = this.convertCoordinateUniversal_f8jzzg$(relativePos, scale_0);
    }
    var label = Label_init(relativePos.x, relativePos.y, z, text, this.fontName, this.fontSize * scale_0.xRatio, this.fontColor);
    label.SetPercentCoordinate_6taknv$(percentCoordinate);
    label.SetVerticalAlign_qn2em6$(this.fontVerticalAlign);
    label.SetHorizontalAlign_jdpdm8$(this.fontHorizontalAlign);
    parent_0.addChild_g5h3xp$(label);
    return label;
  };
  View.prototype.createLabel_17tgk7$ = function (x, y, z, text, parent, texture, image, scale, percentCoordinate) {
    if (z === void 0)
      z = SceneLayer$parent_getInstance();
    if (text === void 0)
      text = '';
    if (parent === void 0)
      parent = null;
    if (texture === void 0)
      texture = false;
    if (image === void 0)
      image = 'Resource/UI/font_texture';
    if (scale === void 0)
      scale = null;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    var newZ = z.value;
    if (z === SceneLayer$parent_getInstance()) {
      newZ = 0.0;
    }
    return this.createLabel_hnp01c$(x, y, newZ, text, parent, texture, image, scale, percentCoordinate);
  };
  View.prototype.createCompositeLabel_a1gu21$ = function (x, y, z, text, fontScale, fontSpace, whiteSpace, parent, texture, image, resourcePrefix, scale) {
    if (z === void 0)
      z = SceneLayer$parent_getInstance();
    if (text === void 0)
      text = '';
    if (fontScale === void 0)
      fontScale = 1.0;
    if (fontSpace === void 0)
      fontSpace = 0.0;
    if (whiteSpace === void 0)
      whiteSpace = 1.0;
    if (parent === void 0)
      parent = null;
    if (texture === void 0)
      texture = false;
    if (image === void 0)
      image = null;
    if (scale === void 0)
      scale = null;
    var parent_0 = parent;
    var scale_0 = scale;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var newZ = z.value;
    if (z === SceneLayer$parent_getInstance()) {
      newZ = 0.0;
    }
    if (scale_0 == null) {
      scale_0 = parent_0.sizeScale;
    }
    var relativePos = this.convertCoordinateUniversal_f8jzzg$(Position_init(x, y), scale_0);
    var label = CompositeLabel_init(relativePos.x, relativePos.y, newZ, text, fontScale, fontSpace, whiteSpace, image, resourcePrefix);
    label.SetVerticalAlign_qn2em6$(this.fontVerticalAlign);
    label.SetHorizontalAlign_jdpdm8$(this.fontHorizontalAlign);
    parent_0.addChild_g5h3xp$(label);
    return label;
  };
  View.prototype.createButton_2nezqx$ = function (x, y, z, text, parent, width, height, scale, image, rect, reaction, callback) {
    if (text === void 0)
      text = '';
    if (parent === void 0)
      parent = null;
    if (width === void 0)
      width = 100.0;
    if (height === void 0)
      height = 40.0;
    if (scale === void 0)
      scale = null;
    if (image === void 0)
      image = null;
    if (rect === void 0)
      rect = null;
    if (reaction === void 0)
      reaction = true;
    if (callback === void 0)
      callback = null;
    var newZ = z.value;
    if (z === SceneLayer$parent_getInstance()) {
      newZ = 0.0;
    }
    return this.createButton_ix8ej2$(x, y, newZ, text, parent, width, height, scale, image, rect, void 0, void 0, reaction, callback);
  };
  View.prototype.createButton_ix8ej2$ = function (x, y, z, text, parent, width, height, scale, image, rect, constraint, fitSmall, reaction, callback) {
    if (text === void 0)
      text = '';
    if (parent === void 0)
      parent = null;
    if (width === void 0)
      width = 100.0;
    if (height === void 0)
      height = 40.0;
    if (scale === void 0)
      scale = null;
    if (image === void 0)
      image = null;
    if (rect === void 0)
      rect = null;
    if (constraint === void 0)
      constraint = true;
    if (fitSmall === void 0)
      fitSmall = true;
    if (reaction === void 0)
      reaction = true;
    if (callback === void 0)
      callback = null;
    var parent_0 = parent;
    var scale_0 = scale;
    var image_0 = image;
    var rect_0 = rect;
    if (parent_0 == null) {
      parent_0 = this;
    }
    if (scale_0 == null) {
      scale_0 = this.sizeScale;
    }
    var relativePos = Position_init(x, y);
    if (this.percentCoordinate === false) {
      relativePos = this.convertCoordinateUniversal_f8jzzg$(relativePos, scale_0);
    }
    var sizeScale = null;
    if (width <= 0 || height <= 0) {
      if (image_0 != null) {
        var texture = TextureManager$Companion_getInstance().shared().GetTexture_61zpoe$(ensureNotNull(image_0[0]));
        if (texture != null) {
          if (width > 0) {
            var ratio = width / texture.GetSize().width;
            sizeScale = new Scale(width, texture.GetSize().height * ratio, scale_0.xRatio, scale_0.yRatio);
          }
           else if (height > 0) {
            var ratio_0 = height / texture.GetSize().height;
            sizeScale = new Scale(texture.GetSize().width * ratio_0, height, scale_0.xRatio, scale_0.yRatio);
          }
        }
      }
    }
     else {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (sizeScale == null) {
      sizeScale = new Scale(width, height, scale_0.xRatio, scale_0.yRatio);
    }
    if (constraint === true) {
      sizeScale.keepOriginalRatio_6taknv$(fitSmall);
    }
    if (rect_0 == null) {
      rect_0 = Rect_init(30.0, 30.0, 30.0, 30.0);
    }
    if (image_0 == null) {
      if (this.GetSize().width > 640.0) {
        image_0 = ['Resource/UI/Button/ButtonFrame', 'Resource/UI/Button/ButtonFrame', 'Resource/UI/Button/ButtonFrame'];
        rect_0 = Rect_init(30.0, 30.0, 30.0, 30.0);
      }
       else {
        image_0 = ['Resource/UI/Button/ButtonFrame', 'Resource/UI/Button/ButtonFrame', 'Resource/UI/Button/ButtonFrame'];
        rect_0 = Rect_init(30.0, 30.0, 30.0, 30.0);
      }
    }
    var button = Button_init(relativePos.x, relativePos.y, 0.0, ensureNotNull(image_0), text, this.fontName);
    button.sizeScale = sizeScale;
    button.SetFontSize_mx4ult$(this.fontSize * scale_0.xRatio);
    button.SetSize_dleff0$(sizeScale.newX, sizeScale.newY);
    button.SetCenterRect_3fx80m$(rect_0);
    button.SetClickAdjust_dleff0$(0.0, 0.0);
    button.SetReaction_6taknv$(reaction);
    button.SetMessageHandler_4mjqr2$(callback);
    button.SetVerticalAlign_qn2em6$(this.childVerticalAlign);
    button.SetHorizontalAlign_jdpdm8$(this.childHorizontalAlign);
    ensureNotNull(parent_0).addChild_g5h3xp$(button);
    return button;
  };
  View.prototype.createImageButton_uax0jn$ = function (x, y, z, text, width, height, parent, scale, image, percentCoordinate, callback) {
    if (z === void 0)
      z = SceneLayer$ui_getInstance();
    if (text === void 0)
      text = '';
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (image === void 0)
      image = null;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    if (callback === void 0)
      callback = null;
    var newZ = z.value;
    if (z === SceneLayer$parent_getInstance()) {
      newZ = 0.0;
    }
    return this.createImageButton_nujlpm$(x, y, newZ, text, width, height, parent, scale, image, void 0, void 0, percentCoordinate, callback);
  };
  View.prototype.createImageButton_nujlpm$ = function (x, y, z, text, width, height, parent, scale, image, constraint, fitSmall, percentCoordinate, callback) {
    if (text === void 0)
      text = '';
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (image === void 0)
      image = null;
    if (constraint === void 0)
      constraint = true;
    if (fitSmall === void 0)
      fitSmall = true;
    if (percentCoordinate === void 0)
      percentCoordinate = false;
    if (callback === void 0)
      callback = null;
    var parent_0 = parent;
    var scale_0 = scale;
    if (parent_0 == null) {
      parent_0 = this;
    }
    if (scale_0 == null) {
      scale_0 = ensureNotNull(parent_0).sizeScale;
    }
    var relativePos = Position_init(x, y);
    if (percentCoordinate === false) {
      relativePos = this.convertCoordinateUniversal_f8jzzg$(relativePos, scale_0);
    }
    var sizeScale = null;
    if (width <= 0 || height <= 0) {
      var image_0 = image != null ? image[0] : null;
      if (image_0 != null) {
        var texture = TextureManager$Companion_getInstance().shared().GetTexture_61zpoe$(image_0);
        if (texture != null) {
          if (width > 0) {
            var ratio = width / texture.GetSize().width;
            sizeScale = new Scale(width, texture.GetSize().height * ratio, ensureNotNull(scale_0).xRatio, ensureNotNull(scale_0).yRatio);
          }
           else if (height > 0) {
            var ratio_0 = height / texture.GetSize().height;
            sizeScale = new Scale(texture.GetSize().width * ratio_0, height, ensureNotNull(scale_0).xRatio, ensureNotNull(scale_0).yRatio);
          }
        }
      }
    }
     else {
      sizeScale = new Scale(width, height, ensureNotNull(scale_0).xRatio, ensureNotNull(scale_0).yRatio);
    }
    if (sizeScale == null) {
      sizeScale = new Scale(width, height, ensureNotNull(scale_0).xRatio, ensureNotNull(scale_0).yRatio);
    }
    if (constraint === true) {
      sizeScale.keepOriginalRatio_6taknv$(fitSmall);
    }
    var button = Button_init(relativePos.x, relativePos.y, z, image, text, this.fontName, this.fontColor);
    button.SetPercentCoordinate_6taknv$(percentCoordinate);
    button.sizeScale = sizeScale;
    button.SetFontSize_mx4ult$(this.fontSize * ensureNotNull(scale_0).xRatio);
    button.SetSize_dleff0$(sizeScale.newX, sizeScale.newY);
    button.SetClickAdjust_dleff0$(0.0, 0.0);
    button.SetMessageHandler_4mjqr2$(callback);
    button.SetVerticalAlign_qn2em6$(this.childVerticalAlign);
    button.SetHorizontalAlign_jdpdm8$(this.childHorizontalAlign);
    ensureNotNull(parent_0).addChild_g5h3xp$(button);
    return button;
  };
  View.prototype.createTextArea_pvsv9g$ = function (x, y, z, width, height, fontSpace, whiteSpace, lineGap, lineMax, characterPerLine, wrapType, heightAdjust, labelType, parent, scale, callback) {
    if (z === void 0)
      z = SceneLayer$parent_getInstance();
    if (fontSpace === void 0)
      fontSpace = 0.05;
    if (whiteSpace === void 0)
      whiteSpace = 1.0;
    if (lineGap === void 0)
      lineGap = 1.0;
    if (lineMax === void 0)
      lineMax = 20;
    if (characterPerLine === void 0)
      characterPerLine = -1;
    if (wrapType === void 0)
      wrapType = 0;
    if (heightAdjust === void 0)
      heightAdjust = 1.0;
    if (labelType === void 0)
      labelType = 1;
    if (parent === void 0)
      parent = null;
    if (scale === void 0)
      scale = null;
    if (callback === void 0)
      callback = null;
    var parent_0 = parent;
    var scale_0 = scale;
    if (parent_0 == null) {
      parent_0 = this;
    }
    if (scale_0 == null) {
      scale_0 = this.sizeScale;
    }
    var relativePos = this.convertCoordinateUniversal_f8jzzg$(Position_init(x, y), scale_0);
    var sizeScale = new Scale(width, height, ensureNotNull(scale_0).xRatio, ensureNotNull(scale_0).yRatio);
    var newZ = z.value;
    if (z === SceneLayer$parent_getInstance()) {
      newZ = 0.0;
    }
    var relativeSize = Size_init(width * sizeScale.xRatio, height * sizeScale.yRatio);
    var area = TextArea_init(relativePos.x, relativePos.y, newZ, relativeSize.width, relativeSize.height, this.fontName, this.fontSize * ensureNotNull(scale_0).yRatio, fontSpace, whiteSpace, lineGap * ensureNotNull(scale_0).yRatio, lineMax, characterPerLine, wrapType, heightAdjust, this.fontColor, labelType);
    ensureNotNull(parent_0).addChild_g5h3xp$(area);
    area.SetVerticalAlign_qn2em6$(this.childVerticalAlign);
    area.SetHorizontalAlign_jdpdm8$(this.childHorizontalAlign);
    return area;
  };
  View.prototype.createAction_xcdeti$ = function (name, duplicate, replace, exclusive, timeToLive, interval, parent, callback) {
    if (duplicate === void 0)
      duplicate = false;
    if (replace === void 0)
      replace = false;
    if (exclusive === void 0)
      exclusive = false;
    if (timeToLive === void 0)
      timeToLive = -1.0;
    if (interval === void 0)
      interval = 0.0;
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = ensureNotNull(parent_0).findChildByName_3m52m6$('NodeForAction', 0);
    if (node != null) {
      node.addUpdateCallback_sds54w$(name, duplicate, replace, exclusive, timeToLive, interval, callback);
    }
     else {
      var node_0 = Node_init();
      node_0.SetName_61zpoe$('NodeForAction');
      ensureNotNull(parent_0).addChild_g5h3xp$(node_0);
      equals(ensureNotNull(parent_0).GetName(), 'GameView');
      node_0.addUpdateCallback_sds54w$(name, duplicate, replace, exclusive, timeToLive, interval, callback);
    }
  };
  View.prototype.removeAction_sbe383$ = function (name, index, delay, parent) {
    if (index === void 0)
      index = 0;
    if (delay === void 0)
      delay = 0.0;
    if (parent === void 0)
      parent = null;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = ensureNotNull(parent_0).findChildByName_3m52m6$('NodeForAction', 0);
    if (node != null) {
      node.removeUpdateCallback_9sobi5$(name, delay);
    }
  };
  View.prototype.removeAllAction_jldc6z$ = function (parent, signal) {
    if (parent === void 0)
      parent = null;
    if (signal === void 0)
      signal = true;
    var parent_0 = parent;
    if (parent_0 == null) {
      parent_0 = this;
    }
    var node = ensureNotNull(parent_0).findChildByName_3m52m6$('NodeForAction', 0);
    if (node != null) {
      node.removeAllUpdateCallback_6taknv$(signal);
    }
  };
  View.prototype.printActionInfo_3hy050$ = function (parent) {
    if (parent === void 0)
      parent = null;
  };
  View.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'View',
    interfaces: [BlankNode]
  };
  function View_init(x, y, z, $this) {
    if (x === void 0)
      x = 0.0;
    if (y === void 0)
      y = 0.0;
    if (z === void 0)
      z = SceneLayer$spaceDeep_getInstance().value;
    $this = $this || Object.create(View.prototype);
    BlankNode_init(x, y, z, $this);
    View.call($this);
    $this.SetName_61zpoe$('View');
    $this.modalMask = Sprite_init(0.0, 0.0, SceneLayer$uiModalMask_getInstance().value, 'Resource/UI/Background', $this.GetSize().width, $this.GetSize().height);
    ensureNotNull($this.modalMask).SetName_61zpoe$('Modal Mask');
    ensureNotNull($this.modalMask).SetBlendFactor_mx4ult$(1.0);
    ensureNotNull($this.modalMask).SetColor_b53zri$(0, 0, 0, 0.0);
    ensureNotNull($this.modalMask).SetShow_6taknv$(true);
    $this.addChild_g5h3xp$(ensureNotNull($this.modalMask));
    return $this;
  }
  function AppController() {
    AppController$Companion_getInstance();
    this.loadingProgress = 0.0;
    this.currentBlockSetId = '';
    this.currentBlockSetResource = '';
    this.deviceScene = null;
    this.shutdown = false;
    this.requestHandler_6kqtfy$_0 = this.requestHandler_6kqtfy$_0;
  }
  function AppController$Holder() {
    AppController$Holder_instance = this;
    this.instance = null;
  }
  AppController$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var AppController$Holder_instance = null;
  function AppController$Holder_getInstance() {
    if (AppController$Holder_instance === null) {
      new AppController$Holder();
    }
    return AppController$Holder_instance;
  }
  function AppController$Companion() {
    AppController$Companion_instance = this;
    this.initialized = false;
  }
  AppController$Companion.prototype.shared = function () {
    if (AppController$Holder_getInstance().instance == null) {
      AppController$Holder_getInstance().instance = new AppController();
    }
    return ensureNotNull(AppController$Holder_getInstance().instance);
  };
  AppController$Companion.prototype.shutdown = function () {
    var tmp$;
    (tmp$ = AppController$Holder_getInstance().instance) != null ? (tmp$.Shutdown(), Unit) : null;
    AppController$Holder_getInstance().instance = null;
  };
  AppController$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AppController$Companion_instance = null;
  function AppController$Companion_getInstance() {
    if (AppController$Companion_instance === null) {
      new AppController$Companion();
    }
    return AppController$Companion_instance;
  }
  Object.defineProperty(AppController.prototype, 'requestHandler', {
    get: function () {
      if (this.requestHandler_6kqtfy$_0 == null)
        return throwUPAE('requestHandler');
      return this.requestHandler_6kqtfy$_0;
    },
    set: function (requestHandler) {
      this.requestHandler_6kqtfy$_0 = requestHandler;
    }
  });
  AppController.prototype.initialize_hmf0yx$ = function (handler) {
    this.shutdown = false;
    this.requestHandler = handler;
  };
  AppController.prototype.Shutdown = function () {
    this.shutdown = true;
  };
  AppController.prototype.isBannerReady = function () {
    return this.requestHandler.isBannerReady();
  };
  AppController.prototype.showAds_6taknv$ = function (show) {
    this.requestHandler.showAds_6taknv$(show);
  };
  AppController.prototype.getAdsHeight = function () {
    return this.requestHandler.getHeight();
  };
  function AppController$showInterstitial$ObjectLiteral(closure$callback) {
    this.closure$callback = closure$callback;
  }
  AppController$showInterstitial$ObjectLiteral.prototype.callbackMethod_8kj6y5$ = function (result, value) {
    this.closure$callback(result);
  };
  AppController$showInterstitial$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [CallbackEvent]
  };
  AppController.prototype.showInterstitial_y8twos$ = function (callback) {
    return this.requestHandler.showInterstitial_6zcd6v$(new AppController$showInterstitial$ObjectLiteral(callback));
  };
  AppController.prototype.isRewardReady = function () {
    return this.requestHandler.isRewardReady();
  };
  function AppController$playRewarded$ObjectLiteral(closure$callback) {
    this.closure$callback = closure$callback;
  }
  AppController$playRewarded$ObjectLiteral.prototype.callbackMethod_8kj6y5$ = function (result, value) {
    this.closure$callback(result);
  };
  AppController$playRewarded$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [CallbackEvent]
  };
  AppController.prototype.playRewarded_y8twos$ = function (callback) {
    return this.requestHandler.playRewarded_6zcd6v$(new AppController$playRewarded$ObjectLiteral(callback));
  };
  AppController.prototype.setAdsMute_6taknv$ = function (mute) {
    this.requestHandler.setAdsMute_6taknv$(mute);
  };
  AppController.prototype.showLeaderboard = function () {
    this.requestHandler.showLeaderboard();
  };
  AppController.prototype.submitScore_ds2soj$ = function (leaderboard, score, tag) {
    this.requestHandler.submitScore_ds2soj$(leaderboard, score, tag);
  };
  AppController.prototype.isLogin = function () {
    return this.requestHandler.isLogin();
  };
  AppController.prototype.loginIntent = function () {
    this.requestHandler.loginIntent();
  };
  AppController.prototype.getVersionName = function () {
    return this.requestHandler.getVersionName();
  };
  AppController.prototype.getVersionCode = function () {
    return this.requestHandler.getVersionCode();
  };
  AppController.prototype.isDesktop = function () {
    return true;
  };
  AppController.prototype.printLog_7z05hs$ = function (str, file, line, funtion) {
    if (file === void 0)
      file = '';
    if (line === void 0)
      line = 0;
    if (funtion === void 0)
      funtion = '';
  };
  AppController.prototype.clearLog = function () {
    var tmp$;
    (tmp$ = this.deviceScene) != null ? (tmp$.clearLog(), Unit) : null;
  };
  AppController.prototype.shareSocial_3yj0dh$ = function (text, image, URL, callback) {
    if (URL === void 0)
      URL = null;
  };
  AppController.prototype.SetTitle_61zpoe$ = function (title) {
  };
  AppController.prototype.changeFPS_za3lpa$ = function (frame) {
  };
  AppController.prototype.GetScreenshot_3fx80m$ = function (rect) {
    if (rect === void 0)
      rect = null;
    return HAL$Companion_getInstance().shared().GetScreenshot_3fx80m$(rect);
  };
  AppController.prototype.pause = function () {
  };
  AppController.prototype.resume = function () {
    var tmp$;
    (tmp$ = this.deviceScene) != null ? (tmp$.resume(), Unit) : null;
  };
  AppController.prototype.SetLoadingProgress_mx4ult$ = function (value) {
    this.loadingProgress = value;
  };
  AppController.prototype.GetLoadingProgress = function () {
    return this.loadingProgress;
  };
  function AppController$loadSoundResource$lambda() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Score Count - Nonzerobot', 'score');
    return Unit;
  }
  function AppController$loadSoundResource$lambda_0() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Score Count - Nonzerobot_PITCHUP', 'ghostscore');
    return Unit;
  }
  function AppController$loadSoundResource$lambda_1() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Bling - Nonzerobot', 'star');
    return Unit;
  }
  function AppController$loadSoundResource$lambda_2() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Happy-sound', 'angel', 2);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_3() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Distorted Laser Blast 2', 'boom', 2, 50.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_4() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Squeezed-Spark-Burst_TTX021003', 'electricity', 2, 50.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_5() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Bomb Explosion', 'bomb', 2);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_6() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Dynamite Explosion', 'dynamite', 2);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_7() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Ancient Game Ceramic or Ice Bomb Explosion 1', 'singlebomb', 2, 50.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_8() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Laser Gun', 'laser', 2, 50.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_9() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Gem Fall', 'landing', 2);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_10() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Timer End 2', 'shake', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_11() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Message', 'change', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_12() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Ghost Disappear Bleeps', 'ghost', 1, 50.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_13() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Explosion 1', 'feverPop0', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_14() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Explosion 2', 'feverPop1', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_15() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Explosion 3', 'feverPop2', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_16() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Explosion 4', 'feverPop3', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_17() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Explosion 5', 'feverPop4', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_18() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Explosion 6', 'feverPop5', 16);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_19() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Pops 5', 'pop9');
    return Unit;
  }
  function AppController$loadSoundResource$lambda_20() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Message', 'click', 1);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_21() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Buy', 'buy');
    return Unit;
  }
  function AppController$loadSoundResource$lambda_22() {
    ResourceManager$Companion_getInstance().shared().loadEffect_ho7uxo$('Resource/Sound/Basic/Effect/Timer', 'timer');
    return Unit;
  }
  function AppController$loadSoundResource$lambda_23() {
    ResourceManager$Companion_getInstance().shared().loadBGM_icsyi4$('Resource/Sound/Basic/BGM/LLS - Roux_small', 'MenuBGM', 20.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_24() {
    ResourceManager$Companion_getInstance().shared().loadBGM_icsyi4$('Resource/Sound/Basic/BGM/LLS - Paper Turtles_small', 'MainBGM', 20.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_25() {
    ResourceManager$Companion_getInstance().shared().loadBGM_icsyi4$('Resource/Sound/Basic/BGM/LLS - Another Realm_small', 'TutorialBGM', 20.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_26() {
    ResourceManager$Companion_getInstance().shared().loadBGM_icsyi4$('Resource/Sound/Basic/BGM/LLS - Facing Danger_small', 'FeverBGM', 20.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_27() {
    ResourceManager$Companion_getInstance().shared().loadBGM_icsyi4$('Resource/Sound/Basic/BGM/LLS - Results_small', 'GameOverBGM', 20.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_28() {
    ResourceManager$Companion_getInstance().shared().loadBGM_icsyi4$('Resource/Sound/Basic/BGM/LLS - Reflections_small', 'ResultBGM', 20.0);
    return Unit;
  }
  function AppController$loadSoundResource$lambda_29() {
    ResourceManager$Companion_getInstance().shared().loadBGM_icsyi4$('Resource/Sound/Basic/BGM/LLS - Victory-LN_small', 'NewRecordBGM', 20.0);
    return Unit;
  }
  AppController.prototype.loadSoundResource = function () {
    var callback = listOf_0([AppController$loadSoundResource$lambda, AppController$loadSoundResource$lambda_0, AppController$loadSoundResource$lambda_1, AppController$loadSoundResource$lambda_2, AppController$loadSoundResource$lambda_3, AppController$loadSoundResource$lambda_4, AppController$loadSoundResource$lambda_5, AppController$loadSoundResource$lambda_6, AppController$loadSoundResource$lambda_7, AppController$loadSoundResource$lambda_8, AppController$loadSoundResource$lambda_9, AppController$loadSoundResource$lambda_10, AppController$loadSoundResource$lambda_11, AppController$loadSoundResource$lambda_12, AppController$loadSoundResource$lambda_13, AppController$loadSoundResource$lambda_14, AppController$loadSoundResource$lambda_15, AppController$loadSoundResource$lambda_16, AppController$loadSoundResource$lambda_17, AppController$loadSoundResource$lambda_18, AppController$loadSoundResource$lambda_19, AppController$loadSoundResource$lambda_20, AppController$loadSoundResource$lambda_21, AppController$loadSoundResource$lambda_22, AppController$loadSoundResource$lambda_23, AppController$loadSoundResource$lambda_24, AppController$loadSoundResource$lambda_25, AppController$loadSoundResource$lambda_26, AppController$loadSoundResource$lambda_27, AppController$loadSoundResource$lambda_28, AppController$loadSoundResource$lambda_29]);
    return callback;
  };
  function AppController$loadDefaultResource$lambda() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/Background');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_0() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/ParticleSquareWhite');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_1() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/particle_circle');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_2() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/ParticleFairy');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_3() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconTutorialMarker');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_4() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/menu_tile');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_5() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_mask');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_6() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/menu_disabled_mask');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_7() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/menu_selected_mask');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_8() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconOption');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_9() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconBeginner');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_10() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconClassic');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_11() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconBeginner6x6');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_12() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconClassic6x6');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_13() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconInfection6x6');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_14() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconHardcore6x6');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_15() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconHome');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_16() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconShare');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_17() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconRate');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_18() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconPlay');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_19() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconRestart');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_20() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconBack');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_21() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconGameCenter');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_22() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconSoundOn');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_23() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconSoundOff');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_24() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconSFXOn');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_25() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconSFXOff');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_26() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconCredits');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_27() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconStar');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_28() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconLock');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_29() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconLockDisabled');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_30() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconSync');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_31() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconConfirm');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_32() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconOk');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_33() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconNo');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_34() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconYes');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_35() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconAbandon');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_36() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconAbandonDisabled');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_37() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconPause');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_38() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconPauseDisabled');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_39() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconTutorial');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_40() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconMarker', 'IconMarker');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_41() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconKorean');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_42() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconEnglish');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_43() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconBlindcat');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_44() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconColorNormal');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_45() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconColorBlind');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_46() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconBatteryLow');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_47() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconBatteryMedium');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_48() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconBatteryHigh');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_49() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconFinger_0');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_50() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconFinger_1');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_51() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_0');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_52() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_1');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_53() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_2');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_54() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_3');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_55() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_4');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_56() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_5');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_57() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_6');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_58() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_7');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_59() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/board_8');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_60() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/fever_board');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_61() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/fever_board_left');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_62() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/fever_board_right');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_63() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextNirvanic', 'Resource/UI/FEVER');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_64() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextNoMoreMatch', 'Resource/UI/NOMOREMATCH');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_65() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/BlockSet/Number/IconMenu');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_66() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/BlockSet/Dice/IconMenu');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_67() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/BlockSet/Bird/IconMenu');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_68() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconContinue');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_69() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconContinueDisabled');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_70() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconVideo');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_71() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/IconVideoDisabled');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_72() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/Title', 'Resource/UI/Title');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_73() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TitleOutline', 'Resource/UI/TitleOutline');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_74() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextReady', 'Resource/UI/READY');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_75() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextStart', 'Resource/UI/START');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_76() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextNoMoreMatch', 'Resource/UI/NOMOREMATCH');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_77() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextTimeOver', 'Resource/UI/GAMEOVER');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_78() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextLastChance', 'Resource/UI/LASTCHANCE');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_79() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/TextNirvanic', 'Resource/UI/FEVER');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_80() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/AppStoreBadge');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_81() {
    ResourceManager$Companion_getInstance().shared().loadTexture_jyasbz$('Resource/UI/google-play-badge');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_82() {
    var gameSprite = listOf_0(['Resource/UI/timer_gage', 'Resource/UI/timer_gage_glass', 'Resource/UI/fever_gage', 'Resource/UI/fever_gage_glass', 'Resource/UI/Particle', 'Resource/UI/ParticleBar', 'Resource/UI/LightningBar']);
    TextureManager$Companion_getInstance().shared().makeAtlas_kwv3np$('gameSprite', gameSprite);
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_83() {
    TextureManager$Companion_getInstance().shared().loadAtlas_ivxn3r$('Match');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_84() {
    TextureManager$Companion_getInstance().shared().loadAtlas_ivxn3r$('Block');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_85() {
    TextureManager$Companion_getInstance().shared().loadAtlas_ivxn3r$('Effect');
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_86() {
    var tmp$, tmp$_0;
    var letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123=_-,.!()[]%+?=>/'";
    letter += formatted_1(4567.89);
    (tmp$_0 = Kotlin.isType(tmp$ = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$ : null) != null ? (tmp$_0.createFont_basrv3$('Number/', letter, 20, 1.0), Unit) : null;
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_87() {
    var tmp$, tmp$_0;
    (tmp$_0 = Kotlin.isType(tmp$ = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$ : null) != null ? (tmp$_0.createFont_basrv3$('BigScore/', '0123456789:,.CombosK+s', 40, 1.0, 'Roboto-Black.ttf'), Unit) : null;
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_88() {
    var tmp$, tmp$_0;
    (tmp$_0 = Kotlin.isType(tmp$ = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$ : null) != null ? (tmp$_0.addFontAlias_puj7f4$('BigScore/', 'Gage/'), Unit) : null;
    return Unit;
  }
  function AppController$loadDefaultResource$lambda_89(closure$sizeScale, closure$width, closure$height, this$AppController) {
    return function () {
      var tmp$;
      var letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123=_-,.!()[]%+?=>/'";
      letter += formatted_1(4567.89);
      tmp$ = iterator(letter);
      while (tmp$.hasNext()) {
        var ch = unboxChar(tmp$.next());
        var value = toBoxedChar(ch);
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        var str = STRING$result;
        ResourceManager$Companion_getInstance().shared().createStringTexture_49g1x9$(str, ' ', 96 * closure$sizeScale.xRatio, Color$Companion_getInstance().white_mx4ult$(), Color$Companion_getInstance().puzzleTileGray_mx4ult$(), -2.0, void 0, void 0, 'Main_Outlined/' + str);
      }
      this$AppController.generateLocalFont_dleff0$(closure$width, closure$height);
      return Unit;
    };
  }
  AppController.prototype.loadDefaultResource_dleff0$ = function (width, height) {
    var sizeScale = new Scale(320.0, 480.0, void 0, void 0, width, height);
    var callback = listOf_0([AppController$loadDefaultResource$lambda, AppController$loadDefaultResource$lambda_0, AppController$loadDefaultResource$lambda_1, AppController$loadDefaultResource$lambda_2, AppController$loadDefaultResource$lambda_3, AppController$loadDefaultResource$lambda_4, AppController$loadDefaultResource$lambda_5, AppController$loadDefaultResource$lambda_6, AppController$loadDefaultResource$lambda_7, AppController$loadDefaultResource$lambda_8, AppController$loadDefaultResource$lambda_9, AppController$loadDefaultResource$lambda_10, AppController$loadDefaultResource$lambda_11, AppController$loadDefaultResource$lambda_12, AppController$loadDefaultResource$lambda_13, AppController$loadDefaultResource$lambda_14, AppController$loadDefaultResource$lambda_15, AppController$loadDefaultResource$lambda_16, AppController$loadDefaultResource$lambda_17, AppController$loadDefaultResource$lambda_18, AppController$loadDefaultResource$lambda_19, AppController$loadDefaultResource$lambda_20, AppController$loadDefaultResource$lambda_21, AppController$loadDefaultResource$lambda_22, AppController$loadDefaultResource$lambda_23, AppController$loadDefaultResource$lambda_24, AppController$loadDefaultResource$lambda_25, AppController$loadDefaultResource$lambda_26, AppController$loadDefaultResource$lambda_27, AppController$loadDefaultResource$lambda_28, AppController$loadDefaultResource$lambda_29, AppController$loadDefaultResource$lambda_30, AppController$loadDefaultResource$lambda_31, AppController$loadDefaultResource$lambda_32, AppController$loadDefaultResource$lambda_33, AppController$loadDefaultResource$lambda_34, AppController$loadDefaultResource$lambda_35, AppController$loadDefaultResource$lambda_36, AppController$loadDefaultResource$lambda_37, AppController$loadDefaultResource$lambda_38, AppController$loadDefaultResource$lambda_39, AppController$loadDefaultResource$lambda_40, AppController$loadDefaultResource$lambda_41, AppController$loadDefaultResource$lambda_42, AppController$loadDefaultResource$lambda_43, AppController$loadDefaultResource$lambda_44, AppController$loadDefaultResource$lambda_45, AppController$loadDefaultResource$lambda_46, AppController$loadDefaultResource$lambda_47, AppController$loadDefaultResource$lambda_48, AppController$loadDefaultResource$lambda_49, AppController$loadDefaultResource$lambda_50, AppController$loadDefaultResource$lambda_51, AppController$loadDefaultResource$lambda_52, AppController$loadDefaultResource$lambda_53, AppController$loadDefaultResource$lambda_54, AppController$loadDefaultResource$lambda_55, AppController$loadDefaultResource$lambda_56, AppController$loadDefaultResource$lambda_57, AppController$loadDefaultResource$lambda_58, AppController$loadDefaultResource$lambda_59, AppController$loadDefaultResource$lambda_60, AppController$loadDefaultResource$lambda_61, AppController$loadDefaultResource$lambda_62, AppController$loadDefaultResource$lambda_63, AppController$loadDefaultResource$lambda_64, AppController$loadDefaultResource$lambda_65, AppController$loadDefaultResource$lambda_66, AppController$loadDefaultResource$lambda_67, AppController$loadDefaultResource$lambda_68, AppController$loadDefaultResource$lambda_69, AppController$loadDefaultResource$lambda_70, AppController$loadDefaultResource$lambda_71, AppController$loadDefaultResource$lambda_72, AppController$loadDefaultResource$lambda_73, AppController$loadDefaultResource$lambda_74, AppController$loadDefaultResource$lambda_75, AppController$loadDefaultResource$lambda_76, AppController$loadDefaultResource$lambda_77, AppController$loadDefaultResource$lambda_78, AppController$loadDefaultResource$lambda_79, AppController$loadDefaultResource$lambda_80, AppController$loadDefaultResource$lambda_81, AppController$loadDefaultResource$lambda_82, AppController$loadDefaultResource$lambda_83, AppController$loadDefaultResource$lambda_84, AppController$loadDefaultResource$lambda_85, AppController$loadDefaultResource$lambda_86, AppController$loadDefaultResource$lambda_87, AppController$loadDefaultResource$lambda_88, AppController$loadDefaultResource$lambda_89(sizeScale, width, height, this)]);
    return callback;
  };
  AppController.prototype.generateLocalFont_dleff0$ = function (width, height) {
    var sizeScale = new Scale(320.0, 480.0, void 0, void 0, width, height);
    var fontFile = 'NanumGothicBold.ttf';
    if (equals(GetLocale(), 'kr')) {
      fontFile = 'NanumGothicBold.ttf';
    }
    var value = local('MENU_COUNT');
    var INT$result;
    INT$break: do {
      if (value == null) {
        INT$result = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value)) {
        INT$result = numberToInt(value);
        break INT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toInt_0(value);
          INT$result = number;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result = 0;
    }
     while (false);
    var count = INT$result;
    if (count != null) {
      this.generateLocalFontTexture_5a9l1g$('MENU_', 0, count - 1 | 0, fontFile, sizeScale, listOf_0(['MENU_/', 'Menu_Mode/']));
    }
    var value_0 = local('TUTORIAL_COUNT');
    var INT$result_0;
    INT$break: do {
      if (value_0 == null) {
        INT$result_0 = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        INT$result_0 = numberToInt(value_0);
        break INT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toInt_0(value_0);
          INT$result_0 = number_0;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result_0 = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result_0 = 0;
    }
     while (false);
    count = INT$result_0;
    if (count != null) {
      this.generateLocalFontTexture_5a9l1g$('TUTORIAL_', 0, count - 1 | 0, fontFile, sizeScale, listOf_0(['TUTORIAL_/', 'Number_Outlined/']));
    }
    this.SetLoadingProgress_mx4ult$(95.0);
    var value_1 = local('BEGINNER_TIP_COUNT');
    var INT$result_1;
    INT$break: do {
      if (value_1 == null) {
        INT$result_1 = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        INT$result_1 = numberToInt(value_1);
        break INT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_1 = toInt_0(value_1);
          INT$result_1 = number_1;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result_1 = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result_1 = 0;
    }
     while (false);
    count = INT$result_1;
    if (count != null) {
      this.generateLocalFontTexture_5a9l1g$('BEGINNER_TIP_', 0, count - 1 | 0, fontFile, sizeScale, listOf_0(['BEGINNER_TIP_/', 'Number_Outlined/']));
    }
    var value_2 = local('BEGINNER6x6_TIP_COUNT');
    var INT$result_2;
    INT$break: do {
      if (value_2 == null) {
        INT$result_2 = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_2)) {
        INT$result_2 = numberToInt(value_2);
        break INT$break;
      }
      if (typeof value_2 === 'string') {
        try {
          var number_2 = toInt_0(value_2);
          INT$result_2 = number_2;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result_2 = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result_2 = 0;
    }
     while (false);
    count = INT$result_2;
    if (count != null) {
      this.generateLocalFontTexture_5a9l1g$('BEGINNER6x6_TIP_', 0, count - 1 | 0, fontFile, sizeScale, listOf_0(['BEGINNER6x6_TIP_/', 'Number_Outlined/']));
    }
    var value_3 = local('Classic_TIP_COUNT');
    var INT$result_3;
    INT$break: do {
      if (value_3 == null) {
        INT$result_3 = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_3)) {
        INT$result_3 = numberToInt(value_3);
        break INT$break;
      }
      if (typeof value_3 === 'string') {
        try {
          var number_3 = toInt_0(value_3);
          INT$result_3 = number_3;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result_3 = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result_3 = 0;
    }
     while (false);
    count = INT$result_3;
    if (count != null) {
      this.generateLocalFontTexture_5a9l1g$('Classic_TIP_', 0, count - 1 | 0, fontFile, sizeScale, listOf_0(['Classic_TIP_/', 'Number_Outlined/']));
    }
  };
  var LinkedHashSet_init = Kotlin.kotlin.collections.LinkedHashSet_init_287e2$;
  AppController.prototype.generateLocalFontTexture_5a9l1g$ = function (prefix, start, end, fontFile, sizeScale, alias) {
    if (fontFile === void 0)
      fontFile = ' ';
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var letter = LinkedHashSet_init();
    for (var i = start; i <= end; i++) {
      var str = '';
      if (start === -1) {
        str = local(prefix);
      }
       else {
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(i)) {
            STRING$result = i.toString();
            break STRING$break;
          }
           else if (typeof i === 'string') {
            STRING$result = i;
            break STRING$break;
          }
           else if (typeof i === 'boolean') {
            STRING$result = i.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(i)) {
            STRING$result = i.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        str = local(prefix + STRING$result);
      }
      if (str.length === 0 === true) {
        continue;
      }
      var openCommand = false;
      tmp$ = iterator(str);
      while (tmp$.hasNext()) {
        var ch = unboxChar(tmp$.next());
        var value = toBoxedChar(ch);
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result_0 = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result_0 = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result_0 = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result_0 = value.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        var str_0 = STRING$result_0;
        if (openCommand === true) {
          if (equals(str_0, ']')) {
            openCommand = false;
          }
          continue;
        }
        if (equals(str_0, '\n')) {
          continue;
        }
        if (equals(str_0, '[')) {
          openCommand = true;
          continue;
        }
        letter.add_11rb$(str_0);
      }
    }
    var result = '';
    tmp$_0 = letter.iterator();
    while (tmp$_0.hasNext()) {
      var l = tmp$_0.next();
      result += l;
    }
    (tmp$_2 = Kotlin.isType(tmp$_1 = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$_1 : null) != null ? (tmp$_2.createFont_basrv3$(alias.get_za3lpa$(0), result, 20, 1.0, fontFile), Unit) : null;
    var i_0 = 0;
    for (var tmp$_3 = alias.iterator(); tmp$_3.hasNext(); ++i_0) {
      var a = tmp$_3.next();
      var tmp$_4, tmp$_5;
      if (i_0 === 0) {
        continue;
      }
      (tmp$_5 = Kotlin.isType(tmp$_4 = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$_4 : null) != null ? (tmp$_5.addFontAlias_puj7f4$(alias.get_za3lpa$(0), a), Unit) : null;
    }
  };
  AppController.prototype.loadBlockSet_jyasbz$ = function (path, alias) {
    if (alias === void 0)
      alias = null;
    var alias_0 = alias;
    if (alias_0 == null) {
      alias_0 = path;
    }
    var blocks = LinkedHashMap_init();
    for (var i = 0; i <= 4; i++) {
      var key = alias_0 + i.toString() + '_normal';
      var value = path + i.toString() + '_normal';
      blocks.put_xwzc9p$(key, value);
    }
    var key_0 = alias_0 + 'connect_0';
    var value_0 = path + 'connect_0';
    blocks.put_xwzc9p$(key_0, value_0);
    var key_1 = alias_0 + 'connect_1';
    var value_1 = path + 'connect_1';
    blocks.put_xwzc9p$(key_1, value_1);
    var key_2 = alias_0 + 'connect_2';
    var value_2 = path + 'connect_2';
    blocks.put_xwzc9p$(key_2, value_2);
    var key_3 = alias_0 + 'connect_3';
    var value_3 = path + 'connect_3';
    blocks.put_xwzc9p$(key_3, value_3);
    var key_4 = alias_0 + 'board_tile';
    var value_4 = path + 'board_tile';
    blocks.put_xwzc9p$(key_4, value_4);
    var key_5 = alias_0 + 'inactive_mask';
    var value_5 = path + 'inactive_mask';
    blocks.put_xwzc9p$(key_5, value_5);
    var key_6 = alias_0 + 'inactive_mask_CB';
    var value_6 = path + 'inactive_mask_CB';
    blocks.put_xwzc9p$(key_6, value_6);
    var key_7 = alias_0 + 'IconMenu';
    var value_7 = path + 'IconMenu';
    blocks.put_xwzc9p$(key_7, value_7);
    TextureManager$Companion_getInstance().shared().makeAtlas_mvjluj$(alias_0 + '_blocks', blocks);
    var colorBlind = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$COLOR_MODE_getInstance(), void 0, 'Normal');
    if (equals(colorBlind, 'Blind')) {
      TextureManager$Companion_getInstance().shared().addAlias_puj7f4$(path + 'inactive_mask_CB', path + 'inactive_mask');
    }
  };
  AppController.prototype.unloadBlockSet_61zpoe$ = function (alias) {
    if (alias.length === 0 === true) {
      return;
    }
    for (var i = 0; i <= 4; i++) {
      ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + i.toString() + '_normal');
      ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + i.toString() + '_1');
      ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + i.toString() + '_2');
      ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + i.toString() + '_4');
      ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + i.toString() + '_8');
    }
    ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + 'white_out');
    ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + 'board_tile');
    ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + 'board_tile_mask');
    ResourceManager$Companion_getInstance().shared().unloadTexture_61zpoe$(alias + 'IconMenu');
    TextureManager$Companion_getInstance().shared().removeAtlas_61zpoe$(alias + '_blocks');
  };
  AppController.prototype.GetCurrentBlockSetResource = function () {
    return this.currentBlockSetResource;
  };
  AppController.prototype.GetCurrentBlockSetId = function () {
    return this.currentBlockSetId;
  };
  AppController.prototype.changeCurrentBlockSet_61zpoe$ = function (itemId) {
    var tmp$, tmp$_0;
    var item = Kotlin.isType(tmp$ = ItemManager$Companion_getInstance().shared().GetItemInfo_61zpoe$(itemId), BlockItem) ? tmp$ : null;
    if (item == null) {
      item = Kotlin.isType(tmp$_0 = ItemManager$Companion_getInstance().shared().GetItemByCategory_1svh2y$(ItemType$block_getInstance(), 0), BlockItem) ? tmp$_0 : null;
    }
    this.loadBlockSet_jyasbz$(ensureNotNull(item).resource);
    this.currentBlockSetResource = ensureNotNull(item).resource;
    this.currentBlockSetId = ensureNotNull(item).id;
    return true;
  };
  AppController.prototype.saveCurrentBlockSet = function () {
    var tmp$, tmp$_0;
    var item = Kotlin.isType(tmp$ = ItemManager$Companion_getInstance().shared().GetItemInfo_61zpoe$(this.currentBlockSetId), BlockItem) ? tmp$ : null;
    if (item == null) {
      item = Kotlin.isType(tmp$_0 = ItemManager$Companion_getInstance().shared().GetItemByCategory_1svh2y$(ItemType$block_getInstance(), 0), BlockItem) ? tmp$_0 : null;
    }
    DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$CURRENT_BLOCK_SET_getInstance(), void 0, ensureNotNull(item).id);
  };
  AppController.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AppController',
    interfaces: []
  };
  var localizationString;
  var localizationKoreanString;
  var localeString;
  var currentLocale;
  function SetLocale(locale) {
    localeString = locale;
    if (equals(locale, 'kr')) {
      currentLocale = localizationKoreanString;
    }
     else {
      currentLocale = localizationString;
    }
  }
  function GetLocale() {
    return localeString;
  }
  function get_isEmpty($receiver) {
    return $receiver.length === 0;
  }
  function local($receiver) {
    var local = currentLocale.get_11rb$($receiver);
    if (local != null) {
      return local;
    }
    return $receiver;
  }
  var reversed_1 = Kotlin.kotlin.text.reversed_gw00vp$;
  function formatted($receiver) {
    var tmp$;
    var str = $receiver.toString();
    var result = '';
    var count = 0;
    var tmp$_0;
    tmp$ = iterator(reversed_1(Kotlin.isCharSequence(tmp$_0 = str) ? tmp$_0 : throwCCE()).toString());
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (count % 3 === 0 && count > 0) {
        result = ',' + result;
      }
      var other = result;
      result = String.fromCharCode(c) + other;
      count = count + 1 | 0;
    }
    return result;
  }
  function formatted_0($receiver) {
    return $receiver.toString();
  }
  function formatted_1($receiver) {
    return $receiver.toString();
  }
  var INT = defineInlineFunction('SamsaraHTML.com.blindcatstudio.samsara.INT_s8jyv4$', wrapFunction(function () {
    var numberToInt = Kotlin.numberToInt;
    var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
    var Exception = Kotlin.kotlin.Exception;
    return function (value) {
      if (value == null) {
        return 0;
      }
      if (Kotlin.isNumber(value)) {
        return numberToInt(value);
      }
      if (typeof value === 'string') {
        try {
          var number = toInt(value);
          return number;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            return 0;
          }
           else
            throw e;
        }
      }
      return 0;
    };
  }));
  var FLOAT = defineInlineFunction('SamsaraHTML.com.blindcatstudio.samsara.FLOAT_s8jyv4$', wrapFunction(function () {
    var numberToDouble = Kotlin.numberToDouble;
    var Exception = Kotlin.kotlin.Exception;
    var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
    return function (value) {
      if (value == null) {
        return 0.0;
      }
      if (Kotlin.isNumber(value)) {
        return numberToDouble(value);
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          return number;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            return 0.0;
          }
           else
            throw e;
        }
      }
      return 0.0;
    };
  }));
  var DOUBLE = defineInlineFunction('SamsaraHTML.com.blindcatstudio.samsara.DOUBLE_s8jyv4$', wrapFunction(function () {
    var numberToDouble = Kotlin.numberToDouble;
    var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
    var Exception = Kotlin.kotlin.Exception;
    return function (value) {
      if (value == null) {
        return 0.0;
      }
      if (Kotlin.isNumber(value)) {
        return numberToDouble(value);
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          return number;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            return 0.0;
          }
           else
            throw e;
        }
      }
      return 0.0;
    };
  }));
  var STRING = defineInlineFunction('SamsaraHTML.com.blindcatstudio.samsara.STRING_za3rmp$', function (value) {
    if (Kotlin.isNumber(value)) {
      return value.toString();
    }
     else if (typeof value === 'string') {
      return value;
    }
     else if (typeof value === 'boolean') {
      return value.toString();
    }
     else if (Kotlin.isChar(value)) {
      return value.toString();
    }
    return '';
  });
  var INT64 = defineInlineFunction('SamsaraHTML.com.blindcatstudio.samsara.INT64_za3rmp$', wrapFunction(function () {
    var numberToLong = Kotlin.numberToLong;
    var toLong = Kotlin.kotlin.text.toLong_pdl1vz$;
    return function (value) {
      if (Kotlin.isNumber(value)) {
        return numberToLong(value);
      }
      if (typeof value === 'string') {
        return toLong(value);
      }
      return Kotlin.Long.ZERO;
    };
  }));
  function Ref(v) {
    this.v = v;
  }
  Ref.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Ref',
    interfaces: []
  };
  Ref.prototype.component1 = function () {
    return this.v;
  };
  Ref.prototype.copy_11rb$ = function (v) {
    return new Ref(v === void 0 ? this.v : v);
  };
  Ref.prototype.toString = function () {
    return 'Ref(v=' + Kotlin.toString(this.v) + ')';
  };
  Ref.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.v) | 0;
    return result;
  };
  Ref.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.v, other.v))));
  };
  function Firework() {
    this.ballSize = 0;
    this.amount = 0;
    this.shrinkTime = 0;
    this.power = 0;
    this.drag = 0;
    this.timeToLive = 0;
    this.size = 0;
    this.fireShrinkStart = 0;
    this.fireShrinkEnd = 0;
    this.maxBrightStart = 0;
    this.maxBrightEnd = 0;
    this.brightOffTime = 0;
    this.child = ArrayList_init();
  }
  Firework.prototype.addFireball_1jtdr7$ = function (fireball) {
    this.child.add_11rb$(fireball);
  };
  Firework.prototype.getFireball = function () {
    if (this.child.size === 0) {
      return null;
    }
    return this.child.removeAt_za3lpa$(0);
  };
  Firework.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Firework',
    interfaces: []
  };
  function Firework_init(ballSize, amount, shrinkTime, power, drag, timeToLive, size, fireShrinkStart, fireShrinkEnd, maxBrightStart, maxBrightEnd, brightOffTime, timeScale, $this) {
    if (ballSize === void 0)
      ballSize = 100.0;
    if (amount === void 0)
      amount = 50;
    if (shrinkTime === void 0)
      shrinkTime = 0.15;
    if (power === void 0)
      power = 300.0;
    if (drag === void 0)
      drag = 1.0;
    if (timeToLive === void 0)
      timeToLive = 1.5;
    if (size === void 0)
      size = 100.0;
    if (fireShrinkStart === void 0)
      fireShrinkStart = 0.5;
    if (fireShrinkEnd === void 0)
      fireShrinkEnd = 1.5;
    if (maxBrightStart === void 0)
      maxBrightStart = 0.3;
    if (maxBrightEnd === void 0)
      maxBrightEnd = 0.8;
    if (brightOffTime === void 0)
      brightOffTime = 0.5;
    if (timeScale === void 0)
      timeScale = 1.0;
    $this = $this || Object.create(Firework.prototype);
    Firework.call($this);
    $this.ballSize = ballSize;
    $this.amount = amount;
    $this.shrinkTime = shrinkTime;
    $this.power = power;
    $this.drag = drag;
    $this.timeToLive = timeToLive * timeScale;
    $this.size = size;
    $this.fireShrinkStart = fireShrinkStart * timeScale;
    $this.fireShrinkEnd = fireShrinkEnd * timeScale;
    $this.maxBrightStart = maxBrightStart * timeScale;
    $this.maxBrightEnd = maxBrightEnd * timeScale;
    $this.brightOffTime = brightOffTime * timeScale;
    return $this;
  }
  function FireworkManager() {
    this.particleManager = null;
  }
  function FireworkManager$explosion$lambda(this$FireworkManager, closure$firework) {
    return function (obj, camera, elapsed) {
      var tmp$, tmp$_0, tmp$_1;
      if (elapsed === 0.0) {
        if (Kotlin.isType(obj.GetLocalVariables_61zpoe$('Fireball'), Firework)) {
          this$FireworkManager.explosion_xovnep$(obj);
        }
        return false;
      }
      if (obj.age <= closure$firework.shrinkTime) {
        if (obj.size < 0) {
          obj.size = 0.0;
        }
        obj.SetOriginalAlpha_mx4ult$(obj.age / closure$firework.maxBrightStart);
      }
       else {
        if (obj.age <= closure$firework.maxBrightEnd) {
          obj.SetOriginalAlpha_mx4ult$(obj.age / closure$firework.maxBrightStart);
        }
         else {
          obj.SetOriginalAlpha_mx4ult$(1 - (obj.age - closure$firework.maxBrightEnd) / closure$firework.brightOffTime);
        }
      }
      if (obj.age > closure$firework.shrinkTime) {
        var flag = typeof (tmp$ = obj.GetLocalVariables_61zpoe$('State')) === 'string' ? tmp$ : null;
        if (equals(flag, 'ready')) {
          obj.addLocalVariables_bm4g0d$('State', Kotlin.isType(tmp$_0 = 'exploded', Any) ? tmp$_0 : throwCCE());
          var backup = Kotlin.isType(tmp$_1 = obj.GetLocalVariables_61zpoe$('Backup'), Position) ? tmp$_1 : null;
          if (backup != null) {
            obj.movement = Position$Companion_getInstance().copy_qgvyiu$(backup);
          }
          var tmp$_2 = Random_getInstance();
          var value = closure$firework.power / 2;
          var INT$result;
          INT$break: do {
            if (value == null) {
              INT$result = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value)) {
              INT$result = numberToInt(value);
              break INT$break;
            }
            if (typeof value === 'string') {
              try {
                var number = toInt_0(value);
                INT$result = number;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result = 0;
          }
           while (false);
          var value_0 = tmp$_2.arc4random_uniform_za3lpa$(INT$result);
          var FLOAT$result;
          FLOAT$break: do {
            if (value_0 == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_0)) {
              FLOAT$result = numberToDouble(value_0);
              break FLOAT$break;
            }
            if (typeof value_0 === 'string') {
              try {
                var number_0 = toDouble(value_0);
                FLOAT$result = number_0;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          var power = Position_init(FLOAT$result + closure$firework.power / 2, 0.0, 0.0);
          var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(360);
          var FLOAT$result_0;
          FLOAT$break: do {
            if (value_1 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_1)) {
              FLOAT$result_0 = numberToDouble(value_1);
              break FLOAT$break;
            }
            if (typeof value_1 === 'string') {
              try {
                var number_1 = toDouble(value_1);
                FLOAT$result_0 = number_1;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          power.rotateY_mx4ult$(FLOAT$result_0);
          var value_2 = Random_getInstance().arc4random_uniform_za3lpa$(360);
          var FLOAT$result_1;
          FLOAT$break: do {
            if (value_2 == null) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_2)) {
              FLOAT$result_1 = numberToDouble(value_2);
              break FLOAT$break;
            }
            if (typeof value_2 === 'string') {
              try {
                var number_2 = toDouble(value_2);
                FLOAT$result_1 = number_2;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_1 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_1 = 0.0;
          }
           while (false);
          power.rotateX_mx4ult$(FLOAT$result_1);
          obj.movement.x = obj.movement.x + power.x;
          obj.movement.y = obj.movement.y + power.y;
          obj.movement.z = obj.movement.z + power.z;
          var value_3 = Random_getInstance().arc4random_uniform_za3lpa$(20);
          var FLOAT$result_2;
          FLOAT$break: do {
            if (value_3 == null) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_3)) {
              FLOAT$result_2 = numberToDouble(value_3);
              break FLOAT$break;
            }
            if (typeof value_3 === 'string') {
              try {
                var number_3 = toDouble(value_3);
                FLOAT$result_2 = number_3;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_2 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_2 = 0.0;
          }
           while (false);
          obj.size = FLOAT$result_2 + closure$firework.size;
          obj.SetOriginalAlpha_mx4ult$(1.0);
        }
      }
      if (obj.age > closure$firework.fireShrinkStart) {
        obj.size = obj.size - elapsed * closure$firework.size / (closure$firework.fireShrinkEnd - closure$firework.fireShrinkStart);
        if (obj.size < 0) {
          obj.size = 0.0;
          return true;
        }
      }
      return false;
    };
  }
  FireworkManager.prototype.explosion_xovnep$ = function (fireball) {
    var tmp$, tmp$_0, tmp$_1;
    var firework = Kotlin.isType(tmp$ = fireball.removeLocalVariables_61zpoe$('Fireball'), Firework) ? tmp$ : throwCCE();
    tmp$_0 = firework.amount - 1 | 0;
    for (var i = 0; i <= tmp$_0; i++) {
      var image = 'Particle_white';
      switch (Random_getInstance().arc4random_uniform_za3lpa$(5)) {
        case 0:
          image = 'Particle_red';
          break;
        case 1:
          image = 'Particle_yellow';
          break;
        case 2:
          image = 'Particle_green';
          break;
        case 3:
          image = 'Particle_blue';
          break;
        default:image = 'Particle_white';
          break;
      }
      var createPos = Position_init(firework.ballSize * 0.3, 0.0, 0.0);
      var value = Random_getInstance().arc4random_uniform_za3lpa$(360);
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      createPos.rotateY_mx4ult$(FLOAT$result);
      var value_0 = Random_getInstance().arc4random_uniform_za3lpa$(360);
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      createPos.rotateX_mx4ult$(FLOAT$result_0);
      var obj = this.particleManager.createParticle_t3d6nt$(fireball.position.x + fireball.local.x + createPos.x, fireball.position.y + fireball.local.y + createPos.y, fireball.position.z + fireball.local.z + createPos.z, void 0, void 0, void 0, void 0, void 0, void 0, firework.size, void 0, image, void 0, false);
      if (obj != null) {
        obj.SetCallback_lnidq9$(FireworkManager$explosion$lambda(this, firework));
        obj.movement.x = fireball.movement.x * firework.drag;
        obj.movement.y = fireball.movement.y * firework.drag;
        obj.movement.z = fireball.movement.z * firework.drag;
        var backup = Position$Companion_getInstance().copy_qgvyiu$(obj.movement);
        obj.movement.x = obj.movement.x + -createPos.x / firework.shrinkTime;
        obj.movement.y = obj.movement.y + -createPos.y / firework.shrinkTime;
        obj.movement.z = obj.movement.z + -createPos.z / firework.shrinkTime;
        obj.addLocalVariables_bm4g0d$('Backup', backup);
        obj.addLocalVariables_bm4g0d$('State', Kotlin.isType(tmp$_1 = 'ready', Any) ? tmp$_1 : throwCCE());
        var tmp$_2 = firework.timeToLive;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (i == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(i)) {
            FLOAT$result_1 = numberToDouble(i);
            break FLOAT$break;
          }
          if (typeof i === 'string') {
            try {
              var number_1 = toDouble(i);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        obj.timeToLive = tmp$_2 + FLOAT$result_1 * 0.01;
        obj.keepDirection = true;
        var tmp$_3 = obj.rotation;
        var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(300) + 1 | 0;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_2 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_2 = toDouble(value_1);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        tmp$_3.z = FLOAT$result_2;
        ensureNotNull(obj.GetSprite()).SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$(0.0));
        ensureNotNull(obj.GetSprite()).SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
        obj.SetOriginalAlpha_mx4ult$(0.0);
        var subFireball = firework.getFireball();
        if (subFireball != null) {
          obj.addLocalVariables_bm4g0d$('Fireball', subFireball);
        }
      }
    }
  };
  FireworkManager.prototype.createFirework_uq37hz$ = function (ballSize, amount, shrinkTime, power, drag, timeToLive, size, fireShrinkStart, fireShrinkEnd, maxBrightStart, maxBrightEnd, brightOffTime, timeScale, depth, decrease) {
    if (ballSize === void 0)
      ballSize = 100.0;
    if (amount === void 0)
      amount = 50;
    if (shrinkTime === void 0)
      shrinkTime = 0.1;
    if (power === void 0)
      power = 300.0;
    if (drag === void 0)
      drag = 1.0;
    if (timeToLive === void 0)
      timeToLive = 1.5;
    if (size === void 0)
      size = 100.0;
    if (fireShrinkStart === void 0)
      fireShrinkStart = 1.0;
    if (fireShrinkEnd === void 0)
      fireShrinkEnd = 1.5;
    if (maxBrightStart === void 0)
      maxBrightStart = 0.2;
    if (maxBrightEnd === void 0)
      maxBrightEnd = 1.0;
    if (brightOffTime === void 0)
      brightOffTime = 0.5;
    if (timeScale === void 0)
      timeScale = 1.0;
    if (depth === void 0)
      depth = 0;
    if (decrease === void 0)
      decrease = 0.5;
    var tmp$;
    var fireball = Firework_init(ballSize, amount, shrinkTime, power, drag, timeToLive, size, fireShrinkStart, fireShrinkEnd, maxBrightStart, maxBrightEnd, brightOffTime, timeScale);
    if (depth > 0) {
      var FLOAT$result;
      FLOAT$break: do {
        if (amount == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(amount)) {
          FLOAT$result = numberToDouble(amount);
          break FLOAT$break;
        }
        if (typeof amount === 'string') {
          try {
            var number = toDouble(amount);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var value = FLOAT$result * decrease;
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number_0 = toInt_0(value);
            INT$result = number_0;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      tmp$ = INT$result - 1 | 0;
      for (var n = 0; n <= tmp$; n++) {
        fireball.addFireball_1jtdr7$(this.createFirework_uq37hz$(ballSize, 3, shrinkTime, power, drag, void 0, size, void 0, void 0, void 0, void 0, void 0, timeScale * 1.0, depth - 1 | 0));
      }
    }
    return fireball;
  };
  FireworkManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FireworkManager',
    interfaces: []
  };
  function FireworkManager_init(particleManager, $this) {
    $this = $this || Object.create(FireworkManager.prototype);
    FireworkManager.call($this);
    $this.particleManager = particleManager;
    return $this;
  }
  function CallbackEvent() {
  }
  CallbackEvent.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'CallbackEvent',
    interfaces: []
  };
  function IActivityRequestHandler() {
  }
  IActivityRequestHandler.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'IActivityRequestHandler',
    interfaces: []
  };
  function UserLocalData() {
  }
  UserLocalData.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'UserLocalData',
    interfaces: []
  };
  function UserDefaults() {
    UserDefaults$Companion_getInstance();
  }
  function UserDefaults$Holder() {
    UserDefaults$Holder_instance = this;
    this.instance = new UserDefaults();
    this.user_n3qzoi$_0 = this.user_n3qzoi$_0;
  }
  Object.defineProperty(UserDefaults$Holder.prototype, 'user', {
    get: function () {
      if (this.user_n3qzoi$_0 == null)
        return throwUPAE('user');
      return this.user_n3qzoi$_0;
    },
    set: function (user) {
      this.user_n3qzoi$_0 = user;
    }
  });
  UserDefaults$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var UserDefaults$Holder_instance = null;
  function UserDefaults$Holder_getInstance() {
    if (UserDefaults$Holder_instance === null) {
      new UserDefaults$Holder();
    }
    return UserDefaults$Holder_instance;
  }
  function UserDefaults$Companion() {
    UserDefaults$Companion_instance = this;
  }
  UserDefaults$Companion.prototype.initialize_hwx2pe$ = function (user) {
    UserDefaults$Holder_getInstance().user = user;
  };
  UserDefaults$Companion.prototype.string_61zpoe$ = function (forKey) {
    return UserDefaults$Holder_getInstance().user.Get_61zpoe$(forKey);
  };
  UserDefaults$Companion.prototype.Set_hwpqgh$ = function (value, forKey) {
    var data = value.toString();
    UserDefaults$Holder_getInstance().user.Set_puj7f4$(data, forKey);
  };
  UserDefaults$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var UserDefaults$Companion_instance = null;
  function UserDefaults$Companion_getInstance() {
    if (UserDefaults$Companion_instance === null) {
      new UserDefaults$Companion();
    }
    return UserDefaults$Companion_instance;
  }
  UserDefaults.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UserDefaults',
    interfaces: []
  };
  function PhantomLoader() {
    this.requestHandler = null;
  }
  PhantomLoader.prototype.preload = function () {
    this.game.scale.scaleMode = ScaleManager$Companion.SHOW_ALL;
    this.game.load.image('loading1', 'Resource/UI/Loading1.png');
    this.game.load.image('loading2', 'Resource/UI/Loading2.png');
  };
  PhantomLoader.prototype.create = function () {
    var w = this.game.width;
    var h = this.game.height;
    start(this.game.state, Samsara_init(this.requestHandler), void 0, void 0, []);
  };
  PhantomLoader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PhantomLoader',
    interfaces: []
  };
  function PhantomLoader_init(userDefault, handler, $this) {
    $this = $this || Object.create(PhantomLoader.prototype);
    State.call($this);
    PhantomLoader.call($this);
    UserDefaults$Companion_getInstance().initialize_hwx2pe$(userDefault);
    $this.requestHandler = handler;
    return $this;
  }
  function Samsara() {
    this.w_8be2vx$ = 0.0;
    this.h_8be2vx$ = 0.0;
    this.newW_8be2vx$ = 0.0;
    this.newH_8be2vx$ = 0.0;
    this.deviceScene_qeu8eq$_0 = this.deviceScene_qeu8eq$_0;
    this.requestHandler = null;
    this.loading1_1qxakp$_0 = this.loading1_1qxakp$_0;
    this.loading2_1qxaju$_0 = this.loading2_1qxaju$_0;
  }
  Object.defineProperty(Samsara.prototype, 'deviceScene', {
    get: function () {
      if (this.deviceScene_qeu8eq$_0 == null)
        return throwUPAE('deviceScene');
      return this.deviceScene_qeu8eq$_0;
    },
    set: function (deviceScene) {
      this.deviceScene_qeu8eq$_0 = deviceScene;
    }
  });
  Object.defineProperty(Samsara.prototype, 'loading1', {
    get: function () {
      if (this.loading1_1qxakp$_0 == null)
        return throwUPAE('loading1');
      return this.loading1_1qxakp$_0;
    },
    set: function (loading1) {
      this.loading1_1qxakp$_0 = loading1;
    }
  });
  Object.defineProperty(Samsara.prototype, 'loading2', {
    get: function () {
      if (this.loading2_1qxaju$_0 == null)
        return throwUPAE('loading2');
      return this.loading2_1qxaju$_0;
    },
    set: function (loading2) {
      this.loading2_1qxaju$_0 = loading2;
    }
  });
  Samsara.prototype.preload = function () {
  };
  Samsara.prototype.create = function () {
    var tmp$, tmp$_0;
    this.w_8be2vx$ = this.game.width;
    this.h_8be2vx$ = this.game.height;
    var locale = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$CURRENT_LOCALE_getInstance(), void 0, '');
    if (equals(locale, '')) {
      locale = 'en';
    }
    SetLocale(locale);
    SystemConfigure$Companion_getInstance().releaseConfig();
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Reset Hint'), 'true')) {
      DataUtil$Companion_getInstance().SetInteger_rjan26$('BeginnerGameHint', void 0, 0);
      DataUtil$Companion_getInstance().SetInteger_rjan26$('Beginner6x6GameHint', void 0, 0);
      DataUtil$Companion_getInstance().SetInteger_rjan26$('ClassicGameHint', void 0, 0);
      DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 0);
      DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_3_3_COMPLETE_getInstance(), void 0, 0);
      DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_6_6_COMPLETE_getInstance(), void 0, 0);
    }
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 1);
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_3_3_COMPLETE_getInstance(), void 0, 1);
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_6_6_COMPLETE_getInstance(), void 0, 1);
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Draw FPS', void 0, 1);
    var modeString = listOf_0(['Beginner', 'Beginner6x6', 'Classic']);
    tmp$ = modeString.iterator();
    while (tmp$.hasNext()) {
      var mode = tmp$.next();
      var record = AndroidPlayerRecord_init(mode, '');
      PlayerRecordManager$Companion_getInstance().shared().addRecord_psi95l$(mode, record);
      record.LoadHighScore_3uxocb$();
      record.LoadMaxCombo_3uxocb$();
      record.LoadMaxFever_3uxocb$();
      record.LoadMaxSPS_3uxocb$();
    }
    PlayerRecordManager$Companion_getInstance().shared().SetPlayerAchievement_79oy9z$(AndroidPlayerAchievement_init(''));
    PlayerRecordManager$Companion_getInstance().shared().loadAchievement();
    var quality = 1;
    var q = document.getElementById('quality');
    if (q != null) {
      quality = toInt_0((Kotlin.isType(tmp$_0 = q, HTMLElement) ? tmp$_0 : throwCCE()).innerText);
    }
    DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, quality);
    ItemManager$Companion_getInstance().shared().initializeItemTable();
    ItemManager$Companion_getInstance().shared().loadAllPlayerItem();
    StoreManager$Companion_getInstance().shared().load();
    this.deviceScene = DeviceScene_init(this.w_8be2vx$, this.h_8be2vx$);
    this.loading1 = this.game.add.image(0, this.h_8be2vx$, 'loading1');
    this.loading1.anchor.y = 1.0;
    this.loading2 = this.game.add.image(0, this.h_8be2vx$, 'loading2');
    this.loading2.anchor.y = 1.0;
    this.loadResource();
  };
  function Samsara$loadResource$lambda(closure$text) {
    return function (progress, cacheKey, success, totalLoaded, totalFiles) {
      closure$text.v.setText('Loading... ' + toString(progress) + '%');
    };
  }
  function Samsara$loadResource$lambda_0(this$Samsara, closure$text) {
    return function () {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      tmp$_0 = (Kotlin.isType(tmp$ = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$ : throwCCE()).atlas.iterator();
      while (tmp$_0.hasNext()) {
        var atlas = tmp$_0.next();
        var frameData = this$Samsara.game.cache.getFrameData(atlas);
        tmp$_1 = frameData.getFrames();
        for (tmp$_2 = 0; tmp$_2 !== tmp$_1.length; ++tmp$_2) {
          var frame = tmp$_1[tmp$_2];
          var name = substringBefore(frame.name, '.png');
          var texture = GuestGDXTexture_init_0(name, frame.name, atlas);
          ResourceManager$Companion_getInstance().shared().addTexture_p1juio$(name, texture);
        }
      }
      this$Samsara.loading1.destroy();
      this$Samsara.loading2.destroy();
      destroy(closure$text.v);
      this$Samsara.startPhantom();
      HAL$Companion_getInstance().shared().presentView_xl35ob$(new MainMenuView());
      return Unit;
    };
  }
  Samsara.prototype.loadResource = function () {
    var loadingAction = ArrayList_init();
    loadingAction.addAll_brywnq$(AppController$Companion_getInstance().shared().loadDefaultResource_dleff0$(this.w_8be2vx$, this.h_8be2vx$));
    loadingAction.addAll_brywnq$(AppController$Companion_getInstance().shared().loadSoundResource());
    while (loadingAction.size > 0) {
      var work = loadingAction.removeAt_za3lpa$(0);
      work();
    }
    var blockId = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$CURRENT_BLOCK_SET_getInstance(), void 0, 'BlocksetNumber');
    AppController$Companion_getInstance().shared().changeCurrentBlockSet_61zpoe$(blockId);
    AppController$Companion_getInstance().shared().saveCurrentBlockSet();
    this.game.load.json('jsonMatch', 'Resource/Match.json');
    this.game.load.json('jsonBlock', 'Resource/Block.json');
    this.game.load.json('jsonEffect', 'Resource/Effect.json');
    var text = {v: this.game.add.text(this.w_8be2vx$ * 0.98, this.h_8be2vx$, '')};
    text.v.fill = '#ffffff';
    text.v.anchor.x = 1.0;
    text.v.anchor.y = 1.0;
    this.game.load.onFileComplete.add(Samsara$loadResource$lambda(text));
    this.game.load.onLoadComplete.add(Samsara$loadResource$lambda_0(this, text));
    this.game.load.start();
  };
  function Samsara$startPhantom$lambda(touch) {
    var pos = HAL$Companion_getInstance().shared().convertCoordinate_dleff0$(touch.x, touch.y);
    HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(pos.x, pos.y, TouchListener$State$began_getInstance());
  }
  function Samsara$startPhantom$lambda_0(touch) {
    var pos = HAL$Companion_getInstance().shared().convertCoordinate_dleff0$(touch.x, touch.y);
    HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(pos.x, pos.y, TouchListener$State$ended_getInstance());
  }
  Samsara.prototype.startPhantom = function () {
    equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Memory Test'), 'false');
    this.deviceScene.initialize();
    AppController$Companion_getInstance().shared().initialize_hmf0yx$(this.requestHandler);
    HAL$Companion_getInstance().shared().initialize();
    SoundManager$Companion_getInstance().shared().initialize();
    var master = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$MASTER_VOLUME_getInstance(), void 0, 100);
    SoundManager$Companion_getInstance().shared().SetMasterVolume_mx4ult$(master);
    var bgm = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BGM_VOLUME_getInstance(), void 0, 100);
    SoundManager$Companion_getInstance().shared().SetBGMVolume_mx4ult$(bgm);
    if (bgm === 0) {
      AppController$Companion_getInstance().shared().setAdsMute_6taknv$(true);
    }
    var effect = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$EFFECT_VOLUME_getInstance(), void 0, 100);
    SoundManager$Companion_getInstance().shared().SetEffectVolume_mx4ult$(effect);
    this.game.input.mouse.capture = true;
    this.game.input.onDown.add(Samsara$startPhantom$lambda);
    this.game.input.onUp.add(Samsara$startPhantom$lambda_0);
  };
  Samsara.prototype.update = function () {
    var elapsed = numberToDouble(this.game.time.elapsedMS);
    elapsed = elapsed / 1000.0;
    HAL$Companion_getInstance().shared().update_mx4ult$(elapsed);
  };
  Samsara.prototype.render = function () {
  };
  Samsara.prototype.dispose = function () {
    SoundManager$Companion_getInstance().shutdown();
    GameCenterManager$Companion_getInstance().shutdown();
    PlayerRecordManager$Companion_getInstance().shutdown();
    ItemManager$Companion_getInstance().shutdown();
    StoreManager$Companion_getInstance().shutdown();
    ResourceManager$Companion_getInstance().shutdown();
    TextureManager$Companion_getInstance().shutdown();
    HAL$Companion_getInstance().shared().shutdown();
    AppController$Companion_getInstance().shutdown();
  };
  Samsara.prototype.pause = function () {
    HAL$Companion_getInstance().shared().moveToBackground();
  };
  Samsara.prototype.resume = function () {
    HAL$Companion_getInstance().shared().resume();
  };
  Samsara.prototype.resize_vux9f0$ = function (width, height) {
    this.newW_8be2vx$ = width;
    this.newH_8be2vx$ = height;
  };
  Samsara.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Samsara',
    interfaces: []
  };
  function Samsara_init(handler, $this) {
    $this = $this || Object.create(Samsara.prototype);
    State.call($this);
    Samsara.call($this);
    $this.requestHandler = handler;
    return $this;
  }
  function SystemConfigure() {
    SystemConfigure$Companion_getInstance();
  }
  function SystemConfigure$Companion() {
    SystemConfigure$Companion_instance = this;
    this.configList = LinkedHashMap_init();
    this.performance = 0.1;
  }
  SystemConfigure$Companion.prototype.debugConfig = function () {
    this.addConfigure_puj7f4$('Show FPS', 'true');
    this.addConfigure_puj7f4$('Camera Info', 'true');
    this.addConfigure_puj7f4$('Show Purchase Test', 'true');
    this.addConfigure_puj7f4$('Show Character Change', 'true');
    this.addConfigure_puj7f4$('Unity Ads Test', 'true');
    this.addConfigure_puj7f4$('AdMob Test', 'true');
    this.addConfigure_puj7f4$('Memory Test', 'false');
    this.addConfigure_puj7f4$('Star Test', 'true');
    this.addConfigure_puj7f4$('Login GameCenter', 'true');
    this.addConfigure_puj7f4$('Logging', 'true');
    this.addConfigure_puj7f4$('Logging To Screen', 'true');
    this.performance = 1.0;
  };
  SystemConfigure$Companion.prototype.memoryConfig = function () {
    this.addConfigure_puj7f4$('Show FPS', 'true');
    this.addConfigure_puj7f4$('Camera Info', 'true');
    this.addConfigure_puj7f4$('Show Purchase Test', 'true');
    this.addConfigure_puj7f4$('Show Character Change', 'true');
    this.addConfigure_puj7f4$('Unity Ads Test', 'false');
    this.addConfigure_puj7f4$('AdMob Test', 'false');
    this.addConfigure_puj7f4$('Memory Test', 'true');
    this.addConfigure_puj7f4$('Auto Play', 'true');
    this.addConfigure_puj7f4$('Login GameCenter', 'false');
    this.performance = 1.0;
  };
  SystemConfigure$Companion.prototype.testFlightConfig = function () {
    this.addConfigure_puj7f4$('Show FPS', 'false');
    this.addConfigure_puj7f4$('Camera Info', 'false');
    this.addConfigure_puj7f4$('Show Purchase Test', 'false');
    this.addConfigure_puj7f4$('Show Character Change', 'false');
    this.addConfigure_puj7f4$('Unity Ads Test', 'true');
    this.addConfigure_puj7f4$('AdMob Test', 'true');
    this.addConfigure_puj7f4$('Memory Test', 'false');
    this.addConfigure_puj7f4$('Login GameCenter', 'true');
    this.performance = 1.0;
  };
  SystemConfigure$Companion.prototype.recordConfig = function () {
    this.addConfigure_puj7f4$('Record', 'true');
    this.addConfigure_puj7f4$('RecordForTitle', 'false');
    this.addConfigure_puj7f4$('RecordForTutorial', 'false');
    this.addConfigure_puj7f4$('Show FPS', 'false');
    this.addConfigure_puj7f4$('Camera Info', 'false');
    this.addConfigure_puj7f4$('Show Purchase Test', 'false');
    this.addConfigure_puj7f4$('Show Character Change', 'false');
    this.addConfigure_puj7f4$('Unity Ads Test', 'true');
    this.addConfigure_puj7f4$('AdMob Test', 'true');
    this.addConfigure_puj7f4$('Memory Test', 'false');
    this.addConfigure_puj7f4$('Login GameCenter', 'false');
    this.addConfigure_puj7f4$('Logging', 'false');
    this.addConfigure_puj7f4$('Logging To Screen', 'false');
    this.performance = 1.0;
  };
  SystemConfigure$Companion.prototype.releaseConfig = function () {
    this.addConfigure_puj7f4$('Show FPS', 'false');
    this.addConfigure_puj7f4$('Camera Info', 'false');
    this.addConfigure_puj7f4$('Show Purchase Test', 'false');
    this.addConfigure_puj7f4$('Show Character Change', 'false');
    this.addConfigure_puj7f4$('Unity Ads Test', 'false');
    this.addConfigure_puj7f4$('AdMob Test', 'false');
    this.addConfigure_puj7f4$('Memory Test', 'false');
    this.addConfigure_puj7f4$('Auto Play', 'false');
    this.addConfigure_puj7f4$('Login GameCenter', 'true');
    this.addConfigure_puj7f4$('Logging', 'false');
    this.addConfigure_puj7f4$('Logging To Screen', 'false');
    this.performance = 0.1;
  };
  SystemConfigure$Companion.prototype.demoConfig = function () {
    this.addConfigure_puj7f4$('Demo', 'true');
    this.addConfigure_puj7f4$('Show FPS', 'false');
    this.addConfigure_puj7f4$('Camera Info', 'false');
    this.addConfigure_puj7f4$('Show Purchase Test', 'false');
    this.addConfigure_puj7f4$('Show Character Change', 'false');
    this.addConfigure_puj7f4$('Unity Ads Test', 'false');
    this.addConfigure_puj7f4$('AdMob Test', 'false');
    this.addConfigure_puj7f4$('Memory Test', 'false');
    this.addConfigure_puj7f4$('Auto Play', 'false');
    this.addConfigure_puj7f4$('Login GameCenter', 'true');
    this.addConfigure_puj7f4$('Logging', 'false');
    this.addConfigure_puj7f4$('Logging To Screen', 'false');
    this.performance = 1.0;
  };
  SystemConfigure$Companion.prototype.autoplayConfig = function () {
    this.addConfigure_puj7f4$('Show FPS', 'false');
    this.addConfigure_puj7f4$('Camera Info', 'false');
    this.addConfigure_puj7f4$('Show Purchase Test', 'false');
    this.addConfigure_puj7f4$('Show Character Change', 'false');
    this.addConfigure_puj7f4$('Unity Ads Test', 'false');
    this.addConfigure_puj7f4$('AdMob Test', 'false');
    this.addConfigure_puj7f4$('Memory Test', 'false');
    this.addConfigure_puj7f4$('Auto Play', 'true');
    this.addConfigure_puj7f4$('Login GameCenter', 'false');
    this.addConfigure_puj7f4$('Logging', 'false');
    this.addConfigure_puj7f4$('Logging To Screen', 'false');
    this.performance = 1.0;
  };
  SystemConfigure$Companion.prototype.addConfigure_puj7f4$ = function (key, value) {
    this.configList.put_xwzc9p$(key, value);
  };
  SystemConfigure$Companion.prototype.GetConfigure_jyasbz$ = function (key, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = null;
    return this.configList.get_11rb$(key);
  };
  SystemConfigure$Companion.prototype.SetInteger_bm4lxs$ = function (key, value) {
    var tmp$ = this.configList;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var value_0 = STRING$result;
    tmp$.put_xwzc9p$(key, value_0);
  };
  SystemConfigure$Companion.prototype.GetInteger_bm4lxs$ = function (key, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0;
    var value = this.configList.get_11rb$(key);
    var INT$result;
    INT$break: do {
      if (value == null) {
        INT$result = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value)) {
        INT$result = numberToInt(value);
        break INT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toInt_0(value);
          INT$result = number;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result = 0;
    }
     while (false);
    return INT$result;
  };
  SystemConfigure$Companion.prototype.SetFloat_9sobi5$ = function (key, value) {
    var tmp$ = this.configList;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var value_0 = STRING$result;
    tmp$.put_xwzc9p$(key, value_0);
  };
  SystemConfigure$Companion.prototype.GetFloat_9sobi5$ = function (key, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var value = this.configList.get_11rb$(key);
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    return FLOAT$result;
  };
  SystemConfigure$Companion.prototype.SetDouble_io5o9c$ = function (key, value) {
    var tmp$ = this.configList;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var value_0 = STRING$result;
    tmp$.put_xwzc9p$(key, value_0);
  };
  SystemConfigure$Companion.prototype.GetDouble_io5o9c$ = function (key, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var value = this.configList.get_11rb$(key);
    var DOUBLE$result;
    DOUBLE$break: do {
      if (value == null) {
        DOUBLE$result = 0.0;
        break DOUBLE$break;
      }
      if (Kotlin.isNumber(value)) {
        DOUBLE$result = numberToDouble(value);
        break DOUBLE$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          DOUBLE$result = number;
          break DOUBLE$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            DOUBLE$result = 0.0;
            break DOUBLE$break;
          }
           else
            throw e;
        }
      }
      DOUBLE$result = 0.0;
    }
     while (false);
    return DOUBLE$result;
  };
  SystemConfigure$Companion.prototype.GetPerformance = function () {
    return 1.0;
  };
  SystemConfigure$Companion.prototype.isWatchOS = function () {
    return false;
  };
  SystemConfigure$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SystemConfigure$Companion_instance = null;
  function SystemConfigure$Companion_getInstance() {
    if (SystemConfigure$Companion_instance === null) {
      new SystemConfigure$Companion();
    }
    return SystemConfigure$Companion_instance;
  }
  SystemConfigure.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SystemConfigure',
    interfaces: []
  };
  function GuestGDXNode() {
    this.parent = null;
    this.childList = ArrayList_init();
    this.isHidden = false;
    this.size = Size_init();
    this.color = Color$Companion_getInstance().white_mx4ult$();
    this.blendMode = BlendMode$alpha_getInstance();
    this.z = 0.0;
    this.anchor = Position_init();
  }
  var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
  GuestGDXNode.prototype.GetObject = function () {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetShow_6taknv$ = function (show) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetPosition_qgvyiu$ = function (point) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.GetPosition = function () {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetZPosition_mx4ult$ = function (z) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.GetZPosition = function () {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetSize_dleff0$ = function (width, height) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.GetSize = function () {
    return this.size;
  };
  GuestGDXNode.prototype.SetAnchorPoint_qgvyiu$ = function (point) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.GetAnchorPoint = function () {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetScale_dleff0$ = function (x, y) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.GetScale = function () {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetColor_7b5o5w$ = function (r, g, b, a) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetAlpha_mx4ult$ = function (alpha) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetColorBlendFactor_mx4ult$ = function (factor) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.SetZRotation_mx4ult$ = function (rotation) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.convertCoordinate_dleff0$ = function (x, y) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.draw_4tzqwv$ = function (point, z) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  GuestGDXNode.prototype.addChild_jrj3jl$ = function (child) {
    this.childList.add_11rb$(child);
    child.SetParent_jrj3jl$(this);
  };
  GuestGDXNode.prototype.SetParent_jrj3jl$ = function (parent) {
    this.parent = parent;
  };
  GuestGDXNode.prototype.GetParent = function () {
    return this.parent;
  };
  GuestGDXNode.prototype.remove = function () {
    var tmp$;
    (tmp$ = this.parent) != null ? (tmp$.removeChild_jrj3jl$(this), Unit) : null;
  };
  GuestGDXNode.prototype.removeChild_jrj3jl$ = function (child) {
    this.childList.remove_11rb$(child);
  };
  GuestGDXNode.prototype.GetNodeWithRectangle_lvlpq5$ = function (point, list) {
  };
  GuestGDXNode.prototype.sort = function () {
  };
  function GuestGDXNode$_draw$lambda(it) {
    return it.GetZPosition();
  }
  var compareBy$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  var Comparator = Kotlin.kotlin.Comparator;
  function Comparator$ObjectLiteral(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  GuestGDXNode.prototype._draw_f2myq8$$default = function (cropRect) {
    var tmp$, tmp$_0;
    sortWith(this.childList, new Comparator$ObjectLiteral(compareBy$lambda(GuestGDXNode$_draw$lambda)));
    tmp$ = reversed(this.childList).iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var node = Kotlin.isType(tmp$_0 = child, GuestGDXNode) ? tmp$_0 : throwCCE();
      node.sort();
      node._draw_f2myq8$(cropRect);
    }
  };
  GuestGDXNode.prototype._draw_f2myq8$ = function (cropRect, callback$default) {
    if (cropRect === void 0)
      cropRect = null;
    callback$default ? callback$default(cropRect) : this._draw_f2myq8$$default(cropRect);
  };
  GuestGDXNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GuestGDXNode',
    interfaces: [GuestNode]
  };
  function GuestGDXTexture() {
    this.name = null;
    this.nameInAtlas = '';
    this.atlas = '';
  }
  GuestGDXTexture.prototype.GetName = function () {
    return this.name;
  };
  GuestGDXTexture.prototype.GetSize = function () {
    if (equals(this.atlas, '')) {
      var image = $module$PIXI.game.cache.getImage(this.name);
      if (image != null) {
        return Size_init(ensureNotNull(image).width, ensureNotNull(image).height);
      }
    }
     else {
      var image_0 = $module$PIXI.game.cache.getFrameByName(this.atlas, this.nameInAtlas);
      if (image_0 != null) {
        return Size_init(numberToDouble(ensureNotNull(image_0).width), numberToDouble(ensureNotNull(image_0).height));
      }
    }
    return Size_init(0.0, 0.0);
  };
  GuestGDXTexture.prototype.GetObject = function () {
    if (equals(this.atlas, '')) {
      var image = $module$PIXI.game.cache.getImage(this.name);
      if (image != null) {
        return ensureNotNull(image);
      }
    }
     else {
      var image_0 = $module$PIXI.game.cache.getFrameByName(this.atlas, this.nameInAtlas);
      if (image_0 != null) {
        return ensureNotNull(image_0);
      }
    }
    return Unit;
  };
  GuestGDXTexture.prototype.GetAtlas = function () {
    return this.atlas;
  };
  GuestGDXTexture.prototype.GetNameInAtlas = function () {
    return this.nameInAtlas;
  };
  GuestGDXTexture.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GuestGDXTexture',
    interfaces: [GuestTexture]
  };
  function GuestGDXTexture_init(name, $this) {
    $this = $this || Object.create(GuestGDXTexture.prototype);
    GuestGDXTexture.call($this);
    $this.name = name;
    return $this;
  }
  function GuestGDXTexture_init_0(name, nameInAtlas, atlas, $this) {
    $this = $this || Object.create(GuestGDXTexture.prototype);
    GuestGDXTexture.call($this);
    $this.name = name;
    $this.nameInAtlas = nameInAtlas;
    $this.atlas = atlas;
    return $this;
  }
  function GuestGDXSprite() {
    this.obj = null;
    this.rotation = 0.0;
    this.crop = null;
    this.name = '';
    this.atlas = '';
    this.nameInAtlas = '';
  }
  GuestGDXSprite.prototype.GetObject = function () {
    return this.obj;
  };
  GuestGDXSprite.prototype.remove = function () {
    var tmp$;
    this.obj.destroy();
    (tmp$ = this.parent) != null ? (tmp$.removeChild_jrj3jl$(this), Unit) : null;
  };
  GuestGDXSprite.prototype.SetShow_6taknv$ = function (show) {
    this.isHidden = show === true ? false : true;
    if (this.isHidden === true) {
      this.obj.alpha = 0.0;
      this.obj.visible = false;
    }
     else {
      this.obj.visible = true;
    }
  };
  GuestGDXSprite.prototype.SetPosition_qgvyiu$ = function (point) {
    this.obj.position.x = point.x;
    this.obj.position.y = point.y;
  };
  GuestGDXSprite.prototype.GetPosition = function () {
    return Position_init(this.obj.position.x, this.obj.position.y);
  };
  GuestGDXSprite.prototype.SetZPosition_mx4ult$ = function (z) {
    this.obj.z = z;
    this.z = z;
  };
  GuestGDXSprite.prototype.GetZPosition = function () {
    return this.z;
  };
  GuestGDXSprite.prototype.SetSize_dleff0$ = function (width, height) {
    this.obj.width = width;
    this.obj.height = height;
    this.SetAnchorPoint_qgvyiu$(Position_init(0.5, 0.5));
  };
  GuestGDXSprite.prototype.GetSize = function () {
    return Size_init(this.obj.width, this.obj.height);
  };
  GuestGDXSprite.prototype.SetAnchorPoint_qgvyiu$ = function (point) {
    this.obj.anchor.x = point.x;
    this.obj.anchor.y = point.y;
  };
  GuestGDXSprite.prototype.GetAnchorPoint = function () {
    return Position_init(this.obj.anchor.x, this.obj.anchor.y);
  };
  GuestGDXSprite.prototype.SetScale_dleff0$ = function (x, y) {
    this.obj.scale.x = x;
    this.obj.scale.y = y;
  };
  GuestGDXSprite.prototype.GetScale = function () {
    return Position_init(this.obj.scale.x, this.obj.scale.y);
  };
  GuestGDXSprite.prototype.SetColor_7b5o5w$ = function (r, g, b, a) {
    this.color.r = r;
    this.color.g = g;
    this.color.b = b;
    this.color.a = a;
    this.obj.tint = r * 255 * 256 * 256 + g * 255 * 256 + b * 255;
  };
  GuestGDXSprite.prototype.SetAlpha_mx4ult$ = function (alpha) {
    this.color.a = alpha;
  };
  GuestGDXSprite.prototype.SetColorBlendFactor_mx4ult$ = function (factor) {
  };
  GuestGDXSprite.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    this.blendMode = mode;
    if (mode === BlendMode$alpha_getInstance()) {
      this.obj.blendMode = blendModes$NORMAL;
    }
     else if (mode === BlendMode$add_getInstance()) {
      this.obj.blendMode = blendModes$ADD;
    }
  };
  GuestGDXSprite.prototype.SetZRotation_mx4ult$ = function (rotation) {
    this.rotation = -1 * rotation;
    this.obj.rotation = this.rotation;
  };
  GuestGDXSprite.prototype.convertCoordinate_dleff0$ = function (x, y) {
    return Position_init(this.GetPosition().x - this.GetSize().width / 2 + x, this.GetPosition().y - this.GetSize().height / 2 + y);
  };
  GuestGDXSprite.prototype.draw_4tzqwv$ = function (point, z) {
    this.z = z;
    this.obj.position.x = point.x;
    this.obj.position.y = point.y;
  };
  GuestGDXSprite.prototype._draw_f2myq8$$default = function (cropRect) {
    if (this.isHidden === true) {
      this.obj.alpha = 0.0;
    }
     else {
      if (Kotlin.isType(this.GetParent(), GuestGDXMask)) {
        if (this.crop != null) {
          this.obj.alpha = this.color.a;
        }
      }
       else {
        this.obj.alpha = this.color.a;
      }
    }
    if (cropRect != null) {
      var tmp$ = this.obj != null;
      if (tmp$) {
        tmp$ = this.name.length === 0 === false;
      }
      if (tmp$) {
        if (!equals(this.crop, cropRect)) {
          this.crop = cropRect;
          this.obj.mask = cropRect;
        }
      }
    }
    this._draw_f2myq8$(cropRect, GuestGDXNode.prototype._draw_f2myq8$$default.bind(this));
  };
  GuestGDXSprite.prototype.SetCenterRect_g5erez$ = function (rect) {
  };
  GuestGDXSprite.prototype.SetTexture_h2vgz3$ = function (texture) {
    var tmp$, tmp$_0;
    var x = -1000.0;
    var y = -1000.0;
    var rotation = 0.0;
    var alpha = 0.0;
    var mask = null;
    if (this.obj != null) {
      x = this.obj.position.x;
      y = this.obj.position.y;
      rotation = this.obj.rotation;
      alpha = this.obj.alpha;
      mask = this.obj.mask;
      this.obj.destroy();
    }
    if (texture != null) {
      this.name = texture.GetName();
      this.atlas = (Kotlin.isType(tmp$ = texture, GuestGDXTexture) ? tmp$ : throwCCE()).GetAtlas();
      if (equals(this.atlas, '')) {
        this.obj = $module$PIXI.game.add.image(x, y, this.name);
      }
       else {
        this.nameInAtlas = (Kotlin.isType(tmp$_0 = texture, GuestGDXTexture) ? tmp$_0 : throwCCE()).GetNameInAtlas();
        this.obj = $module$PIXI.game.add.image(x, y, this.atlas, this.nameInAtlas);
      }
      this.obj.rotation = rotation;
      this.obj.alpha = alpha;
      if (mask != null) {
        this.obj.mask = ensureNotNull(mask);
      }
    }
  };
  GuestGDXSprite.prototype.GetTexture = function () {
    if (!equals(this.name, '')) {
      return GuestGDXTexture_init_0(this.name, this.nameInAtlas, this.atlas);
    }
    return null;
  };
  GuestGDXSprite.prototype.GetNodeWithRectangle_lvlpq5$ = function (point, list) {
    var tmp$;
    if (this.isHidden === true) {
      return;
    }
    if (this.color.a > 0.0) {
      var rect = Rect_init(this.GetPosition().x - this.GetSize().width * 0.5, this.GetPosition().y - this.GetSize().height * 0.5, this.GetSize().width, this.GetSize().height);
      if (point.x >= rect.x && point.x <= rect.x + rect.width) {
        if (point.y >= rect.y && point.y <= rect.y + rect.height) {
          list.add_11rb$(this);
        }
      }
    }
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (Kotlin.isType(child, GuestGDXNode)) {
        child.GetNodeWithRectangle_lvlpq5$(point, list);
      }
    }
  };
  GuestGDXSprite.prototype.sort = function () {
    if (this.obj != null) {
      $module$PIXI.game.world.sendToBack(this.obj);
    }
  };
  GuestGDXSprite.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GuestGDXSprite',
    interfaces: [GuestSprite, GuestGDXNode]
  };
  function GuestGDXSprite_init($this) {
    $this = $this || Object.create(GuestGDXSprite.prototype);
    GuestGDXNode.call($this);
    GuestGDXSprite.call($this);
    $this.obj = $module$PIXI.game.add.image(-1000, -1000, $this.name);
    $this.obj.alpha = 0.0;
    $this.color = Color$Companion_getInstance().white_mx4ult$(0.0);
    return $this;
  }
  function GuestGDXSprite_init_0(texture, $this) {
    $this = $this || Object.create(GuestGDXSprite.prototype);
    GuestGDXNode.call($this);
    GuestGDXSprite.call($this);
    var tmp$, tmp$_0;
    if (texture == null) {
      $this.obj = $module$PIXI.game.add.image(-1000, -1000, 'Resource/UI/Background');
      $this.color = Color$Companion_getInstance().white_mx4ult$(0.0);
    }
     else {
      $this.name = texture.GetName();
      $this.atlas = (Kotlin.isType(tmp$ = texture, GuestGDXTexture) ? tmp$ : throwCCE()).GetAtlas();
      if (equals($this.atlas, '')) {
        $this.obj = $module$PIXI.game.add.image(-1000, -1000, $this.name);
      }
       else {
        $this.nameInAtlas = (Kotlin.isType(tmp$_0 = texture, GuestGDXTexture) ? tmp$_0 : throwCCE()).GetNameInAtlas();
        $this.obj = $module$PIXI.game.add.image(-1000, -1000, $this.atlas, $this.nameInAtlas);
        $this.obj.alpha = 0.0;
      }
    }
    return $this;
  }
  function GuestGDXMask() {
    this.obj = null;
    this.mask = null;
    this.name = '';
  }
  GuestGDXMask.prototype.remove = function () {
    this.obj.destroy();
    if (this.mask != null) {
      ensureNotNull(this.mask).clear();
    }
  };
  GuestGDXMask.prototype.GetObject = function () {
    return this.obj;
  };
  GuestGDXMask.prototype.SetShow_6taknv$ = function (show) {
    this.isHidden = show === true ? false : true;
  };
  GuestGDXMask.prototype.SetPosition_qgvyiu$ = function (point) {
    this.obj.position.x = point.x;
    this.obj.position.y = point.y;
  };
  GuestGDXMask.prototype.GetPosition = function () {
    return Position_init(this.obj.position.x, this.obj.position.y);
  };
  GuestGDXMask.prototype.SetZPosition_mx4ult$ = function (z) {
    this.z = z;
  };
  GuestGDXMask.prototype.GetZPosition = function () {
    return this.z;
  };
  GuestGDXMask.prototype.SetSize_dleff0$ = function (width, height) {
    this.obj.width = width;
    this.obj.height = height;
    this.obj.anchor.x = 0.5;
    this.obj.anchor.y = 0.5;
  };
  GuestGDXMask.prototype.GetSize = function () {
    return Size_init(this.obj.width, this.obj.height);
  };
  GuestGDXMask.prototype.SetAnchorPoint_qgvyiu$ = function (point) {
  };
  GuestGDXMask.prototype.GetAnchorPoint = function () {
    return this.anchor;
  };
  GuestGDXMask.prototype.SetScale_dleff0$ = function (x, y) {
    this.obj.scale.x = x;
    this.obj.scale.y = y;
  };
  GuestGDXMask.prototype.GetScale = function () {
    return Position_init(this.obj.scale.x, this.obj.scale.y);
  };
  GuestGDXMask.prototype.SetColor_7b5o5w$ = function (r, g, b, a) {
    this.color.r = r;
    this.color.g = g;
    this.color.b = b;
    this.color.a = a;
  };
  GuestGDXMask.prototype.SetAlpha_mx4ult$ = function (alpha) {
    this.color.a = alpha;
  };
  GuestGDXMask.prototype.SetColorBlendFactor_mx4ult$ = function (factor) {
  };
  GuestGDXMask.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    this.blendMode = mode;
  };
  GuestGDXMask.prototype.SetZRotation_mx4ult$ = function (rotation) {
    this.obj.rotation = -1 * rotation;
  };
  GuestGDXMask.prototype.convertCoordinate_dleff0$ = function (x, y) {
    return Position_init(this.GetPosition().x - this.GetSize().width / 2 + x, this.GetPosition().y - this.GetSize().height / 2 + y);
  };
  GuestGDXMask.prototype.draw_4tzqwv$ = function (point, z) {
    this.z = z;
    this.SetPosition_qgvyiu$(point);
    if (this.mask == null) {
      this.mask = $module$PIXI.game.add.graphics(-1000, -1000);
      ensureNotNull(this.mask).beginFill(255);
      ensureNotNull(this.mask).alpha = 0.0;
      ensureNotNull(this.mask).drawRect(0, 0, this.obj.width, this.obj.height);
      ensureNotNull(this.mask).endFill();
    }
     else {
      ensureNotNull(this.mask).x = point.x - this.obj.width / 2.0;
      ensureNotNull(this.mask).y = point.y - this.obj.height / 2.0;
    }
  };
  GuestGDXMask.prototype._draw_f2myq8$$default = function (cropRect) {
    this._draw_f2myq8$(this.mask, GuestGDXNode.prototype._draw_f2myq8$$default.bind(this));
  };
  GuestGDXMask.prototype.GetTextureSize = function () {
    return Size_init(numberToDouble(this.obj.texture.width), numberToDouble(this.obj.texture.height));
  };
  GuestGDXMask.prototype.GetNodeWithRectangle_lvlpq5$ = function (point, list) {
    var tmp$;
    if (this.isHidden === true) {
      return;
    }
    if (this.color.a > 0.0) {
      var rect = Rect_init(this.GetPosition().x - this.GetSize().width * 0.5, this.GetPosition().y - this.GetSize().height * 0.5, this.GetSize().width, this.GetSize().height);
      if (point.x >= rect.x && point.x <= rect.x + rect.width) {
        if (point.y >= rect.y && point.y <= rect.y + rect.height) {
          list.add_11rb$(this);
        }
      }
    }
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (Kotlin.isType(child, GuestGDXNode)) {
        child.GetNodeWithRectangle_lvlpq5$(point, list);
      }
    }
  };
  GuestGDXMask.prototype.sort = function () {
    if (this.obj != null) {
      $module$PIXI.game.world.sendToBack(this.obj);
    }
  };
  GuestGDXMask.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GuestGDXMask',
    interfaces: [GuestMask, GuestGDXNode]
  };
  function GuestGDXMask_init(texture, $this) {
    $this = $this || Object.create(GuestGDXMask.prototype);
    GuestGDXNode.call($this);
    GuestGDXMask.call($this);
    if (texture == null) {
      $this.obj = $module$PIXI.game.add.image(-1000, -1000, 'Resource/UI/Background');
      $this.obj.alpha = 0.0;
      $this.color = Color$Companion_getInstance().white_mx4ult$(0.0);
    }
     else {
      $this.name = texture.GetName();
      $this.obj = $module$PIXI.game.add.image(-1000, -1000, $this.name);
      $this.obj.alpha = 0.0;
    }
    return $this;
  }
  function GuestGDXLabel() {
    this.obj = null;
    this.crop = null;
  }
  GuestGDXLabel.prototype.SetText_61zpoe$ = function (text) {
    this.obj.setText(text);
    this.obj.scale.x = 1.0;
    this.obj.scale.y = 1.0;
    this.size = Size_init(this.obj.width, this.obj.height);
  };
  GuestGDXLabel.prototype.SetFontSize_mx4ult$ = function (size) {
  };
  GuestGDXLabel.prototype.SetFontColor_7b5o5w$ = function (r, g, b, a) {
  };
  GuestGDXLabel.prototype.GetFrameSize = function () {
    return this.GetSize();
  };
  GuestGDXLabel.prototype.GetObject = function () {
    return this.obj;
  };
  GuestGDXLabel.prototype.remove = function () {
    var tmp$;
    var p = this.obj.parent;
    p.removeChild(this.obj);
    (tmp$ = this.parent) != null ? (tmp$.removeChild_jrj3jl$(this), Unit) : null;
  };
  GuestGDXLabel.prototype.SetShow_6taknv$ = function (show) {
    this.isHidden = show === true ? false : true;
    if (this.isHidden === true) {
      this.obj.alpha = 0.0;
      this.obj.visible = false;
    }
     else {
      this.obj.visible = true;
    }
  };
  GuestGDXLabel.prototype.SetPosition_qgvyiu$ = function (point) {
    this.obj.x = point.x;
    this.obj.y = point.y;
  };
  GuestGDXLabel.prototype.GetPosition = function () {
    return Position_init(this.obj.x, this.obj.y);
  };
  GuestGDXLabel.prototype.SetZPosition_mx4ult$ = function (z) {
    this.obj.z = z;
    this.z = z;
  };
  GuestGDXLabel.prototype.GetZPosition = function () {
    return this.z;
  };
  GuestGDXLabel.prototype.SetSize_dleff0$ = function (width, height) {
    var scale = 0.0;
    if (height > 0.0) {
      scale = height / this.size.height;
      if (width > 0.0) {
        if (this.size.width * scale > width) {
          scale = width / this.size.width;
        }
      }
    }
     else if (width > 0.0) {
      scale = width / this.size.width;
    }
    this.SetScale_dleff0$(scale, scale);
  };
  GuestGDXLabel.prototype.GetSize = function () {
    return Size_init(this.size.width * this.obj.scale.x, this.size.height * this.obj.scale.y);
  };
  GuestGDXLabel.prototype.SetAnchorPoint_qgvyiu$ = function (point) {
    this.anchor.x = point.x;
    this.anchor.y = point.y;
    this.obj.anchor.x = point.x;
    this.obj.anchor.y = point.y;
  };
  GuestGDXLabel.prototype.GetAnchorPoint = function () {
    return this.anchor;
  };
  GuestGDXLabel.prototype.SetScale_dleff0$ = function (x, y) {
    this.obj.scale.x = x;
    this.obj.scale.y = y;
  };
  GuestGDXLabel.prototype.GetScale = function () {
    return Position_init(this.obj.scale.x, this.obj.scale.y);
  };
  GuestGDXLabel.prototype.SetColor_7b5o5w$ = function (r, g, b, a) {
    this.color.r = r;
    this.color.g = g;
    this.color.b = b;
    this.obj.tint = r * 255 * 256 * 256 + g * 255 * 256 + b * 255;
    this.color.a = a;
  };
  GuestGDXLabel.prototype.SetAlpha_mx4ult$ = function (alpha) {
    this.color.a = alpha;
  };
  GuestGDXLabel.prototype.SetColorBlendFactor_mx4ult$ = function (factor) {
  };
  GuestGDXLabel.prototype.SetBlendMode_ieo8yr$ = function (mode) {
    this.blendMode = mode;
    if (mode === BlendMode$alpha_getInstance()) {
      this.obj.blendMode = blendModes$NORMAL;
    }
     else if (mode === BlendMode$add_getInstance()) {
      this.obj.blendMode = blendModes$ADD;
    }
  };
  GuestGDXLabel.prototype.SetZRotation_mx4ult$ = function (rotation) {
  };
  GuestGDXLabel.prototype.convertCoordinate_dleff0$ = function (x, y) {
    return Position_init(this.GetPosition().x - this.GetSize().width / 2 + x, this.GetPosition().y - this.GetSize().height / 2 + y);
  };
  GuestGDXLabel.prototype.draw_4tzqwv$ = function (point, z) {
    this.z = z;
    this.obj.x = point.x;
    this.obj.y = point.y + this.GetSize().height * 0.05;
  };
  GuestGDXLabel.prototype._draw_f2myq8$$default = function (cropRect) {
    if (this.isHidden === true) {
      this.obj.alpha = 0.0;
    }
     else {
      if (Kotlin.isType(this.GetParent(), GuestGDXMask)) {
        if (this.crop != null) {
          this.obj.alpha = this.color.a;
        }
      }
       else {
        this.obj.alpha = this.color.a;
      }
    }
    if (cropRect != null) {
      if (this.obj != null) {
        if (!equals(this.crop, cropRect)) {
          this.crop = cropRect;
          this.obj.mask = cropRect;
        }
      }
    }
    this._draw_f2myq8$(cropRect, GuestGDXNode.prototype._draw_f2myq8$$default.bind(this));
  };
  GuestGDXLabel.prototype.GetNodeWithRectangle_lvlpq5$ = function (point, list) {
    var tmp$;
    if (this.isHidden === true || this.color.a === 0.0) {
      return;
    }
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (Kotlin.isType(child, GuestGDXNode)) {
        child.GetNodeWithRectangle_lvlpq5$(point, list);
      }
    }
  };
  GuestGDXLabel.prototype.sort = function () {
    this.obj.sendToBack();
  };
  GuestGDXLabel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GuestGDXLabel',
    interfaces: [GuestLabel, GuestGDXNode]
  };
  function GuestGDXLabel_init($this) {
    $this = $this || Object.create(GuestGDXLabel.prototype);
    GuestGDXNode.call($this);
    GuestGDXLabel.call($this);
    $this.obj = $module$PIXI.game.add.text(-1000, -1000, '', TextStyle('15px Arial', void 0, void 0, void 0, void 0, void 0, '#19de65'));
    $this.obj.stroke = '#000000';
    $this.obj.strokeThickness = 2;
    $this.obj.fill = '#ffffff';
    $this.obj.fontSize = 60;
    $this.obj.anchor.x = 0.5;
    $this.obj.anchor.y = 0.0;
    return $this;
  }
  function GDXGuestScene() {
  }
  GDXGuestScene.prototype.touchesBegan_qgvyiu$ = function (touchLocation) {
    HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(touchLocation.x, touchLocation.y, TouchListener$State$began_getInstance());
  };
  GDXGuestScene.prototype.touchesMoved_qgvyiu$ = function (touchLocation) {
    HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(touchLocation.x, touchLocation.y, TouchListener$State$moved_getInstance());
  };
  GDXGuestScene.prototype.touchesEnded_qgvyiu$ = function (touchLocation) {
    HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(touchLocation.x, touchLocation.y, TouchListener$State$ended_getInstance());
  };
  GDXGuestScene.prototype.touchesCancelled_qgvyiu$ = function (touchLocation) {
    HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(touchLocation.x, touchLocation.y, TouchListener$State$cancelled_getInstance());
  };
  GDXGuestScene.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GDXGuestScene',
    interfaces: []
  };
  function DeviceScene() {
    this.obj = null;
    this.screen = null;
    this.atlas = ArrayList_init();
  }
  DeviceScene.prototype.initialize = function () {
    var tmp$;
    (tmp$ = this.screen) != null ? (tmp$.afterAttached(), Unit) : null;
  };
  DeviceScene.prototype.shutdown = function () {
  };
  DeviceScene.prototype.GetObject = function () {
    return this.obj;
  };
  DeviceScene.prototype.GetScreen = function () {
    return ensureNotNull(this.screen);
  };
  DeviceScene.prototype.createFont_basrv3$ = function (fontAlias, letter, fontSize, borderWidth, fontFile) {
    if (fontSize === void 0)
      fontSize = 20;
    if (borderWidth === void 0)
      borderWidth = 0.0;
    if (fontFile === void 0)
      fontFile = 'NanumGothicBold.ttf';
  };
  DeviceScene.prototype.addFontAlias_puj7f4$ = function (fontName, alias) {
  };
  DeviceScene.prototype.hideAllLabel_1zqrcg$ = function (child) {
    if (child === void 0)
      child = null;
    var tmp$, tmp$_0;
    var child_0 = child;
    if (child_0 == null) {
      child_0 = this;
    }
    tmp$ = child_0.childList.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      this.hideAllLabel_1zqrcg$(Kotlin.isType(tmp$_0 = c, GuestGDXNode) ? tmp$_0 : throwCCE());
    }
    if (Kotlin.isType(child_0, GuestGDXLabel)) {
      child_0.SetShow_6taknv$(false);
    }
  };
  DeviceScene.prototype.printLog_61zpoe$ = function (str) {
    var tmp$;
    (tmp$ = this.screen) != null ? (tmp$.printLog_61zpoe$(str), Unit) : null;
  };
  DeviceScene.prototype.clearLog = function () {
    var tmp$;
    (tmp$ = this.screen) != null ? (tmp$.clearLog(), Unit) : null;
  };
  DeviceScene.prototype.convertCoordinate_dleff0$ = function (x, y) {
    return Position_init(x, y);
  };
  DeviceScene.prototype.GetScreenshot_3fx80m$ = function (rect) {
    return null;
  };
  DeviceScene.prototype.GetPosition = function () {
    return Position_init(this.size.width * 0.5, this.size.height * 0.5);
  };
  DeviceScene.prototype.GetNodeWithRectangle_lvlpq5$ = function (point, list) {
    var tmp$;
    if (this.isHidden === true || this.color.a === 0.0) {
      return;
    }
    tmp$ = this.childList.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (Kotlin.isType(child, GuestGDXNode)) {
        child.GetNodeWithRectangle_lvlpq5$(point, list);
      }
    }
  };
  DeviceScene.prototype.nodeListAtPoint_qgvyiu$ = function (point) {
    var result = ArrayList_init();
    this.GetNodeWithRectangle_lvlpq5$(point, result);
    reverse(result);
    return toList(result);
  };
  DeviceScene.prototype.createGuestSprite = function () {
    return GuestGDXSprite_init();
  };
  DeviceScene.prototype.createGuestSprite_h2vgz3$ = function (texture) {
    if (texture != null) {
      return GuestGDXSprite_init_0(texture);
    }
    return this.createGuestSprite();
  };
  DeviceScene.prototype.createGuestMask_h2vgz3$ = function (texture) {
    return GuestGDXMask_init(texture);
  };
  DeviceScene.prototype.createGuestLabel_61zpoe$ = function (fontName) {
    return GuestGDXLabel_init();
  };
  DeviceScene.prototype.createGuestTexture_bm4g0d$ = function (name, image) {
    return GuestGDXTexture_init(name);
  };
  DeviceScene.prototype.loadTexture_jyasbz$ = function (file, alias) {
    $module$PIXI.game.load.image(file, file + '.png');
    var texture = GuestGDXTexture_init(file);
    return texture;
  };
  DeviceScene.prototype.loadAtlas_ivxn3r$ = function (name, preload) {
    $module$PIXI.game.load.atlasJSONHash(name, 'Resource/' + name + '.png', 'Resource/' + name + '.json');
    this.atlas.add_11rb$(name);
    return emptyList();
  };
  DeviceScene.prototype.removeAtlas_61zpoe$ = function (name) {
    return false;
  };
  DeviceScene.prototype.makeAtlas_mvjluj$ = function (name, images) {
    var tmp$;
    var result = ArrayList_init();
    tmp$ = images.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var alias = tmp$_0.key;
      var image = tmp$_0.value;
      $module$PIXI.game.load.image(alias, alias + '.png');
      var guest = GuestGDXTexture_init(alias);
      result.add_11rb$(guest);
    }
    return result;
  };
  DeviceScene.prototype.makeAtlas_kwv3np$ = function (name, images) {
    var tmp$;
    var result = ArrayList_init();
    tmp$ = images.iterator();
    while (tmp$.hasNext()) {
      var alias = tmp$.next();
      $module$PIXI.game.load.image(alias, alias + '.png');
      var guest = GuestGDXTexture_init(alias);
      result.add_11rb$(guest);
    }
    return result;
  };
  DeviceScene.prototype.makeAtlasWithData_d0u64m$ = function (name, images) {
    return emptyList();
  };
  DeviceScene.prototype.preloadTexture_o14v8n$ = function (callback) {
    callback();
  };
  DeviceScene.prototype.createStringImage_k1lctz$ = function (text, fontName, fontSize, color, stroke, thick, antialias, widthMargin, heightMargin) {
    return null;
  };
  DeviceScene.prototype.SetBackgroundColor_qt1dr2$ = function (r, g, b) {
  };
  DeviceScene.prototype.SetTitle_61zpoe$ = function (title) {
  };
  DeviceScene.prototype.changeFPS_za3lpa$ = function (frame) {
  };
  DeviceScene.prototype.moveToBackground = function () {
    var tmp$;
    (tmp$ = this.screen) != null ? (tmp$.moveToBackground(), Unit) : null;
  };
  DeviceScene.prototype.resume = function () {
    var tmp$;
    (tmp$ = this.screen) != null ? (tmp$.resume(), Unit) : null;
  };
  DeviceScene.prototype.terminate = function () {
  };
  DeviceScene.prototype.render_mx4ult$ = function (elapsed) {
    var tmp$, tmp$_0;
    (tmp$ = this.screen) != null ? (tmp$.draw(), Unit) : null;
    this._draw_f2myq8$();
    (tmp$_0 = this.screen) != null ? (tmp$_0.update_mx4ult$(elapsed), Unit) : null;
  };
  DeviceScene.prototype._draw_f2myq8$$default = function (cropRect) {
    this._draw_f2myq8$(cropRect, GuestGDXNode.prototype._draw_f2myq8$$default.bind(this));
  };
  DeviceScene.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeviceScene',
    interfaces: [GuestScreen, GuestGDXNode]
  };
  function DeviceScene_init(width, height, $this) {
    $this = $this || Object.create(DeviceScene.prototype);
    GuestGDXNode.call($this);
    DeviceScene.call($this);
    $this.obj = new GDXGuestScene();
    $this.size = Size_init(width, height);
    var letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123=_-,.!()[]%+?=>/'";
    var FLOAT$result;
    FLOAT$break: do {
      if (4567.89 == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(4567.89)) {
        FLOAT$result = numberToDouble(4567.89);
        break FLOAT$break;
      }
      if (typeof 4567.89 === 'string') {
        try {
          var number = toDouble(4567.89);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    letter += formatted_0(FLOAT$result);
    $this.createFont_basrv3$('System', letter);
    HAL$Companion_getInstance().shared().SetGuestScreen_qgvd6v$($this);
    $this.screen = Screen_init($this);
    return $this;
  }
  function PhaserSound() {
    this.name = null;
    this.file = null;
    this.category = null;
    this.obj = null;
    this.numberOfLoops = 1;
    this.currentTime = 0.0;
    this.volume = 1.0;
  }
  PhaserSound.prototype.SetVolume_mx4ult$ = function (volume) {
    this.volume = volume;
    if (this.obj != null) {
      ensureNotNull(this.obj).volume = volume;
    }
  };
  PhaserSound.prototype.isPlaying = function () {
    if (this.obj == null) {
      return false;
    }
    if (this.category === SoundCategory$BGM_getInstance()) {
      return ensureNotNull(this.obj).isPlaying;
    }
    return false;
  };
  PhaserSound.prototype.play = function () {
    if (this.obj == null) {
      this.obj = $module$PIXI.game.add.audio(this.name);
    }
    if (this.category === SoundCategory$BGM_getInstance()) {
      if (ensureNotNull(this.obj).isPlaying === false) {
        if (this.numberOfLoops === -1) {
          ensureNotNull(this.obj).loop = true;
        }
         else {
          ensureNotNull(this.obj).loop = false;
        }
        ensureNotNull(this.obj).volume = this.volume;
        ensureNotNull(this.obj).play();
        return true;
      }
    }
     else {
      if (this.numberOfLoops === -1) {
        ensureNotNull(this.obj).loop = true;
      }
       else {
        ensureNotNull(this.obj).loop = false;
      }
      ensureNotNull(this.obj).volume = this.volume;
      ensureNotNull(this.obj).play();
      return true;
    }
    return false;
  };
  PhaserSound.prototype.stop = function () {
    if (this.obj == null) {
      return;
    }
    ensureNotNull(this.obj).stop();
  };
  PhaserSound.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PhaserSound',
    interfaces: []
  };
  function PhaserSound_init(name, file, category, $this) {
    $this = $this || Object.create(PhaserSound.prototype);
    PhaserSound.call($this);
    $this.name = name;
    $this.file = file;
    $this.category = category;
    return $this;
  }
  var VOLUME_MAX;
  var EFFECT_CHANNEL;
  function Sound() {
    this.name = null;
    this.category = SoundCategory$SFX_getInstance();
    this.channel = ArrayList_init();
    this.playIndex = 0;
    this.originalVolume = 1.0;
    this.currentVolume = 1.0;
    this.mixerVolume = 1.0;
    this.rate = 1.0;
    this.prevPlayedTime = 0.0;
  }
  Sound.prototype.play_qhkmbr$ = function (loop, percent, rate) {
    if (loop === void 0)
      loop = 0;
    if (percent === void 0)
      percent = 0.0;
    if (rate === void 0)
      rate = 1.0;
    if (this.playIndex >= this.channel.size) {
      return false;
    }
    var audio = this.channel.get_za3lpa$(this.playIndex).first;
    if (audio.isPlaying() === false) {
      audio.numberOfLoops = loop;
      audio.currentTime = 0.0;
      if (this.category === SoundCategory$SFX_getInstance()) {
        if (this.prevPlayedTime + 0.1 > HAL$Companion_getInstance().shared().GetCurrentTime()) {
          return false;
        }
      }
      this.prevPlayedTime = HAL$Companion_getInstance().shared().GetCurrentTime();
      if (audio.play() === false) {
        return false;
      }
      this.channel.set_wxm5ur$(this.playIndex, new Pair(this.channel.get_za3lpa$(this.playIndex).first, false));
      this.playIndex = this.playIndex + 1 | 0;
      if (this.playIndex >= this.channel.size) {
        this.playIndex = 0;
      }
      return true;
    }
    return false;
  };
  Sound.prototype.stop = function () {
    var i = 0;
    for (var tmp$ = this.channel.iterator(); tmp$.hasNext(); ++i) {
      var audioInfo = tmp$.next();
      var audio = audioInfo.first;
      audio.stop();
      this.channel.set_wxm5ur$(this.playIndex, new Pair(this.channel.get_za3lpa$(this.playIndex).first, true));
    }
  };
  Sound.prototype.resume = function () {
    if (this.category === SoundCategory$BGM_getInstance()) {
      var audio = this.channel.get_za3lpa$(0).first;
      if (audio.isPlaying() === false && this.channel.get_za3lpa$(0).second === false) {
        audio.play();
        this.channel.set_wxm5ur$(0, new Pair(this.channel.get_za3lpa$(0).first, false));
      }
    }
  };
  Sound.prototype.SetCurrentVolume_mx4ult$ = function (volume) {
    var tmp$;
    this.currentVolume = volume;
    tmp$ = this.channel.iterator();
    while (tmp$.hasNext()) {
      var audioInfo = tmp$.next();
      var audio = audioInfo.first;
      audio.SetVolume_mx4ult$(this.originalVolume * this.currentVolume * this.mixerVolume);
    }
  };
  Sound.prototype.GetCurrentVolume = function () {
    return this.currentVolume;
  };
  Sound.prototype.SetMixerVolume_mx4ult$ = function (volume) {
    var tmp$;
    this.mixerVolume = volume;
    tmp$ = this.channel.iterator();
    while (tmp$.hasNext()) {
      var audioInfo = tmp$.next();
      var audio = audioInfo.first;
      audio.SetVolume_mx4ult$(this.originalVolume * this.currentVolume * this.mixerVolume);
    }
  };
  Sound.prototype.GetMixerVolume = function () {
    return this.mixerVolume;
  };
  Sound.prototype.SetRate_mx4ult$ = function (rate) {
  };
  Sound.prototype.GetRate = function () {
    return 1.0;
  };
  Sound.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Sound',
    interfaces: []
  };
  function Sound_init(name, file, channelCount, category, volume, $this) {
    if (channelCount === void 0)
      channelCount = 1;
    if (category === void 0)
      category = SoundCategory$SFX_getInstance();
    if (volume === void 0)
      volume = VOLUME_MAX;
    $this = $this || Object.create(Sound.prototype);
    Sound.call($this);
    var tmp$;
    $this.name = name;
    tmp$ = channelCount - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      $this.channel.add_11rb$(new Pair(PhaserSound_init(name, file, category), true));
    }
    $this.category = category;
    $this.originalVolume = volume / VOLUME_MAX;
    return $this;
  }
  function SoundManager() {
    SoundManager$Companion_getInstance();
    this.dictionary = LinkedHashMap_init();
    this.bgmVolume = VOLUME_MAX;
    this.bgmVolumeBackup = VOLUME_MAX;
    this.bgmRate = 1.0;
    this._effectVolume = VOLUME_MAX;
    this._effectVolumeBackup = VOLUME_MAX;
    this._masterVolume = VOLUME_MAX;
    this._masterVolumeBackup = VOLUME_MAX;
    var list = ArrayList_init(16);
    for (var index = 0; index < 16; index++) {
      list.add_11rb$(null);
    }
    this.playingQueue = list;
    this.playingQueueReadIndex = 0;
    this.playingQueueWriteIndex = 0;
    this.addCount = 0;
    this.working = false;
    this.stop = false;
    this.stopped = false;
    this.playedSoundMap = LinkedHashMap_init();
  }
  function SoundManager$Holder() {
    SoundManager$Holder_instance = this;
    this.instance = null;
  }
  SoundManager$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var SoundManager$Holder_instance = null;
  function SoundManager$Holder_getInstance() {
    if (SoundManager$Holder_instance === null) {
      new SoundManager$Holder();
    }
    return SoundManager$Holder_instance;
  }
  function SoundManager$Companion() {
    SoundManager$Companion_instance = this;
    this.initialized = false;
  }
  SoundManager$Companion.prototype.shared = function () {
    if (SoundManager$Holder_getInstance().instance == null) {
      SoundManager$Holder_getInstance().instance = new SoundManager();
    }
    return ensureNotNull(SoundManager$Holder_getInstance().instance);
  };
  SoundManager$Companion.prototype.shutdown = function () {
    var tmp$;
    (tmp$ = SoundManager$Holder_getInstance().instance) != null ? (tmp$.shutdown(), Unit) : null;
    SoundManager$Holder_getInstance().instance = null;
  };
  SoundManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SoundManager$Companion_instance = null;
  function SoundManager$Companion_getInstance() {
    if (SoundManager$Companion_instance === null) {
      new SoundManager$Companion();
    }
    return SoundManager$Companion_instance;
  }
  SoundManager.prototype.initialize = function () {
    return true;
  };
  SoundManager.prototype.shutdown = function () {
  };
  SoundManager.prototype.addToPlayingQueue_k8wy15$ = function (sound, loop) {
    sound.play_qhkmbr$(loop);
  };
  SoundManager.prototype.loadSound_rxyx1o$ = function (file, alias, channelCount, category, volume) {
    if (alias === void 0)
      alias = null;
    if (channelCount === void 0)
      channelCount = 1;
    if (category === void 0)
      category = SoundCategory$SFX_getInstance();
    if (volume === void 0)
      volume = 100.0;
    var tmp$, tmp$_0;
    var key = file;
    if (alias != null) {
      key = alias;
    }
    if (this.dictionary.get_11rb$(key) != null) {
      return this.dictionary.get_11rb$(key);
    }
    var sound = null;
    $module$PIXI.game.load.audio(key, [file + '.ogg', file + '.mp3']);
    sound = Sound_init(key, file, channelCount, category, volume);
    var $receiver = this.dictionary;
    var key_0 = key;
    var value = ensureNotNull(sound);
    $receiver.put_xwzc9p$(key_0, value);
    if (category === SoundCategory$BGM_getInstance()) {
      (tmp$ = this.dictionary.get_11rb$(key)) != null ? (tmp$.SetCurrentVolume_mx4ult$(0.0), Unit) : null;
    }
     else {
      (tmp$_0 = this.dictionary.get_11rb$(key)) != null ? (tmp$_0.SetCurrentVolume_mx4ult$(1.0), Unit) : null;
    }
    return this.dictionary.get_11rb$(key);
  };
  SoundManager.prototype.unloadSound_61zpoe$ = function (alias) {
  };
  SoundManager.prototype.GetSound_61zpoe$ = function (alias) {
    if (this.dictionary.get_11rb$(alias) == null) {
      return this.loadSound_rxyx1o$(alias);
    }
    return this.dictionary.get_11rb$(alias);
  };
  SoundManager.prototype.playBGM_llw80p$ = function (alias, loop, percent, rate) {
    if (loop === void 0)
      loop = -1;
    if (percent === void 0)
      percent = 0.0;
    if (rate === void 0)
      rate = 1.0;
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      if (sound.category !== SoundCategory$BGM_getInstance()) {
        return false;
      }
      sound.SetMixerVolume_mx4ult$(this.bgmVolume);
      this.addToPlayingQueue_k8wy15$(sound, loop);
      return true;
    }
    return false;
  };
  SoundManager.prototype.play_jf2iyl$ = function (alias, percent, rate, loop) {
    if (percent === void 0)
      percent = 0.0;
    if (rate === void 0)
      rate = 1.0;
    if (loop === void 0)
      loop = 0;
    var tmp$;
    var percent_0 = percent;
    if (percent_0 > 1.0) {
      percent_0 = percent_0 % 1.0;
    }
    var sound = Kotlin.isType(tmp$ = this.GetSound_61zpoe$(alias), Sound) ? tmp$ : null;
    if (sound != null) {
      if (sound.category !== SoundCategory$SFX_getInstance()) {
        return false;
      }
      sound.SetMixerVolume_mx4ult$(this._effectVolume);
      this.addToPlayingQueue_k8wy15$(sound, loop);
      return true;
    }
    return true;
  };
  SoundManager.prototype.stop_61zpoe$ = function (alias) {
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      sound.stop();
    }
  };
  SoundManager.prototype.resume = function () {
    var tmp$;
    tmp$ = this.dictionary.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var key = tmp$_0.key;
      var sound = tmp$_0.value;
      if (sound.category === SoundCategory$BGM_getInstance()) {
        sound.resume();
      }
    }
  };
  SoundManager.prototype.SetRate_9sobi5$ = function (alias, rate) {
    if (rate === void 0)
      rate = 1.0;
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      sound.SetRate_mx4ult$(rate);
    }
  };
  SoundManager.prototype.GetRate_61zpoe$ = function (alias) {
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      return sound.GetRate();
    }
    return 1.0;
  };
  SoundManager.prototype.playEffect_bm4lxs$ = function (alias, loop) {
    if (loop === void 0)
      loop = 0;
    var tmp$;
    var sound = Kotlin.isType(tmp$ = this.GetSound_61zpoe$(alias), Sound) ? tmp$ : null;
    if (sound != null) {
      sound.SetMixerVolume_mx4ult$(this._effectVolume);
      this.addToPlayingQueue_k8wy15$(sound, loop);
      return true;
    }
    return true;
  };
  SoundManager.prototype.SetMasterVolume_mx4ult$ = function (volume) {
    var tmp$;
    var volume_0 = volume;
    if (volume_0 <= 0) {
      volume_0 = 0.0;
      this._masterVolumeBackup = 10.0;
    }
    if (volume_0 > VOLUME_MAX) {
      volume_0 = VOLUME_MAX;
    }
    this._masterVolume = volume_0 / VOLUME_MAX;
    tmp$ = this.dictionary.entries.iterator();
    while (tmp$.hasNext()) {
      var data = tmp$.next();
      var sound = data.value;
      if (sound.category === SoundCategory$BGM_getInstance()) {
        sound.SetMixerVolume_mx4ult$(this.bgmVolume * this._masterVolume);
      }
       else if (sound.category === SoundCategory$SFX_getInstance()) {
        sound.SetMixerVolume_mx4ult$(this._effectVolume * this._masterVolume);
      }
    }
  };
  SoundManager.prototype.GetMasterVolume = function () {
    return this._masterVolume;
  };
  SoundManager.prototype.SetMasterVolumeBackup_mx4ult$ = function (volume) {
    this._masterVolumeBackup = volume;
  };
  SoundManager.prototype.GetMasterVolumeBackup = function () {
    return this._masterVolumeBackup;
  };
  SoundManager.prototype.SetBGMVolume_mx4ult$ = function (volume) {
    var tmp$;
    var volume_0 = volume;
    if (volume_0 < 0) {
      volume_0 = 0.0;
    }
    if (volume_0 > VOLUME_MAX) {
      volume_0 = VOLUME_MAX;
    }
    this.bgmVolume = volume_0 / VOLUME_MAX;
    tmp$ = this.dictionary.entries.iterator();
    while (tmp$.hasNext()) {
      var data = tmp$.next();
      var sound = data.value;
      if (sound.category === SoundCategory$BGM_getInstance()) {
        sound.SetMixerVolume_mx4ult$(this._masterVolume * this.bgmVolume);
      }
    }
  };
  SoundManager.prototype.GetBGMVolume = function () {
    return this.bgmVolume;
  };
  SoundManager.prototype.SetEffectVolume_mx4ult$ = function (volume) {
    var tmp$;
    var volume_0 = volume;
    if (volume_0 <= 0) {
      volume_0 = 0.0;
      this._effectVolumeBackup = 10.0;
    }
    if (volume_0 > VOLUME_MAX) {
      volume_0 = VOLUME_MAX;
    }
    this._effectVolume = volume_0 / VOLUME_MAX;
    tmp$ = this.dictionary.entries.iterator();
    while (tmp$.hasNext()) {
      var data = tmp$.next();
      var sound = data.value;
      if (sound.category === SoundCategory$SFX_getInstance()) {
        sound.SetMixerVolume_mx4ult$(this._masterVolume * this._effectVolume);
      }
    }
  };
  SoundManager.prototype.GetEffectVolume = function () {
    return this._effectVolume;
  };
  SoundManager.prototype.SetEffectVolumeBackup_mx4ult$ = function (volume) {
    this._effectVolumeBackup = volume;
  };
  SoundManager.prototype.GetEffectVolumeBackup = function () {
    return this._effectVolumeBackup;
  };
  SoundManager.prototype.toggleMaster = function () {
    if (this._masterVolume !== 0.0) {
      this._masterVolumeBackup = this._masterVolume;
      this._masterVolume = 0.0;
    }
     else {
      this._masterVolume = this._masterVolumeBackup;
    }
    this.SetBGMVolume_mx4ult$(this.GetBGMVolume());
    this.SetEffectVolume_mx4ult$(this.GetEffectVolume());
  };
  SoundManager.prototype.toggleBGM = function () {
    if (this.bgmVolume !== 0.0) {
      this.bgmVolumeBackup = this.bgmVolume;
      this.bgmVolume = 0.0;
    }
     else {
      this.bgmVolume = this.bgmVolumeBackup;
    }
    this.SetBGMVolume_mx4ult$(this.bgmVolume);
  };
  SoundManager.prototype.toggleEffect = function () {
    if (this._effectVolume !== 0.0) {
      this._effectVolumeBackup = this._effectVolume;
      this._effectVolume = 0.0;
    }
     else {
      this._effectVolume = this._effectVolumeBackup;
    }
    this.SetEffectVolume_mx4ult$(this._effectVolume);
  };
  SoundManager.prototype.SetVolume_9sobi5$ = function (alias, volume) {
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      sound.SetCurrentVolume_mx4ult$(volume / VOLUME_MAX);
    }
  };
  SoundManager.prototype.GetVolume_61zpoe$ = function (alias) {
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      return sound.GetCurrentVolume() * VOLUME_MAX;
    }
    return 0.0;
  };
  function SoundManager$BGMFadeIn$lambda(closure$sound, this$SoundManager, closure$delta, closure$volume, closure$callback) {
    return function (info) {
      if (info.count === 1) {
        closure$sound.SetMixerVolume_mx4ult$(this$SoundManager.bgmVolume);
      }
      this$SoundManager.addToPlayingQueue_k8wy15$(closure$sound, -1);
      var newVolume = closure$sound.GetCurrentVolume() * VOLUME_MAX + closure$delta * info.elapsed;
      if (newVolume > closure$volume) {
        newVolume = closure$volume;
      }
      closure$sound.SetCurrentVolume_mx4ult$(newVolume / VOLUME_MAX);
      if (newVolume === closure$volume) {
        closure$callback != null ? closure$callback() : null;
        return false;
      }
      return true;
    };
  }
  SoundManager.prototype.BGMFadeIn_o5txl1$ = function (screen, alias, volume, duration, callback) {
    if (volume === void 0)
      volume = 100.0;
    if (duration === void 0)
      duration = 0.3;
    if (callback === void 0)
      callback = null;
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      var gap = volume - sound.GetCurrentVolume() * VOLUME_MAX;
      if (gap <= 0) {
        callback != null ? callback() : null;
        return;
      }
      var delta = gap / duration;
      screen.createAction_xcdeti$(alias + ' BGM Fade In', true, false, void 0, void 0, void 0, void 0, SoundManager$BGMFadeIn$lambda(sound, this, delta, volume, callback));
    }
  };
  function SoundManager$BGMFadeOut$lambda(closure$sound, closure$delta, closure$volume, closure$callback) {
    return function (info) {
      var newVolume = closure$sound.GetCurrentVolume() * VOLUME_MAX - closure$delta * info.elapsed;
      if (newVolume < closure$volume) {
        newVolume = closure$volume;
      }
      closure$sound.SetCurrentVolume_mx4ult$(newVolume / VOLUME_MAX);
      if (newVolume === closure$volume) {
        closure$sound.stop();
        closure$callback != null ? closure$callback() : null;
        return false;
      }
      return true;
    };
  }
  SoundManager.prototype.BGMFadeOut_o5txl1$ = function (screen, alias, volume, duration, callback) {
    if (volume === void 0)
      volume = 0.0;
    if (duration === void 0)
      duration = 0.3;
    if (callback === void 0)
      callback = null;
    var sound = this.GetSound_61zpoe$(alias);
    if (sound != null) {
      var gap = sound.GetCurrentVolume() * VOLUME_MAX - volume;
      if (gap <= 0) {
        callback != null ? callback() : null;
        return;
      }
      var delta = gap / duration;
      screen.createAction_xcdeti$(alias + ' BGM Fade Out', true, false, void 0, void 0, void 0, void 0, SoundManager$BGMFadeOut$lambda(sound, delta, volume, callback));
    }
  };
  SoundManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SoundManager',
    interfaces: []
  };
  function Util() {
    Util$Companion_getInstance();
  }
  function Util$Companion() {
    Util$Companion_instance = this;
    this.notice = null;
    this.handler = null;
    this.disabled = false;
    this.cancelButton = 'no';
    this.okButton = 'ok';
  }
  function Util$Companion$showNotice$lambda(this$Util$) {
    return function (message) {
      var tmp$;
      if (this$Util$.disabled === true) {
        return false;
      }
      if (message.event === Event$button_RELEASE_getInstance()) {
        var name = (tmp$ = message.sender) != null ? tmp$.GetName() : null;
        if (name != null) {
          this$Util$.clickButton_61zpoe$(name);
        }
        return false;
      }
       else if (message.event === Event$button_DISABLED_RELEASE_getInstance()) {
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('shake');
      }
      return true;
    };
  }
  function Util$Companion$showNotice$lambda_0(this$Util$) {
    return function (code) {
      if (this$Util$.isNoticeShow() === false) {
        return false;
      }
      if (this$Util$.disabled === true) {
        return true;
      }
      if (code === TouchListener$Code_getInstance().ESCAPE || code === TouchListener$Code_getInstance().BACK) {
        this$Util$.clickButton_61zpoe$(this$Util$.cancelButton);
        return true;
      }
       else if (code === TouchListener$Code_getInstance().ENTER) {
        this$Util$.clickButton_61zpoe$(this$Util$.okButton);
        return true;
      }
      return false;
    };
  }
  Util$Companion.prototype.showNotice_sprpts$ = function (parent, message, font, cancel, ok, handler) {
    if (message === void 0)
      message = '';
    if (font === void 0)
      font = 'MENU_/';
    if (cancel === void 0)
      cancel = 'no';
    if (ok === void 0)
      ok = 'ok';
    if (handler === void 0)
      handler = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    if (this.notice != null) {
      return;
    }
    this.cancelButton = cancel;
    this.okButton = ok;
    this.disabled = false;
    parent.SetFontSize_mx4ult$(16.0);
    parent.SetFontName_61zpoe$(font);
    parent.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    parent.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var wrapType = 2;
    if (equals(local('TUTORIAL_TEXT_WRAP_TYPE'), 'CHARACTER')) {
      wrapType = 1;
    }
    this.notice = parent.createTextArea_pvsv9g$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 240.0, 480.0, 0.0, 0.5, 1.0, void 0, void 0, wrapType);
    (tmp$ = this.notice) != null ? (tmp$.SetFadeMode_za3lpa$(1), Unit) : null;
    (tmp$_0 = this.notice) != null ? (tmp$_0.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
    (tmp$_1 = this.notice) != null ? (tmp$_1.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_2 = this.notice) != null ? (tmp$_2.SetModal_6taknv$(true), Unit) : null;
    if (!equals(message, '')) {
      (tmp$_3 = this.notice) != null ? (tmp$_3.addText_r4v59z$(message, 0.3), Unit) : null;
    }
    this.handler = handler;
    (tmp$_4 = this.notice) != null ? (tmp$_4.SetMessageHandler_4mjqr2$(Util$Companion$showNotice$lambda(this)), Unit) : null;
    (tmp$_5 = parent.screen) != null ? (tmp$_5.addKeydownListener_5ol7k9$('Back Key For Notice', Util$Companion$showNotice$lambda_0(this)), Unit) : null;
    (tmp$_6 = this.notice) != null ? (tmp$_6.SetShow_6taknv$(true), Unit) : null;
  };
  function Util$Companion$clearNotice$lambda(closure$callback) {
    return function () {
      closure$callback != null ? closure$callback() : null;
      return Unit;
    };
  }
  Util$Companion.prototype.clearNotice_yo2cqg$ = function (callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.notice) != null ? (tmp$.clearText_gam257$(0.3, Util$Companion$clearNotice$lambda(callback)), Unit) : null;
  };
  Util$Companion.prototype.addNotice_61zpoe$ = function (message) {
    var tmp$;
    (tmp$ = this.notice) != null ? (tmp$.addText_r4v59z$(message), Unit) : null;
  };
  function Util$Companion$closeNotice$lambda(this$Util$) {
    return function () {
      var tmp$;
      (tmp$ = this$Util$.notice) != null ? (tmp$.removeFromParent(), Unit) : null;
      this$Util$.notice = null;
      this$Util$.handler = null;
      return Unit;
    };
  }
  Util$Companion.prototype.closeNotice = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.notice == null && ((tmp$ = this.notice) != null ? tmp$.GetShow() : null) === false) {
      return;
    }
    (tmp$_0 = this.notice) != null ? (tmp$_0.SetShow_6taknv$(false), Unit) : null;
    (tmp$_1 = this.notice) != null ? (tmp$_1.clearText_gam257$(), Unit) : null;
    var screen = Kotlin.isType(tmp$_3 = (tmp$_2 = this.notice) != null ? tmp$_2.GetRoot() : null, Screen) ? tmp$_3 : null;
    if (screen != null) {
      screen.actionDelay_ab0iom$(0.0, void 0, Util$Companion$closeNotice$lambda(this));
      this.disabled = true;
    }
  };
  Util$Companion.prototype.isNoticeShow = function () {
    if (this.notice != null) {
      return ensureNotNull(this.notice).GetShow();
    }
    return false;
  };
  function Util$Companion$clickButton$lambda(this$Util$, closure$name) {
    return function () {
      var tmp$;
      (tmp$ = this$Util$.handler) != null ? tmp$(closure$name) : null;
      return Unit;
    };
  }
  Util$Companion.prototype.clickButton_61zpoe$ = function (name) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var button = Kotlin.isType(tmp$_0 = (tmp$ = this.notice) != null ? tmp$.findChildByName_3m52m6$(name) : null, Button) ? tmp$_0 : null;
    if (button != null) {
      this.disabled = true;
      SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
      var screen = Kotlin.isType(tmp$_2 = (tmp$_1 = this.notice) != null ? tmp$_1.GetRoot() : null, Screen) ? tmp$_2 : null;
      if (screen != null) {
        screen.actionDelay_ab0iom$(0.0, void 0, Util$Companion$clickButton$lambda(this, name));
      }
    }
  };
  Util$Companion.prototype.disableButton_61zpoe$ = function (name) {
    var tmp$, tmp$_0;
    var button = Kotlin.isType(tmp$_0 = (tmp$ = this.notice) != null ? tmp$.findChildByName_3m52m6$(name) : null, Button) ? tmp$_0 : null;
    if (button != null) {
      button.SetEnable_6taknv$(false);
    }
  };
  Util$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Util$Companion_instance = null;
  function Util$Companion_getInstance() {
    if (Util$Companion_instance === null) {
      new Util$Companion();
    }
    return Util$Companion_instance;
  }
  Util.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Util',
    interfaces: []
  };
  function BoardGenerator() {
    BoardGenerator$Companion_getInstance();
    this.game = null;
    this.width = 0;
    this.height = 0;
    this.kindOfNumber = 0;
    this.minOfComplete = 0;
    this.map = null;
    this.clear = null;
    this.dropMap = null;
    this.newBlockMap = null;
    this.hint = new Pair(-1, -1);
    this.cancelFind = false;
    this.running = false;
  }
  var Array_0 = Array;
  BoardGenerator.prototype.rotateMap_ytlutl$ = function (map) {
    var tmp$, tmp$_0;
    var array = Array_0(this.width);
    var tmp$_1;
    tmp$_1 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_1; i++) {
      var array_0 = new Int32Array(this.height);
      var tmp$_2;
      tmp$_2 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
        array_0[i_0] = 0;
      }
      array[i] = array_0;
    }
    var temp = array;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        temp[x][y] = map[y][x];
      }
    }
    return temp;
  };
  BoardGenerator.prototype.GetBoard = function () {
    var id = this.calcMapID();
    return new Pair(this.map, id);
  };
  var numberToLong = Kotlin.numberToLong;
  var toLong = Kotlin.kotlin.text.toLong_pdl1vz$;
  BoardGenerator.prototype.calcMapID = function () {
    var tmp$, tmp$_0;
    if (this.width > 3 || this.height > 3) {
      return Kotlin.Long.ZERO;
    }
    var id = Kotlin.Long.ZERO;
    var i = 0;
    tmp$ = this.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = this.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        var tmp$_1 = id;
        var value = this.map[x][y];
        var INT64$result;
        INT64$break: do {
          if (Kotlin.isNumber(value)) {
            INT64$result = numberToLong(value);
            break INT64$break;
          }
          if (typeof value === 'string') {
            INT64$result = toLong(value);
            break INT64$break;
          }
          INT64$result = Kotlin.Long.ZERO;
        }
         while (false);
        var tmp$_2 = INT64$result;
        var value_0 = this.kindOfNumber;
        var DOUBLE$result;
        DOUBLE$break: do {
          if (value_0 == null) {
            DOUBLE$result = 0.0;
            break DOUBLE$break;
          }
          if (Kotlin.isNumber(value_0)) {
            DOUBLE$result = numberToDouble(value_0);
            break DOUBLE$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number = toDouble(value_0);
              DOUBLE$result = number;
              break DOUBLE$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                DOUBLE$result = 0.0;
                break DOUBLE$break;
              }
               else
                throw e;
            }
          }
          DOUBLE$result = 0.0;
        }
         while (false);
        var tmp$_3 = DOUBLE$result;
        var value_1 = i;
        var DOUBLE$result_0;
        DOUBLE$break: do {
          if (value_1 == null) {
            DOUBLE$result_0 = 0.0;
            break DOUBLE$break;
          }
          if (Kotlin.isNumber(value_1)) {
            DOUBLE$result_0 = numberToDouble(value_1);
            break DOUBLE$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_0 = toDouble(value_1);
              DOUBLE$result_0 = number_0;
              break DOUBLE$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                DOUBLE$result_0 = 0.0;
                break DOUBLE$break;
              }
               else
                throw e;
            }
          }
          DOUBLE$result_0 = 0.0;
        }
         while (false);
        var value_2 = Math.pow(tmp$_3, DOUBLE$result_0);
        var INT64$result_0;
        INT64$break: do {
          if (Kotlin.isNumber(value_2)) {
            INT64$result_0 = numberToLong(value_2);
            break INT64$break;
          }
          if (typeof value_2 === 'string') {
            INT64$result_0 = toLong(value_2);
            break INT64$break;
          }
          INT64$result_0 = Kotlin.Long.ZERO;
        }
         while (false);
        id = tmp$_1.add(tmp$_2.multiply(INT64$result_0));
        i = i + 1 | 0;
      }
    }
    return id;
  };
  BoardGenerator.prototype.createNewBoardWithID_s8cxhz$ = function (id) {
    var id_0 = id;
    var i = Kotlin.imul(this.width, this.height) - 1 | 0;
    for (var y = this.height - 1 | 0; y >= 0; y--) {
      for (var x = this.width - 1 | 0; x >= 0; x--) {
        var tmp$ = id_0;
        var value = this.kindOfNumber;
        var DOUBLE$result;
        DOUBLE$break: do {
          if (value == null) {
            DOUBLE$result = 0.0;
            break DOUBLE$break;
          }
          if (Kotlin.isNumber(value)) {
            DOUBLE$result = numberToDouble(value);
            break DOUBLE$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              DOUBLE$result = number;
              break DOUBLE$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                DOUBLE$result = 0.0;
                break DOUBLE$break;
              }
               else
                throw e;
            }
          }
          DOUBLE$result = 0.0;
        }
         while (false);
        var tmp$_0 = DOUBLE$result;
        var value_0 = i;
        var DOUBLE$result_0;
        DOUBLE$break: do {
          if (value_0 == null) {
            DOUBLE$result_0 = 0.0;
            break DOUBLE$break;
          }
          if (Kotlin.isNumber(value_0)) {
            DOUBLE$result_0 = numberToDouble(value_0);
            break DOUBLE$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              DOUBLE$result_0 = number_0;
              break DOUBLE$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                DOUBLE$result_0 = 0.0;
                break DOUBLE$break;
              }
               else
                throw e;
            }
          }
          DOUBLE$result_0 = 0.0;
        }
         while (false);
        var value_1 = Math.pow(tmp$_0, DOUBLE$result_0);
        var INT64$result;
        INT64$break: do {
          if (Kotlin.isNumber(value_1)) {
            INT64$result = numberToLong(value_1);
            break INT64$break;
          }
          if (typeof value_1 === 'string') {
            INT64$result = toLong(value_1);
            break INT64$break;
          }
          INT64$result = Kotlin.Long.ZERO;
        }
         while (false);
        var value_2 = tmp$.div(INT64$result);
        var tmp$_1 = this.map[x];
        var INT$result;
        INT$break: do {
          if (value_2 == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_2)) {
            INT$result = numberToInt(value_2);
            break INT$break;
          }
          if (typeof value_2 === 'string') {
            try {
              var number_1 = toInt_0(value_2);
              INT$result = number_1;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        tmp$_1[y] = INT$result;
        var tmp$_2 = id_0;
        var value_3 = this.kindOfNumber;
        var DOUBLE$result_1;
        DOUBLE$break: do {
          if (value_3 == null) {
            DOUBLE$result_1 = 0.0;
            break DOUBLE$break;
          }
          if (Kotlin.isNumber(value_3)) {
            DOUBLE$result_1 = numberToDouble(value_3);
            break DOUBLE$break;
          }
          if (typeof value_3 === 'string') {
            try {
              var number_2 = toDouble(value_3);
              DOUBLE$result_1 = number_2;
              break DOUBLE$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                DOUBLE$result_1 = 0.0;
                break DOUBLE$break;
              }
               else
                throw e;
            }
          }
          DOUBLE$result_1 = 0.0;
        }
         while (false);
        var tmp$_3 = DOUBLE$result_1;
        var value_4 = i;
        var DOUBLE$result_2;
        DOUBLE$break: do {
          if (value_4 == null) {
            DOUBLE$result_2 = 0.0;
            break DOUBLE$break;
          }
          if (Kotlin.isNumber(value_4)) {
            DOUBLE$result_2 = numberToDouble(value_4);
            break DOUBLE$break;
          }
          if (typeof value_4 === 'string') {
            try {
              var number_3 = toDouble(value_4);
              DOUBLE$result_2 = number_3;
              break DOUBLE$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                DOUBLE$result_2 = 0.0;
                break DOUBLE$break;
              }
               else
                throw e;
            }
          }
          DOUBLE$result_2 = 0.0;
        }
         while (false);
        var value_5 = Math.pow(tmp$_3, DOUBLE$result_2);
        var INT64$result_0;
        INT64$break: do {
          if (Kotlin.isNumber(value_5)) {
            INT64$result_0 = numberToLong(value_5);
            break INT64$break;
          }
          if (typeof value_5 === 'string') {
            INT64$result_0 = toLong(value_5);
            break INT64$break;
          }
          INT64$result_0 = Kotlin.Long.ZERO;
        }
         while (false);
        id_0 = tmp$_2.subtract(value_2.multiply(INT64$result_0));
        i = i - 1 | 0;
      }
    }
  };
  BoardGenerator.prototype.createNewBoardWithRandom = function () {
    var tmp$, tmp$_0;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        this.clear[x][y] = 0;
        var tmp$_1 = this.map[x];
        var value = Random_getInstance().arc4random_uniform_za3lpa$(this.kindOfNumber);
        var INT$result;
        INT$break: do {
          if (value == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value)) {
            INT$result = numberToInt(value);
            break INT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toInt_0(value);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        tmp$_1[y] = INT$result;
      }
    }
  };
  BoardGenerator.prototype.removeMatchedTile = function () {
    var tmp$, tmp$_0;
    this.checkComplete();
    this.clearCompleteTile();
    while (this.isFilled() === false) {
      while (this.isFilled() === false) {
        this.dropTile();
      }
      this.checkComplete();
      this.clearCompleteTile();
    }
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        this.clear[x][y] = 0;
      }
    }
  };
  BoardGenerator.prototype.createNewBoard_s8cxhz$$default = function (id) {
    var tmp$, tmp$_0;
    if (!equals(id, Kotlin.Long.ZERO)) {
      this.createNewBoardWithID_s8cxhz$(id);
    }
     else {
      this.createNewBoardWithRandom();
      var count = 0;
      while (true) {
        count = count + 1 | 0;
        this.removeMatchedTile();
        if (this.isAppropriate() === true) {
          break;
        }
        this.createNewBoardWithRandom();
      }
    }
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        this.clear[x][y] = 0;
      }
    }
  };
  BoardGenerator.prototype.createNewBoard_s8cxhz$ = function (id, callback$default) {
    if (id === void 0)
      id = Kotlin.Long.ZERO;
    callback$default ? callback$default(id) : this.createNewBoard_s8cxhz$$default(id);
  };
  BoardGenerator.prototype.checkComplete = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var matched = false;
    var array = new Int32Array(this.width);
    var tmp$_5;
    tmp$_5 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_5; i++) {
      array[i] = 0;
    }
    var row = array;
    var prev;
    var count;
    tmp$ = this.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      count = 1;
      prev = -1;
      tmp$_0 = this.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        if (this.map[x][y] === prev && this.map[x][y] !== -1) {
          count = count + 1 | 0;
        }
         else {
          count = 1;
        }
        row[x] = count;
        prev = this.map[x][y];
      }
      var x_0 = this.width - 1 | 0;
      while (x_0 >= 0) {
        if (row[x_0] >= this.minOfComplete) {
          matched = true;
          tmp$_1 = row[x_0] - 1 | 0;
          for (var k = 0; k <= tmp$_1; k++) {
            this.clear[x_0 - k | 0][y] = row[x_0];
          }
          x_0 = x_0 - row[x_0] + 1 | 0;
        }
         else {
          x_0 = x_0 - 1 | 0;
        }
      }
    }
    var array_0 = new Int32Array(this.height);
    var tmp$_6;
    tmp$_6 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_6; i_0++) {
      array_0[i_0] = 0;
    }
    var column = array_0;
    tmp$_2 = this.width - 1 | 0;
    for (var x_1 = 0; x_1 <= tmp$_2; x_1++) {
      count = 1;
      prev = -1;
      tmp$_3 = this.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_3; y_0++) {
        if (this.map[x_1][y_0] === prev && this.map[x_1][y_0] !== -1) {
          count = count + 1 | 0;
        }
         else {
          count = 1;
        }
        column[y_0] = count;
        prev = this.map[x_1][y_0];
      }
      var y_1 = this.height - 1 | 0;
      while (y_1 >= 0) {
        if (column[y_1] >= this.minOfComplete) {
          matched = true;
          tmp$_4 = column[y_1] - 1 | 0;
          for (var k_0 = 0; k_0 <= tmp$_4; k_0++) {
            this.clear[x_1][y_1 - k_0 | 0] = column[y_1];
          }
          y_1 = y_1 - column[y_1] + 1 | 0;
        }
         else {
          y_1 = y_1 - 1 | 0;
        }
      }
    }
    return matched;
  };
  BoardGenerator.prototype.clearCompleteTile = function () {
    var tmp$, tmp$_0;
    var cleared = false;
    var clearCount = 0;
    tmp$ = this.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = this.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        if (this.clear[x][y] !== 0) {
          this.map[x][y] = -1;
          this.clear[x][y] = 0;
          cleared = true;
          clearCount = clearCount + 1 | 0;
        }
      }
    }
    return cleared;
  };
  BoardGenerator.prototype.isFilled = function () {
    var tmp$, tmp$_0;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        if (this.map[x][y] === -1) {
          return false;
        }
      }
    }
    return true;
  };
  BoardGenerator.prototype.dropTile = function () {
    var tmp$;
    for (var y = this.height - 1 | 0; y >= 0; y--) {
      tmp$ = this.width - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        if (this.map[x][y] === -1) {
          var upper = -1;
          if (y === 0) {
            var value = Random_getInstance().arc4random_uniform_za3lpa$(this.kindOfNumber);
            var INT$result;
            INT$break: do {
              if (value == null) {
                INT$result = 0;
                break INT$break;
              }
              if (Kotlin.isNumber(value)) {
                INT$result = numberToInt(value);
                break INT$break;
              }
              if (typeof value === 'string') {
                try {
                  var number = toInt_0(value);
                  INT$result = number;
                  break INT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    INT$result = 0;
                    break INT$break;
                  }
                   else
                    throw e;
                }
              }
              INT$result = 0;
            }
             while (false);
            upper = INT$result;
          }
           else {
            upper = this.map[x][y - 1 | 0];
            this.map[x][y - 1 | 0] = -1;
          }
          this.map[x][y] = upper;
        }
      }
    }
  };
  BoardGenerator.prototype.isAppropriate = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (this.width < 3 || this.height < 3) {
      return true;
    }
    var array = new Int32Array(this.kindOfNumber);
    var tmp$_3;
    tmp$_3 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_3; i++) {
      array[i] = 0;
    }
    var check = array;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        tmp$_1 = this.map[x][y];
        check[tmp$_1] = check[tmp$_1] + 1 | 0;
      }
    }
    tmp$_2 = this.kindOfNumber - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
      if (check[i_0] < 1) {
        return false;
      }
    }
    return true;
  };
  BoardGenerator.prototype.pickRandom_q5rwfd$ = function (table) {
    var count = Random_getInstance().arc4random_uniform_za3lpa$(table.length) + 1 | 0;
    var empty = 0;
    var i = 0;
    while (empty !== count) {
      if (table[i] === 0) {
        empty = empty + 1 | 0;
        if (empty === count) {
          table[i] = 1;
          return i;
        }
      }
      i = i + 1 | 0;
      if (i === table.length) {
        if (empty === 0) {
          return -1;
        }
        i = 0;
      }
    }
    return -1;
  };
  BoardGenerator.prototype.makeHint_klim6j$ = function (map) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var array = Array_0(this.width);
    var tmp$_5;
    tmp$_5 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_5; i++) {
      var array_0 = Array_0(this.height);
      var tmp$_6;
      tmp$_6 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_6; i_0++) {
        array_0[i_0] = new Pair(0, 0);
      }
      array[i] = array_0;
    }
    var temp = {v: array};
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          temp.v[x][y] = new Pair(block.value, block.GetAttribute() === TileEntity$Attribute$disabled_getInstance() ? 1 : 0);
        }
         else {
          temp.v[x][y] = new Pair(-1, -1);
        }
      }
    }
    var array_1 = new Int32Array(Kotlin.imul(this.width, this.height));
    var tmp$_7;
    tmp$_7 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_7; i_1++) {
      array_1[i_1] = 0;
    }
    var checkTable = array_1;
    for (tmp$_2 = 0; tmp$_2 !== checkTable.length; ++tmp$_2) {
      var n = checkTable[tmp$_2];
      var i_2 = this.pickRandom_q5rwfd$(checkTable);
      if (i_2 === -1) {
        break;
      }
      var x_0 = i_2 % this.width;
      var y_0 = i_2 / this.width | 0;
      var array_2 = Array_0(temp.v.length);
      var tmp$_8;
      tmp$_8 = array_2.length - 1 | 0;
      for (var i_3 = 0; i_3 <= tmp$_8; i_3++) {
        var array_3 = Array_0(temp.v[0].length);
        var tmp$_9;
        tmp$_9 = array_3.length - 1 | 0;
        for (var i_4 = 0; i_4 <= tmp$_9; i_4++) {
          array_3[i_4] = new Pair(-1, -1);
        }
        array_2[i_3] = array_3;
      }
      var test = array_2;
      tmp$_3 = this.height - 1 | 0;
      for (var y_1 = 0; y_1 <= tmp$_3; y_1++) {
        tmp$_4 = this.width - 1 | 0;
        for (var x_1 = 0; x_1 <= tmp$_4; x_1++) {
          test[x_1][y_1] = temp.v[x_1][y_1].copy_xwzc9p$();
        }
      }
      if (test[x_0][y_0].second === 0) {
        this.increaseChainedTile_aatw4l$(test, x_0, y_0);
        if (this.checkComplete_9kzzq3$(test) === true) {
          this.hint = new Pair(x_0, y_0);
          return;
        }
      }
    }
    this.hint = new Pair(-1, -1);
    return;
  };
  BoardGenerator.prototype.clearHint = function () {
    this.hint = new Pair(-1, -1);
  };
  BoardGenerator.prototype.GetHint = function () {
    return this.hint;
  };
  BoardGenerator.prototype.cancelFindNoMoreMatch = function () {
    if (this.running === true) {
      this.cancelFind = true;
    }
    this.cancelFind = false;
  };
  function BoardGenerator$Companion() {
    BoardGenerator$Companion_instance = this;
    this.checkCompleteCount = 0;
  }
  BoardGenerator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BoardGenerator$Companion_instance = null;
  function BoardGenerator$Companion_getInstance() {
    if (BoardGenerator$Companion_instance === null) {
      new BoardGenerator$Companion();
    }
    return BoardGenerator$Companion_instance;
  }
  BoardGenerator.prototype.isNoMoreMatch_nq05ln$ = function (temp, depth, click) {
    if (depth === void 0)
      depth = 0;
    if (click === void 0)
      click = '';
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (depth > 9) {
      return false;
    }
    tmp$ = this.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = this.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        if (this.cancelFind === true) {
          return false;
        }
        var array = Array_0(temp.length);
        var tmp$_3;
        tmp$_3 = array.length - 1 | 0;
        for (var i = 0; i <= tmp$_3; i++) {
          var array_0 = Array_0(temp[0].length);
          var tmp$_4;
          tmp$_4 = array_0.length - 1 | 0;
          for (var i_0 = 0; i_0 <= tmp$_4; i_0++) {
            array_0[i_0] = new Pair(-1, -1);
          }
          array[i] = array_0;
        }
        var test = array;
        tmp$_1 = this.height - 1 | 0;
        for (var y_0 = 0; y_0 <= tmp$_1; y_0++) {
          tmp$_2 = this.width - 1 | 0;
          for (var x_0 = 0; x_0 <= tmp$_2; x_0++) {
            test[x_0][y_0] = temp[x_0][y_0].copy_xwzc9p$();
          }
        }
        if (test[x][y].second === 0) {
          this.increaseChainedTile_aatw4l$(test, x, y);
          if (this.isNoMoreTouch_9kzzq3$(test) === true) {
            if (this.checkComplete_9kzzq3$(test) === true) {
              return false;
            }
            return true;
          }
          var tmp$_5 = test.slice();
          var tmp$_6 = depth + 1 | 0;
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(x)) {
              STRING$result = x.toString();
              break STRING$break;
            }
             else if (typeof x === 'string') {
              STRING$result = x;
              break STRING$break;
            }
             else if (typeof x === 'boolean') {
              STRING$result = x.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(x)) {
              STRING$result = x.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          var tmp$_7 = click + STRING$result + ',';
          var STRING$result_0;
          STRING$break: do {
            if (Kotlin.isNumber(y)) {
              STRING$result_0 = y.toString();
              break STRING$break;
            }
             else if (typeof y === 'string') {
              STRING$result_0 = y;
              break STRING$break;
            }
             else if (typeof y === 'boolean') {
              STRING$result_0 = y.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(y)) {
              STRING$result_0 = y.toString();
              break STRING$break;
            }
            STRING$result_0 = '';
          }
           while (false);
          if (this.isNoMoreMatch_nq05ln$(tmp$_5, tmp$_6, tmp$_7 + STRING$result_0 + ' ') === false) {
            return false;
          }
        }
      }
    }
    return true;
  };
  BoardGenerator.prototype.countKindOf_9kzzq3$ = function (temp) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var array = new Int32Array(this.kindOfNumber);
    var tmp$_3;
    tmp$_3 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_3; i++) {
      array[i] = 0;
    }
    var kindOf = array;
    tmp$ = this.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = this.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        if (temp[x][y].first < this.kindOfNumber && temp[x][y].first >= 0) {
          tmp$_1 = temp[x][y].first;
          kindOf[tmp$_1] = kindOf[tmp$_1] + 1 | 0;
        }
      }
    }
    var count = 0;
    var sum = 0;
    tmp$_2 = this.kindOfNumber - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
      if (kindOf[i_0] > 0) {
        count = count + 1 | 0;
        sum = sum + i_0 | 0;
      }
    }
    return new Pair(count, sum);
  };
  BoardGenerator.prototype.isNoMoreTouch_9kzzq3$ = function (temp) {
    var tmp$, tmp$_0;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        if (temp[x][y].second === 0) {
          return false;
        }
      }
    }
    return true;
  };
  BoardGenerator.prototype.findPossibleMatch_klim6j$ = function (map) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var array = Array_0(this.width);
    var tmp$_4;
    tmp$_4 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_4; i++) {
      var array_0 = Array_0(this.height);
      var tmp$_5;
      tmp$_5 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_5; i_0++) {
        array_0[i_0] = new Pair(0, 0);
      }
      array[i] = array_0;
    }
    var temp = array;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          temp[x][y] = new Pair(block.value, block.GetAttribute() === TileEntity$Attribute$disabled_getInstance() ? 1 : 0);
        }
         else {
          temp[x][y] = new Pair(-1, -1);
        }
      }
    }
    tmp$_2 = this.width - 1 | 0;
    for (var x_0 = 0; x_0 <= tmp$_2; x_0++) {
      tmp$_3 = this.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_3; y_0++) {
        var test = temp;
        if (test[x_0][y_0].second === 0) {
          this.increaseChainedTile_aatw4l$(test, x_0, y_0);
          if (this.checkComplete_9kzzq3$(test) === true) {
            return true;
          }
        }
      }
    }
    return false;
  };
  var booleanArray = Kotlin.booleanArray;
  BoardGenerator.prototype.increaseChainedTile_aatw4l$ = function (map, x, y) {
    var array = Array_0(this.width);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var array_0 = new Int32Array(this.height);
      var tmp$_0;
      tmp$_0 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        array_0[i_0] = 0;
      }
      array[i] = array_0;
    }
    var increaseCheck = array;
    var array_1 = Array_0(this.width);
    var tmp$_1;
    tmp$_1 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      var array_2 = booleanArray(this.height, false);
      var tmp$_2;
      tmp$_2 = array_2.length - 1 | 0;
      for (var i_2 = 0; i_2 <= tmp$_2; i_2++) {
        array_2[i_2] = false;
      }
      array_1[i_1] = array_2;
    }
    var changed = array_1;
    this.increaseChainedTileRec_cpafc8$(increaseCheck, map, x, y, map[x][y].first, changed);
    return changed;
  };
  BoardGenerator.prototype.increaseChainedTileRec_cpafc8$ = function (increaseCheck, map, x, y, number, changed) {
    if (y < 0 || y >= this.height) {
      return;
    }
    if (x < 0 || x >= this.width) {
      return;
    }
    if (increaseCheck[x][y] === 1) {
      return;
    }
    increaseCheck[x][y] = 1;
    if (map[x][y].first !== -1) {
      if (map[x][y].first === number) {
        map[x][y] = new Pair((map[x][y].first + 1 | 0) % this.kindOfNumber, 999);
        changed[x][y] = true;
      }
       else {
        return;
      }
    }
     else {
      return;
    }
    this.increaseChainedTileRec_cpafc8$(increaseCheck, map, x, y - 1 | 0, number, changed);
    this.increaseChainedTileRec_cpafc8$(increaseCheck, map, x + 1 | 0, y, number, changed);
    this.increaseChainedTileRec_cpafc8$(increaseCheck, map, x, y + 1 | 0, number, changed);
    this.increaseChainedTileRec_cpafc8$(increaseCheck, map, x - 1 | 0, y, number, changed);
  };
  BoardGenerator.prototype.checkComplete_9kzzq3$ = function (map) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var array = Array_0(this.width);
    var tmp$_3;
    tmp$_3 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_3; i++) {
      var array_0 = new Int32Array(this.height);
      var tmp$_4;
      tmp$_4 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_4; i_0++) {
        array_0[i_0] = 0;
      }
      array[i] = array_0;
    }
    this.clear = array;
    var matched = false;
    var array_1 = new Int32Array(this.width);
    var tmp$_5;
    tmp$_5 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_5; i_1++) {
      array_1[i_1] = 0;
    }
    var row = array_1;
    var prev;
    var count;
    tmp$ = this.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      count = 1;
      prev = -1;
      tmp$_0 = this.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        if (map[x][y].first === prev && map[x][y].first !== -1) {
          count = count + 1 | 0;
        }
         else {
          count = 1;
        }
        row[x] = count;
        prev = map[x][y].first;
      }
      for (var x_0 = this.width - 1 | 0; x_0 >= 0; x_0--) {
        if (row[x_0] >= this.minOfComplete) {
          matched = true;
          return true;
        }
      }
    }
    var array_2 = new Int32Array(this.height);
    var tmp$_6;
    tmp$_6 = array_2.length - 1 | 0;
    for (var i_2 = 0; i_2 <= tmp$_6; i_2++) {
      array_2[i_2] = 0;
    }
    var column = array_2;
    tmp$_1 = this.width - 1 | 0;
    for (var x_1 = 0; x_1 <= tmp$_1; x_1++) {
      count = 1;
      prev = -1;
      tmp$_2 = this.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_2; y_0++) {
        if (map[x_1][y_0].first === prev && map[x_1][y_0].first !== -1) {
          count = count + 1 | 0;
        }
         else {
          count = 1;
        }
        column[y_0] = count;
        prev = map[x_1][y_0].first;
      }
      for (var y_1 = this.height - 1 | 0; y_1 >= 0; y_1--) {
        if (column[y_1] >= this.minOfComplete) {
          matched = true;
          return true;
        }
      }
    }
    return matched;
  };
  BoardGenerator.prototype.processDrop_klim6j$ = function (map) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        if (map[x][y] != null) {
          this.dropMap[x][y] = ensureNotNull(map[x][y]).value;
        }
         else {
          this.dropMap[x][y] = -1;
        }
        this.newBlockMap[x][y] = -1;
      }
    }
    while (this.isAllLanded_ytlutl$(this.dropMap) === false) {
      for (var y_0 = this.height - 1 | 0; y_0 >= 0; y_0--) {
        tmp$_1 = this.width - 1 | 0;
        for (var x_0 = 0; x_0 <= tmp$_1; x_0++) {
          if (this.dropMap[x_0][y_0] === -1) {
            var upper = -1;
            if (y_0 === 0) {
              upper = -1;
            }
             else {
              upper = this.dropMap[x_0][y_0 - 1 | 0];
              this.dropMap[x_0][y_0 - 1 | 0] = -1;
            }
            this.dropMap[x_0][y_0] = upper;
          }
        }
      }
    }
  };
  BoardGenerator.prototype.isAllLanded_ytlutl$ = function (map) {
    var tmp$, tmp$_0;
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.height - 2 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        if (map[x][y] !== -1) {
          if (map[x][y + 1 | 0] === -1) {
            return false;
          }
        }
      }
    }
    return true;
  };
  BoardGenerator.prototype.makeMapForNewBlock_klim6j$ = function (map) {
    var tmp$;
    this.processDrop_klim6j$(map);
    tmp$ = this.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      for (var y = this.height - 1 | 0; y >= 0; y--) {
        if (this.dropMap[x][y] === -1) {
          var array = new Int32Array(this.kindOfNumber);
          var tmp$_0;
          tmp$_0 = array.length - 1 | 0;
          for (var i = 0; i <= tmp$_0; i++) {
            array[i] = 0;
          }
          var check = array;
          if (x > 0) {
            var ref = this.dropMap[x - 1 | 0][y];
            if (ref !== -1 && ref < this.kindOfNumber) {
              check[ref] = check[ref] + 1 | 0;
            }
          }
          if (x < (this.width - 1 | 0)) {
            var ref_0 = this.dropMap[x + 1 | 0][y];
            if (ref_0 !== -1 && ref_0 < this.kindOfNumber) {
              check[ref_0] = check[ref_0] + 1 | 0;
            }
          }
          if (y < (this.height - 1 | 0)) {
            var ref_1 = this.dropMap[x][y + 1 | 0];
            if (ref_1 !== -1 && ref_1 < this.kindOfNumber) {
              check[ref_1] = check[ref_1] + 1 | 0;
            }
          }
          var value = Random_getInstance().arc4random_uniform_za3lpa$(this.kindOfNumber);
          var INT$result;
          INT$break: do {
            if (value == null) {
              INT$result = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value)) {
              INT$result = numberToInt(value);
              break INT$break;
            }
            if (typeof value === 'string') {
              try {
                var number = toInt_0(value);
                INT$result = number;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result = 0;
          }
           while (false);
          var num = INT$result;
          if (Random_getInstance().arc4random_uniform_za3lpa$(100) < 30) {
            this.dropMap[x][y] = num;
            this.newBlockMap[x][y] = num;
          }
           else {
            var pick = -1;
            var i_0 = 0;
            while (true) {
              if (check[i_0] === 0) {
                pick = pick + 1 | 0;
              }
              if (pick === num) {
                this.dropMap[x][y] = i_0;
                this.newBlockMap[x][y] = i_0;
                break;
              }
              i_0 = i_0 + 1 | 0;
              if (i_0 >= this.kindOfNumber) {
                i_0 = 0;
              }
            }
          }
        }
      }
    }
  };
  BoardGenerator.prototype.GetAvailableBlockOriginal_za3lpa$ = function (x) {
    for (var y = this.height - 1 | 0; y >= 0; y--) {
      if (this.newBlockMap[x][y] !== -1) {
        var temp = this.newBlockMap[x][y];
        this.newBlockMap[x][y] = -1;
        return temp;
      }
    }
    return -1;
  };
  BoardGenerator.prototype.GetAvailableBlock_vux9f0$ = function (x, y) {
    var tmp$, tmp$_0, tmp$_1;
    var count = 0;
    var array = new Int32Array(this.kindOfNumber);
    var tmp$_2;
    tmp$_2 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_2; i++) {
      array[i] = 0;
    }
    var check = array;
    var countExceptDisabled = 0;
    var array_0 = new Int32Array(this.kindOfNumber);
    var tmp$_3;
    tmp$_3 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_3; i_0++) {
      array_0[i_0] = 0;
    }
    var checkExceptDisabled = array_0;
    var list = ensureNotNull(ensureNotNull(this.game).entityManager).GetList();
    for (tmp$ = 0; tmp$ !== list.length; ++tmp$) {
      var entity = list[tmp$];
      var block = Kotlin.isType(tmp$_0 = entity, BlockEntity) ? tmp$_0 : null;
      if (block != null) {
        if (check[block.value] === 0) {
          count = count + 1 | 0;
          check[block.value] = 1;
        }
        if (checkExceptDisabled[block.value] === 0) {
          if (block.GetAttribute() !== TileEntity$Attribute$disabled_getInstance()) {
            countExceptDisabled = countExceptDisabled + 1 | 0;
            checkExceptDisabled[block.value] = 1;
          }
        }
      }
    }
    if (count <= 2) {
      if (countExceptDisabled < 2) {
        if (Random_getInstance().arc4random_uniform_za3lpa$(3) === 0) {
          var temp = this.kindOfNumber - countExceptDisabled | 0;
          var value = Random_getInstance().arc4random_uniform_za3lpa$(temp);
          var INT$result;
          INT$break: do {
            if (value == null) {
              INT$result = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value)) {
              INT$result = numberToInt(value);
              break INT$break;
            }
            if (typeof value === 'string') {
              try {
                var number = toInt_0(value);
                INT$result = number;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result = 0;
          }
           while (false);
          var num = INT$result;
          var pick = -1;
          tmp$_1 = this.kindOfNumber - 1 | 0;
          for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
            if (checkExceptDisabled[i_1] === 0) {
              pick = pick + 1 | 0;
              if (pick === num) {
                return i_1;
              }
            }
          }
        }
      }
    }
    var value_0 = Random_getInstance().arc4random_uniform_za3lpa$(this.kindOfNumber);
    var INT$result_0;
    INT$break: do {
      if (value_0 == null) {
        INT$result_0 = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        INT$result_0 = numberToInt(value_0);
        break INT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toInt_0(value_0);
          INT$result_0 = number_0;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result_0 = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result_0 = 0;
    }
     while (false);
    return INT$result_0;
  };
  BoardGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoardGenerator',
    interfaces: []
  };
  function BoardGenerator_init(game, width, height, kindOfNumber, minOfComplete, $this) {
    $this = $this || Object.create(BoardGenerator.prototype);
    BoardGenerator.call($this);
    $this.game = game;
    $this.width = width;
    $this.height = height;
    $this.kindOfNumber = kindOfNumber;
    $this.minOfComplete = minOfComplete;
    var array = Array_0($this.width);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var array_0 = new Int32Array($this.height);
      var tmp$_0;
      tmp$_0 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        array_0[i_0] = -1;
      }
      array[i] = array_0;
    }
    $this.map = array;
    var array_1 = Array_0($this.width);
    var tmp$_1;
    tmp$_1 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      var array_2 = new Int32Array($this.height);
      var tmp$_2;
      tmp$_2 = array_2.length - 1 | 0;
      for (var i_2 = 0; i_2 <= tmp$_2; i_2++) {
        array_2[i_2] = 0;
      }
      array_1[i_1] = array_2;
    }
    $this.clear = array_1;
    var array_3 = Array_0($this.width);
    var tmp$_3;
    tmp$_3 = array_3.length - 1 | 0;
    for (var i_3 = 0; i_3 <= tmp$_3; i_3++) {
      var array_4 = new Int32Array($this.height);
      var tmp$_4;
      tmp$_4 = array_4.length - 1 | 0;
      for (var i_4 = 0; i_4 <= tmp$_4; i_4++) {
        array_4[i_4] = -1;
      }
      array_3[i_3] = array_4;
    }
    $this.dropMap = array_3;
    var array_5 = Array_0($this.width);
    var tmp$_5;
    tmp$_5 = array_5.length - 1 | 0;
    for (var i_5 = 0; i_5 <= tmp$_5; i_5++) {
      var array_6 = new Int32Array($this.height);
      var tmp$_6;
      tmp$_6 = array_6.length - 1 | 0;
      for (var i_6 = 0; i_6 <= tmp$_6; i_6++) {
        array_6[i_6] = -1;
      }
      array_5[i_5] = array_6;
    }
    $this.newBlockMap = array_5;
    return $this;
  }
  function Game_0() {
    this.initializeDone = false;
    this.view_c2zo2j$_0 = this.view_c2zo2j$_0;
    this.quality = 2;
    this.particleManager_v8z4ir$_0 = this.particleManager_v8z4ir$_0;
    this.gameState_d7cpud$_0 = this.gameState_d7cpud$_0;
    this.masterTimer_hq0vq1$_0 = this.masterTimer_hq0vq1$_0;
    this.boardGenerator_epr2il$_0 = this.boardGenerator_epr2il$_0;
    this.playerRecord = null;
    this.gameValue_c2gwc5$_0 = this.gameValue_c2gwc5$_0;
    this.scheduledJobManager_2z1g5v$_0 = this.scheduledJobManager_2z1g5v$_0;
    this.gameConfigure_i3ngcq$_0 = this.gameConfigure_i3ngcq$_0;
    this.boardRect = Rect_init();
    this.gameLogicUpdater_q530j1$_0 = this.gameLogicUpdater_q530j1$_0;
    this.gameTimer = null;
    this.gameTimeElapsed = 0.0;
    this.gameRemainTime = 0.0;
    this.beginnerTimer = null;
    this.beginnerTimeRemain = 0.0;
    this.blockDisableTimer = null;
    this.blockDisableTimeRemain = 0.0;
    this.comboTimer_qhfmdp$_0 = this.comboTimer_qhfmdp$_0;
    this.comboTimeRemain = 0.0;
    this.feverTimer_8kmffb$_0 = this.feverTimer_8kmffb$_0;
    this.feverTimeRemain = 0.0;
    this.entityManager_f4f37k$_0 = this.entityManager_f4f37k$_0;
    this.map_miog1a$_0 = this.map_miog1a$_0;
    this.hintMap_qgymqz$_0 = this.hintMap_qgymqz$_0;
    this.clear_sddaxv$_0 = this.clear_sddaxv$_0;
    this.increaseCheck_f490rg$_0 = this.increaseCheck_f490rg$_0;
    this.createColumn_8wqhbs$_0 = this.createColumn_8wqhbs$_0;
    this.beingTransform = false;
    this.comboRestart = false;
    this.onIdling = false;
    this.idleStartTime = 0.0;
    this.completeCheckNoMoreMatch = false;
    this.completeMakeHint = false;
    this.showHintNow = false;
    this.pressPos = new Pair(-1, -1);
    this.inputQueue = mutableListOf([new Pair(-1, -1)]);
    this.keyInputIgnoreStart = false;
    this.keyInputIgnoreEnd = 0.0;
    this.lastInput = new Pair(-1, -1);
    this.noMoreMatch = false;
    this.gameOverFlag = false;
    this.lastChanceFlag = false;
    this.isPaused = false;
    this.isPausedOnlyForLogic = false;
    this.isCanceled = false;
    this.comboSeedScore = 0;
    this.comboSeedFactor = 0.0;
    this.background_6pzcos$_0 = this.background_6pzcos$_0;
    this.boardList = ArrayList_init();
    this.boardMask_56ytzs$_0 = this.boardMask_56ytzs$_0;
    this.boardMaskZ = 0.0;
    this.feverTimerBar_x11r14$_0 = this.feverTimerBar_x11r14$_0;
    this.feverBackground_w2xd2w$_0 = this.feverBackground_w2xd2w$_0;
    this.bannerOffset = 20.0;
    this.bottomHeight = 0.0;
    this.autoPlayKeyIndex = 0;
    this.nirvanaCount = 0;
    this.scoreBackup = 0;
    this.maxComboBackup = 0;
    this.maxFeverBackup = 0;
    this.clearedObstacleBackup = 0;
    this.mapBackup_re831w$_0 = this.mapBackup_re831w$_0;
    this.nirvanaCountBackup = 0;
    this.playingTimeBackup = 0.0;
    this.timerSoundFired = false;
    this.continueByStar = 0;
    this.continueByVideo = 0;
    this.touchListener = Game$touchListener$lambda(this);
    this.onReady_m3wg3q$_0 = Game$onReady$lambda(this);
    this.onTimerStart = Game$onTimerStart$lambda(this);
    this.onTimerRestart = Game$onTimerRestart$lambda(this);
    this.onRunning = Game$onRunning$lambda(this);
    this.onRegenAll = Game$onRegenAll$lambda(this);
    this.onNoMoreMove = Game$onNoMoreMove$lambda(this);
    this.onGameOver_4sel7f$_0 = Game$onGameOver$lambda(this);
    this.onConfirmContinue = Game$onConfirmContinue$lambda(this);
    this.onConfirmContinueForTimeAttack = Game$onConfirmContinueForTimeAttack$lambda(this);
    this.onWaitForStop_ge8lbh$_0 = Game$onWaitForStop$lambda(this);
    this.onGameClose = Game$onGameClose$lambda(this);
    this.gameCancel = Game$gameCancel$lambda(this);
    this.update = Game$update$lambda(this);
    this.comboTimerUpdateCallback = Game$comboTimerUpdateCallback$lambda(this);
    this.comboTimerRestartCallback = Game$comboTimerRestartCallback$lambda(this);
    this.feverTimerUpdateCallback = Game$feverTimerUpdateCallback$lambda(this);
    this.feverTimerRestartCallback = Game$feverTimerRestartCallback$lambda(this);
    this.gameTimeUpdateCallback = Game$gameTimeUpdateCallback$lambda(this);
    this.blockDisableTimeUpdateCallback = Game$blockDisableTimeUpdateCallback$lambda(this);
    this.beginnerTimeUpdateCallback = Game$beginnerTimeUpdateCallback$lambda(this);
    this.blockDisableTimeRestartCallback = Game$blockDisableTimeRestartCallback$lambda(this);
    this.beginnerTimeRestartCallback = Game$beginnerTimeRestartCallback$lambda(this);
  }
  Object.defineProperty(Game_0.prototype, 'view', {
    get: function () {
      if (this.view_c2zo2j$_0 == null)
        return throwUPAE('view');
      return this.view_c2zo2j$_0;
    },
    set: function (view) {
      this.view_c2zo2j$_0 = view;
    }
  });
  Object.defineProperty(Game_0.prototype, 'particleManager', {
    get: function () {
      if (this.particleManager_v8z4ir$_0 == null)
        return throwUPAE('particleManager');
      return this.particleManager_v8z4ir$_0;
    },
    set: function (particleManager) {
      this.particleManager_v8z4ir$_0 = particleManager;
    }
  });
  Object.defineProperty(Game_0.prototype, 'gameState', {
    get: function () {
      if (this.gameState_d7cpud$_0 == null)
        return throwUPAE('gameState');
      return this.gameState_d7cpud$_0;
    },
    set: function (gameState) {
      this.gameState_d7cpud$_0 = gameState;
    }
  });
  Object.defineProperty(Game_0.prototype, 'masterTimer', {
    get: function () {
      if (this.masterTimer_hq0vq1$_0 == null)
        return throwUPAE('masterTimer');
      return this.masterTimer_hq0vq1$_0;
    },
    set: function (masterTimer) {
      this.masterTimer_hq0vq1$_0 = masterTimer;
    }
  });
  Object.defineProperty(Game_0.prototype, 'boardGenerator', {
    get: function () {
      if (this.boardGenerator_epr2il$_0 == null)
        return throwUPAE('boardGenerator');
      return this.boardGenerator_epr2il$_0;
    },
    set: function (boardGenerator) {
      this.boardGenerator_epr2il$_0 = boardGenerator;
    }
  });
  Object.defineProperty(Game_0.prototype, 'gameValue', {
    get: function () {
      if (this.gameValue_c2gwc5$_0 == null)
        return throwUPAE('gameValue');
      return this.gameValue_c2gwc5$_0;
    },
    set: function (gameValue) {
      this.gameValue_c2gwc5$_0 = gameValue;
    }
  });
  Object.defineProperty(Game_0.prototype, 'scheduledJobManager', {
    get: function () {
      if (this.scheduledJobManager_2z1g5v$_0 == null)
        return throwUPAE('scheduledJobManager');
      return this.scheduledJobManager_2z1g5v$_0;
    },
    set: function (scheduledJobManager) {
      this.scheduledJobManager_2z1g5v$_0 = scheduledJobManager;
    }
  });
  Object.defineProperty(Game_0.prototype, 'gameConfigure', {
    get: function () {
      if (this.gameConfigure_i3ngcq$_0 == null)
        return throwUPAE('gameConfigure');
      return this.gameConfigure_i3ngcq$_0;
    },
    set: function (gameConfigure) {
      this.gameConfigure_i3ngcq$_0 = gameConfigure;
    }
  });
  Object.defineProperty(Game_0.prototype, 'gameLogicUpdater', {
    get: function () {
      if (this.gameLogicUpdater_q530j1$_0 == null)
        return throwUPAE('gameLogicUpdater');
      return this.gameLogicUpdater_q530j1$_0;
    },
    set: function (gameLogicUpdater) {
      this.gameLogicUpdater_q530j1$_0 = gameLogicUpdater;
    }
  });
  Object.defineProperty(Game_0.prototype, 'comboTimer', {
    get: function () {
      if (this.comboTimer_qhfmdp$_0 == null)
        return throwUPAE('comboTimer');
      return this.comboTimer_qhfmdp$_0;
    },
    set: function (comboTimer) {
      this.comboTimer_qhfmdp$_0 = comboTimer;
    }
  });
  Object.defineProperty(Game_0.prototype, 'feverTimer', {
    get: function () {
      if (this.feverTimer_8kmffb$_0 == null)
        return throwUPAE('feverTimer');
      return this.feverTimer_8kmffb$_0;
    },
    set: function (feverTimer) {
      this.feverTimer_8kmffb$_0 = feverTimer;
    }
  });
  Object.defineProperty(Game_0.prototype, 'entityManager', {
    get: function () {
      if (this.entityManager_f4f37k$_0 == null)
        return throwUPAE('entityManager');
      return this.entityManager_f4f37k$_0;
    },
    set: function (entityManager) {
      this.entityManager_f4f37k$_0 = entityManager;
    }
  });
  Object.defineProperty(Game_0.prototype, 'map', {
    get: function () {
      if (this.map_miog1a$_0 == null)
        return throwUPAE('map');
      return this.map_miog1a$_0;
    },
    set: function (map) {
      this.map_miog1a$_0 = map;
    }
  });
  Object.defineProperty(Game_0.prototype, 'hintMap', {
    get: function () {
      if (this.hintMap_qgymqz$_0 == null)
        return throwUPAE('hintMap');
      return this.hintMap_qgymqz$_0;
    },
    set: function (hintMap) {
      this.hintMap_qgymqz$_0 = hintMap;
    }
  });
  Object.defineProperty(Game_0.prototype, 'clear', {
    get: function () {
      if (this.clear_sddaxv$_0 == null)
        return throwUPAE('clear');
      return this.clear_sddaxv$_0;
    },
    set: function (clear) {
      this.clear_sddaxv$_0 = clear;
    }
  });
  Object.defineProperty(Game_0.prototype, 'increaseCheck', {
    get: function () {
      if (this.increaseCheck_f490rg$_0 == null)
        return throwUPAE('increaseCheck');
      return this.increaseCheck_f490rg$_0;
    },
    set: function (increaseCheck) {
      this.increaseCheck_f490rg$_0 = increaseCheck;
    }
  });
  Object.defineProperty(Game_0.prototype, 'createColumn', {
    get: function () {
      if (this.createColumn_8wqhbs$_0 == null)
        return throwUPAE('createColumn');
      return this.createColumn_8wqhbs$_0;
    },
    set: function (createColumn) {
      this.createColumn_8wqhbs$_0 = createColumn;
    }
  });
  Object.defineProperty(Game_0.prototype, 'background', {
    get: function () {
      if (this.background_6pzcos$_0 == null)
        return throwUPAE('background');
      return this.background_6pzcos$_0;
    },
    set: function (background) {
      this.background_6pzcos$_0 = background;
    }
  });
  Object.defineProperty(Game_0.prototype, 'boardMask', {
    get: function () {
      if (this.boardMask_56ytzs$_0 == null)
        return throwUPAE('boardMask');
      return this.boardMask_56ytzs$_0;
    },
    set: function (boardMask) {
      this.boardMask_56ytzs$_0 = boardMask;
    }
  });
  Object.defineProperty(Game_0.prototype, 'feverTimerBar', {
    get: function () {
      if (this.feverTimerBar_x11r14$_0 == null)
        return throwUPAE('feverTimerBar');
      return this.feverTimerBar_x11r14$_0;
    },
    set: function (feverTimerBar) {
      this.feverTimerBar_x11r14$_0 = feverTimerBar;
    }
  });
  Object.defineProperty(Game_0.prototype, 'feverBackground', {
    get: function () {
      if (this.feverBackground_w2xd2w$_0 == null)
        return throwUPAE('feverBackground');
      return this.feverBackground_w2xd2w$_0;
    },
    set: function (feverBackground) {
      this.feverBackground_w2xd2w$_0 = feverBackground;
    }
  });
  Object.defineProperty(Game_0.prototype, 'mapBackup', {
    get: function () {
      if (this.mapBackup_re831w$_0 == null)
        return throwUPAE('mapBackup');
      return this.mapBackup_re831w$_0;
    },
    set: function (mapBackup) {
      this.mapBackup_re831w$_0 = mapBackup;
    }
  });
  Game_0.prototype.initGameVariables = function () {
    var tmp$;
    this.entityManager = EntityManager_init();
    this.gameState = new GameState();
    this.gameValue = new GameValue(this.gameConfigure);
    var tmp$_0 = this.gameValue;
    var array = Array_0(this.gameConfigure.width);
    var tmp$_1;
    tmp$_1 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_1; i++) {
      var array_0 = new Int32Array(this.gameConfigure.height);
      var tmp$_2;
      tmp$_2 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
        array_0[i_0] = -1;
      }
      array[i] = array_0;
    }
    tmp$_0.mapForSharing = array;
    this.gameValue.addTimeEveryFeverAmount = this.gameConfigure.addTimeEveryFeverAmount;
    this.scheduledJobManager = new ScheduledJobManager();
    this.keyInputIgnoreStart = false;
    this.keyInputIgnoreEnd = 0.0;
    this.gameOverFlag = false;
    this.lastChanceFlag = false;
    var array_1 = new Int32Array(this.gameConfigure.width);
    var tmp$_3;
    tmp$_3 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_3; i_1++) {
      array_1[i_1] = 0;
    }
    this.createColumn = array_1;
    var array_2 = Array_0(this.gameConfigure.width);
    var tmp$_4;
    tmp$_4 = array_2.length - 1 | 0;
    for (var i_2 = 0; i_2 <= tmp$_4; i_2++) {
      var array_3 = Array_0(this.gameConfigure.height);
      var tmp$_5;
      tmp$_5 = array_3.length - 1 | 0;
      for (var i_3 = 0; i_3 <= tmp$_5; i_3++) {
        array_3[i_3] = null;
      }
      array_2[i_2] = array_3;
    }
    this.map = array_2;
    var array_4 = Array_0(this.gameConfigure.width);
    var tmp$_6;
    tmp$_6 = array_4.length - 1 | 0;
    for (var i_4 = 0; i_4 <= tmp$_6; i_4++) {
      var array_5 = new Int32Array(this.gameConfigure.height);
      var tmp$_7;
      tmp$_7 = array_5.length - 1 | 0;
      for (var i_5 = 0; i_5 <= tmp$_7; i_5++) {
        array_5[i_5] = -1;
      }
      array_4[i_4] = array_5;
    }
    this.mapBackup = array_4;
    var array_6 = Array_0(this.gameConfigure.width);
    var tmp$_8;
    tmp$_8 = array_6.length - 1 | 0;
    for (var i_6 = 0; i_6 <= tmp$_8; i_6++) {
      var array_7 = new Int32Array(this.gameConfigure.height);
      var tmp$_9;
      tmp$_9 = array_7.length - 1 | 0;
      for (var i_7 = 0; i_7 <= tmp$_9; i_7++) {
        array_7[i_7] = 0;
      }
      array_6[i_6] = array_7;
    }
    this.increaseCheck = array_6;
    var array_8 = Array_0(this.gameConfigure.width);
    var tmp$_10;
    tmp$_10 = array_8.length - 1 | 0;
    for (var i_8 = 0; i_8 <= tmp$_10; i_8++) {
      var array_9 = new Int32Array(this.gameConfigure.height);
      var tmp$_11;
      tmp$_11 = array_9.length - 1 | 0;
      for (var i_9 = 0; i_9 <= tmp$_11; i_9++) {
        array_9[i_9] = 0;
      }
      array_8[i_8] = array_9;
    }
    this.hintMap = array_8;
    var array_10 = Array_0(this.gameConfigure.width);
    var tmp$_12;
    tmp$_12 = array_10.length - 1 | 0;
    for (var i_10 = 0; i_10 <= tmp$_12; i_10++) {
      var array_11 = new Int32Array(this.gameConfigure.height);
      var tmp$_13;
      tmp$_13 = array_11.length - 1 | 0;
      for (var i_11 = 0; i_11 <= tmp$_13; i_11++) {
        array_11[i_11] = 0;
      }
      array_10[i_10] = array_11;
    }
    this.clear = array_10;
    var tmp$_14 = this.view.GetSize().width * 0.5;
    var tmp$_15 = this.gameConfigure.tileWidthResult;
    var value = this.gameConfigure.width;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_16 = tmp$_14 - tmp$_15 * FLOAT$result * 0.5;
    var tmp$_17 = this.gameConfigure.tileWidthResult;
    var value_0 = this.gameConfigure.width;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var tmp$_18 = tmp$_17 * FLOAT$result_0;
    var tmp$_19 = this.gameConfigure.tileHeightResult;
    var value_1 = this.gameConfigure.height;
    var FLOAT$result_1;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_1 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_1 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_1 = toDouble(value_1);
          FLOAT$result_1 = number_1;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_1 = 0.0;
    }
     while (false);
    this.boardRect = Rect_init(tmp$_16, 0.0, tmp$_18, tmp$_19 * FLOAT$result_1);
    this.boardRect.y = (this.view.GetSize().height - this.boardRect.height) * this.gameConfigure.topMargin - this.bottomHeight * this.view.sizeScale.yRatio;
    var blockInfo = Kotlin.isType(tmp$ = ItemManager$Companion_getInstance().shared().GetItemInfo_61zpoe$(AppController$Companion_getInstance().shared().GetCurrentBlockSetId()), BlockItem) ? tmp$ : throwCCE();
    this.gameValue.blockInfo = blockInfo;
    this.gameValue.blockSet = blockInfo.resource;
    var bonus = this.gameValue.blockInfo.GetAbility_61zpoe$('Basic Bonus');
    if (bonus != null) {
      var tmp$_20 = this.gameValue;
      var value_2 = bonus.first;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_2 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      tmp$_20.basicBonus = FLOAT$result_2;
    }
    this.gameRemainTime = this.gameConfigure.gameTime;
  };
  Game_0.prototype.deinitGameVariables = function () {
    this.particleManager.clearParticlePool();
    ensureNotNull(this.entityManager).removeAll();
    this.gameOverFlag = false;
    this.lastChanceFlag = false;
  };
  Game_0.prototype.initAdditional = function () {
    var tmp$, tmp$_0, tmp$_1;
    this.view.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.view.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    if (SystemConfigure$Companion_getInstance().isWatchOS() === false) {
      var unitWidth = this.gameConfigure.tileWidthResult;
      var unitHeight = this.gameConfigure.tileHeightResult;
      var borderRect = Rect_init(this.boardRect.x - this.gameConfigure.tileWidthResult, this.boardRect.y - this.gameConfigure.tileHeightResult - this.gameConfigure.topGaugeHeight, this.boardRect.width + this.gameConfigure.tileWidthResult * 2, this.boardRect.height + this.gameConfigure.tileHeightResult * 2 + this.gameConfigure.topGaugeHeight + this.gameConfigure.bottomGaugeHeight);
      var tmp$_2 = borderRect.x;
      var tmp$_3 = borderRect.y;
      var value = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var border = Sprite_init(tmp$_2, tmp$_3, FLOAT$result, 'Resource/UI/board_0', unitWidth, unitHeight);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_4 = borderRect.x + unitWidth;
      var tmp$_5 = borderRect.y;
      var value_0 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_4, tmp$_5, FLOAT$result_0, 'Resource/UI/board_1', borderRect.width - unitWidth * 2, unitHeight);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_6 = borderRect.x + borderRect.width - unitWidth;
      var tmp$_7 = borderRect.y;
      var value_1 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_1 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toDouble(value_1);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_6, tmp$_7, FLOAT$result_1, 'Resource/UI/board_2', unitWidth, unitHeight);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_8 = borderRect.x;
      var tmp$_9 = borderRect.y + unitHeight;
      var value_2 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_2 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_8, tmp$_9, FLOAT$result_2, 'Resource/UI/board_3', unitWidth, borderRect.height - unitHeight * 2);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_10 = borderRect.x + unitWidth;
      var tmp$_11 = borderRect.y + unitHeight;
      var value_3 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_3;
      FLOAT$break: do {
        if (value_3 == null) {
          FLOAT$result_3 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_3)) {
          FLOAT$result_3 = numberToDouble(value_3);
          break FLOAT$break;
        }
        if (typeof value_3 === 'string') {
          try {
            var number_3 = toDouble(value_3);
            FLOAT$result_3 = number_3;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_3 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_3 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_10, tmp$_11, FLOAT$result_3, 'Resource/UI/board_4', borderRect.width - unitWidth * 2, borderRect.height - unitHeight * 2);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_12 = borderRect.x + borderRect.width - unitWidth;
      var tmp$_13 = borderRect.y + unitHeight;
      var value_4 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_4;
      FLOAT$break: do {
        if (value_4 == null) {
          FLOAT$result_4 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_4)) {
          FLOAT$result_4 = numberToDouble(value_4);
          break FLOAT$break;
        }
        if (typeof value_4 === 'string') {
          try {
            var number_4 = toDouble(value_4);
            FLOAT$result_4 = number_4;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_4 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_4 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_12, tmp$_13, FLOAT$result_4, 'Resource/UI/board_5', unitWidth, borderRect.height - unitHeight * 2);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_14 = borderRect.x;
      var tmp$_15 = borderRect.y + borderRect.height - unitHeight;
      var value_5 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_5;
      FLOAT$break: do {
        if (value_5 == null) {
          FLOAT$result_5 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_5)) {
          FLOAT$result_5 = numberToDouble(value_5);
          break FLOAT$break;
        }
        if (typeof value_5 === 'string') {
          try {
            var number_5 = toDouble(value_5);
            FLOAT$result_5 = number_5;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_5 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_5 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_14, tmp$_15, FLOAT$result_5, 'Resource/UI/board_6', unitWidth, unitHeight);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_16 = borderRect.x + unitWidth;
      var tmp$_17 = borderRect.y + borderRect.height - unitHeight;
      var value_6 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_6;
      FLOAT$break: do {
        if (value_6 == null) {
          FLOAT$result_6 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_6)) {
          FLOAT$result_6 = numberToDouble(value_6);
          break FLOAT$break;
        }
        if (typeof value_6 === 'string') {
          try {
            var number_6 = toDouble(value_6);
            FLOAT$result_6 = number_6;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_6 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_6 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_16, tmp$_17, FLOAT$result_6, 'Resource/UI/board_7', borderRect.width - unitWidth * 2, unitHeight);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
      var tmp$_18 = borderRect.x + borderRect.width - unitWidth;
      var tmp$_19 = borderRect.y + borderRect.height - unitHeight;
      var value_7 = SceneLayer$backgroundTop_getInstance().value;
      var FLOAT$result_7;
      FLOAT$break: do {
        if (value_7 == null) {
          FLOAT$result_7 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_7)) {
          FLOAT$result_7 = numberToDouble(value_7);
          break FLOAT$break;
        }
        if (typeof value_7 === 'string') {
          try {
            var number_7 = toDouble(value_7);
            FLOAT$result_7 = number_7;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_7 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_7 = 0.0;
      }
       while (false);
      border = Sprite_init(tmp$_18, tmp$_19, FLOAT$result_7, 'Resource/UI/board_8', unitWidth, unitHeight);
      border.SetAlpha_8ca0d4$(0.1);
      this.view.addChild_g5h3xp$(border);
    }
    var blockInfo = Kotlin.isType(tmp$ = this.gameValue.blockInfo, BlockItem) ? tmp$ : null;
    tmp$_0 = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$_0; x++) {
      tmp$_1 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_1; y++) {
        var tmp$_20 = this.boardRect.x;
        var FLOAT$result_8;
        FLOAT$break: do {
          if (x == null) {
            FLOAT$result_8 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(x)) {
            FLOAT$result_8 = numberToDouble(x);
            break FLOAT$break;
          }
          if (typeof x === 'string') {
            try {
              var number_8 = toDouble(x);
              FLOAT$result_8 = number_8;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_8 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_8 = 0.0;
        }
         while (false);
        var tmp$_21 = tmp$_20 + FLOAT$result_8 * this.gameConfigure.tileWidthResult + this.gameConfigure.tileWidthResult * 0.5;
        var tmp$_22 = this.boardRect.y;
        var FLOAT$result_9;
        FLOAT$break: do {
          if (y == null) {
            FLOAT$result_9 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(y)) {
            FLOAT$result_9 = numberToDouble(y);
            break FLOAT$break;
          }
          if (typeof y === 'string') {
            try {
              var number_9 = toDouble(y);
              FLOAT$result_9 = number_9;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_9 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_9 = 0.0;
        }
         while (false);
        var tmp$_23 = tmp$_22 + FLOAT$result_9 * this.gameConfigure.tileHeightResult + this.gameConfigure.tileHeightResult * 0.5;
        var value_8 = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result_10;
        FLOAT$break: do {
          if (value_8 == null) {
            FLOAT$result_10 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_8)) {
            FLOAT$result_10 = numberToDouble(value_8);
            break FLOAT$break;
          }
          if (typeof value_8 === 'string') {
            try {
              var number_10 = toDouble(value_8);
              FLOAT$result_10 = number_10;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_10 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_10 = 0.0;
        }
         while (false);
        var sprite = Sprite_init(tmp$_21, tmp$_23, FLOAT$result_10, (blockInfo != null ? blockInfo.resource : null) + 'board_tile', this.gameConfigure.tileWidth, this.gameConfigure.tileHeight);
        sprite.SetAlpha_8ca0d4$(0.8);
        sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        this.view.addChild_g5h3xp$(sprite);
        this.boardList.add_11rb$(sprite);
      }
    }
    var tmp$_24 = this.boardRect.x;
    var tmp$_25 = this.boardRect.y;
    var value_9 = SceneLayer$gameBoardTop_getInstance().value;
    var FLOAT$result_11;
    FLOAT$break: do {
      if (value_9 == null) {
        FLOAT$result_11 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_9)) {
        FLOAT$result_11 = numberToDouble(value_9);
        break FLOAT$break;
      }
      if (typeof value_9 === 'string') {
        try {
          var number_11 = toDouble(value_9);
          FLOAT$result_11 = number_11;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_11 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_11 = 0.0;
    }
     while (false);
    var mask = Mask_init(tmp$_24, tmp$_25, FLOAT$result_11, 'Resource/UI/board_mask', this.boardRect.width, this.boardRect.height);
    mask.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    mask.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    this.view.addChild_g5h3xp$(mask);
    this.view.SetMask_g5i0xv$(mask);
    if (SystemConfigure$Companion_getInstance().isWatchOS() === false) {
      this.createMainScore();
    }
     else {
      HAL$Companion_getInstance().shared().SetTitle_61zpoe$('0');
    }
    if (this.gameConfigure.limitGameTime === true || this.gameConfigure.blockDisablePeriodically === true || this.gameConfigure.resetTimeEveryClear === true) {
      this.createTimeBar();
    }
    this.createFeverGage();
    if (this.quality >= 1) {
      this.createBackgroundEffect();
    }
  };
  function Game$initGame$lambda(this$Game) {
    return function (code) {
      if (code >= TouchListener$Code_getInstance().NUMPAD_1 && code <= TouchListener$Code_getInstance().NUMPAD_9) {
        var pos = code - 145 | 0;
        var nextX = pos % 3;
        var nextY = 2 - (pos / 3 | 0) | 0;
        this$Game.pressPos = new Pair(nextX, nextY);
        if (this$Game.map[nextX][nextY] != null) {
          this$Game.addKeyInput_ydzd23$(nextX, nextY);
        }
        this$Game.pressPos = new Pair(-1, -1);
        return true;
      }
       else {
        var pos_0;
        switch (code) {
          case 49:
            pos_0 = 0;
            break;
          case 37:
            pos_0 = 1;
            break;
          case 43:
            pos_0 = 2;
            break;
          case 38:
            pos_0 = 3;
            break;
          case 39:
            pos_0 = 4;
            break;
          case 40:
            pos_0 = 5;
            break;
          case 41:
            pos_0 = 6;
            break;
          case 55:
            pos_0 = 7;
            break;
          case 56:
            pos_0 = 8;
            break;
          default:return false;
        }
        var nextX_0 = pos_0 % 3;
        var nextY_0 = pos_0 / 3 | 0;
        this$Game.pressPos = new Pair(nextX_0, nextY_0);
        if (this$Game.map[nextX_0][nextY_0] != null) {
          this$Game.addKeyInput_ydzd23$(nextX_0, nextY_0);
        }
        this$Game.pressPos = new Pair(-1, -1);
        return true;
      }
    };
  }
  Game_0.prototype.initGame_g5c4ga$ = function (scene) {
    var tmp$, tmp$_0;
    this.initializeDone = false;
    this.view = scene;
    this.initGameVariables();
    this.initMasterTimer();
    this.view.addUpdateCallback_sds54w$('Master Timer', void 0, void 0, void 0, void 0, void 0, this.masterTimer.update);
    this.initFeverTimer();
    this.initComboTimer();
    if (this.gameConfigure.resetTimeEveryClear === true) {
      this.initBeginnerTimer();
    }
     else {
      this.initGameTimer();
    }
    if (this.gameConfigure.blockDisablePeriodically === true) {
      this.initBlockDisableTimer();
    }
    this.gameState.addOnUpdateCallback_bodv9c$('ready', this.onReady);
    this.gameState.addOnUpdateCallback_bodv9c$('timerStart', this.onTimerStart);
    this.gameState.addOnUpdateCallback_bodv9c$('timerRestart', this.onTimerRestart);
    this.gameState.addOnUpdateCallback_bodv9c$('running', this.onRunning);
    this.gameState.addOnUpdateCallback_bodv9c$('regenAll', this.onRegenAll);
    this.gameState.addOnUpdateCallback_bodv9c$('noMoreMove', this.onNoMoreMove);
    this.gameState.addOnUpdateCallback_bodv9c$('confirmContinue', this.onConfirmContinue);
    this.gameState.addOnUpdateCallback_bodv9c$('confirmContinueForTimeAttack', this.onConfirmContinueForTimeAttack);
    this.gameState.addOnUpdateCallback_bodv9c$('gameOver', this.onGameOver);
    this.gameState.addOnUpdateCallback_bodv9c$('gameClose', this.onGameClose);
    this.gameState.addOnUpdateCallback_bodv9c$('waitForStop', this.onWaitForStop);
    this.gameLogicUpdater = new ScheduledJob(0.0, 0.0, this.gameConfigure.gameUpdateInterval, 0, 'Game Logic');
    (tmp$ = this.gameLogicUpdater) != null ? (tmp$.SetUpdateCallback_d6xl6w$(this.update), Unit) : null;
    this.scheduledJobManager.addJob_5h0cc$(ensureNotNull(this.gameLogicUpdater));
    this.view.addTouchListener_dal58m$(new TouchListener('For Game', this.boardRect.x, this.boardRect.y, this.boardRect.width, this.boardRect.height, void 0, this.touchListener));
    if (this.gameConfigure.width === 3 && this.gameConfigure.height === 3) {
      (tmp$_0 = this.view.screen) != null ? (tmp$_0.addKeydownListener_5ol7k9$('Game Key Input', Game$initGame$lambda(this)), Unit) : null;
    }
    this.initAdditional();
    this.particleManager = ParticleManager_init(this.view);
    var performance = SystemConfigure$Companion_getInstance().GetPerformance();
    var value = 200 * performance;
    var INT$result;
    INT$break: do {
      if (value == null) {
        INT$result = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value)) {
        INT$result = numberToInt(value);
        break INT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toInt_0(value);
          INT$result = number;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result = 0;
    }
     while (false);
    var max = INT$result;
    this.particleManager.SetMaxParticle_za3lpa$(max);
    var camera = Camera_init_0(20.0, Position_init(0.0, 0.0, -100.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 50.0);
    camera.projection = 1;
    this.particleManager.SetCamera_s6wt6e$(camera);
  };
  Game_0.prototype.deinitGame = function () {
    this.deinitGameVariables();
  };
  function Game$start$lambda(this$Game) {
    return function (code) {
      var tmp$;
      if (code === TouchListener$Code_getInstance().ESCAPE || code === TouchListener$Code_getInstance().BACK) {
        if (!equals(this$Game.gameState.GetState(), 'running') || this$Game.isPaused === true) {
          return false;
        }
        (Kotlin.isType(tmp$ = this$Game.view, GameView) ? tmp$ : throwCCE()).showExitPopup();
        return true;
      }
      return false;
    };
  }
  Game_0.prototype.start = function () {
    var tmp$, tmp$_0;
    this.masterTimer.start();
    (tmp$ = this.gameLogicUpdater) != null ? (tmp$.start(), Unit) : null;
    this.gameState.SetNextState_9sobi5$('ready');
    this.cancelKeyInput_za3lpa$();
    this.initializeDone = true;
    (tmp$_0 = this.view.screen) != null ? (tmp$_0.addKeydownListener_5ol7k9$('Back Key', Game$start$lambda(this)), Unit) : null;
  };
  Game_0.prototype.stop = function () {
    var tmp$;
    this.masterTimer.stop();
    (tmp$ = this.gameLogicUpdater) != null ? (tmp$.stop(), Unit) : null;
  };
  Game_0.prototype.backupForSharing = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        this.gameValue.mapForSharing[x][y] = ensureNotNull(this.map[x][y]).value;
        var block = this.map[x][y];
        if (Kotlin.isType(block, BlockEntity)) {
          if ((Kotlin.isType(tmp$_1 = block, BlockEntity) ? tmp$_1 : throwCCE()).GetAttribute() === TileEntity$Attribute$disabled_getInstance()) {
            tmp$_2 = this.gameValue.mapForSharing[x];
            tmp$_2[y] = tmp$_2[y] + 10000 | 0;
          }
        }
         else if (Kotlin.isType(block, ObstacleEntity)) {
          if ((Kotlin.isType(tmp$_3 = block, ObstacleEntity) ? tmp$_3 : throwCCE()).isStone === true) {
            tmp$_4 = this.gameValue.mapForSharing[x];
            tmp$_4[y] = tmp$_4[y] + 10000 | 0;
          }
        }
         else if (Kotlin.isType(block, ItemEntity)) {
          tmp$_5 = this.gameValue.mapForSharing[x];
          var tmp$_6;
          tmp$_5[y] = tmp$_5[y] + ((Kotlin.isType(tmp$_6 = block, ItemEntity) ? tmp$_6 : throwCCE()).subValue * 100000 | 0) | 0;
        }
      }
    }
  };
  Game_0.prototype.takeSnapshot = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    this.scoreBackup = this.gameValue.score;
    this.maxComboBackup = this.gameValue.maxComboOnGame;
    this.maxFeverBackup = this.gameValue.maxFeverOnGame;
    this.clearedObstacleBackup = this.gameValue.clearedObstacleSum;
    this.nirvanaCountBackup = this.nirvanaCount;
    this.playingTimeBackup = this.gameValue.playingTime;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        this.mapBackup[x][y] = ensureNotNull(this.map[x][y]).value;
        var block = this.map[x][y];
        if (Kotlin.isType(block, BlockEntity)) {
          if ((Kotlin.isType(tmp$_1 = block, BlockEntity) ? tmp$_1 : throwCCE()).GetAttribute() === TileEntity$Attribute$disabled_getInstance()) {
            tmp$_2 = this.mapBackup[x];
            tmp$_2[y] = tmp$_2[y] + 10000 | 0;
          }
        }
         else if (Kotlin.isType(block, ObstacleEntity)) {
          if ((Kotlin.isType(tmp$_3 = block, ObstacleEntity) ? tmp$_3 : throwCCE()).isStone === true) {
            tmp$_4 = this.mapBackup[x];
            tmp$_4[y] = tmp$_4[y] + 10000 | 0;
          }
        }
         else if (Kotlin.isType(block, ItemEntity)) {
          tmp$_5 = this.mapBackup[x];
          var tmp$_6;
          tmp$_5[y] = tmp$_5[y] + ((Kotlin.isType(tmp$_6 = block, ItemEntity) ? tmp$_6 : throwCCE()).subValue * 100000 | 0) | 0;
        }
      }
    }
  };
  Game_0.prototype.saveSnapshot = function () {
    var tmp$, tmp$_0;
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot_Score', void 0, this.scoreBackup);
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot_Combo', void 0, this.maxComboBackup);
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot_Fever', void 0, this.maxFeverBackup);
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot_Ghost', void 0, this.clearedObstacleBackup);
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot_Nirvana', void 0, this.nirvanaCountBackup);
    DataUtil$Companion_getInstance().SetFloat_whnl05$('Snapshot_PlayingTime', void 0, this.playingTimeBackup);
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot_ContinueStar', void 0, this.continueByStar);
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot_ContinueVideo', void 0, this.continueByVideo);
    try {
      tmp$ = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        tmp$_0 = this.gameConfigure.height - 1 | 0;
        for (var y = 0; y <= tmp$_0; y++) {
          var tmp$_1 = DataUtil$Companion_getInstance();
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(x)) {
              STRING$result = x.toString();
              break STRING$break;
            }
             else if (typeof x === 'string') {
              STRING$result = x;
              break STRING$break;
            }
             else if (typeof x === 'boolean') {
              STRING$result = x.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(x)) {
              STRING$result = x.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          var tmp$_2 = 'Snapshot_Map_' + STRING$result + '_';
          var STRING$result_0;
          STRING$break: do {
            if (Kotlin.isNumber(y)) {
              STRING$result_0 = y.toString();
              break STRING$break;
            }
             else if (typeof y === 'string') {
              STRING$result_0 = y;
              break STRING$break;
            }
             else if (typeof y === 'boolean') {
              STRING$result_0 = y.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(y)) {
              STRING$result_0 = y.toString();
              break STRING$break;
            }
            STRING$result_0 = '';
          }
           while (false);
          tmp$_1.SetInteger_rjan26$(tmp$_2 + STRING$result_0, void 0, this.mapBackup[x][y]);
        }
      }
    }
     catch (e) {
      if (Kotlin.isType(e, UninitializedPropertyAccessException)) {
        println('saveSnapshot failed');
        return false;
      }
       else
        throw e;
    }
    return true;
  };
  function Game$restoreSnapshot$lambda(closure$ghost, this$Game) {
    return function () {
      closure$ghost.addText_r4v59z$('[Color][Image Ghost_white 35][Scale 0.6]X[Scale] [Color 35BEC1]' + formatted(this$Game.gameValue.clearedObstacleSum));
      return Unit;
    };
  }
  Game_0.prototype.restoreSnapshot = function () {
    var tmp$, tmp$_0, tmp$_1;
    this.gameValue.score = DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot_Score');
    this.gameValue.maxComboOnGame = DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot_Combo');
    this.gameValue.maxFeverOnGame = DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot_Fever');
    this.gameValue.clearedObstacleSum = DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot_Ghost');
    this.nirvanaCount = DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot_Nirvana');
    this.gameValue.playingTime = DataUtil$Companion_getInstance().GetFloat_whnl05$('Snapshot_PlayingTime');
    this.gameTimeElapsed = this.gameValue.playingTime;
    this.continueByStar = DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot_ContinueStar');
    this.continueByVideo = DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot_ContinueVideo');
    var ghost = Kotlin.isType(tmp$ = this.view.findChildByName_3m52m6$('Ghost Amount'), TextArea) ? tmp$ : null;
    if (ghost != null) {
      ghost.clearText_gam257$(void 0, Game$restoreSnapshot$lambda(ghost, this));
    }
    tmp$_0 = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$_0; x++) {
      tmp$_1 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_1; y++) {
        var tmp$_2 = DataUtil$Companion_getInstance();
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(x)) {
            STRING$result = x.toString();
            break STRING$break;
          }
           else if (typeof x === 'string') {
            STRING$result = x;
            break STRING$break;
          }
           else if (typeof x === 'boolean') {
            STRING$result = x.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(x)) {
            STRING$result = x.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        var tmp$_3 = 'Snapshot_Map_' + STRING$result + '_';
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(y)) {
            STRING$result_0 = y.toString();
            break STRING$break;
          }
           else if (typeof y === 'string') {
            STRING$result_0 = y;
            break STRING$break;
          }
           else if (typeof y === 'boolean') {
            STRING$result_0 = y.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(y)) {
            STRING$result_0 = y.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        var value = tmp$_2.GetInteger_rjan26$(tmp$_3 + STRING$result_0);
        var block = this.entityManager.createBlock_mwco6a$(this, value % 100000, value / 100000 | 0, x, y);
        this.map[x][y] = block;
        this.hintMap[x][y] = 0;
        this.clear[x][y] = 0;
      }
    }
  };
  Game_0.prototype.GetPlayerRecord = function () {
    if (this.playerRecord == null) {
      this.playerRecord = PlayerRecordManager$Companion_getInstance().shared().GetRecord_61zpoe$(this.gameConfigure.modeString);
    }
    return ensureNotNull(this.playerRecord);
  };
  Game_0.prototype.initMasterTimer = function () {
    this.masterTimer = Timer_init(0.0, this.scheduledJobManager.update);
    this.masterTimer.remain = -1;
    this.masterTimer.increase = true;
    this.masterTimer.state = TimerState$ready_getInstance();
  };
  Game_0.prototype.initComboTimer = function () {
    var tmp$, tmp$_0;
    this.comboTimer = new ScheduledJob(0.0, 0.0, this.gameConfigure.comboTimerInterval, 0);
    (tmp$ = this.comboTimer) != null ? (tmp$.SetUpdateCallback_d6xl6w$(this.comboTimerUpdateCallback), Unit) : null;
    (tmp$_0 = this.comboTimer) != null ? (tmp$_0.SetRestartCallback_o14v8n$(this.comboTimerRestartCallback), Unit) : null;
    this.comboTimeRemain = this.gameConfigure.comboTiming;
    this.scheduledJobManager.addJob_5h0cc$(ensureNotNull(this.comboTimer));
  };
  Game_0.prototype.initFeverTimer = function () {
    var tmp$, tmp$_0;
    this.feverTimer = new ScheduledJob(0.0, 0.0, this.gameConfigure.feverTimerInterval, 0);
    (tmp$ = this.feverTimer) != null ? (tmp$.SetUpdateCallback_d6xl6w$(this.feverTimerUpdateCallback), Unit) : null;
    (tmp$_0 = this.feverTimer) != null ? (tmp$_0.SetRestartCallback_o14v8n$(this.feverTimerRestartCallback), Unit) : null;
    this.feverTimeRemain = this.gameConfigure.feverTime;
    this.scheduledJobManager.addJob_5h0cc$(ensureNotNull(this.feverTimer));
  };
  Game_0.prototype.initBlockDisableTimer = function () {
    var tmp$, tmp$_0;
    this.blockDisableTimer = new ScheduledJob(0.0, 0.0, this.gameConfigure.blockDisableTimerInterval, 0);
    (tmp$ = this.blockDisableTimer) != null ? (tmp$.SetUpdateCallback_d6xl6w$(this.blockDisableTimeUpdateCallback), Unit) : null;
    (tmp$_0 = this.blockDisableTimer) != null ? (tmp$_0.SetRestartCallback_o14v8n$(this.blockDisableTimeRestartCallback), Unit) : null;
    var value = this.gameConfigure.blockDisableTime;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    this.blockDisableTimeRemain = FLOAT$result;
    this.scheduledJobManager.addJob_5h0cc$(ensureNotNull(this.blockDisableTimer));
  };
  Game_0.prototype.initGameTimer = function () {
    var tmp$;
    this.gameTimer = new ScheduledJob(0.0, 0.0, this.gameConfigure.gameTimerInterval, 0);
    (tmp$ = this.gameTimer) != null ? (tmp$.SetUpdateCallback_d6xl6w$(this.gameTimeUpdateCallback), Unit) : null;
    this.gameTimeElapsed = 0.0;
    this.scheduledJobManager.addJob_5h0cc$(ensureNotNull(this.gameTimer));
  };
  Game_0.prototype.initBeginnerTimer = function () {
    var tmp$, tmp$_0;
    this.beginnerTimer = new ScheduledJob(0.0, 0.0, this.gameConfigure.blockDisableTimerInterval, 0);
    (tmp$ = this.beginnerTimer) != null ? (tmp$.SetUpdateCallback_d6xl6w$(this.beginnerTimeUpdateCallback), Unit) : null;
    (tmp$_0 = this.beginnerTimer) != null ? (tmp$_0.SetRestartCallback_o14v8n$(this.beginnerTimeRestartCallback), Unit) : null;
    this.gameTimeElapsed = 0.0;
    this.scheduledJobManager.addJob_5h0cc$(ensureNotNull(this.beginnerTimer));
  };
  Game_0.prototype.checkComplete = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    var byKeyInput = false;
    var array = Array_0(this.gameConfigure.width);
    var tmp$_9;
    tmp$_9 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_9; i++) {
      var array_0 = new Int32Array(this.gameConfigure.height);
      var tmp$_10;
      tmp$_10 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_10; i_0++) {
        array_0[i_0] = 0;
      }
      array[i] = array_0;
    }
    this.clear = array;
    var matched = false;
    var prev;
    var count;
    var array_1 = Array_0(this.gameConfigure.width);
    var tmp$_11;
    tmp$_11 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_11; i_1++) {
      var array_2 = new Int32Array(this.gameConfigure.height);
      var tmp$_12;
      tmp$_12 = array_2.length - 1 | 0;
      for (var i_2 = 0; i_2 <= tmp$_12; i_2++) {
        array_2[i_2] = 0;
      }
      array_1[i_1] = array_2;
    }
    var check = array_1;
    tmp$ = this.gameConfigure.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      count = 1;
      prev = -1;
      tmp$_0 = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          if (equals(block.GetBlockState(), 'wait')) {
            if (block.isMatchCheckable() === false) {
              count = 1;
              prev = -1;
              continue;
            }
            if (block.needCheck === true && block.needCheckReason === 0) {
              byKeyInput = true;
            }
            block.needCheck = false;
            if (block.value === prev) {
              count = count + 1 | 0;
            }
             else {
              count = 1;
            }
            check[x][y] = count;
            prev = block.value;
          }
           else {
            count = 1;
            prev = -1;
          }
        }
         else {
          var block_0 = Kotlin.isType(tmp$_2 = this.map[x][y], TileEntity) ? tmp$_2 : null;
          if (block_0 != null) {
            block_0.needCheck = false;
          }
          count = 1;
          prev = -1;
        }
      }
      var x_0 = this.gameConfigure.width - 1 | 0;
      while (x_0 >= 0) {
        if (check[x_0][y] >= this.gameConfigure.minOfComplete) {
          matched = true;
          tmp$_3 = check[x_0][y] - 1 | 0;
          for (var k = 0; k <= tmp$_3; k++) {
            this.clear[x_0 - k | 0][y] = check[x_0][y];
          }
          x_0 = x_0 - check[x_0][y] | 0;
        }
         else {
          x_0 = x_0 - 1 | 0;
        }
      }
    }
    tmp$_4 = this.gameConfigure.width - 1 | 0;
    for (var x_1 = 0; x_1 <= tmp$_4; x_1++) {
      count = 1;
      prev = -1;
      tmp$_5 = this.gameConfigure.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_5; y_0++) {
        var block_1 = Kotlin.isType(tmp$_6 = this.map[x_1][y_0], BlockEntity) ? tmp$_6 : null;
        if (block_1 != null) {
          if (equals(block_1.GetBlockState(), 'wait')) {
            if (block_1.isMatchCheckable() === false) {
              count = 1;
              prev = -1;
              continue;
            }
            if (block_1.needCheck === true && block_1.needCheckReason === 0) {
              byKeyInput = true;
            }
            block_1.needCheck = false;
            if (block_1.value === prev) {
              count = count + 1 | 0;
            }
             else {
              count = 1;
            }
            check[x_1][y_0] = count;
            prev = block_1.value;
          }
           else {
            count = 1;
            prev = -1;
          }
        }
         else {
          var block_2 = Kotlin.isType(tmp$_7 = this.map[x_1][y_0], TileEntity) ? tmp$_7 : null;
          if (block_2 != null) {
            block_2.needCheck = false;
          }
          count = 1;
          prev = -1;
        }
      }
      var y_1 = this.gameConfigure.height - 1 | 0;
      while (y_1 >= 0) {
        if (check[x_1][y_1] >= this.gameConfigure.minOfComplete) {
          matched = true;
          tmp$_8 = check[x_1][y_1] - 1 | 0;
          for (var k_0 = 0; k_0 <= tmp$_8; k_0++) {
            this.clear[x_1][y_1 - k_0 | 0] = check[x_1][y_1];
          }
          y_1 = y_1 - check[x_1][y_1] | 0;
        }
         else {
          y_1 = y_1 - 1 | 0;
        }
      }
    }
    if (byKeyInput === true && matched === true) {
      this.resetAllDelayedBlock();
    }
    return matched;
  };
  Game_0.prototype.resetAllDelayedBlock = function () {
    var tmp$, tmp$_0;
    var list = this.entityManager.GetList();
    for (tmp$ = 0; tmp$ !== list.length; ++tmp$) {
      var entity = list[tmp$];
      var block = Kotlin.isType(tmp$_0 = entity, BlockEntity) ? tmp$_0 : null;
      if (block != null) {
        if (block.needCheckReason === 0) {
          block.needCheckReason = -1;
        }
      }
    }
  };
  Game_0.prototype.GetScorePerBlock_za3lpa$ = function (count) {
    if (count < this.gameConfigure.scorePerBlock.length) {
      return this.gameConfigure.scorePerBlock[count];
    }
    return this.gameConfigure.scorePerBlock[this.gameConfigure.scorePerBlock.length - 1 | 0];
  };
  Game_0.prototype.GetScoreMultiplierPerCombo_za3lpa$ = function (combo) {
    if (combo < this.gameConfigure.scoreMultiplierPerCombo.length) {
      return this.gameConfigure.scoreMultiplierPerCombo[combo];
    }
    return this.gameConfigure.scoreMultiplierPerCombo[this.gameConfigure.scoreMultiplierPerCombo.length - 1 | 0];
  };
  Game_0.prototype.GetScoreMultiplierPerFever_za3lpa$ = function (fever) {
    if (fever < this.gameConfigure.scoreMultiplierPerFever.length) {
      return this.gameConfigure.scoreMultiplierPerFever[fever];
    }
    return this.gameConfigure.scoreMultiplierPerFever[this.gameConfigure.scoreMultiplierPerFever.length - 1 | 0];
  };
  var round = Kotlin.kotlin.math.round_14dthe$;
  Game_0.prototype.calcScore_za3lpa$ = function (count) {
    var value = this.GetScorePerBlock_za3lpa$(count);
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var value_0 = FLOAT$result * this.gameValue.basicBonus;
    var INT$result;
    INT$break: do {
      if (value_0 == null) {
        INT$result = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        INT$result = numberToInt(value_0);
        break INT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toInt_0(value_0);
          INT$result = number_0;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result = 0;
    }
     while (false);
    var score = INT$result;
    var multiplier = this.GetScoreMultiplierPerCombo_za3lpa$(this.gameValue.combo) * this.GetScoreMultiplierPerFever_za3lpa$(this.gameValue.feverLevel);
    var FLOAT$result_0;
    FLOAT$break: do {
      if (score == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(score)) {
        FLOAT$result_0 = numberToDouble(score);
        break FLOAT$break;
      }
      if (typeof score === 'string') {
        try {
          var number_1 = toDouble(score);
          FLOAT$result_0 = number_1;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var tmp$ = FLOAT$result_0;
    var value_1 = this.comboSeedScore;
    var FLOAT$result_1;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_1 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_1 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_2 = toDouble(value_1);
          FLOAT$result_1 = number_2;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_1 = 0.0;
    }
     while (false);
    var value_2 = round((tmp$ + FLOAT$result_1 * this.comboSeedFactor) * multiplier);
    var INT$result_0;
    INT$break: do {
      if (value_2 == null) {
        INT$result_0 = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_2)) {
        INT$result_0 = numberToInt(value_2);
        break INT$break;
      }
      if (typeof value_2 === 'string') {
        try {
          var number_3 = toInt_0(value_2);
          INT$result_0 = number_3;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result_0 = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result_0 = 0;
    }
     while (false);
    var each = INT$result_0;
    var sum = Kotlin.imul(each, count);
    if (this.gameValue.combo === 0) {
      this.comboSeedScore = sum;
    }
    return new Pair(each, sum);
  };
  Game_0.prototype.increaseFeverGage_8ca0d4$ = function (amount, reset) {
    if (reset === void 0)
      reset = true;
    var tmp$, tmp$_0;
    if (this.gameOverFlag === true && this.gameConfigure.allowFeverGaugeIncreasementAfterGameOver === false) {
      return;
    }
    this.gameValue.feverGage = this.gameValue.feverGage + amount;
    if (this.gameValue.feverGage >= 100) {
      tmp$ = this.gameValue;
      tmp$.feverLevel = tmp$.feverLevel + 1 | 0;
      this.startFever_za3lpa$(this.gameValue.feverLevel);
      if (this.gameValue.feverLevel > this.gameValue.maxFeverOnGame) {
        this.gameValue.maxFeverOnGame = this.gameValue.feverLevel;
      }
      if (reset === true) {
        this.gameValue.feverGage = 0.0;
      }
       else {
        this.gameValue.feverGage = this.gameValue.feverGage - 100;
        if (this.gameValue.feverGage < 0) {
          this.gameValue.feverGage = 0.0;
        }
        this.gameValue.feverGage = this.gameValue.feverGage % 100;
      }
      (tmp$_0 = this.feverTimer) != null ? (tmp$_0.restart(), Unit) : null;
    }
  };
  function Game$startFever$lambda(closure$starText) {
    return function () {
      closure$starText.addText_r4v59z$('[image Resource/UI/IconStar 20] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
      return Unit;
    };
  }
  Game_0.prototype.startFever_za3lpa$ = function (level) {
    var tmp$, tmp$_0;
    this.createFeverMark();
    if (this.gameConfigure.addTimeEveryFever === true && this.gameOverFlag === false) {
      this.gameRemainTime += this.gameValue.addTimeEveryFeverAmount;
      if (this.gameRemainTime > this.gameValue.gameTimeInitialValue) {
        this.gameRemainTime = this.gameValue.gameTimeInitialValue;
      }
      var value = this.view.size.width * 0.5;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var position = Position_init(FLOAT$result, this.boardRect.y + this.boardRect.height + this.gameConfigure.tileHeightGap + this.gameConfigure.bottomGaugeHeight * 0.5);
      var timer = this.view.findChildByName_3m52m6$('Timer Label');
      if (timer != null) {
        position.x = position.x + timer.GetSize().width * 0.5;
      }
      this.createTimePlus_4tzqwv$(position, this.gameValue.addTimeEveryFeverAmount);
      if (this.gameRemainTime > 10.0) {
        SoundManager$Companion_getInstance().shared().stop_61zpoe$('timer');
        this.timerSoundFired = false;
      }
      this.gameValue.addTimeEveryFeverAmount = this.gameValue.addTimeEveryFeverAmount * this.gameConfigure.addTimeEveryFeverAmountAdjust;
      if (this.gameValue.addTimeEveryFeverAmount < this.gameConfigure.addTimeEveryFeverAmountMinimum) {
        this.gameValue.addTimeEveryFeverAmount = this.gameConfigure.addTimeEveryFeverAmountMinimum;
      }
    }
    var star = this.gameConfigure.GetStarPerFever_za3lpa$(level);
    StoreManager$Companion_getInstance().shared().addStar_za3lpa$(star);
    tmp$ = this.gameValue;
    tmp$.earnedStar = tmp$.earnedStar + star | 0;
    var starText = Kotlin.isType(tmp$_0 = this.view.findChildByName_3m52m6$('Star Amount'), TextArea) ? tmp$_0 : null;
    if (starText != null) {
      starText.clearText_gam257$(void 0, Game$startFever$lambda(starText));
    }
  };
  Game_0.prototype.stopFever = function () {
  };
  function Game$clearCompleteTileByChunk$lambda(closure$item) {
    return function () {
      ensureNotNull(closure$item.sprite).SetAlpha_8ca0d4$(1.0);
      return Unit;
    };
  }
  function Game$clearCompleteTileByChunk$lambda_0(closure$starText) {
    return function () {
      closure$starText.addText_r4v59z$('[image Resource/UI/IconStar 20] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
      return Unit;
    };
  }
  var copyToArray = Kotlin.kotlin.collections.copyToArray;
  function Game$clearCompleteTileByChunk$lambda_1(this$Game, closure$result) {
    return function () {
      this$Game.isPaused = true;
      this$Game.showNirvanaEffect_kj86xc$(copyToArray(closure$result.v));
      return Unit;
    };
  }
  function Game$clearCompleteTileByChunk$lambda$lambda(this$Game) {
    return function () {
      this$Game.increaseFeverGage_8ca0d4$(100.0, false);
      this$Game.isPaused = false;
      return Unit;
    };
  }
  function Game$clearCompleteTileByChunk$lambda$lambda_0(this$Game, closure$count) {
    return function () {
      if (this$Game.gameValue != null) {
        this$Game.increaseFeverGage_8ca0d4$(this$Game.GetFeverGagePerBlock_za3lpa$(closure$count) + this$Game.GetFeverGageBonusPerCombo_za3lpa$(this$Game.gameValue.combo));
      }
      return Unit;
    };
  }
  function Game$clearCompleteTileByChunk$lambda_2(this$Game, closure$scorePos, closure$score, closure$nirvana, closure$soundDelay, closure$count) {
    return function () {
      var tmp$, tmp$_0;
      if (this$Game.gameValue == null) {
        return;
      }
      this$Game.createScore_l4u1g4$(closure$scorePos, closure$score.second);
      if (this$Game.gameValue.combo < 1) {
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('feverPop0');
      }
       else {
        var num = ((this$Game.gameValue.combo - 1 | 0) / 5 | 0) + 1 | 0;
        if (num > 5) {
          num = 5;
        }
        var tmp$_1 = SoundManager$Companion_getInstance().shared();
        var value = num;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        tmp$_1.playEffect_bm4lxs$('feverPop' + STRING$result);
      }
      this$Game.gameValue.lastEarnedScore = this$Game.gameValue.lastEarnedScore + closure$score.second | 0;
      this$Game.gameValue.score = this$Game.gameValue.score + closure$score.second | 0;
      HAL$Companion_getInstance().shared().SetTitle_61zpoe$(formatted(this$Game.gameValue.score));
      if (closure$nirvana.v === true) {
        (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$soundDelay.v, this$Game.view, Game$clearCompleteTileByChunk$lambda$lambda(this$Game)), Unit) : null;
      }
       else {
        (tmp$_0 = this$Game.view.screen) != null ? (tmp$_0.actionDelay_ab0iom$(closure$soundDelay.v, this$Game.view, Game$clearCompleteTileByChunk$lambda$lambda_0(this$Game, closure$count)), Unit) : null;
      }
    };
  }
  function Game$clearCompleteTileByChunk$lambda_3(closure$obstacle) {
    return function () {
      closure$obstacle.explode_nhq4am$();
      return Unit;
    };
  }
  Game_0.prototype.clearCompleteTileByChunk = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19;
    var clearCount = 0;
    var nirvana = {v: false};
    var nirvanaAmount = 0;
    var delayGap = this.gameConfigure.nirvanaDelayGap;
    var itemDelay = 0.0;
    var resultAll = ArrayList_init();
    tmp$ = this.gameConfigure.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        if (this.clear[x][y] !== 0) {
          var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : throwCCE();
          var list = this.GetChainedTile_vux9f0$(x, y);
          this.makeMatchConnection_n4bh9e$(copyToArray(list));
          var result = {v: ArrayList_init()};
          var count = this.clearCompleteRec_tu1qy8$(x, y, block.value, 0, result.v);
          resultAll.addAll_brywnq$(result.v);
          this.gameValue.addBlockCount_za3lpa$(count);
          clearCount = clearCount + count | 0;
          var score = this.calcScore_za3lpa$(count);
          if (count >= this.gameConfigure.amountOfNirvana) {
            nirvana.v = true;
            this.nirvanaCount = this.nirvanaCount + 1 | 0;
            nirvanaAmount = count;
            var tmp$_20 = this.gameConfigure.matchDelay;
            var tmp$_21 = delayGap;
            var value = count + 1 | 0;
            var FLOAT$result;
            FLOAT$break: do {
              if (value == null) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value)) {
                FLOAT$result = numberToDouble(value);
                break FLOAT$break;
              }
              if (typeof value === 'string') {
                try {
                  var number = toDouble(value);
                  FLOAT$result = number;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result = 0.0;
            }
             while (false);
            var delay = tmp$_20 + tmp$_21 * FLOAT$result + 0.2;
            var tmp$_22 = delayGap;
            var FLOAT$result_0;
            FLOAT$break: do {
              if (count == null) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(count)) {
                FLOAT$result_0 = numberToDouble(count);
                break FLOAT$break;
              }
              if (typeof count === 'string') {
                try {
                  var number_0 = toDouble(count);
                  FLOAT$result_0 = number_0;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_0 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_0 = 0.0;
            }
             while (false);
            delay = tmp$_22 * FLOAT$result_0;
            if (delay > 0.5) {
              var FLOAT$result_1;
              FLOAT$break: do {
                if (count == null) {
                  FLOAT$result_1 = 0.0;
                  break FLOAT$break;
                }
                if (Kotlin.isNumber(count)) {
                  FLOAT$result_1 = numberToDouble(count);
                  break FLOAT$break;
                }
                if (typeof count === 'string') {
                  try {
                    var number_1 = toDouble(count);
                    FLOAT$result_1 = number_1;
                    break FLOAT$break;
                  }
                   catch (e) {
                    if (Kotlin.isType(e, Exception)) {
                      FLOAT$result_1 = 0.0;
                      break FLOAT$break;
                    }
                     else
                      throw e;
                  }
                }
                FLOAT$result_1 = 0.0;
              }
               while (false);
              delayGap = 0.5 / FLOAT$result_1;
              delay = 0.5;
            }
            delay += 0.5;
            var value_0 = -1;
            if (this.nirvanaCount > 1) {
              value_0 = this.gameConfigure.alternativeItemForNirvana;
            }
             else {
              if (count < this.gameConfigure.itemTable.length) {
                value_0 = this.gameConfigure.itemTable[count];
              }
               else {
                value_0 = this.gameConfigure.itemTable[this.gameConfigure.itemTable.length - 1 | 0];
              }
            }
            if (value_0 !== -1) {
              var createPos = new Pair(x, y);
              tmp$_2 = result.v.iterator();
              while (tmp$_2.hasNext()) {
                var block_0 = tmp$_2.next();
                if (this.lastInput.first === block_0.GetScreenX() && this.lastInput.second === block_0.GetScreenY()) {
                  createPos = new Pair(this.lastInput.first, this.lastInput.second);
                }
              }
              tmp$_3 = this.createColumn;
              tmp$_4 = createPos.first;
              tmp$_3[tmp$_4] = tmp$_3[tmp$_4] - 1 | 0;
              var subValue = block.value;
              if (value_0 === 103) {
                var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(2);
                var INT$result;
                INT$break: do {
                  if (value_1 == null) {
                    INT$result = 0;
                    break INT$break;
                  }
                  if (Kotlin.isNumber(value_1)) {
                    INT$result = numberToInt(value_1);
                    break INT$break;
                  }
                  if (typeof value_1 === 'string') {
                    try {
                      var number_2 = toInt_0(value_1);
                      INT$result = number_2;
                      break INT$break;
                    }
                     catch (e) {
                      if (Kotlin.isType(e, Exception)) {
                        INT$result = 0;
                        break INT$break;
                      }
                       else
                        throw e;
                    }
                  }
                  INT$result = 0;
                }
                 while (false);
                subValue = INT$result;
              }
              var item = this.createItem_mbbjvw$(value_0, subValue, createPos.first, createPos.second, createPos.first, createPos.second);
              this.map[createPos.first][createPos.second] = item;
              ensureNotNull(item.sprite).SetAlpha_8ca0d4$(0.0);
              (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionDelay_ab0iom$(this.gameConfigure.matchDelay + delay, void 0, Game$clearCompleteTileByChunk$lambda(item)), Unit) : null;
            }
            var star = this.gameConfigure.GetStarForNirvanaPerFever_za3lpa$(this.gameValue.feverLevel);
            StoreManager$Companion_getInstance().shared().addStar_za3lpa$(star);
            tmp$_6 = this.gameValue;
            tmp$_6.earnedStar = tmp$_6.earnedStar + star | 0;
            var starText = Kotlin.isType(tmp$_7 = this.view.findChildByName_3m52m6$('Star Amount'), TextArea) ? tmp$_7 : null;
            if (starText != null) {
              starText.clearText_gam257$(void 0, Game$clearCompleteTileByChunk$lambda_0(starText));
            }
          }
           else {
            var value_2 = -1;
            if (count < this.gameConfigure.itemTable.length) {
              value_2 = this.gameConfigure.itemTable[count];
            }
             else {
              value_2 = this.gameConfigure.itemTable[this.gameConfigure.itemTable.length - 1 | 0];
            }
            if (value_2 !== -1) {
              var createPos_0 = new Pair(x, y);
              tmp$_8 = result.v.iterator();
              while (tmp$_8.hasNext()) {
                var block_1 = tmp$_8.next();
                if (this.lastInput.first === block_1.GetScreenX() && this.lastInput.second === block_1.GetScreenY()) {
                  createPos_0 = new Pair(this.lastInput.first, this.lastInput.second);
                }
              }
              tmp$_9 = this.createColumn;
              tmp$_10 = createPos_0.first;
              tmp$_9[tmp$_10] = tmp$_9[tmp$_10] - 1 | 0;
              var subValue_0 = block.value;
              if (value_2 === 103) {
                var value_3 = Random_getInstance().arc4random_uniform_za3lpa$(2);
                var INT$result_0;
                INT$break: do {
                  if (value_3 == null) {
                    INT$result_0 = 0;
                    break INT$break;
                  }
                  if (Kotlin.isNumber(value_3)) {
                    INT$result_0 = numberToInt(value_3);
                    break INT$break;
                  }
                  if (typeof value_3 === 'string') {
                    try {
                      var number_3 = toInt_0(value_3);
                      INT$result_0 = number_3;
                      break INT$break;
                    }
                     catch (e) {
                      if (Kotlin.isType(e, Exception)) {
                        INT$result_0 = 0;
                        break INT$break;
                      }
                       else
                        throw e;
                    }
                  }
                  INT$result_0 = 0;
                }
                 while (false);
                subValue_0 = INT$result_0;
              }
              var item_0 = this.createItem_mbbjvw$(value_2, subValue_0, createPos_0.first, createPos_0.second, createPos_0.first, createPos_0.second);
              ensureNotNull(item_0.sprite).SetAlpha_8ca0d4$(0.0);
              this.map[createPos_0.first][createPos_0.second] = item_0;
              itemDelay += 0.3;
              (tmp$_11 = this.view.screen) != null ? (tmp$_11.actionFadeIn_hkbjms$(ensureNotNull(item_0.sprite), void 0, void 0, void 0, 0.3), Unit) : null;
            }
          }
          if (nirvana.v === true) {
            var tmp$_23 = copyToArray(result.v);
            var tmp$_24 = this.gameConfigure.matchDelay;
            var tmp$_25 = delayGap;
            var value_4 = count + 1 | 0;
            var FLOAT$result_2;
            FLOAT$break: do {
              if (value_4 == null) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_4)) {
                FLOAT$result_2 = numberToDouble(value_4);
                break FLOAT$break;
              }
              if (typeof value_4 === 'string') {
                try {
                  var number_4 = toDouble(value_4);
                  FLOAT$result_2 = number_4;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_2 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_2 = 0.0;
            }
             while (false);
            this.createMatchBackground_old_jpdi8v$(tmp$_23, tmp$_24 + tmp$_25 * FLOAT$result_2, Color$Companion_getInstance().puzzleYellow_mx4ult$());
            (tmp$_12 = this.view.screen) != null ? (tmp$_12.actionDelay_ab0iom$(this.gameConfigure.matchDelay, void 0, Game$clearCompleteTileByChunk$lambda_1(this, result)), Unit) : null;
          }
           else {
            if (itemDelay > 0) {
              this.createMatchBackground_old_jpdi8v$(copyToArray(result.v), this.gameConfigure.matchDelay, Color$Companion_getInstance().puzzleBlue_mx4ult$());
            }
             else {
              this.createMatchBackground_jpdi8v$(copyToArray(result.v), this.gameConfigure.matchDelay, Color$Companion_getInstance().puzzlePink_mx4ult$());
            }
          }
          var scorePos = Position_init();
          tmp$_13 = result.v.iterator();
          while (tmp$_13.hasNext()) {
            var entity = tmp$_13.next();
            var block_2 = Kotlin.isType(tmp$_14 = entity, BlockEntity) ? tmp$_14 : null;
            if (block_2 != null) {
              if (nirvana.v === true) {
                block_2.connectionBitMask = 0;
                block_2.removeConnection();
                var tmp$_26 = this.gameConfigure.matchDelay;
                var tmp$_27 = delayGap;
                var value_5 = count + 1 | 0;
                var FLOAT$result_3;
                FLOAT$break: do {
                  if (value_5 == null) {
                    FLOAT$result_3 = 0.0;
                    break FLOAT$break;
                  }
                  if (Kotlin.isNumber(value_5)) {
                    FLOAT$result_3 = numberToDouble(value_5);
                    break FLOAT$break;
                  }
                  if (typeof value_5 === 'string') {
                    try {
                      var number_5 = toDouble(value_5);
                      FLOAT$result_3 = number_5;
                      break FLOAT$break;
                    }
                     catch (e) {
                      if (Kotlin.isType(e, Exception)) {
                        FLOAT$result_3 = 0.0;
                        break FLOAT$break;
                      }
                       else
                        throw e;
                    }
                  }
                  FLOAT$result_3 = 0.0;
                }
                 while (false);
                block_2.explode_902hsc$(count, tmp$_26 + tmp$_27 * FLOAT$result_3 + 0.2, 0.5, 1);
              }
               else {
                block_2.connectionBitMask = 0;
                block_2.removeConnection();
                block_2.explode_902hsc$(count, this.gameConfigure.matchDelay, itemDelay, 2);
              }
            }
            var tmp$_28 = scorePos.x;
            var value_6 = entity.GetRealScreenX();
            var FLOAT$result_4;
            FLOAT$break: do {
              if (value_6 == null) {
                FLOAT$result_4 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_6)) {
                FLOAT$result_4 = numberToDouble(value_6);
                break FLOAT$break;
              }
              if (typeof value_6 === 'string') {
                try {
                  var number_6 = toDouble(value_6);
                  FLOAT$result_4 = number_6;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_4 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_4 = 0.0;
            }
             while (false);
            scorePos.x = tmp$_28 + FLOAT$result_4;
            var tmp$_29 = scorePos.y;
            var value_7 = entity.GetRealScreenY();
            var FLOAT$result_5;
            FLOAT$break: do {
              if (value_7 == null) {
                FLOAT$result_5 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_7)) {
                FLOAT$result_5 = numberToDouble(value_7);
                break FLOAT$break;
              }
              if (typeof value_7 === 'string') {
                try {
                  var number_7 = toDouble(value_7);
                  FLOAT$result_5 = number_7;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_5 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_5 = 0.0;
            }
             while (false);
            scorePos.y = tmp$_29 + FLOAT$result_5;
          }
          var tmp$_30 = scorePos.x;
          var value_8 = result.v.size;
          var FLOAT$result_6;
          FLOAT$break: do {
            if (value_8 == null) {
              FLOAT$result_6 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_8)) {
              FLOAT$result_6 = numberToDouble(value_8);
              break FLOAT$break;
            }
            if (typeof value_8 === 'string') {
              try {
                var number_8 = toDouble(value_8);
                FLOAT$result_6 = number_8;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_6 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_6 = 0.0;
          }
           while (false);
          scorePos.x = tmp$_30 / FLOAT$result_6;
          var tmp$_31 = scorePos.y;
          var value_9 = result.v.size;
          var FLOAT$result_7;
          FLOAT$break: do {
            if (value_9 == null) {
              FLOAT$result_7 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_9)) {
              FLOAT$result_7 = numberToDouble(value_9);
              break FLOAT$break;
            }
            if (typeof value_9 === 'string') {
              try {
                var number_9 = toDouble(value_9);
                FLOAT$result_7 = number_9;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_7 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_7 = 0.0;
          }
           while (false);
          scorePos.y = tmp$_31 / FLOAT$result_7;
          var soundDelay = {v: this.gameConfigure.matchDelay + itemDelay + this.gameConfigure.removeFireDelay};
          if (nirvana.v === true) {
            var tmp$_32 = this.gameConfigure.matchDelay + this.gameConfigure.removeFireDelay;
            var tmp$_33 = delayGap;
            var value_10 = count + 1 | 0;
            var FLOAT$result_8;
            FLOAT$break: do {
              if (value_10 == null) {
                FLOAT$result_8 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_10)) {
                FLOAT$result_8 = numberToDouble(value_10);
                break FLOAT$break;
              }
              if (typeof value_10 === 'string') {
                try {
                  var number_10 = toDouble(value_10);
                  FLOAT$result_8 = number_10;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_8 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_8 = 0.0;
            }
             while (false);
            soundDelay.v = tmp$_32 + tmp$_33 * FLOAT$result_8 + 0.2;
          }
          (tmp$_15 = this.view.screen) != null ? (tmp$_15.actionDelay_ab0iom$(soundDelay.v, this.view, Game$clearCompleteTileByChunk$lambda_2(this, scorePos, score, nirvana, soundDelay, count)), Unit) : null;
          tmp$_16 = this.entityManager.GetList();
          for (tmp$_17 = 0; tmp$_17 !== tmp$_16.length; ++tmp$_17) {
            var entity_0 = tmp$_16[tmp$_17];
            var obstacle = Kotlin.isType(tmp$_18 = entity_0, ObstacleEntity) ? tmp$_18 : null;
            if (obstacle != null) {
              if (obstacle.matched === true) {
                if (obstacle.value % 1000 === block.value) {
                  obstacle.matched = false;
                  var delayGap_0 = 0.05;
                  var delay_0 = this.gameConfigure.matchDelay + itemDelay;
                  if (nirvana.v === true) {
                    var tmp$_34 = this.gameConfigure.matchDelay;
                    var value_11 = nirvanaAmount + 1 | 0;
                    var FLOAT$result_9;
                    FLOAT$break: do {
                      if (value_11 == null) {
                        FLOAT$result_9 = 0.0;
                        break FLOAT$break;
                      }
                      if (Kotlin.isNumber(value_11)) {
                        FLOAT$result_9 = numberToDouble(value_11);
                        break FLOAT$break;
                      }
                      if (typeof value_11 === 'string') {
                        try {
                          var number_11 = toDouble(value_11);
                          FLOAT$result_9 = number_11;
                          break FLOAT$break;
                        }
                         catch (e) {
                          if (Kotlin.isType(e, Exception)) {
                            FLOAT$result_9 = 0.0;
                            break FLOAT$break;
                          }
                           else
                            throw e;
                        }
                      }
                      FLOAT$result_9 = 0.0;
                    }
                     while (false);
                    delay_0 = tmp$_34 + delayGap_0 * FLOAT$result_9 + 0.2;
                  }
                  (tmp$_19 = this.view.screen) != null ? (tmp$_19.actionDelay_ab0iom$(delay_0, void 0, Game$clearCompleteTileByChunk$lambda_3(obstacle)), Unit) : null;
                }
              }
            }
          }
        }
      }
    }
    return clearCount;
  };
  function Game$showNirvanaEffect$lambda() {
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('pop9');
    return Unit;
  }
  function Game$showNirvanaEffect$lambda_0(it) {
    return it.GetScreenY();
  }
  function Game$showNirvanaEffect$lambda_1(it) {
    return it.GetScreenX();
  }
  function Game$showNirvanaEffect$lambda_2(closure$block, this$Game, closure$size, closure$image) {
    return function () {
      var xxx = closure$block.GetRealScreenX();
      var yyy = closure$block.GetRealScreenY();
      var num = 10;
      var tmp$ = this$Game.particleManager;
      var tmp$_0 = Position_init(xxx, yyy, -50.0);
      var tmp$_1 = this$Game.gameConfigure.tileWidth / 2;
      var tmp$_2 = closure$size.v;
      var tmp$_3 = closure$image;
      var tmp$_4 = Color$Companion_getInstance().white_mx4ult$();
      var tmp$_5 = Position_init(this$Game.gameConfigure.tileWidth / 4, this$Game.gameConfigure.tileWidth / 4, -10.0);
      var tmp$_6 = Position_init(this$Game.gameConfigure.tileWidth / 2, this$Game.gameConfigure.tileWidth / 2, 500.0);
      var value = SceneLayer$parent_getInstance().value;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      tmp$.createExplosion_3jyyep$(tmp$_0, tmp$_1, num, tmp$_2, 1.0, tmp$_3, tmp$_4, tmp$_5, tmp$_6, true, FLOAT$result);
      return Unit;
    };
  }
  function Game$showNirvanaEffect$lambda_3() {
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('feverPop5');
    return Unit;
  }
  Game_0.prototype.showNirvanaEffect_kj86xc$ = function (list, type) {
    if (type === void 0)
      type = 0;
    var tmp$, tmp$_0, tmp$_1;
    (tmp$ = this.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, Game$showNirvanaEffect$lambda), Unit) : null;
    var delayGap = this.gameConfigure.nirvanaDelayGap;
    var tmp$_2 = delayGap;
    var FLOAT$result;
    FLOAT$break: do {
      if (list.length == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(list.length)) {
        FLOAT$result = numberToDouble(list.length);
        break FLOAT$break;
      }
      if (typeof list.length === 'string') {
        try {
          var number = toDouble(list.length);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var delay = tmp$_2 * FLOAT$result;
    if (delay > 0.5) {
      var FLOAT$result_0;
      FLOAT$break: do {
        if (list.length == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(list.length)) {
          FLOAT$result_0 = numberToDouble(list.length);
          break FLOAT$break;
        }
        if (typeof list.length === 'string') {
          try {
            var number_0 = toDouble(list.length);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      delayGap = 0.5 / FLOAT$result_0;
      delay = 0.5;
    }
    var size = {v: this.gameConfigure.tileWidth * 3};
    if (this.gameConfigure.width > 3) {
      size.v *= 2.0;
    }
    var info = Kotlin.isType(tmp$_0 = this.gameValue.blockInfo, BlockItem) ? tmp$_0 : throwCCE();
    var sort = sortedWith(list, compareBy([Game$showNirvanaEffect$lambda_0, Game$showNirvanaEffect$lambda_1]));
    var i = 0;
    for (var tmp$_3 = sort.iterator(); tmp$_3.hasNext(); ++i) {
      var block = tmp$_3.next();
      var tmp$_4;
      var image = 'Particle_' + info.colorMap.get_za3lpa$(block.value);
      var FLOAT$result_1;
      FLOAT$break: do {
        if (i == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(i)) {
          FLOAT$result_1 = numberToDouble(i);
          break FLOAT$break;
        }
        if (typeof i === 'string') {
          try {
            var number_1 = toDouble(i);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      var delay_0 = FLOAT$result_1 * delayGap;
      (tmp$_4 = this.view.screen) != null ? (tmp$_4.actionDelay_ab0iom$(delay_0, void 0, Game$showNirvanaEffect$lambda_2(block, this, size, image)), Unit) : null;
    }
    if (type === 0) {
      if ((tmp$_1 = this.view.screen) != null) {
        var tmp$_5 = delayGap;
        var value = list.length + 1 | 0;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result_2 = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number_2 = toDouble(value);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        tmp$_1.actionDelay_ab0iom$(tmp$_5 * FLOAT$result_2 + 0.2, void 0, Game$showNirvanaEffect$lambda_3);
      }
    }
  };
  Game_0.prototype.GetFeverGagePerBlock_za3lpa$ = function (count) {
    if (this.gameValue == null) {
      return 0.0;
    }
    var index = 0;
    if (this.gameValue.feverLevel >= this.gameConfigure.feverGagePerBlock.length) {
      index = this.gameConfigure.feverGagePerBlock.length - 1 | 0;
    }
    if (count >= this.gameConfigure.feverGagePerBlock[index].length) {
      return this.gameConfigure.feverGagePerBlock[index][this.gameConfigure.feverGagePerBlock[index].length - 1 | 0];
    }
    return this.gameConfigure.feverGagePerBlock[index][count];
  };
  Game_0.prototype.GetFeverGageBonusPerCombo_za3lpa$ = function (combo) {
    if (combo >= this.gameConfigure.feverGageBonusPerCombo.length) {
      return this.gameConfigure.feverGageBonusPerCombo[this.gameConfigure.feverGageBonusPerCombo.length - 1 | 0];
    }
    return this.gameConfigure.feverGageBonusPerCombo[combo];
  };
  Game_0.prototype.clearCompleteRec_tu1qy8$ = function (x, y, value, count, list) {
    var tmp$;
    var count_0 = count;
    if (x < 0 || x >= this.gameConfigure.width) {
      return count_0;
    }
    if (y < 0 || y >= this.gameConfigure.height) {
      return count_0;
    }
    if (this.clear[x][y] === 0) {
      return count_0;
    }
    var block = Kotlin.isType(tmp$ = this.map[x][y], BlockEntity) ? tmp$ : null;
    if (block != null) {
      if (block.value !== value) {
        return count_0;
      }
      this.clear[x][y] = 0;
      list.add_wxm5ur$(0, block);
      this.removeBlock_vux9f0$(x, y);
      count_0 = count_0 + 1 | 0;
      count_0 = this.clearCompleteRec_tu1qy8$(x, y - 1 | 0, value, count_0, list);
      count_0 = this.clearCompleteRec_tu1qy8$(x + 1 | 0, y, value, count_0, list);
      count_0 = this.clearCompleteRec_tu1qy8$(x, y + 1 | 0, value, count_0, list);
      count_0 = this.clearCompleteRec_tu1qy8$(x - 1 | 0, y, value, count_0, list);
    }
    return count_0;
  };
  function Game$removeBlock$lambda(closure$ghost, this$Game) {
    return function () {
      closure$ghost.addText_r4v59z$('[Color][Image Ghost_white 35][Scale 0.6]X[Scale] [Color 35BEC1]' + formatted(this$Game.gameValue.clearedObstacleSum));
      return Unit;
    };
  }
  Game_0.prototype.removeBlock_vux9f0$ = function (x, y) {
    var tmp$, tmp$_0, tmp$_1;
    var block = Kotlin.isType(tmp$ = this.map[x][y], TileEntity) ? tmp$ : null;
    if (block != null) {
      if (Kotlin.isType(block, BlockEntity)) {
        this.gameValue.addBlockType_za3lpa$(block.value);
      }
       else if (Kotlin.isType(block, ObstacleEntity)) {
        this.gameValue.addObstacleClear_za3lpa$(block.value);
        var ghost = Kotlin.isType(tmp$_0 = this.view.findChildByName_3m52m6$('Ghost Amount'), TextArea) ? tmp$_0 : null;
        if (ghost != null) {
          ghost.clearText_gam257$(void 0, Game$removeBlock$lambda(ghost, this));
        }
      }
      this.map[x][y] = null;
      tmp$_1 = this.createColumn;
      tmp$_1[x] = tmp$_1[x] + 1 | 0;
    }
  };
  Game_0.prototype.preIncreaseChainedTile_qt1dr2$ = function (x, y, number) {
    var array = Array_0(this.gameConfigure.width);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var array_0 = new Int32Array(this.gameConfigure.height);
      var tmp$_0;
      tmp$_0 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        array_0[i_0] = 0;
      }
      array[i] = array_0;
    }
    this.increaseCheck = array;
    var depth = new Ref(0);
    return this.increaseChainedTileRec_t5mq2m$(x, y, number, true, depth);
  };
  Game_0.prototype.increaseChainedTile_qt1dr2$ = function (x, y, number) {
    var array = Array_0(this.gameConfigure.width);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var array_0 = new Int32Array(this.gameConfigure.height);
      var tmp$_0;
      tmp$_0 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
        array_0[i_0] = 0;
      }
      array[i] = array_0;
    }
    this.increaseCheck = array;
    var depth = new Ref(0);
    this.increaseChainedTileRec_t5mq2m$(x, y, number, false, depth);
  };
  Game_0.prototype.increaseChainedTileRec_t5mq2m$ = function (x, y, number, test, depth) {
    var tmp$;
    depth.v = depth.v + 1 | 0;
    if (y < 0 || y >= this.gameConfigure.height) {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    if (x < 0 || x >= this.gameConfigure.width) {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    if (this.increaseCheck[x][y] === 1) {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    this.increaseCheck[x][y] = 1;
    var block = Kotlin.isType(tmp$ = this.map[x][y], BlockEntity) ? tmp$ : null;
    if (block != null) {
      if (block.value === number) {
        if (this.gameConfigure.onetimeGrow === true) {
          if (block.GetAttribute() === TileEntity$Attribute$disabled_getInstance()) {
            depth.v = depth.v - 1 | 0;
            return true;
          }
        }
        if (this.isBlockIncreasable_wsdf01$(block) === false) {
          depth.v = depth.v - 1 | 0;
          return false;
        }
        if (test === false) {
          block.transform_mx4ult$(0.0);
        }
      }
       else {
        depth.v = depth.v - 1 | 0;
        return true;
      }
    }
     else {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    if (this.increaseChainedTileRec_t5mq2m$(x, y - 1 | 0, number, test, depth) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    if (this.increaseChainedTileRec_t5mq2m$(x + 1 | 0, y, number, test, depth) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    if (this.increaseChainedTileRec_t5mq2m$(x, y + 1 | 0, number, test, depth) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    if (this.increaseChainedTileRec_t5mq2m$(x - 1 | 0, y, number, test, depth) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    depth.v = depth.v - 1 | 0;
    return true;
  };
  Game_0.prototype.GetChainedTile_vux9f0$ = function (x, y) {
    var tmp$;
    var array = Array_0(this.gameConfigure.width);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_0; i++) {
      var array_0 = new Int32Array(this.gameConfigure.height);
      var tmp$_1;
      tmp$_1 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_1; i_0++) {
        array_0[i_0] = 0;
      }
      array[i] = array_0;
    }
    this.increaseCheck = array;
    var list = ArrayList_init();
    var block = Kotlin.isType(tmp$ = this.map[x][y], BlockEntity) ? tmp$ : null;
    if (block != null) {
      var depth = new Ref(0);
      this.GetChainedTileRec_e9yo5h$(x, y, block.value, depth, list);
    }
    return list;
  };
  Game_0.prototype.GetChainedTileRec_e9yo5h$ = function (x, y, number, depth, list) {
    var tmp$;
    depth.v = depth.v + 1 | 0;
    if (y < 0 || y >= this.gameConfigure.height) {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    if (x < 0 || x >= this.gameConfigure.width) {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    if (this.increaseCheck[x][y] === 1) {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    this.increaseCheck[x][y] = 1;
    var block = Kotlin.isType(tmp$ = this.map[x][y], BlockEntity) ? tmp$ : null;
    if (block != null) {
      if (block.value === number) {
        list.add_11rb$(block);
      }
       else {
        depth.v = depth.v - 1 | 0;
        return true;
      }
    }
     else {
      depth.v = depth.v - 1 | 0;
      return true;
    }
    if (this.GetChainedTileRec_e9yo5h$(x, y - 1 | 0, number, depth, list) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    if (this.GetChainedTileRec_e9yo5h$(x + 1 | 0, y, number, depth, list) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    if (this.GetChainedTileRec_e9yo5h$(x, y + 1 | 0, number, depth, list) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    if (this.GetChainedTileRec_e9yo5h$(x - 1 | 0, y, number, depth, list) === false) {
      depth.v = depth.v - 1 | 0;
      return false;
    }
    depth.v = depth.v - 1 | 0;
    return true;
  };
  Game_0.prototype.isFilled = function () {
    var tmp$, tmp$_0;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        if (this.map[x][y] == null) {
          return false;
        }
      }
    }
    return true;
  };
  Game_0.prototype.isAllLanded = function () {
    var tmp$;
    var list = this.entityManager.GetList();
    for (tmp$ = 0; tmp$ !== list.length; ++tmp$) {
      var entity = list[tmp$];
      var x = entity.GetScreenX();
      var y = entity.GetScreenY();
      if (x < 0 || x >= this.gameConfigure.width || y < 0 || y >= this.gameConfigure.height) {
        return false;
      }
      if (this.map[x][y] !== entity) {
        return false;
      }
    }
    return true;
  };
  Game_0.prototype.isNeedCheckRemain = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], TileEntity) ? tmp$_1 : null;
        if (block != null) {
          if (block.needCheck === true) {
            return true;
          }
        }
      }
    }
    return false;
  };
  Game_0.prototype.createOneBlock_7bka6z$ = function (x, y, tileX, tileY, createObstacle) {
    if (createObstacle === void 0)
      createObstacle = true;
    var tmp$, tmp$_0;
    var value;
    var obstacleChance = 0;
    if (createObstacle === true) {
      if (this.gameConfigure.obstacleMinimumScore < this.gameValue.score && this.gameConfigure.obstacleRatio > 0) {
        var count = 0;
        tmp$ = this.entityManager.GetList();
        for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
          var entity = tmp$[tmp$_0];
          if (Kotlin.isType(entity, ObstacleEntity)) {
            count = count + 1 | 0;
            if (count >= this.gameConfigure.obstacleMaximumNumber) {
              break;
            }
          }
        }
        if (count < this.gameConfigure.obstacleMaximumNumber) {
          obstacleChance = Random_getInstance().arc4random_uniform_za3lpa$(this.gameConfigure.obstacleRatio);
        }
      }
    }
    if (obstacleChance === 1) {
      var tmp$_1 = Random_getInstance();
      var value_0 = this.gameConfigure.kindOfNumber;
      var INT$result;
      INT$break: do {
        if (value_0 == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          INT$result = numberToInt(value_0);
          break INT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number = toInt_0(value_0);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      var value_1 = tmp$_1.arc4random_uniform_za3lpa$(INT$result);
      var INT$result_0;
      INT$break: do {
        if (value_1 == null) {
          INT$result_0 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          INT$result_0 = numberToInt(value_1);
          break INT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_0 = toInt_0(value_1);
            INT$result_0 = number_0;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_0 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_0 = 0;
      }
       while (false);
      value = 1000 + INT$result_0 | 0;
    }
     else {
      if (this.gameConfigure.width === 3 && this.gameConfigure.height === 3) {
        value = this.boardGenerator.GetAvailableBlock_vux9f0$(tileX, tileY);
      }
       else {
        value = this.boardGenerator.GetAvailableBlockOriginal_za3lpa$(tileX);
      }
    }
    if (value === -1) {
      return null;
    }
    var block = this.entityManager.createBlock_mwco6a$(this, value, void 0, x, y);
    block.needCheck = true;
    block.needCheckReason = 1;
    block.isDropping = true;
    return block;
  };
  Game_0.prototype.createItem_mbbjvw$$default = function (value, subValue, x, y, tileX, tileY) {
    var block = this.entityManager.createBlock_mwco6a$(this, value, subValue, x, y);
    return block;
  };
  Game_0.prototype.createItem_mbbjvw$ = function (value, subValue, x, y, tileX, tileY, callback$default) {
    if (subValue === void 0)
      subValue = 0;
    return callback$default ? callback$default(value, subValue, x, y, tileX, tileY) : this.createItem_mbbjvw$$default(value, subValue, x, y, tileX, tileY);
  };
  Game_0.prototype.GetAvailableY = function () {
    var tmp$, tmp$_0;
    var array = new Int32Array(this.gameConfigure.width);
    var tmp$_1;
    tmp$_1 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_1; i++) {
      array[i] = -1;
    }
    var y = array;
    var list = this.entityManager.GetList();
    for (tmp$ = 0; tmp$ !== list.length; ++tmp$) {
      var entity = list[tmp$];
      var block = Kotlin.isType(tmp$_0 = entity, TileEntity) ? tmp$_0 : null;
      if (block != null) {
        if (block.GetScreenY() <= y[block.GetScreenX()]) {
          y[block.GetScreenX()] = block.GetScreenY() - 1 | 0;
        }
      }
    }
    return y;
  };
  Game_0.prototype.checkJustDrop_za3lpa$ = function (count) {
    return false;
  };
  Game_0.prototype.prepareDrop_103y6$ = function (count, shake, createObstacle) {
    if (shake === void 0)
      shake = true;
    if (createObstacle === void 0)
      createObstacle = true;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.checkJustDrop_za3lpa$(count) === false) {
      if (this.gameConfigure.createNewBlock === true) {
        if (this.gameConfigure.width !== 3 || this.gameConfigure.height !== 3) {
          this.boardGenerator.makeMapForNewBlock_klim6j$(this.map);
        }
        var availableY = this.GetAvailableY();
        tmp$ = this.createColumn.length - 1 | 0;
        for (var x = 0; x <= tmp$; x++) {
          tmp$_0 = this.createColumn[x] - 1 | 0;
          for (var i = 0; i <= tmp$_0; i++) {
            var newBlock = this.createOneBlock_7bka6z$(x, availableY[x] + this.gameConfigure.dropAdjust - i | 0, x, i, createObstacle);
            if (newBlock != null) {
              newBlock.moveTo_mp7p4f$(x, 2, this.gameConfigure.fallingSpeed, this.gameConfigure.fallingSpeedLimit, this.gameConfigure.acceleration);
            }
             else {
              return;
            }
          }
        }
        tmp$_1 = this.createColumn.length - 1 | 0;
        for (var x_0 = 0; x_0 <= tmp$_1; x_0++) {
          this.createColumn[x_0] = 0;
        }
      }
    }
    tmp$_2 = this.gameConfigure.width - 1 | 0;
    for (var x_1 = 0; x_1 <= tmp$_2; x_1++) {
      for (var y = this.gameConfigure.height - 2 | 0; y >= 0; y--) {
        var block = this.map[x_1][y];
        if (block != null) {
          if (this.map[x_1][y + 1 | 0] == null) {
            block.moveTo_mp7p4f$(x_1, 2, this.gameConfigure.fallingSpeed, this.gameConfigure.fallingSpeedLimit, this.gameConfigure.acceleration);
            var b = Kotlin.isType(tmp$_3 = block, TileEntity) ? tmp$_3 : null;
            if (b != null) {
              b.fall_6taknv$(shake);
            }
            this.map[x_1][y] = null;
          }
        }
      }
    }
  };
  Game_0.prototype.printTile = function () {
    var tmp$, tmp$_0;
    var string = '\n';
    tmp$ = this.gameConfigure.height - 1 | 0;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        var block = this.map[x][y];
        if (block != null) {
          var value = block.value;
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(value)) {
              STRING$result = value.toString();
              break STRING$break;
            }
             else if (typeof value === 'string') {
              STRING$result = value;
              break STRING$break;
            }
             else if (typeof value === 'boolean') {
              STRING$result = value.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value)) {
              STRING$result = value.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          string += STRING$result;
        }
         else {
          string += 'x';
        }
      }
      string += '\n';
    }
  };
  Game_0.prototype.rendererUpdateCallback_mx4ult$ = function (elapsed) {
    this.entityManager.update_mx4ult$(elapsed);
  };
  Game_0.prototype.generateBoard = function () {
    this.boardGenerator = BoardGenerator_init(this, this.gameConfigure.width, this.gameConfigure.height, this.gameConfigure.kindOfNumber, this.gameConfigure.minOfComplete);
    if (this.gameConfigure.takeSnapshot === true) {
      if (DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot') === 1) {
        DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot', void 0, 0);
        this.restoreSnapshot();
        var array = new Int32Array(this.gameConfigure.width);
        var tmp$;
        tmp$ = array.length - 1 | 0;
        for (var i = 0; i <= tmp$; i++) {
          array[i] = 0;
        }
        this.createColumn = array;
        var array_0 = Array_0(this.gameConfigure.width);
        var tmp$_0;
        tmp$_0 = array_0.length - 1 | 0;
        for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
          var array_1 = new Int32Array(this.gameConfigure.height);
          var tmp$_1;
          tmp$_1 = array_1.length - 1 | 0;
          for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
            array_1[i_1] = 0;
          }
          array_0[i_0] = array_1;
        }
        this.increaseCheck = array_0;
        return;
      }
    }
    this.regenAllBlock_za3lpa$(this.gameConfigure.dropAdjust);
  };
  Object.defineProperty(Game_0.prototype, 'onReady', {
    get: function () {
      return this.onReady_m3wg3q$_0;
    }
  });
  Object.defineProperty(Game_0.prototype, 'onGameOver', {
    get: function () {
      return this.onGameOver_4sel7f$_0;
    }
  });
  function Game$continueGame$lambda(this$Game) {
    return function () {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
      var button = Kotlin.isType(tmp$ = this$Game.view.findChildByName_3m52m6$('Pause Switch'), Button) ? tmp$ : null;
      if (button != null) {
        ensureNotNull(button).SetEnable_6taknv$(true);
      }
      button = Kotlin.isType(tmp$_0 = this$Game.view.findChildByName_3m52m6$('Abandon Button'), Button) ? tmp$_0 : null;
      if (button != null) {
        ensureNotNull(button).SetEnable_6taknv$(true);
      }
      this$Game.gameState.SetNextState_9sobi5$('running');
      this$Game.isPausedOnlyForLogic = false;
      (tmp$_1 = this$Game.gameTimer) != null ? (tmp$_1.resume(), Unit) : null;
      (tmp$_2 = this$Game.blockDisableTimer) != null ? (tmp$_2.resume(), Unit) : null;
      (tmp$_3 = this$Game.comboTimer) != null ? (tmp$_3.resume(), Unit) : null;
      this$Game.comboTimeRemain += 2.0;
      (tmp$_4 = this$Game.feverTimer) != null ? (tmp$_4.resume(), Unit) : null;
      if (this$Game.gameValue.feverLevel > 0) {
        this$Game.feverTimeRemain += 3.0;
      }
      return Unit;
    };
  }
  Game_0.prototype.continueGame = function () {
    var tmp$;
    this.gameOverFlag = false;
    this.noMoreMatch = false;
    if (this.gameValue.feverLevel > 0) {
      SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this.view.screen), 'FeverBGM', void 0, 0.3);
    }
     else {
      SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this.view.screen), 'MainBGM', void 0, 0.3);
    }
    if (this.gameConfigure.width === 3) {
      var list = this.getRandomBlocks_za3lpa$(this.gameConfigure.explodeForContinue);
      this.explodeBlocks_mti8id$(list, 0.15);
    }
     else {
      var list_0 = this.getRandomBlocks_za3lpa$(this.gameConfigure.explodeForContinue);
      this.explodeBlocks_mti8id$(list_0, 1 / 12.0);
    }
    if (this.gameConfigure.limitGameTime === true) {
      this.gameRemainTime = this.gameRemainTime + this.gameConfigure.bonusTime;
      this.timerSoundFired = false;
    }
    (tmp$ = this.view.screen) != null ? (tmp$.actionDelay_ab0iom$(1.0, void 0, Game$continueGame$lambda(this)), Unit) : null;
  };
  Object.defineProperty(Game_0.prototype, 'onWaitForStop', {
    get: function () {
      return this.onWaitForStop_ge8lbh$_0;
    }
  });
  function Game$checkNoMoreMatch$lambda(this$Game_0, closure$temp_0, closure$callback_0) {
    return function ($receiver, continuation_0, suspended) {
      var instance = new Coroutine$Game$checkNoMoreMatch$lambda(this$Game_0, closure$temp_0, closure$callback_0, $receiver, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Game$checkNoMoreMatch$lambda(this$Game_0, closure$temp_0, closure$callback_0, $receiver, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$Game = this$Game_0;
    this.local$closure$temp = closure$temp_0;
    this.local$closure$callback = closure$callback_0;
  }
  Coroutine$Game$checkNoMoreMatch$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Game$checkNoMoreMatch$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Game$checkNoMoreMatch$lambda.prototype.constructor = Coroutine$Game$checkNoMoreMatch$lambda;
  Coroutine$Game$checkNoMoreMatch$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$this$Game.boardGenerator.running = true;
            var result = this.local$this$Game.boardGenerator.isNoMoreMatch_nq05ln$(this.local$closure$temp.v.slice());
            this.local$closure$callback(result);
            return this.local$this$Game.boardGenerator.running = false, Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Game_0.prototype.checkNoMoreMatch_y8twos$ = function (callback) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.noMoreMatch === true) {
      return;
    }
    var array = Array_0(this.gameConfigure.width);
    var tmp$_4;
    tmp$_4 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_4; i++) {
      var array_0 = Array_0(this.gameConfigure.height);
      var tmp$_5;
      tmp$_5 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_5; i_0++) {
        array_0[i_0] = new Pair(0, 0);
      }
      array[i] = array_0;
    }
    var temp = {v: array};
    var count = 0;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          temp.v[x][y] = new Pair(block.value, block.GetAttribute() === TileEntity$Attribute$disabled_getInstance() ? 1 : 0);
          if (temp.v[x][y].second === 0) {
            count = count + 1 | 0;
          }
        }
         else if (Kotlin.isType(this.map[x][y], ItemEntity)) {
          return;
        }
         else {
          temp.v[x][y] = new Pair(-1, -1);
        }
      }
    }
    if (9 === Kotlin.imul(this.gameConfigure.width, this.gameConfigure.height)) {
      var kindOf = this.boardGenerator.countKindOf_9kzzq3$(temp.v);
      if (kindOf.first === 2) {
        if (kindOf.second % 2 === 0) {
          callback(true);
          return;
        }
        if (count === 9) {
          return;
        }
      }
       else if (kindOf.first === 3) {
        var array_1 = Array_0(temp.v.length);
        var tmp$_6;
        tmp$_6 = array_1.length - 1 | 0;
        for (var i_1 = 0; i_1 <= tmp$_6; i_1++) {
          var array_2 = Array_0(temp.v[0].length);
          var tmp$_7;
          tmp$_7 = array_2.length - 1 | 0;
          for (var i_2 = 0; i_2 <= tmp$_7; i_2++) {
            array_2[i_2] = new Pair(-1, -1);
          }
          array_1[i_1] = array_2;
        }
        var backup = array_1;
        tmp$_2 = this.gameConfigure.height - 1 | 0;
        for (var y_0 = 0; y_0 <= tmp$_2; y_0++) {
          tmp$_3 = this.gameConfigure.width - 1 | 0;
          for (var x_0 = 0; x_0 <= tmp$_3; x_0++) {
            backup[x_0][y_0] = temp.v[x_0][y_0].copy_xwzc9p$();
          }
        }
        if (temp.v[0][0].second < this.gameConfigure.kindOfNumber && temp.v[0][0].second === 0) {
          var corner = (temp.v[0][0].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[1][0].first === corner && temp.v[0][1].first === corner) {
            temp.v[0][0] = new Pair(corner, temp.v[0][0].second);
          }
        }
        if (temp.v[2][0].second < this.gameConfigure.kindOfNumber && temp.v[2][0].second === 0) {
          var corner_0 = (temp.v[2][0].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[1][0].first === corner_0 && temp.v[2][1].first === corner_0) {
            temp.v[2][0] = new Pair(corner_0, temp.v[2][0].second);
          }
        }
        if (temp.v[0][2].second < this.gameConfigure.kindOfNumber && temp.v[0][2].second === 0) {
          var corner_1 = (temp.v[0][2].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[0][1].first === corner_1 && temp.v[1][2].first === corner_1) {
            temp.v[0][2] = new Pair(corner_1, temp.v[0][2].second);
          }
        }
        if (temp.v[2][2].second < this.gameConfigure.kindOfNumber && temp.v[2][2].second === 0) {
          var corner_2 = (temp.v[2][2].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[2][1].first === corner_2 && temp.v[1][2].first === corner_2) {
            temp.v[2][2] = new Pair(corner_2, temp.v[2][2].second);
          }
        }
        if (this.boardGenerator.checkComplete_9kzzq3$(temp.v) === true) {
          return;
        }
        var kindOf3 = this.boardGenerator.countKindOf_9kzzq3$(temp.v);
        if (kindOf3.first === 2) {
          if (kindOf3.second % 2 === 0) {
            callback(true);
            return;
          }
          if (count === 9) {
            return;
          }
        }
         else {
          if (count === 9) {
            return;
          }
        }
        if (temp.v[0][0].second < this.gameConfigure.kindOfNumber) {
          var corner_3 = (temp.v[0][0].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[1][0].first === corner_3 && temp.v[0][1].first === corner_3) {
            temp.v[0][0] = new Pair(corner_3, temp.v[0][0].second);
          }
        }
        if (temp.v[2][0].second < this.gameConfigure.kindOfNumber) {
          var corner_4 = (temp.v[2][0].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[1][0].first === corner_4 && temp.v[2][1].first === corner_4) {
            temp.v[2][0] = new Pair(corner_4, temp.v[2][0].second);
          }
        }
        if (temp.v[0][2].second < this.gameConfigure.kindOfNumber) {
          var corner_5 = (temp.v[0][2].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[0][1].first === corner_5 && temp.v[1][2].first === corner_5) {
            temp.v[0][2] = new Pair(corner_5, temp.v[0][2].second);
          }
        }
        if (temp.v[2][2].second < this.gameConfigure.kindOfNumber) {
          var corner_6 = (temp.v[2][2].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[2][1].first === corner_6 && temp.v[1][2].first === corner_6) {
            temp.v[2][2] = new Pair(corner_6, temp.v[2][2].second);
          }
        }
        var kindOf2 = this.boardGenerator.countKindOf_9kzzq3$(temp.v);
        if (kindOf2.first === 2) {
          if (kindOf2.second % 2 === 0) {
            callback(true);
            return;
          }
        }
        temp.v = backup.slice();
        if (temp.v[0][0].second < this.gameConfigure.kindOfNumber && temp.v[0][0].second === 0) {
          var corner_7 = (temp.v[0][0].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[1][0].first === corner_7 && temp.v[0][1].first === corner_7) {
            temp.v[0][0] = new Pair(corner_7, temp.v[0][0].second);
          }
        }
        if (temp.v[2][0].second < this.gameConfigure.kindOfNumber && temp.v[2][0].second === 0) {
          var corner_8 = (temp.v[2][0].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[1][0].first === corner_8 && temp.v[2][1].first === corner_8) {
            temp.v[2][0] = new Pair(corner_8, temp.v[2][0].second);
          }
        }
        if (temp.v[0][2].second < this.gameConfigure.kindOfNumber && temp.v[0][2].second === 0) {
          var corner_9 = (temp.v[0][2].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[0][1].first === corner_9 && temp.v[1][2].first === corner_9) {
            temp.v[0][2] = new Pair(corner_9, temp.v[0][2].second);
          }
        }
        if (temp.v[2][2].second < this.gameConfigure.kindOfNumber && temp.v[2][2].second === 0) {
          var corner_10 = (temp.v[2][2].first + 1 | 0) % this.gameConfigure.kindOfNumber;
          if (temp.v[2][1].first === corner_10 && temp.v[1][2].first === corner_10) {
            temp.v[2][2] = new Pair(corner_10, temp.v[2][2].second);
          }
        }
      }
       else {
        if (count === 9) {
          return;
        }
      }
    }
     else {
      if (count > 8) {
        return;
      }
    }
    this.boardGenerator.cancelFindNoMoreMatch();
    var nonBlock = launch(void 0, void 0, void 0, void 0, Game$checkNoMoreMatch$lambda(this, temp, callback));
  };
  Game_0.prototype.isIdle = function () {
    if (this.isPaused === true || this.isPausedOnlyForLogic === true) {
      return false;
    }
    if (this.isBouncingRemain() === true) {
      return false;
    }
    if (this.isFilled() === true && this.isTransforming() === false && this.isNeedCheckRemain() === false) {
      return true;
    }
    return false;
  };
  Game_0.prototype.isBouncingRemain = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], TileEntity) ? tmp$_1 : null;
        if (block != null) {
          if (block.bouncing === true) {
            return true;
          }
        }
      }
    }
    return false;
  };
  Game_0.prototype.isTransforming = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          if (block.isTransforming === true) {
            return true;
          }
        }
      }
    }
    return false;
  };
  Game_0.prototype.updateInfo = function () {
  };
  Game_0.prototype.comboReset = function () {
    this.comboTimeRemain = 0.0;
    this.gameValue.combo = 0;
    this.comboSeedScore = 0;
    if (this.gameOverFlag !== true || this.gameValue.feverLevel !== 0) {
      this.gameValue.perfectPlay = false;
    }
    this.resetAllDelayedBlock();
  };
  Game_0.prototype.checkDelayedBlock = function () {
    var tmp$, tmp$_0, tmp$_1;
    var isComboFailed = false;
    if (this.gameConfigure.comboMode === 0) {
      tmp$ = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        tmp$_0 = this.gameConfigure.height - 1 | 0;
        for (var y = 0; y <= tmp$_0; y++) {
          var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : null;
          if (block != null) {
            if (block.needCheckReason === 0) {
              isComboFailed = true;
            }
          }
        }
      }
    }
    if (isComboFailed === true) {
      this.comboReset();
      this.gameValue.feverGage = this.gameValue.feverGage * this.gameValue.feverGageDecreaseValue;
      if (this.gameValue.feverGage < 0) {
        this.gameValue.feverGage = 0.0;
      }
    }
  };
  Game_0.prototype.checkBottomObstacle = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      for (var y = this.gameConfigure.height - 1 | 0; y >= 0; y--) {
        var block = Kotlin.isType(tmp$_0 = this.map[x][y], ObstacleEntity) ? tmp$_0 : null;
        if (block != null) {
          if (block.isStone === true) {
            continue;
          }
          if (y === (this.gameConfigure.height - 1 | 0)) {
            block.makeStone();
          }
           else {
            var bottom = Kotlin.isType(tmp$_1 = this.map[x][y + 1 | 0], ObstacleEntity) ? tmp$_1 : null;
            if (bottom != null) {
              if (bottom.isStone === true) {
                block.makeStone();
              }
            }
          }
        }
      }
    }
  };
  function Game$showHint$lambda(closure$marker, closure$scale) {
    return function (info) {
      closure$marker.SetScaleFromOriginal_mx4ult$(closure$scale.v);
      if (closure$scale.v > 1.0) {
        closure$marker.SetAlpha_8ca0d4$(1.0 - (closure$scale.v - 1.0));
      }
       else if (closure$scale.v > 0.8) {
        closure$marker.SetAlpha_8ca0d4$(1.0);
      }
       else {
        closure$marker.SetAlpha_8ca0d4$(0.0);
      }
      closure$scale.v += info.elapsed * 1.5;
      if (closure$scale.v > 2.0) {
        closure$marker.SetTimeToLive_mx4ult$(0.0);
        return false;
      }
      return true;
    };
  }
  Game_0.prototype.showHint = function () {
    var tmp$;
    var hint = this.boardGenerator.GetHint();
    if (hint.first !== -1 && hint.second !== -1) {
      var block = Kotlin.isType(tmp$ = this.map[hint.first][hint.second], BlockEntity) ? tmp$ : null;
      if (block != null) {
        if (block.GetAttribute() !== TileEntity$Attribute$disabled_getInstance()) {
          var scale = {v: 0.0};
          var value = SceneLayer$uiTop_getInstance().value;
          var FLOAT$result;
          FLOAT$break: do {
            if (value == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value)) {
              FLOAT$result = numberToDouble(value);
              break FLOAT$break;
            }
            if (typeof value === 'string') {
              try {
                var number = toDouble(value);
                FLOAT$result = number;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          var marker = Sprite_init(0.0, 0.0, FLOAT$result, 'Resource/UI/IconMarker', this.gameConfigure.tileWidthResult, this.gameConfigure.tileHeightResult);
          marker.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          marker.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          marker.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
          marker.SetBlendFactor_mx4ult$(1.0);
          marker.SetAlpha_8ca0d4$(0.0);
          this.view.addChild_g5h3xp$(marker);
          var tmp$_0 = this.boardRect.x;
          var value_0 = hint.first;
          var FLOAT$result_0;
          FLOAT$break: do {
            if (value_0 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_0)) {
              FLOAT$result_0 = numberToDouble(value_0);
              break FLOAT$break;
            }
            if (typeof value_0 === 'string') {
              try {
                var number_0 = toDouble(value_0);
                FLOAT$result_0 = number_0;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          var tmp$_1 = tmp$_0 + FLOAT$result_0 * this.gameConfigure.tileWidthResult + this.gameConfigure.tileWidthResult * 0.5;
          var tmp$_2 = this.boardRect.y;
          var value_1 = hint.second;
          var FLOAT$result_1;
          FLOAT$break: do {
            if (value_1 == null) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_1)) {
              FLOAT$result_1 = numberToDouble(value_1);
              break FLOAT$break;
            }
            if (typeof value_1 === 'string') {
              try {
                var number_1 = toDouble(value_1);
                FLOAT$result_1 = number_1;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_1 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_1 = 0.0;
          }
           while (false);
          marker.SetPosition_dleff0$(tmp$_1, tmp$_2 + FLOAT$result_1 * this.gameConfigure.tileHeightResult + this.gameConfigure.tileHeightResult * 0.5);
          marker.addUpdateCallback_sds54w$('Marker', void 0, void 0, void 0, void 0, void 0, Game$showHint$lambda(marker, scale));
        }
      }
    }
  };
  Game_0.prototype.disableOneBlock = function () {
    var tmp$, tmp$_0;
    tmp$ = this.gameConfigure.blockDisableCountAtOnce - 1 | 0;
    for (var n = 0; n <= tmp$; n++) {
      var value = Random_getInstance().arc4random_uniform_za3lpa$(Kotlin.imul(this.gameConfigure.width, this.gameConfigure.height));
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      var num = INT$result;
      var pick = -1;
      var i = 0;
      var loop = 0;
      while (true) {
        if (loop > Kotlin.imul(this.gameConfigure.width, this.gameConfigure.height)) {
          this.blockDisableTimeRemain = 0.01;
          break;
        }
        var x = i % this.gameConfigure.width;
        var y = i / this.gameConfigure.width | 0;
        var block = Kotlin.isType(tmp$_0 = this.map[x][y], BlockEntity) ? tmp$_0 : null;
        if (block != null) {
          if (block.GetAttribute() !== TileEntity$Attribute$disabled_getInstance()) {
            pick = pick + 1 | 0;
          }
          if (pick === num) {
            block.disabledDone = false;
            block.SetAttribute_c9f3gi$(TileEntity$Attribute$disabled_getInstance());
            var hint = this.boardGenerator.GetHint();
            if (hint.first === x && hint.second === y) {
              this.boardGenerator.clearHint();
            }
            break;
          }
        }
        i = i + 1 | 0;
        if (i >= Kotlin.imul(this.gameConfigure.width, this.gameConfigure.height)) {
          i = 0;
          loop = loop + 1 | 0;
        }
      }
    }
  };
  Game_0.prototype.isBlockIncreasable_wsdf01$ = function (block) {
    if (block.needCheck === true && block.needCheckReason === 0) {
      return false;
    }
    if (block.isTransforming === true) {
      return false;
    }
    return true;
  };
  Game_0.prototype.areAllBlocksIncreasable = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          if (this.isBlockIncreasable_wsdf01$(block) === false) {
            return false;
          }
        }
      }
    }
    return true;
  };
  Game_0.prototype.isBlockClickable_nwthlc$ = function (block) {
    if (block.bouncing === true) {
      return false;
    }
    if (Kotlin.isType(block, BlockEntity)) {
      if (block.GetAttribute() === TileEntity$Attribute$disabled_getInstance()) {
        return false;
      }
    }
    if (block.needCheck === true) {
      return false;
    }
    if (block.isTransforming === true) {
      return false;
    }
    return true;
  };
  Game_0.prototype.isBlockConnectable_wsdf01$ = function (block) {
    return true;
  };
  Game_0.prototype.updateBlockConnection = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          if (this.isBlockConnectable_wsdf01$(block) === false) {
            block.connectionBitMask = 0;
            block.removeConnection();
            continue;
          }
          var state = 0;
          if (y > 0) {
            var up = Kotlin.isType(tmp$_2 = this.map[x][y - 1 | 0], BlockEntity) ? tmp$_2 : null;
            if (up != null) {
              if (this.isBlockConnectable_wsdf01$(up) === true && up.value === block.value) {
                state = state + 1 | 0;
              }
            }
          }
          if (y < (this.gameConfigure.height - 1 | 0)) {
            var down = Kotlin.isType(tmp$_3 = this.map[x][y + 1 | 0], BlockEntity) ? tmp$_3 : null;
            if (down != null) {
              if (this.isBlockConnectable_wsdf01$(down) === true && down.value === block.value) {
                state = state + 2 | 0;
              }
            }
          }
          if (x > 0) {
            var left = Kotlin.isType(tmp$_4 = this.map[x - 1 | 0][y], BlockEntity) ? tmp$_4 : null;
            if (left != null) {
              if (this.isBlockConnectable_wsdf01$(left) === true && left.value === block.value) {
                state = state + 4 | 0;
              }
            }
          }
          if (x < (this.gameConfigure.width - 1 | 0)) {
            var right = Kotlin.isType(tmp$_5 = this.map[x + 1 | 0][y], BlockEntity) ? tmp$_5 : null;
            if (right != null) {
              if (this.isBlockConnectable_wsdf01$(right) === true && right.value === block.value) {
                state = state + 8 | 0;
              }
            }
          }
          if (block.connectionBitMask !== state) {
            block.connectionBitMask = state;
            block.updateConnection();
          }
        }
      }
    }
  };
  Game_0.prototype.makeMatchConnection_n4bh9e$ = function (list) {
    var tmp$, tmp$_0;
    for (tmp$ = 0; tmp$ !== list.length; ++tmp$) {
      var block = list[tmp$];
      var block_0 = Kotlin.isType(tmp$_0 = block, BlockEntity) ? tmp$_0 : null;
      if (block_0 != null) {
        block_0.removeConnection();
      }
    }
  };
  Game_0.prototype.processKeyInput = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    tmp$ = this.entityManager.GetList();
    for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
      var entity = tmp$[tmp$_0];
      var item = Kotlin.isType(tmp$_1 = entity, ItemEntity) ? tmp$_1 : null;
      if (item != null) {
        if (item.isUsed() === true) {
          this.cancelKeyInput_za3lpa$();
          return;
        }
      }
    }
    var clicked = this.GetClickedButton();
    if (clicked.first !== -1 && clicked.second !== -1) {
      this.lastInput = new Pair(-1, -1);
      var x = clicked.first;
      var y = clicked.second;
      tmp$_2 = this.gameValue;
      tmp$_2.clickAllCount = tmp$_2.clickAllCount + 1 | 0;
      var tile = Kotlin.isType(tmp$_3 = this.map[x][y], TileEntity) ? tmp$_3 : null;
      if (tile != null) {
        if (Kotlin.isType(tile, BlockEntity)) {
          if (this.isBlockClickable_nwthlc$(Kotlin.isType(tmp$_4 = tile, BlockEntity) ? tmp$_4 : throwCCE()) === false) {
            if (tile.GetAttribute() === TileEntity$Attribute$disabled_getInstance()) {
              SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('shake');
              this.cancelKeyInput_za3lpa$(0);
              tile.shake_7b5o5w$();
              this.gameValue.feverGage = this.gameValue.feverGage * 0.9;
            }
            return;
          }
          if (this.preIncreaseChainedTile_qt1dr2$(x, y, tile.value) === false) {
            return;
          }
          SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('change');
          this.boardGenerator.clearHint();
          this.checkDelayedBlock();
          this.increaseChainedTile_qt1dr2$(x, y, tile.value);
          (tmp$_5 = this.blockDisableTimer) != null ? (tmp$_5.pause(), Unit) : null;
          this.gameValue.seq = 0;
          this.lastInput = new Pair(x, y);
        }
         else if (Kotlin.isType(tile, ItemEntity)) {
          this.boardGenerator.clearHint();
          var item_0 = Kotlin.isType(tmp$_6 = tile, ItemEntity) ? tmp$_6 : throwCCE();
          item_0.SetUsed_6taknv$(true);
          (tmp$_7 = this.blockDisableTimer) != null ? (tmp$_7.pause(), Unit) : null;
          this.gameValue.seq = 0;
        }
         else if (Kotlin.isType(tile, ObstacleEntity)) {
          SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('shake');
          tile.shake_7b5o5w$();
          this.gameValue.feverGage = this.gameValue.feverGage * 0.9;
        }
      }
      this.boardGenerator.cancelFindNoMoreMatch();
      this.cancelKeyInput_za3lpa$(0);
    }
  };
  Game_0.prototype.addKeyInput_ydzd23$ = function (x, y, force) {
    if (force === void 0)
      force = false;
    if (force === false) {
      if (this.gameOverFlag === true) {
        if (this.gameConfigure.limitGameTime === true) {
          if (this.gameValue.feverLevel === 0) {
            return;
          }
        }
         else {
          return;
        }
      }
    }
    if (this.keyInputIgnoreStart === true) {
      if (this.gameTimeElapsed < this.keyInputIgnoreEnd) {
        return;
      }
      this.keyInputIgnoreStart = false;
    }
    if (this.inputQueue.size > 1) {
      return;
    }
    this.inputQueue.add_11rb$(new Pair(x, y));
  };
  Game_0.prototype.cancelKeyInput_za3lpa$ = function (index) {
    if (index === void 0)
      index = -1;
    if (index === -1) {
      this.inputQueue.clear();
    }
     else {
      this.inputQueue.removeAt_za3lpa$(index);
    }
  };
  Game_0.prototype.ignoreKeyInput_mx4ult$ = function (time) {
    this.keyInputIgnoreStart = true;
    this.keyInputIgnoreEnd = this.gameTimeElapsed + time;
  };
  Game_0.prototype.GetClickedButton = function () {
    if (this.inputQueue.size > 0) {
      var click = this.inputQueue.get_za3lpa$(0);
      return new Pair(click.first, click.second);
    }
     else {
      return new Pair(-1, -1);
    }
  };
  function Game$processCheck$lambda(this$Game) {
    return function () {
      this$Game.isPaused = false;
      if (this$Game.comboTimeRemain > 0) {
        this$Game.comboTimeRemain = this$Game.comboTimeRemain + 0.5;
      }
      return Unit;
    };
  }
  Game_0.prototype.processCheck = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var result = false;
    var matched = this.checkComplete();
    if (matched === true) {
      var createObstacle = true;
      this.processObstacle();
      tmp$ = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        tmp$_0 = this.gameConfigure.height - 1 | 0;
        for (var y = 0; y <= tmp$_0; y++) {
          var block = Kotlin.isType(tmp$_1 = this.map[x][y], ObstacleEntity) ? tmp$_1 : null;
          if (block != null) {
            if (block.matched === true) {
              createObstacle = false;
              this.removeBlock_vux9f0$(x, y);
            }
          }
        }
      }
      var count = this.clearCompleteTileByChunk();
      this.increaseCombo();
      if (count >= this.gameConfigure.amountOfNirvana) {
        this.prepareDrop_103y6$(count, false, createObstacle);
      }
       else {
        this.prepareDrop_103y6$(count, void 0, createObstacle);
      }
      result = true;
    }
    tmp$_2 = this.gameConfigure.width - 1 | 0;
    for (var x_0 = 0; x_0 <= tmp$_2; x_0++) {
      tmp$_3 = this.gameConfigure.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_3; y_0++) {
        var block_0 = Kotlin.isType(tmp$_4 = this.map[x_0][y_0], ItemEntity) ? tmp$_4 : null;
        if (block_0 != null) {
          if (block_0.isUsed() === true) {
            if (this.isIdle() === true) {
              this.isPaused = true;
              block_0.used = false;
              var delay = this.processItem_lwb297$(block_0, x_0, y_0);
              (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionDelay_ab0iom$(delay, void 0, Game$processCheck$lambda(this)), Unit) : null;
              this.prepareDrop_103y6$(1, void 0, false);
              return true;
            }
          }
        }
      }
    }
    return result;
  };
  Game_0.prototype.increaseCombo = function () {
    var tmp$, tmp$_0;
    tmp$ = this.gameValue;
    tmp$.combo = tmp$.combo + 1 | 0;
    var tmp$_1 = this.gameConfigure.comboTiming;
    var value = this.gameValue.combo;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var timing = tmp$_1 - FLOAT$result * this.gameConfigure.comboTimingAdjust;
    if (timing < this.gameConfigure.comboTimingLowest) {
      timing = this.gameConfigure.comboTimingLowest;
    }
    this.comboTimeRemain = timing;
    if (this.gameValue.combo > 1) {
      this.createComboMark();
    }
    (tmp$_0 = this.beginnerTimer) != null ? (tmp$_0.pause(), Unit) : null;
    if ((this.gameValue.combo - 1 | 0) > this.gameValue.maxComboOnGame) {
      this.gameValue.maxComboOnGame = this.gameValue.combo - 1 | 0;
    }
  };
  Game_0.prototype.processObstacle = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], ObstacleEntity) ? tmp$_1 : null;
        if (block != null) {
          if (block.isStone === true) {
            continue;
          }
          if (x > 0) {
            var test = (tmp$_2 = this.map[x - 1 | 0][y]) != null ? tmp$_2.value : null;
            if (test != null) {
              if (this.clear[x - 1 | 0][y] !== 0 && block.isPair_za3lpa$(test) === true) {
                block.matched = true;
                continue;
              }
            }
          }
          if (x < (this.gameConfigure.width - 1 | 0)) {
            var test_0 = (tmp$_3 = this.map[x + 1 | 0][y]) != null ? tmp$_3.value : null;
            if (test_0 != null) {
              if (this.clear[x + 1 | 0][y] !== 0 && block.isPair_za3lpa$(test_0) === true) {
                block.matched = true;
                continue;
              }
            }
          }
          if (y > 0) {
            var test_1 = (tmp$_4 = this.map[x][y - 1 | 0]) != null ? tmp$_4.value : null;
            if (test_1 != null) {
              if (this.clear[x][y - 1 | 0] !== 0 && block.isPair_za3lpa$(test_1) === true) {
                block.matched = true;
                continue;
              }
            }
          }
          if (y < (this.gameConfigure.height - 1 | 0)) {
            var test_2 = (tmp$_5 = this.map[x][y + 1 | 0]) != null ? tmp$_5.value : null;
            if (test_2 != null) {
              if (this.clear[x][y + 1 | 0] !== 0 && block.isPair_za3lpa$(test_2) === true) {
                block.matched = true;
                continue;
              }
            }
          }
        }
      }
    }
  };
  function Game$processItem$lambda(closure$item) {
    return function () {
      closure$item.explode_nhq4am$();
      return Unit;
    };
  }
  function Game$processItem$lambda_0(closure$item) {
    return function () {
      closure$item.explode_nhq4am$();
      return Unit;
    };
  }
  function Game$processItem$lambda_1(closure$item) {
    return function (value, complete) {
      var tmp$, tmp$_0;
      (tmp$ = closure$item.sprite) != null ? (tmp$.SetBlendFactor_mx4ult$(value), Unit) : null;
      if (complete === true) {
        (tmp$_0 = closure$item.sprite) != null ? (tmp$_0.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        closure$item.explode_nhq4am$();
      }
    };
  }
  Game_0.prototype.processItem_lwb297$ = function (item, x, y) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var delay = 0.0;
    if (Kotlin.isType(item, ReactivateItemEntity)) {
      delay = this.resetDisabledBlock_wnu51o$(x - 1 | 0, x + 1 | 0, void 0, true);
      (tmp$ = this.view.screen) != null ? (tmp$.actionDelay_ab0iom$(delay, void 0, Game$processItem$lambda(item)), Unit) : null;
      this.removeBlock_vux9f0$(x, y);
    }
     else if (Kotlin.isType(item, SameBombEntity)) {
      delay = this.explodeSameBlock_n119nu$(Kotlin.isType(tmp$_0 = item, SameBombEntity) ? tmp$_0 : throwCCE());
      (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionDelay_ab0iom$(delay, void 0, Game$processItem$lambda_0(item)), Unit) : null;
      this.removeBlock_vux9f0$(x, y);
    }
     else if (Kotlin.isType(item, NearBombEntity)) {
      delay = this.explodeNearBlock_qt1dr2$(x, y);
      (tmp$_2 = item.sprite) != null ? (tmp$_2.SetBlendMode_ieo8yr$(BlendMode$add_getInstance()), Unit) : null;
      (tmp$_3 = item.sprite) != null ? (tmp$_3.SetBlendFactor_mx4ult$(0.0), Unit) : null;
      (tmp$_4 = item.sprite) != null ? (tmp$_4.SetColor_vnjrmz$(Color$Companion_getInstance().red_mx4ult$()), Unit) : null;
      (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionFade_ntk7i0$(delay, 0.0, 1.0, null, Game$processItem$lambda_1(item)), Unit) : null;
      this.removeBlock_vux9f0$(x, y);
    }
     else if (Kotlin.isType(item, LineBombEntity)) {
      delay = this.explodeLineBlock_lwb297$(item, x, y);
    }
    return delay;
  };
  Game_0.prototype.isItemRemain = function () {
    var tmp$, tmp$_0;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        if (Kotlin.isType(this.map[x][y], ItemEntity)) {
          return true;
        }
      }
    }
    return false;
  };
  Game_0.prototype.processRemain = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        if (Kotlin.isType(this.map[x][y], LineBombEntity)) {
          this.cancelKeyInput_za3lpa$();
          this.addKeyInput_ydzd23$(x, y, true);
          return true;
        }
      }
    }
    tmp$_1 = this.gameConfigure.width - 1 | 0;
    for (var x_0 = 0; x_0 <= tmp$_1; x_0++) {
      tmp$_2 = this.gameConfigure.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_2; y_0++) {
        if (Kotlin.isType(this.map[x_0][y_0], NearBombEntity)) {
          this.cancelKeyInput_za3lpa$();
          this.addKeyInput_ydzd23$(x_0, y_0, true);
          return true;
        }
      }
    }
    tmp$_3 = this.gameConfigure.width - 1 | 0;
    for (var x_1 = 0; x_1 <= tmp$_3; x_1++) {
      tmp$_4 = this.gameConfigure.height - 1 | 0;
      for (var y_1 = 0; y_1 <= tmp$_4; y_1++) {
        if (Kotlin.isType(this.map[x_1][y_1], SameBombEntity)) {
          this.cancelKeyInput_za3lpa$();
          this.addKeyInput_ydzd23$(x_1, y_1, true);
          return true;
        }
      }
    }
    tmp$_5 = this.gameConfigure.width - 1 | 0;
    for (var x_2 = 0; x_2 <= tmp$_5; x_2++) {
      tmp$_6 = this.gameConfigure.height - 1 | 0;
      for (var y_2 = 0; y_2 <= tmp$_6; y_2++) {
        if (Kotlin.isType(this.map[x_2][y_2], ReactivateItemEntity)) {
          this.cancelKeyInput_za3lpa$();
          this.addKeyInput_ydzd23$(x_2, y_2, true);
          return true;
        }
      }
    }
    return false;
  };
  Game_0.prototype.isAllDisabled = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          if (block.GetAttribute() !== TileEntity$Attribute$disabled_getInstance()) {
            return false;
          }
        }
      }
    }
    return true;
  };
  Game_0.prototype.disabledAllBlock = function () {
    var tmp$, tmp$_0;
    var i = 0;
    for (var y = this.gameConfigure.height - 1 | 0; y >= 0; y--) {
      tmp$ = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        if (this.map[x][y] != null) {
          var block = Kotlin.isType(tmp$_0 = this.map[x][y], BlockEntity) ? tmp$_0 : null;
          if (block != null) {
            block.SetAttribute_c9f3gi$(TileEntity$Attribute$disabled_getInstance());
          }
        }
        i = i + 1 | 0;
      }
    }
  };
  function Game$dropOffAllBlock$lambda(closure$block, this$Game) {
    return function () {
      closure$block.removeBounce();
      closure$block.moveTo_mp7p4f$(closure$block.GetScreenX(), this$Game.gameConfigure.height + 1 | 0, this$Game.gameConfigure.fallingSpeed, this$Game.gameConfigure.fallingSpeedLimit, this$Game.gameConfigure.acceleration);
      closure$block.SetCheckCollide_6taknv$(false);
      return Unit;
    };
  }
  Game_0.prototype.dropOffAllBlock = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var i = 0;
    var value = Kotlin.imul(this.gameConfigure.height, this.gameConfigure.width);
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var delayFactor = 1 / FLOAT$result;
    for (var y = this.gameConfigure.height - 1 | 0; y >= 0; y--) {
      tmp$ = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        if (this.map[x][y] != null) {
          var block = Kotlin.isType(tmp$_0 = this.map[x][y], TileEntity) ? tmp$_0 : null;
          if (block != null) {
            if ((tmp$_1 = this.view.screen) != null) {
              var value_0 = i;
              var FLOAT$result_0;
              FLOAT$break: do {
                if (value_0 == null) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                if (Kotlin.isNumber(value_0)) {
                  FLOAT$result_0 = numberToDouble(value_0);
                  break FLOAT$break;
                }
                if (typeof value_0 === 'string') {
                  try {
                    var number_0 = toDouble(value_0);
                    FLOAT$result_0 = number_0;
                    break FLOAT$break;
                  }
                   catch (e) {
                    if (Kotlin.isType(e, Exception)) {
                      FLOAT$result_0 = 0.0;
                      break FLOAT$break;
                    }
                     else
                      throw e;
                  }
                }
                FLOAT$result_0 = 0.0;
              }
               while (false);
              tmp$_1.actionDelay_ab0iom$(delayFactor * FLOAT$result_0, void 0, Game$dropOffAllBlock$lambda(block, this));
            }
            this.map[x][y] = null;
            var block_0 = Kotlin.isType(tmp$_2 = block, BlockEntity) ? tmp$_2 : null;
            if (block_0 != null) {
              block_0.connectionBitMask = 0;
              block_0.removeConnection();
            }
          }
        }
        i = i + 1 | 0;
      }
    }
  };
  function Game$regenAllBlock$lambda$lambda() {
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('landing');
    return Unit;
  }
  function Game$regenAllBlock$lambda(this$Game) {
    return function () {
      var tmp$, tmp$_0;
      tmp$ = this$Game.gameConfigure.width;
      for (var i = 0; i <= tmp$; i++) {
        (tmp$_0 = this$Game.view.screen) != null ? (tmp$_0.actionDelay_ab0iom$(0.1 * i, void 0, Game$regenAllBlock$lambda$lambda), Unit) : null;
      }
      return Unit;
    };
  }
  Game_0.prototype.regenAllBlock_za3lpa$ = function (offset) {
    var tmp$, tmp$_0, tmp$_1;
    this.boardGenerator.createNewBoard_s8cxhz$();
    var result = this.boardGenerator.GetBoard();
    var board = result.first;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var value = board[x][this.gameConfigure.height - y - 1 | 0];
        var block = this.entityManager.createBlock_mwco6a$(this, value, void 0, x, offset - (x + (y * 3 | 0)) | 0);
        block.moveTo_mp7p4f$(x, 3, this.gameConfigure.fallingSpeed, this.gameConfigure.fallingSpeedLimitForNoMoreMove, this.gameConfigure.acceleration);
        this.map[x][y] = null;
        this.hintMap[x][y] = 0;
        this.clear[x][y] = 0;
      }
    }
    (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionDelay_ab0iom$(0.5, void 0, Game$regenAllBlock$lambda(this)), Unit) : null;
    var array = new Int32Array(this.gameConfigure.width);
    var tmp$_2;
    tmp$_2 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_2; i++) {
      array[i] = 0;
    }
    this.createColumn = array;
    var array_0 = Array_0(this.gameConfigure.width);
    var tmp$_3;
    tmp$_3 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_3; i_0++) {
      var array_1 = new Int32Array(this.gameConfigure.height);
      var tmp$_4;
      tmp$_4 = array_1.length - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$_4; i_1++) {
        array_1[i_1] = 0;
      }
      array_0[i_0] = array_1;
    }
    this.increaseCheck = array_0;
  };
  function Game$createScore$lambda(closure$label, this$Game) {
    return function (info) {
      var elapsed = info.elapsed;
      closure$label.SetPosition_dleff0$(closure$label.GetPosition().x, closure$label.GetPosition().y - elapsed * 100 * this$Game.view.sizeScale.yRatio);
      if (info.age > 0.5) {
        closure$label.SetAlpha_8ca0d4$(1.0 - 2 * (info.age - 0.5), true);
      }
      return true;
    };
  }
  Game_0.prototype.createScore_l4u1g4$ = function (position, score) {
    if (this.quality < 1) {
      return;
    }
    var scoreString = '';
    if ((score / 1000 | 0) > 0) {
      var value = score / 100 | 0;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var newScore = FLOAT$result / 10;
      if ((score / 100 | 0) % 10 === 0) {
        var INT$result;
        INT$break: do {
          if (newScore == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(newScore)) {
            INT$result = numberToInt(newScore);
            break INT$break;
          }
          if (typeof newScore === 'string') {
            try {
              var number_0 = toInt_0(newScore);
              INT$result = number_0;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        var value_0 = INT$result;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value_0)) {
            STRING$result = value_0.toString();
            break STRING$break;
          }
           else if (typeof value_0 === 'string') {
            STRING$result = value_0;
            break STRING$break;
          }
           else if (typeof value_0 === 'boolean') {
            STRING$result = value_0.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_0)) {
            STRING$result = value_0.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        scoreString = STRING$result + 'K';
      }
       else {
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(newScore)) {
            STRING$result_0 = newScore.toString();
            break STRING$break;
          }
           else if (typeof newScore === 'string') {
            STRING$result_0 = newScore;
            break STRING$break;
          }
           else if (typeof newScore === 'boolean') {
            STRING$result_0 = newScore.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(newScore)) {
            STRING$result_0 = newScore.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        scoreString = STRING$result_0 + 'K';
      }
    }
     else {
      var STRING$result_1;
      STRING$break: do {
        if (Kotlin.isNumber(score)) {
          STRING$result_1 = score.toString();
          break STRING$break;
        }
         else if (typeof score === 'string') {
          STRING$result_1 = score;
          break STRING$break;
        }
         else if (typeof score === 'boolean') {
          STRING$result_1 = score.toString();
          break STRING$break;
        }
         else if (Kotlin.isChar(score)) {
          STRING$result_1 = score.toString();
          break STRING$break;
        }
        STRING$result_1 = '';
      }
       while (false);
      scoreString = STRING$result_1;
    }
    var fontSize = 26.0;
    var label;
    if (score < 1000) {
      var tmp$ = position.x;
      var tmp$_0 = position.y;
      var value_1 = SceneLayer$gameEffectTop_getInstance().value;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_0 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toDouble(value_1);
            FLOAT$result_0 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      label = Label_init(tmp$, tmp$_0, FLOAT$result_0, scoreString, 'Gage/');
      label.SetBlendFactor_mx4ult$(1.0);
      label.SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$());
    }
     else {
      var tmp$_1 = position.x;
      var tmp$_2 = position.y;
      var value_2 = SceneLayer$gameEffectTop_getInstance().value;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_1 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_1 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      label = Label_init(tmp$_1, tmp$_2, FLOAT$result_1, scoreString, 'Gage/');
      label.SetColor_vnjrmz$(Color$Companion_getInstance().puzzleYellow_mx4ult$());
      label.SetBlendFactor_mx4ult$(1.0);
    }
    label.SetSize_dleff0$(-1.0, fontSize * this.view.sizeScale.yRatio);
    label.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    label.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var tmp$_3 = position.x - label.GetSize().width / 2;
    var value_3 = this.boardRect.x;
    var FLOAT$result_2;
    FLOAT$break: do {
      if (value_3 == null) {
        FLOAT$result_2 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_3)) {
        FLOAT$result_2 = numberToDouble(value_3);
        break FLOAT$break;
      }
      if (typeof value_3 === 'string') {
        try {
          var number_3 = toDouble(value_3);
          FLOAT$result_2 = number_3;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_2 = 0.0;
    }
     while (false);
    if (tmp$_3 < FLOAT$result_2) {
      var value_4 = this.boardRect.x;
      var FLOAT$result_3;
      FLOAT$break: do {
        if (value_4 == null) {
          FLOAT$result_3 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_4)) {
          FLOAT$result_3 = numberToDouble(value_4);
          break FLOAT$break;
        }
        if (typeof value_4 === 'string') {
          try {
            var number_4 = toDouble(value_4);
            FLOAT$result_3 = number_4;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_3 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_3 = 0.0;
      }
       while (false);
      position.x = FLOAT$result_3 + label.GetSize().width / 2;
      label.SetPosition_dleff0$(position.x, position.y);
    }
    if (position.x + label.GetSize().width / 2 > this.boardRect.x + this.boardRect.width) {
      var value_5 = this.boardRect.x;
      var FLOAT$result_4;
      FLOAT$break: do {
        if (value_5 == null) {
          FLOAT$result_4 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_5)) {
          FLOAT$result_4 = numberToDouble(value_5);
          break FLOAT$break;
        }
        if (typeof value_5 === 'string') {
          try {
            var number_5 = toDouble(value_5);
            FLOAT$result_4 = number_5;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_4 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_4 = 0.0;
      }
       while (false);
      position.x = FLOAT$result_4 + this.boardRect.width - label.GetSize().width / 2;
      label.SetPosition_dleff0$(position.x, position.y);
    }
    label.SetTimeToLive_mx4ult$(1.0);
    label.addUpdateCallback_sds54w$('Create Score', void 0, void 0, void 0, void 0, void 0, Game$createScore$lambda(label, this));
    this.view.addChild_g5h3xp$(label);
  };
  function Game$createTimePlus$lambda(closure$label) {
    return function (info) {
      if (info.timeToLive - info.age < 0.5) {
        closure$label.SetAlpha_8ca0d4$(1.0 - 2 * (info.timeToLive - info.age - 0.5), true);
      }
      return true;
    };
  }
  Game_0.prototype.createTimePlus_4tzqwv$ = function (position, score) {
    var scoreString = '+' + formatted_0(score) + 's';
    var fontSize = 16.0;
    var label;
    var tmp$ = position.x;
    var tmp$_0 = position.y;
    var value = SceneLayer$gameEffectTop_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    label = Label_init(tmp$, tmp$_0, FLOAT$result, scoreString, 'Gage/');
    label.SetColor_vnjrmz$(Color$Companion_getInstance().puzzleYellow_mx4ult$());
    label.SetBlendFactor_mx4ult$(1.0);
    label.SetSize_dleff0$(-1.0, fontSize * this.view.sizeScale.yRatio);
    label.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    label.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    label.SetTimeToLive_mx4ult$(2.0);
    label.addUpdateCallback_sds54w$('Create Score', void 0, void 0, void 0, void 0, void 0, Game$createTimePlus$lambda(label));
    this.view.addChild_g5h3xp$(label);
  };
  function Game$createMatchBackground_old$lambda(closure$mark) {
    return function () {
      closure$mark.SetTimeToLive_mx4ult$(0.0);
      return Unit;
    };
  }
  function Game$createMatchBackground_old$lambda_0(closure$corner) {
    return function () {
      closure$corner.SetTimeToLive_mx4ult$(0.0);
      return Unit;
    };
  }
  Game_0.prototype.createMatchBackground_old_jpdi8v$ = function (list, delay, color) {
    if (delay === void 0)
      delay = 0.5;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    if (this.quality < 1) {
      return;
    }
    var array = Array_0(this.gameConfigure.width);
    var tmp$_9;
    tmp$_9 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_9; i++) {
      var array_0 = Array_0(this.gameConfigure.height);
      var tmp$_10;
      tmp$_10 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_10; i_0++) {
        array_0[i_0] = new Pair(null, 255);
      }
      array[i] = array_0;
    }
    var temp = array;
    for (tmp$ = 0; tmp$ !== list.length; ++tmp$) {
      var entity = list[tmp$];
      var block = Kotlin.isType(tmp$_0 = entity, BlockEntity) ? tmp$_0 : null;
      if (block != null) {
        temp[block.GetScreenX()][block.GetScreenY()] = new Pair(block, 255);
      }
    }
    tmp$_1 = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$_1; x++) {
      tmp$_2 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_2; y++) {
        var entity_0 = temp[x][y].first;
        if (entity_0 != null) {
          var value = entity_0 != null ? entity_0.value : null;
          var state = 0;
          if (y > 0) {
            var up = temp[x][y - 1 | 0].first;
            if (up != null) {
              if (up.value === value) {
                state = state + 1 | 0;
              }
            }
          }
          if (y < (this.gameConfigure.height - 1 | 0)) {
            var down = temp[x][y + 1 | 0].first;
            if (down != null) {
              if (down.value === value) {
                state = state + 2 | 0;
              }
            }
          }
          if (x > 0) {
            var left = temp[x - 1 | 0][y].first;
            if (left != null) {
              if (left.value === value) {
                state = state + 4 | 0;
              }
            }
          }
          if (x < (this.gameConfigure.width - 1 | 0)) {
            var right = temp[x + 1 | 0][y].first;
            if (right != null) {
              if (right.value === value) {
                state = state + 8 | 0;
              }
            }
          }
          temp[x][y] = new Pair(temp[x][y].first, state);
          var tmp$_11 = ensureNotNull(entity_0).GetRealScreenX();
          var tmp$_12 = ensureNotNull(entity_0).GetRealScreenY();
          var value_0 = SceneLayer$gameEffectTop_getInstance().value;
          var FLOAT$result;
          FLOAT$break: do {
            if (value_0 == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_0)) {
              FLOAT$result = numberToDouble(value_0);
              break FLOAT$break;
            }
            if (typeof value_0 === 'string') {
              try {
                var number = toDouble(value_0);
                FLOAT$result = number;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          var tmp$_13 = FLOAT$result;
          var value_1 = state;
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(value_1)) {
              STRING$result = value_1.toString();
              break STRING$break;
            }
             else if (typeof value_1 === 'string') {
              STRING$result = value_1;
              break STRING$break;
            }
             else if (typeof value_1 === 'boolean') {
              STRING$result = value_1.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_1)) {
              STRING$result = value_1.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          var tmp$_14 = 'MatchBorder' + STRING$result;
          var value_2 = this.gameConfigure.tileWidthResult;
          var FLOAT$result_0;
          FLOAT$break: do {
            if (value_2 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_2)) {
              FLOAT$result_0 = numberToDouble(value_2);
              break FLOAT$break;
            }
            if (typeof value_2 === 'string') {
              try {
                var number_0 = toDouble(value_2);
                FLOAT$result_0 = number_0;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          var tmp$_15 = FLOAT$result_0;
          var value_3 = this.gameConfigure.tileHeightResult;
          var FLOAT$result_1;
          FLOAT$break: do {
            if (value_3 == null) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_3)) {
              FLOAT$result_1 = numberToDouble(value_3);
              break FLOAT$break;
            }
            if (typeof value_3 === 'string') {
              try {
                var number_1 = toDouble(value_3);
                FLOAT$result_1 = number_1;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_1 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_1 = 0.0;
          }
           while (false);
          var mark = Sprite_init(tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, FLOAT$result_1);
          mark.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          mark.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          mark.SetBlendFactor_mx4ult$(1.0);
          mark.SetColor_vnjrmz$(color);
          this.view.addChild_g5h3xp$(mark);
          mark.SetAlpha_8ca0d4$(0.0);
          (tmp$_3 = this.view.screen) != null ? (tmp$_3.actionFadeIn_hkbjms$(mark, void 0, void 0, void 0, 0.1), Unit) : null;
          (tmp$_4 = this.view.screen) != null ? (tmp$_4.actionFadeOut_7vo5wp$(mark, void 0, delay, 0.3, void 0, void 0, void 0, Game$createMatchBackground_old$lambda(mark)), Unit) : null;
        }
      }
    }
    tmp$_5 = this.gameConfigure.width - 1 | 0;
    for (var x_0 = 0; x_0 <= tmp$_5; x_0++) {
      tmp$_6 = this.gameConfigure.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_6; y_0++) {
        var entity_1 = temp[x_0][y_0].first;
        if (entity_1 != null) {
          var center = temp[x_0][y_0].second;
          if (center === 0 || center === 1 || center === 2 || center === 4 || center === 8) {
            continue;
          }
          var up_0 = 255;
          var down_0 = 255;
          var left_0 = 255;
          var right_0 = 255;
          if (y_0 > 0) {
            up_0 = temp[x_0][y_0 - 1 | 0].second;
          }
          if (y_0 < (this.gameConfigure.height - 1 | 0)) {
            down_0 = temp[x_0][y_0 + 1 | 0].second;
          }
          if (x_0 > 0) {
            left_0 = temp[x_0 - 1 | 0][y_0].second;
          }
          if (x_0 < (this.gameConfigure.width - 1 | 0)) {
            right_0 = temp[x_0 + 1 | 0][y_0].second;
          }
          var state_0 = 0;
          if ((left_0 & 1) === 0 && (up_0 & 4) === 0) {
            state_0 = state_0 + 1 | 0;
          }
          if ((right_0 & 1) === 0 && (up_0 & 8) === 0) {
            state_0 = state_0 + 2 | 0;
          }
          if ((left_0 & 2) === 0 && (down_0 & 4) === 0) {
            state_0 = state_0 + 4 | 0;
          }
          if ((right_0 & 2) === 0 && (down_0 & 8) === 0) {
            state_0 = state_0 + 8 | 0;
          }
          var tmp$_16 = entity_1.GetRealScreenX();
          var tmp$_17 = entity_1.GetRealScreenY();
          var value_4 = SceneLayer$gameEffectTop_getInstance().value;
          var FLOAT$result_2;
          FLOAT$break: do {
            if (value_4 == null) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_4)) {
              FLOAT$result_2 = numberToDouble(value_4);
              break FLOAT$break;
            }
            if (typeof value_4 === 'string') {
              try {
                var number_2 = toDouble(value_4);
                FLOAT$result_2 = number_2;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_2 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_2 = 0.0;
          }
           while (false);
          var tmp$_18 = FLOAT$result_2;
          var value_5 = state_0;
          var STRING$result_0;
          STRING$break: do {
            if (Kotlin.isNumber(value_5)) {
              STRING$result_0 = value_5.toString();
              break STRING$break;
            }
             else if (typeof value_5 === 'string') {
              STRING$result_0 = value_5;
              break STRING$break;
            }
             else if (typeof value_5 === 'boolean') {
              STRING$result_0 = value_5.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_5)) {
              STRING$result_0 = value_5.toString();
              break STRING$break;
            }
            STRING$result_0 = '';
          }
           while (false);
          var tmp$_19 = 'MatchCorner' + STRING$result_0;
          var value_6 = this.gameConfigure.tileWidthResult;
          var FLOAT$result_3;
          FLOAT$break: do {
            if (value_6 == null) {
              FLOAT$result_3 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_6)) {
              FLOAT$result_3 = numberToDouble(value_6);
              break FLOAT$break;
            }
            if (typeof value_6 === 'string') {
              try {
                var number_3 = toDouble(value_6);
                FLOAT$result_3 = number_3;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_3 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_3 = 0.0;
          }
           while (false);
          var tmp$_20 = FLOAT$result_3;
          var value_7 = this.gameConfigure.tileHeightResult;
          var FLOAT$result_4;
          FLOAT$break: do {
            if (value_7 == null) {
              FLOAT$result_4 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_7)) {
              FLOAT$result_4 = numberToDouble(value_7);
              break FLOAT$break;
            }
            if (typeof value_7 === 'string') {
              try {
                var number_4 = toDouble(value_7);
                FLOAT$result_4 = number_4;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_4 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_4 = 0.0;
          }
           while (false);
          var corner = Sprite_init(tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, FLOAT$result_4);
          corner.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          corner.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          corner.SetBlendFactor_mx4ult$(1.0);
          corner.SetColor_vnjrmz$(color);
          this.view.addChild_g5h3xp$(corner);
          corner.SetAlpha_8ca0d4$(0.0);
          (tmp$_7 = this.view.screen) != null ? (tmp$_7.actionFadeIn_hkbjms$(corner, void 0, void 0, void 0, 0.1), Unit) : null;
          (tmp$_8 = this.view.screen) != null ? (tmp$_8.actionFadeOut_7vo5wp$(corner, void 0, delay, 0.3, void 0, void 0, void 0, Game$createMatchBackground_old$lambda_0(corner)), Unit) : null;
        }
      }
    }
  };
  Game_0.prototype.createMatchBackground_jpdi8v$ = function (list, delay, color) {
    if (delay === void 0)
      delay = 0.5;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    if (this.quality < 1) {
      return;
    }
    var array = Array_0(this.gameConfigure.width);
    var tmp$_9;
    tmp$_9 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_9; i++) {
      var array_0 = Array_0(this.gameConfigure.height);
      var tmp$_10;
      tmp$_10 = array_0.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$_10; i_0++) {
        array_0[i_0] = new Pair(null, 255);
      }
      array[i] = array_0;
    }
    var temp = array;
    var matchCount = 0;
    var count = 0;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      count = 0;
      for (tmp$_0 = 0; tmp$_0 !== list.length; ++tmp$_0) {
        var entity = list[tmp$_0];
        var block = Kotlin.isType(tmp$_1 = entity, BlockEntity) ? tmp$_1 : null;
        if (block != null) {
          if (block.GetScreenX() === x) {
            count = count + 1 | 0;
            temp[x][block.GetScreenY()] = new Pair(block, 255);
          }
        }
      }
      if (count >= 3) {
        matchCount = matchCount + 1 | 0;
        var color_0;
        if (matchCount % 2 === 0) {
          color_0 = Color$Companion_getInstance().puzzleYellow_mx4ult$();
        }
         else {
          color_0 = Color$Companion_getInstance().white_mx4ult$();
        }
        this.createMatchBackgroundLine_4vdr8k$(temp, delay, ensureNotNull(color_0));
      }
      tmp$_2 = this.gameConfigure.width - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$_2; i_1++) {
        tmp$_3 = this.gameConfigure.height - 1 | 0;
        for (var j = 0; j <= tmp$_3; j++) {
          temp[i_1][j] = new Pair(null, 255);
        }
      }
    }
    tmp$_4 = this.gameConfigure.height - 1 | 0;
    for (var y = 0; y <= tmp$_4; y++) {
      count = 0;
      for (tmp$_5 = 0; tmp$_5 !== list.length; ++tmp$_5) {
        var entity_0 = list[tmp$_5];
        var block_0 = Kotlin.isType(tmp$_6 = entity_0, BlockEntity) ? tmp$_6 : null;
        if (block_0 != null) {
          if (block_0.GetScreenY() === y) {
            count = count + 1 | 0;
            temp[block_0.GetScreenX()][y] = new Pair(block_0, 255);
          }
        }
      }
      if (count >= 3) {
        matchCount = matchCount + 1 | 0;
        var color_1;
        if (matchCount % 2 === 0) {
          color_1 = Color$Companion_getInstance().puzzleYellow_mx4ult$();
        }
         else {
          color_1 = Color$Companion_getInstance().white_mx4ult$();
        }
        this.createMatchBackgroundLine_4vdr8k$(temp, delay, ensureNotNull(color_1));
      }
      tmp$_7 = this.gameConfigure.width - 1 | 0;
      for (var i_2 = 0; i_2 <= tmp$_7; i_2++) {
        tmp$_8 = this.gameConfigure.height - 1 | 0;
        for (var j_0 = 0; j_0 <= tmp$_8; j_0++) {
          temp[i_2][j_0] = new Pair(null, 255);
        }
      }
    }
  };
  function Game$createMatchBackgroundLine$lambda(closure$mark) {
    return function () {
      closure$mark.SetTimeToLive_mx4ult$(0.0);
      return Unit;
    };
  }
  function Game$createMatchBackgroundLine$lambda_0(closure$corner) {
    return function () {
      closure$corner.SetTimeToLive_mx4ult$(0.0);
      return Unit;
    };
  }
  Game_0.prototype.createMatchBackgroundLine_4vdr8k$ = function (match, delay, color) {
    if (delay === void 0)
      delay = 0.5;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var temp = match;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var entity = temp[x][y].first;
        if (entity != null) {
          var value = entity.value;
          var state = 0;
          if (y > 0) {
            var up = temp[x][y - 1 | 0].first;
            if (up != null) {
              if (up.value === value) {
                state = state + 1 | 0;
              }
            }
          }
          if (y < (this.gameConfigure.height - 1 | 0)) {
            var down = temp[x][y + 1 | 0].first;
            if (down != null) {
              if (down.value === value) {
                state = state + 2 | 0;
              }
            }
          }
          if (x > 0) {
            var left = temp[x - 1 | 0][y].first;
            if (left != null) {
              if (left.value === value) {
                state = state + 4 | 0;
              }
            }
          }
          if (x < (this.gameConfigure.width - 1 | 0)) {
            var right = temp[x + 1 | 0][y].first;
            if (right != null) {
              if (right.value === value) {
                state = state + 8 | 0;
              }
            }
          }
          temp[x][y] = new Pair(temp[x][y].first, state);
          var tmp$_5 = entity.GetRealScreenX();
          var tmp$_6 = entity.GetRealScreenY();
          var value_0 = SceneLayer$gameEffectTop_getInstance().value;
          var FLOAT$result;
          FLOAT$break: do {
            if (value_0 == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_0)) {
              FLOAT$result = numberToDouble(value_0);
              break FLOAT$break;
            }
            if (typeof value_0 === 'string') {
              try {
                var number = toDouble(value_0);
                FLOAT$result = number;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          var tmp$_7 = FLOAT$result;
          var value_1 = state;
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(value_1)) {
              STRING$result = value_1.toString();
              break STRING$break;
            }
             else if (typeof value_1 === 'string') {
              STRING$result = value_1;
              break STRING$break;
            }
             else if (typeof value_1 === 'boolean') {
              STRING$result = value_1.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_1)) {
              STRING$result = value_1.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          var tmp$_8 = 'MatchBorder' + STRING$result;
          var value_2 = this.gameConfigure.tileWidthResult;
          var FLOAT$result_0;
          FLOAT$break: do {
            if (value_2 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_2)) {
              FLOAT$result_0 = numberToDouble(value_2);
              break FLOAT$break;
            }
            if (typeof value_2 === 'string') {
              try {
                var number_0 = toDouble(value_2);
                FLOAT$result_0 = number_0;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          var tmp$_9 = FLOAT$result_0;
          var value_3 = this.gameConfigure.tileHeightResult;
          var FLOAT$result_1;
          FLOAT$break: do {
            if (value_3 == null) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_3)) {
              FLOAT$result_1 = numberToDouble(value_3);
              break FLOAT$break;
            }
            if (typeof value_3 === 'string') {
              try {
                var number_1 = toDouble(value_3);
                FLOAT$result_1 = number_1;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_1 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_1 = 0.0;
          }
           while (false);
          var mark = Sprite_init(tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, FLOAT$result_1);
          mark.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          mark.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          mark.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
          mark.SetBlendFactor_mx4ult$(1.0);
          mark.SetColor_vnjrmz$(color);
          this.view.addChild_g5h3xp$(mark);
          mark.SetAlpha_8ca0d4$(1.0);
          (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionFadeOut_7vo5wp$(mark, void 0, delay, 0.1, void 0, void 0, void 0, Game$createMatchBackgroundLine$lambda(mark)), Unit) : null;
        }
      }
    }
    tmp$_2 = this.gameConfigure.width - 1 | 0;
    for (var x_0 = 0; x_0 <= tmp$_2; x_0++) {
      tmp$_3 = this.gameConfigure.height - 1 | 0;
      for (var y_0 = 0; y_0 <= tmp$_3; y_0++) {
        var entity_0 = temp[x_0][y_0].first;
        if (entity_0 != null) {
          var center = temp[x_0][y_0].second;
          if (center === 0 || center === 1 || center === 2 || center === 4 || center === 8) {
            continue;
          }
          var up_0 = 255;
          var down_0 = 255;
          var left_0 = 255;
          var right_0 = 255;
          if (y_0 > 0) {
            up_0 = temp[x_0][y_0 - 1 | 0].second;
          }
          if (y_0 < (this.gameConfigure.height - 1 | 0)) {
            down_0 = temp[x_0][y_0 + 1 | 0].second;
          }
          if (x_0 > 0) {
            left_0 = temp[x_0 - 1 | 0][y_0].second;
          }
          if (x_0 < (this.gameConfigure.width - 1 | 0)) {
            right_0 = temp[x_0 + 1 | 0][y_0].second;
          }
          var state_0 = 0;
          if ((left_0 & 1) === 0 && (up_0 & 4) === 0) {
            state_0 = state_0 + 1 | 0;
          }
          if ((right_0 & 1) === 0 && (up_0 & 8) === 0) {
            state_0 = state_0 + 2 | 0;
          }
          if ((left_0 & 2) === 0 && (down_0 & 4) === 0) {
            state_0 = state_0 + 4 | 0;
          }
          if ((right_0 & 2) === 0 && (down_0 & 8) === 0) {
            state_0 = state_0 + 8 | 0;
          }
          var tmp$_10 = entity_0.GetRealScreenX();
          var tmp$_11 = entity_0.GetRealScreenY();
          var value_4 = SceneLayer$gameEffectTop_getInstance().value;
          var FLOAT$result_2;
          FLOAT$break: do {
            if (value_4 == null) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_4)) {
              FLOAT$result_2 = numberToDouble(value_4);
              break FLOAT$break;
            }
            if (typeof value_4 === 'string') {
              try {
                var number_2 = toDouble(value_4);
                FLOAT$result_2 = number_2;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_2 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_2 = 0.0;
          }
           while (false);
          var tmp$_12 = FLOAT$result_2;
          var value_5 = state_0;
          var STRING$result_0;
          STRING$break: do {
            if (Kotlin.isNumber(value_5)) {
              STRING$result_0 = value_5.toString();
              break STRING$break;
            }
             else if (typeof value_5 === 'string') {
              STRING$result_0 = value_5;
              break STRING$break;
            }
             else if (typeof value_5 === 'boolean') {
              STRING$result_0 = value_5.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_5)) {
              STRING$result_0 = value_5.toString();
              break STRING$break;
            }
            STRING$result_0 = '';
          }
           while (false);
          var tmp$_13 = 'MatchCorner' + STRING$result_0;
          var value_6 = this.gameConfigure.tileWidthResult;
          var FLOAT$result_3;
          FLOAT$break: do {
            if (value_6 == null) {
              FLOAT$result_3 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_6)) {
              FLOAT$result_3 = numberToDouble(value_6);
              break FLOAT$break;
            }
            if (typeof value_6 === 'string') {
              try {
                var number_3 = toDouble(value_6);
                FLOAT$result_3 = number_3;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_3 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_3 = 0.0;
          }
           while (false);
          var tmp$_14 = FLOAT$result_3;
          var value_7 = this.gameConfigure.tileHeightResult;
          var FLOAT$result_4;
          FLOAT$break: do {
            if (value_7 == null) {
              FLOAT$result_4 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_7)) {
              FLOAT$result_4 = numberToDouble(value_7);
              break FLOAT$break;
            }
            if (typeof value_7 === 'string') {
              try {
                var number_4 = toDouble(value_7);
                FLOAT$result_4 = number_4;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_4 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_4 = 0.0;
          }
           while (false);
          var corner = Sprite_init(tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, FLOAT$result_4);
          corner.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          corner.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          corner.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
          corner.SetBlendFactor_mx4ult$(1.0);
          corner.SetColor_vnjrmz$(color);
          this.view.addChild_g5h3xp$(corner);
          corner.SetAlpha_8ca0d4$(1.0);
          (tmp$_4 = this.view.screen) != null ? (tmp$_4.actionFadeOut_7vo5wp$(corner, void 0, delay, 0.1, void 0, void 0, void 0, Game$createMatchBackgroundLine$lambda_0(corner)), Unit) : null;
        }
      }
    }
  };
  function Game$createComboMark$lambda(closure$motion, this$Game, closure$label, closure$over, closure$motion2) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
      var pos = closure$motion.update_mx4ult$(info.elapsed);
      var combo = this$Game.gameValue.combo - 1 | 0;
      var tmp$_10 = 160 * this$Game.view.sizeScale.xRatio;
      var STRING$result;
      STRING$break: do {
        if (Kotlin.isNumber(combo)) {
          STRING$result = combo.toString();
          break STRING$break;
        }
         else if (typeof combo === 'string') {
          STRING$result = combo;
          break STRING$break;
        }
         else if (typeof combo === 'boolean') {
          STRING$result = combo.toString();
          break STRING$break;
        }
         else if (Kotlin.isChar(combo)) {
          STRING$result = combo.toString();
          break STRING$break;
        }
        STRING$result = '';
      }
       while (false);
      var value = STRING$result.length;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var position = Position_init(tmp$_10 + FLOAT$result * 5, this$Game.boardRect.y - this$Game.gameConfigure.tileHeightResult);
      if (info.count === 1) {
        var message = '';
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(combo)) {
            STRING$result_0 = combo.toString();
            break STRING$break;
          }
           else if (typeof combo === 'string') {
            STRING$result_0 = combo;
            break STRING$break;
          }
           else if (typeof combo === 'boolean') {
            STRING$result_0 = combo.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(combo)) {
            STRING$result_0 = combo.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        message = STRING$result_0 + local(' Combo');
        var fontSize = 30.0;
        var tmp$_11 = closure$label;
        var tmp$_12 = position.x;
        var tmp$_13 = position.y;
        var value_0 = SceneLayer$ui_getInstance().value;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        tmp$_11.v = Label_init(tmp$_12, tmp$_13, FLOAT$result_0, message, 'Gage/');
        (tmp$ = closure$label.v) != null ? (tmp$.SetSize_dleff0$(-1.0, fontSize * this$Game.view.sizeScale.yRatio), Unit) : null;
        (tmp$_0 = closure$label.v) != null ? (tmp$_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
        (tmp$_1 = closure$label.v) != null ? (tmp$_1.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
        var comboColor = [new Pair(Color$Companion_getInstance().sky_mx4ult$(), Color$Companion_getInstance().salmon_mx4ult$(0.8)), new Pair(Color$Companion_getInstance().lemon_mx4ult$(), Color$Companion_getInstance().salmon_mx4ult$(0.8)), new Pair(Color$Companion_getInstance().strawberry_mx4ult$(), Color$Companion_getInstance().salmon_mx4ult$(0.8)), new Pair(Color$Companion_getInstance().grape_mx4ult$(), Color$Companion_getInstance().salmon_mx4ult$(0.8)), new Pair(Color$Companion_getInstance().spring_mx4ult$(), Color$Companion_getInstance().salmon_mx4ult$(0.8))];
        var colorIndex = combo / 20 | 0;
        if (colorIndex >= comboColor.length) {
          colorIndex = comboColor.length - 1 | 0;
        }
        (tmp$_2 = closure$label.v) != null ? (tmp$_2.SetColor_vnjrmz$(comboColor[colorIndex].first), Unit) : null;
        (tmp$_3 = closure$label.v) != null ? (tmp$_3.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        this$Game.view.addChild_g5h3xp$(ensureNotNull(closure$label.v));
        (tmp$_4 = closure$label.v) != null ? (tmp$_4.SetChildAlpha_qiya20$(void 0, void 0, 1.0), Unit) : null;
      }
      if (this$Game.comboTimeRemain < 0.5 && closure$over.v === false) {
        closure$over.v = true;
        (tmp$_5 = this$Game.view.screen) != null ? (tmp$_5.actionFadeOut_7vo5wp$(ensureNotNull(closure$label.v), void 0, void 0, 0.5), Unit) : null;
      }
      if (closure$over.v === true) {
        var pos2 = closure$motion2.update_mx4ult$(info.elapsed);
        (tmp$_6 = closure$label.v) != null ? (tmp$_6.SetPosition_dleff0$(ensureNotNull(closure$label.v).GetPosition().x, position.y + pos2 * this$Game.view.sizeScale.yRatio), Unit) : null;
      }
      if (pos > 0.0) {
        (tmp$_7 = closure$label.v) != null ? (tmp$_7.SetScaleOriginal_mx4ult$(1.0 + pos), Unit) : null;
      }
       else if (pos <= 0) {
        (tmp$_8 = closure$label.v) != null ? (tmp$_8.SetScaleOriginal_mx4ult$(1.0), Unit) : null;
      }
      if (info.elapsed === 0.0 || this$Game.gameValue.combo === 0) {
        (tmp$_9 = closure$label.v) != null ? (tmp$_9.removeFromParent(), Unit) : null;
        return false;
      }
      return true;
    };
  }
  Game_0.prototype.createComboMark = function () {
    var label = {v: null};
    var motion = new Motion(1.0, -3.0);
    motion.SetScale_mx4ult$(1.2);
    motion.SetTimeMultiplier_mx4ult$(3.0);
    var motion2 = new Motion(0.0, -30 * this.view.sizeScale.yRatio);
    motion2.SetTimeMultiplier_mx4ult$(2.5);
    var over = {v: false};
    this.view.createAction_xcdeti$('Combo Mark', false, true, void 0, -1.0, void 0, void 0, Game$createComboMark$lambda(motion, this, label, over, motion2));
  };
  function Game$createBackgroundEffect$lambda(this$Game) {
    return function (info) {
      var value = Random_getInstance().arc4random_uniform_za3lpa$(320);
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var xxx = 0 + FLOAT$result;
      var value_0 = Random_getInstance().arc4random_uniform_za3lpa$(480);
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var yyy = 0 + FLOAT$result_0;
      var position = this$Game.view.positionUniversalToDevice_xpb3zu$(xxx, yyy);
      position.z = 100.0;
      var fixScreenZ = false;
      var color = Color$Companion_getInstance().white_mx4ult$();
      var colorPick = Random_getInstance().arc4random_uniform_za3lpa$(100);
      if (colorPick < 60) {
        fixScreenZ = true;
      }
      if (colorPick > 20 && colorPick < 50) {
        color = Color$Companion_getInstance().puzzleYellow_mx4ult$(0.8);
      }
      var tmp$ = this$Game.particleManager;
      var tmp$_0 = 5 * this$Game.view.sizeScale.xRatio;
      var tmp$_1 = (400 * 2 | 0) * this$Game.view.sizeScale.xRatio;
      var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(100);
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_1 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toDouble(value_1);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      var tmp$_2 = 3.0 + FLOAT$result_1 / 100.0;
      var tmp$_3 = color;
      var tmp$_4 = Position_init(5.0, 5.0, 100.0);
      var tmp$_5 = Position_init(50 * this$Game.view.sizeScale.xRatio, 50 * this$Game.view.sizeScale.xRatio, 100.0);
      var tmp$_6 = void 0;
      var tmp$_7 = fixScreenZ;
      var value_2 = SceneLayer$uiTop_getInstance().value;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_2 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      var fairy = tmp$.createFairy2_emwd81$(position, tmp$_0, tmp$_1, tmp$_2, 'Resource/UI/Particle', tmp$_3, tmp$_4, tmp$_5, tmp$_6, true, tmp$_7, FLOAT$result_2, this$Game.view);
      fairy != null ? (fairy.name = 'fairy') : null;
      return true;
    };
  }
  Game_0.prototype.createBackgroundEffect = function () {
    var interval = 0.15;
    if (this.quality < 2) {
      interval = 0.3;
    }
    this.view.createAction_xcdeti$('Background Effect', true, false, true, void 0, interval, void 0, Game$createBackgroundEffect$lambda(this));
  };
  Game_0.prototype.removeBackgroundEffect = function () {
    var tmp$;
    this.view.removeAction_sbe383$('Background Effect');
    tmp$ = this.particleManager.GetObjectList().iterator();
    while (tmp$.hasNext()) {
      var particle = tmp$.next();
      if (equals(particle.name, 'fairy')) {
        particle.movement.x = 0.0;
        particle.movement.y = 0.0;
        particle.movement.z = 0.0;
        particle.accel.y = -1500.0;
      }
    }
  };
  function Game$createFeverBackgroundEffect$lambda$lambda(obj, camera, elapsed) {
    if (obj.age < 0.5) {
      obj.SetOriginalAlpha_mx4ult$(obj.age * 2);
    }
     else if (obj.age > obj.timeToLive - 0.5) {
      obj.SetOriginalAlpha_mx4ult$(1.0 - (obj.age - (obj.timeToLive - 0.5)) * 2);
    }
     else {
      obj.SetOriginalAlpha_mx4ult$(1.0);
    }
    return false;
  }
  function Game$createFeverBackgroundEffect$lambda$lambda_0(obj, camera, elapsed) {
    if (obj.age < 0.5) {
      obj.SetOriginalAlpha_mx4ult$(obj.age * 2);
    }
     else if (obj.age > obj.timeToLive - 0.5) {
      obj.SetOriginalAlpha_mx4ult$(1.0 - (obj.age - (obj.timeToLive - 0.5)) * 2);
    }
     else {
      obj.SetOriginalAlpha_mx4ult$(1.0);
    }
    return false;
  }
  function Game$createFeverBackgroundEffect$lambda(this$Game, closure$accum) {
    return function (info) {
      if (info.elapsed === 0.0) {
        return false;
      }
      if (info.age < 1.0) {
        return true;
      }
      if (info.timeToLive !== -1.0 && info.age + 1 > info.timeToLive) {
        return false;
      }
      var numberForFire = 1;
      if (this$Game.quality < 2) {
        numberForFire = 6;
      }
      closure$accum.v = closure$accum.v + 1 | 0;
      if (closure$accum.v === numberForFire) {
        closure$accum.v = 0;
        var color = Color$Companion_getInstance().white_mx4ult$();
        var colorPick = Random_getInstance().arc4random_uniform_za3lpa$(100);
        if (colorPick > 20 && colorPick < 50) {
          color = Color$Companion_getInstance().puzzleYellow_mx4ult$(0.8);
        }
        var tmp$ = Random_getInstance();
        var value = this$Game.view.size.width;
        var INT$result;
        INT$break: do {
          if (value == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value)) {
            INT$result = numberToInt(value);
            break INT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toInt_0(value);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        var value_0 = tmp$.arc4random_uniform_za3lpa$(INT$result);
        var FLOAT$result;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        var xxx = FLOAT$result;
        var yyy = this$Game.view.size.height + 50;
        var tmp$_0 = this$Game.particleManager;
        var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(70);
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_0 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toDouble(value_1);
              FLOAT$result_0 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        var tmp$_1 = FLOAT$result_0 - 50;
        var value_2 = 200 + Random_getInstance().arc4random_uniform_za3lpa$(200) | 0;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_2 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_2)) {
            FLOAT$result_1 = numberToDouble(value_2);
            break FLOAT$break;
          }
          if (typeof value_2 === 'string') {
            try {
              var number_2 = toDouble(value_2);
              FLOAT$result_1 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var star = tmp$_0.createStar_2a19qk$(xxx, yyy, tmp$_1, FLOAT$result_1 * this$Game.view.sizeScale.xRatio, 'Resource/UI/Particle', color, void 0, void 0, true, true, -20.0);
        if (star != null) {
          star.timeToLive = 3.0;
          star.movement.y = -1500.0 * this$Game.view.sizeScale.yRatio;
        }
      }
      if (this$Game.quality < 1) {
        return true;
      }
      if (Random_getInstance().arc4random_uniform_za3lpa$(2) === 0) {
        var color_0 = Color$Companion_getInstance().white_mx4ult$();
        var tmp$_2 = Random_getInstance();
        var value_3 = this$Game.view.size.width;
        var INT$result_0;
        INT$break: do {
          if (value_3 == null) {
            INT$result_0 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_3)) {
            INT$result_0 = numberToInt(value_3);
            break INT$break;
          }
          if (typeof value_3 === 'string') {
            try {
              var number_3 = toInt_0(value_3);
              INT$result_0 = number_3;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_0 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_0 = 0;
        }
         while (false);
        var value_4 = tmp$_2.arc4random_uniform_za3lpa$(INT$result_0);
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_4 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_4)) {
            FLOAT$result_2 = numberToDouble(value_4);
            break FLOAT$break;
          }
          if (typeof value_4 === 'string') {
            try {
              var number_4 = toDouble(value_4);
              FLOAT$result_2 = number_4;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        var xxx_0 = FLOAT$result_2;
        var tmp$_3 = Random_getInstance();
        var value_5 = this$Game.view.size.height;
        var INT$result_1;
        INT$break: do {
          if (value_5 == null) {
            INT$result_1 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_5)) {
            INT$result_1 = numberToInt(value_5);
            break INT$break;
          }
          if (typeof value_5 === 'string') {
            try {
              var number_5 = toInt_0(value_5);
              INT$result_1 = number_5;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_1 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_1 = 0;
        }
         while (false);
        var value_6 = tmp$_3.arc4random_uniform_za3lpa$(INT$result_1);
        var FLOAT$result_3;
        FLOAT$break: do {
          if (value_6 == null) {
            FLOAT$result_3 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_6)) {
            FLOAT$result_3 = numberToDouble(value_6);
            break FLOAT$break;
          }
          if (typeof value_6 === 'string') {
            try {
              var number_6 = toDouble(value_6);
              FLOAT$result_3 = number_6;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_3 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_3 = 0.0;
        }
         while (false);
        var tmp$_4 = FLOAT$result_3;
        var value_7 = 100 * this$Game.view.sizeScale.yRatio;
        var FLOAT$result_4;
        FLOAT$break: do {
          if (value_7 == null) {
            FLOAT$result_4 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_7)) {
            FLOAT$result_4 = numberToDouble(value_7);
            break FLOAT$break;
          }
          if (typeof value_7 === 'string') {
            try {
              var number_7 = toDouble(value_7);
              FLOAT$result_4 = number_7;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_4 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_4 = 0.0;
        }
         while (false);
        var yyy_0 = tmp$_4 + FLOAT$result_4;
        var tmp$_5 = this$Game.particleManager;
        var value_8 = Random_getInstance().arc4random_uniform_za3lpa$(70) + 30 | 0;
        var FLOAT$result_5;
        FLOAT$break: do {
          if (value_8 == null) {
            FLOAT$result_5 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_8)) {
            FLOAT$result_5 = numberToDouble(value_8);
            break FLOAT$break;
          }
          if (typeof value_8 === 'string') {
            try {
              var number_8 = toDouble(value_8);
              FLOAT$result_5 = number_8;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_5 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_5 = 0.0;
        }
         while (false);
        var tmp$_6 = FLOAT$result_5;
        var value_9 = 100 + Random_getInstance().arc4random_uniform_za3lpa$(150) | 0;
        var FLOAT$result_6;
        FLOAT$break: do {
          if (value_9 == null) {
            FLOAT$result_6 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_9)) {
            FLOAT$result_6 = numberToDouble(value_9);
            break FLOAT$break;
          }
          if (typeof value_9 === 'string') {
            try {
              var number_9 = toDouble(value_9);
              FLOAT$result_6 = number_9;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_6 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_6 = 0.0;
        }
         while (false);
        var star_0 = tmp$_5.createStar_2a19qk$(xxx_0, yyy_0, tmp$_6, FLOAT$result_6 * this$Game.view.sizeScale.xRatio, 'Resource/UI/Particle', color_0, void 0, void 0, true, true, -10.0);
        if (star_0 != null) {
          star_0.timeToLive = 2.0;
          var tmp$_7 = star_0.rotation;
          var value_10 = 325 * 3 | 0;
          var FLOAT$result_7;
          FLOAT$break: do {
            if (value_10 == null) {
              FLOAT$result_7 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_10)) {
              FLOAT$result_7 = numberToDouble(value_10);
              break FLOAT$break;
            }
            if (typeof value_10 === 'string') {
              try {
                var number_10 = toDouble(value_10);
                FLOAT$result_7 = number_10;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_7 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_7 = 0.0;
          }
           while (false);
          tmp$_7.z = FLOAT$result_7;
          star_0.keepDirection = true;
          var tmp$_8 = star_0.movement;
          var value_11 = 300 + Random_getInstance().arc4random_uniform_za3lpa$(300) | 0;
          var FLOAT$result_8;
          FLOAT$break: do {
            if (value_11 == null) {
              FLOAT$result_8 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_11)) {
              FLOAT$result_8 = numberToDouble(value_11);
              break FLOAT$break;
            }
            if (typeof value_11 === 'string') {
              try {
                var number_11 = toDouble(value_11);
                FLOAT$result_8 = number_11;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_8 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_8 = 0.0;
          }
           while (false);
          tmp$_8.y = -1 * FLOAT$result_8 * this$Game.view.sizeScale.yRatio;
          star_0.SetCallback_lnidq9$(Game$createFeverBackgroundEffect$lambda$lambda);
        }
      }
      var number_12 = 0;
      if (number_12 < 4) {
        var tmp$_9 = Random_getInstance();
        var value_12 = this$Game.view.size.width;
        var INT$result_2;
        INT$break: do {
          if (value_12 == null) {
            INT$result_2 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_12)) {
            INT$result_2 = numberToInt(value_12);
            break INT$break;
          }
          if (typeof value_12 === 'string') {
            try {
              var number_13 = toInt_0(value_12);
              INT$result_2 = number_13;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_2 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_2 = 0;
        }
         while (false);
        var value_13 = tmp$_9.arc4random_uniform_za3lpa$(INT$result_2);
        var FLOAT$result_9;
        FLOAT$break: do {
          if (value_13 == null) {
            FLOAT$result_9 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_13)) {
            FLOAT$result_9 = numberToDouble(value_13);
            break FLOAT$break;
          }
          if (typeof value_13 === 'string') {
            try {
              var number_14 = toDouble(value_13);
              FLOAT$result_9 = number_14;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_9 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_9 = 0.0;
        }
         while (false);
        var xxx_1 = FLOAT$result_9;
        var tmp$_10 = Random_getInstance();
        var value_14 = this$Game.view.size.height;
        var INT$result_3;
        INT$break: do {
          if (value_14 == null) {
            INT$result_3 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_14)) {
            INT$result_3 = numberToInt(value_14);
            break INT$break;
          }
          if (typeof value_14 === 'string') {
            try {
              var number_15 = toInt_0(value_14);
              INT$result_3 = number_15;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_3 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_3 = 0;
        }
         while (false);
        var value_15 = tmp$_10.arc4random_uniform_za3lpa$(INT$result_3);
        var FLOAT$result_10;
        FLOAT$break: do {
          if (value_15 == null) {
            FLOAT$result_10 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_15)) {
            FLOAT$result_10 = numberToDouble(value_15);
            break FLOAT$break;
          }
          if (typeof value_15 === 'string') {
            try {
              var number_16 = toDouble(value_15);
              FLOAT$result_10 = number_16;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_10 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_10 = 0.0;
        }
         while (false);
        var tmp$_11 = FLOAT$result_10;
        var value_16 = 100 * this$Game.view.sizeScale.yRatio;
        var FLOAT$result_11;
        FLOAT$break: do {
          if (value_16 == null) {
            FLOAT$result_11 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_16)) {
            FLOAT$result_11 = numberToDouble(value_16);
            break FLOAT$break;
          }
          if (typeof value_16 === 'string') {
            try {
              var number_17 = toDouble(value_16);
              FLOAT$result_11 = number_17;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_11 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_11 = 0.0;
        }
         while (false);
        var yyy_1 = tmp$_11 + FLOAT$result_11;
        var tmp$_12 = this$Game.particleManager;
        var tmp$_13 = -50.0;
        var value_17 = 100 + Random_getInstance().arc4random_uniform_za3lpa$(50) | 0;
        var FLOAT$result_12;
        FLOAT$break: do {
          if (value_17 == null) {
            FLOAT$result_12 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_17)) {
            FLOAT$result_12 = numberToDouble(value_17);
            break FLOAT$break;
          }
          if (typeof value_17 === 'string') {
            try {
              var number_18 = toDouble(value_17);
              FLOAT$result_12 = number_18;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_12 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_12 = 0.0;
        }
         while (false);
        var star_1 = tmp$_12.createStar_2a19qk$(xxx_1, yyy_1, tmp$_13, FLOAT$result_12 * this$Game.view.sizeScale.xRatio, 'Resource/UI/Particle', void 0, 1, void 0, true, true, -10.0);
        if (star_1 != null) {
          var tmp$_14 = star_1.movement;
          var value_18 = 400 + Random_getInstance().arc4random_uniform_za3lpa$(500) | 0;
          var FLOAT$result_13;
          FLOAT$break: do {
            if (value_18 == null) {
              FLOAT$result_13 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_18)) {
              FLOAT$result_13 = numberToDouble(value_18);
              break FLOAT$break;
            }
            if (typeof value_18 === 'string') {
              try {
                var number_19 = toDouble(value_18);
                FLOAT$result_13 = number_19;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_13 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_13 = 0.0;
          }
           while (false);
          tmp$_14.y = -1 * FLOAT$result_13 * this$Game.view.sizeScale.yRatio;
          star_1.timeToLive = 2.0;
          star_1.SetCallback_lnidq9$(Game$createFeverBackgroundEffect$lambda$lambda_0);
        }
      }
      return true;
    };
  }
  Game_0.prototype.createFeverBackgroundEffect = function () {
    var interval = 0.05;
    if (this.quality < 2) {
      interval = 0.1;
    }
    var accum = {v: 0};
    this.view.createAction_xcdeti$('Fever Background', void 0, void 0, void 0, void 0, interval, void 0, Game$createFeverBackgroundEffect$lambda(this, accum));
  };
  Game_0.prototype.removeFeverBackgroundEffect = function () {
    this.view.removeAction_sbe383$('Fever Background');
  };
  function Game$createFeverMark$lambda$lambda(this$Game) {
    return function () {
      SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this$Game.view.screen), 'FeverBGM', void 0, 0.5);
      return Unit;
    };
  }
  function Game$createFeverMark$lambda$lambda$lambda(closure$bg) {
    return function () {
      closure$bg.SetTimeToLive_mx4ult$(0.0);
      return Unit;
    };
  }
  function Game$createFeverMark$lambda$lambda_0(this$Game, closure$bg) {
    return function () {
      var tmp$;
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionFadeOut_7vo5wp$(closure$bg, 0.6, 1.5, 0.3, void 0, void 0, void 0, Game$createFeverMark$lambda$lambda$lambda(closure$bg)), Unit) : null;
      return Unit;
    };
  }
  function Game$createFeverMark$lambda(this$Game, closure$label, closure$motion) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
      if (info.count === 1) {
        if (this$Game.quality >= 1) {
          this$Game.removeBackgroundEffect();
          this$Game.createFeverBackgroundEffect();
        }
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$Game.view.screen), 'MainBGM', void 0, 0.5, Game$createFeverMark$lambda$lambda(this$Game));
        var tmp$_7 = this$Game.view;
        var tmp$_8 = 100.0 + this$Game.bannerOffset / this$Game.view.sizeScale.yRatio;
        var value = SceneLayer$uiTop_getInstance().value;
        var FLOAT$result;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        var bg = tmp$_7.createSprite_591x4d$(0.0, tmp$_8, FLOAT$result, null, 320.0, 100.0, void 0, void 0, false);
        bg.SetColor_vnjrmz$(Color$Companion_getInstance().black_mx4ult$(0.0));
        bg.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        bg.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
        (tmp$ = this$Game.view.screen) != null ? (tmp$.actionFadeIn_hkbjms$(bg, 0.0, 0.6, 0.0, 0.3, void 0, void 0, void 0, Game$createFeverMark$lambda$lambda_0(this$Game, bg)), Unit) : null;
        var tmp$_9 = closure$label;
        var tmp$_10 = this$Game.view;
        var tmp$_11 = 100.0 + this$Game.bannerOffset / this$Game.view.sizeScale.yRatio;
        var value_0 = SceneLayer$uiTop_getInstance().value;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        tmp$_9.v = tmp$_10.createSprite_591x4d$(0.0, tmp$_11, FLOAT$result_0, 'Resource/UI/FEVER', 260.0);
        (tmp$_0 = closure$label.v) != null ? (tmp$_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
        (tmp$_1 = closure$label.v) != null ? (tmp$_1.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
        (tmp$_2 = closure$label.v) != null ? (tmp$_2.SetPosition_dleff0$(-1 * ensureNotNull(closure$label.v).GetSize().width / 2, ensureNotNull(closure$label.v).GetPosition().y), Unit) : null;
        (tmp$_3 = closure$label.v) != null ? (tmp$_3.SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$()), Unit) : null;
        (tmp$_4 = closure$label.v) != null ? (tmp$_4.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        (tmp$_5 = closure$label.v) != null ? (tmp$_5.SetTimeToLive_mx4ult$(2.0), Unit) : null;
        this$Game.view.addChild_g5h3xp$(ensureNotNull(closure$label.v));
        closure$motion.SetTarget_nfvrp9$(160.0 * this$Game.view.sizeScale.xRatio + ensureNotNull(closure$label.v).GetSize().width / 2, -10.0, 0.3, true, 1.5);
      }
      var pos = closure$motion.update_mx4ult$(info.elapsed);
      (tmp$_6 = closure$label.v) != null ? (tmp$_6.SetPosition_dleff0$(-1 * ensureNotNull(closure$label.v).GetSize().width / 2 + pos, ensureNotNull(closure$label.v).GetPosition().y), Unit) : null;
      return true;
    };
  }
  Game_0.prototype.createFeverMark = function () {
    var label = {v: null};
    var motion = new Motion();
    this.view.createAction_xcdeti$('Fever Mark', true, void 0, void 0, 2.0, void 0, void 0, Game$createFeverMark$lambda(this, label, motion));
  };
  function Game$createMainScore$lambda(this$Game, closure$scoreLabel, closure$fontSize, closure$targetScore, closure$motion, closure$currentScore) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
      if (info.count === 1) {
        var y = 30.0 + this$Game.bannerOffset / this$Game.view.sizeScale.yRatio;
        this$Game.view.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        this$Game.view.SetFontName_61zpoe$('BigScore/');
        closure$scoreLabel.v = this$Game.view.createLabel_17tgk7$(160.0, y, SceneLayer$uiBottom_getInstance(), '0', null, false, null, null, false);
        (tmp$ = closure$scoreLabel.v) != null ? (tmp$.SetColor_vnjrmz$(Color$Companion_getInstance().puzzleYellow_mx4ult$()), Unit) : null;
        (tmp$_0 = closure$scoreLabel.v) != null ? (tmp$_0.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        (tmp$_1 = closure$scoreLabel.v) != null ? (tmp$_1.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
        (tmp$_2 = closure$scoreLabel.v) != null ? (tmp$_2.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance()), Unit) : null;
        (tmp$_3 = closure$scoreLabel.v) != null ? (tmp$_3.SetText_61zpoe$('0'), Unit) : null;
        (tmp$_4 = closure$scoreLabel.v) != null ? (tmp$_4.SetSize_dleff0$(-1.0, closure$fontSize * this$Game.view.sizeScale.yRatio), Unit) : null;
        return true;
      }
      if (closure$targetScore.v !== this$Game.gameValue.score) {
        closure$targetScore.v = this$Game.gameValue.score;
        var tmp$_8 = closure$motion;
        var tmp$_9 = void 0;
        var tmp$_10 = void 0;
        var value = closure$currentScore.v;
        var FLOAT$result;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        tmp$_8.reset_y2kzbl$(tmp$_9, tmp$_10, FLOAT$result);
        var tmp$_11 = closure$motion;
        var value_0 = closure$targetScore.v;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        tmp$_11.SetTarget_nfvrp9$(FLOAT$result_0, -50.0, 1.5, void 0, -1.0);
      }
      if (closure$currentScore.v < closure$targetScore.v) {
        var tmp$_12 = closure$currentScore;
        var value_1 = closure$motion.update_mx4ult$(info.elapsed);
        var INT$result;
        INT$break: do {
          if (value_1 == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            INT$result = numberToInt(value_1);
            break INT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toInt_0(value_1);
              INT$result = number_1;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        tmp$_12.v = INT$result;
        if (closure$currentScore.v > closure$targetScore.v) {
          closure$currentScore.v = closure$targetScore.v;
        }
        var number_2 = formatted(closure$currentScore.v);
        (tmp$_5 = closure$scoreLabel.v) != null ? (tmp$_5.SetText_61zpoe$(number_2), Unit) : null;
        if (number_2.length > 5) {
          if ((tmp$_6 = closure$scoreLabel.v) != null) {
            var tmp$_13 = -1.0;
            var tmp$_14 = closure$fontSize * this$Game.view.sizeScale.yRatio;
            var value_2 = number_2.length - 5 | 0;
            var FLOAT$result_1;
            FLOAT$break: do {
              if (value_2 == null) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_2)) {
                FLOAT$result_1 = numberToDouble(value_2);
                break FLOAT$break;
              }
              if (typeof value_2 === 'string') {
                try {
                  var number_3 = toDouble(value_2);
                  FLOAT$result_1 = number_3;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_1 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_1 = 0.0;
            }
             while (false);
            var tmp$_15 = FLOAT$result_1;
            var FLOAT$result_2;
            FLOAT$break: do {
              if (25 == null) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(25)) {
                FLOAT$result_2 = numberToDouble(25);
                break FLOAT$break;
              }
              if (typeof 25 === 'string') {
                try {
                  var number_4 = toDouble(25);
                  FLOAT$result_2 = number_4;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_2 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_2 = 0.0;
            }
             while (false);
            tmp$_6.SetSize_dleff0$(tmp$_13, tmp$_14 * (1.0 - tmp$_15 / FLOAT$result_2));
          }
        }
         else {
          (tmp$_7 = closure$scoreLabel.v) != null ? (tmp$_7.SetSize_dleff0$(-1.0, closure$fontSize * this$Game.view.sizeScale.yRatio), Unit) : null;
        }
      }
      return true;
    };
  }
  Game_0.prototype.createMainScore = function () {
    var scoreLabel = {v: null};
    var fontScale = 0.6;
    var fontSize = 50.0;
    var currentScore = {v: 0};
    var targetScore = {v: 0};
    var motion = new Motion();
    this.view.createAction_xcdeti$('Main Score', void 0, void 0, void 0, void 0, void 0, void 0, Game$createMainScore$lambda(this, scoreLabel, fontSize, targetScore, motion, currentScore));
  };
  function Game$createTimeBar$lambda(this$Game, closure$x, closure$y, closure$width, closure$height, closure$mask, closure$gageBar, closure$currentTime, closure$targetTime, closure$gageLabel, closure$prevBlockDisableTime) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24;
      if (info.count === 1) {
        var tmp$_25 = closure$mask;
        var tmp$_26 = this$Game.view;
        var tmp$_27 = closure$x;
        var tmp$_28 = closure$y;
        var value = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        tmp$_25.v = tmp$_26.createMask_jga54f$(tmp$_27, tmp$_28, FLOAT$result, this$Game.gameConfigure.uiFolder + 'fever_board', closure$width.v, closure$height.v, void 0, void 0, false, void 0, void 0, false);
        (tmp$ = closure$mask.v) != null ? (tmp$.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
        (tmp$_0 = closure$mask.v) != null ? (tmp$_0.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance()), Unit) : null;
        var tmp$_29 = this$Game.view;
        var tmp$_30 = closure$x - closure$width.v * 0.5;
        var tmp$_31 = closure$y;
        var value_0 = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        var left = tmp$_29.createSprite_591x4d$(tmp$_30, tmp$_31, FLOAT$result_0, this$Game.gameConfigure.uiFolder + 'fever_board_left', -1.0, closure$height.v, void 0, void 0, false, false);
        left.SetHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
        left.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        var tmp$_32 = this$Game.view;
        var tmp$_33 = closure$x + closure$width.v * 0.5;
        var tmp$_34 = closure$y;
        var value_1 = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_1 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toDouble(value_1);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var right = tmp$_32.createSprite_591x4d$(tmp$_33, tmp$_34, FLOAT$result_1, this$Game.gameConfigure.uiFolder + 'fever_board_right', -1.0, closure$height.v, void 0, void 0, false, false);
        right.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
        right.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        closure$width.v = ensureNotNull(closure$mask.v).GetSize().width;
        closure$height.v = ensureNotNull(closure$mask.v).GetSize().height;
        var gageBoard = Sprite_init(0.0, 0.0, void 0, this$Game.gameConfigure.uiFolder + 'fever_board', closure$width.v, closure$height.v);
        gageBoard.SetBlendFactor_mx4ult$(1.0);
        (tmp$_1 = closure$mask.v) != null ? (tmp$_1.addChild_g5h3xp$(gageBoard), Unit) : null;
        closure$gageBar.v = Sprite_init(0.0, closure$height.v * 0.2, void 0, this$Game.gameConfigure.uiFolder + 'timer_gage', closure$width.v, closure$height.v * 0.6);
        (tmp$_2 = closure$gageBar.v) != null ? (tmp$_2.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        (tmp$_3 = closure$mask.v) != null ? (tmp$_3.addChild_g5h3xp$(ensureNotNull(closure$gageBar.v)), Unit) : null;
        closure$currentTime.v = this$Game.gameValue.gameTime;
        var tmp$_35 = closure$targetTime;
        var value_2 = closure$currentTime.v;
        var INT$result;
        INT$break: do {
          if (value_2 == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_2)) {
            INT$result = numberToInt(value_2);
            break INT$break;
          }
          if (typeof value_2 === 'string') {
            try {
              var number_2 = toInt_0(value_2);
              INT$result = number_2;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        tmp$_35.v = INT$result;
        this$Game.view.SetFontName_61zpoe$('Gage/');
        if (this$Game.gameConfigure.blockDisablePeriodically === true) {
          this$Game.view.SetFontHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          this$Game.view.SetFontVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          var str = this$Game.gameValue.blockDisableTime.toString();
          var index = indexOf(str, '.') + 3 | 0;
          if (index > str.length) {
            index = str.length;
            str += '.00';
          }
          var $receiver = str;
          var endIndex = index;
          str = $receiver.substring(0, endIndex);
          closure$gageLabel.v = this$Game.view.createLabel_17tgk7$(closure$width.v / 2, closure$height.v / 2, void 0, str, closure$mask.v);
          (tmp$_4 = closure$gageLabel.v) != null ? (tmp$_4.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
          (tmp$_5 = closure$gageLabel.v) != null ? (tmp$_5.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
          (tmp$_6 = closure$gageLabel.v) != null ? (tmp$_6.SetBlendFactor_mx4ult$(1.0), Unit) : null;
          (tmp$_7 = closure$gageLabel.v) != null ? (tmp$_7.SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$()), Unit) : null;
          closure$prevBlockDisableTime.v = this$Game.gameValue.blockDisableTime;
        }
        if (this$Game.gameConfigure.limitGameTime === true) {
          this$Game.view.SetFontHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          this$Game.view.SetFontVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          var value_3 = this$Game.gameValue.gameTime;
          var INT$result_0;
          INT$break: do {
            if (value_3 == null) {
              INT$result_0 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value_3)) {
              INT$result_0 = numberToInt(value_3);
              break INT$break;
            }
            if (typeof value_3 === 'string') {
              try {
                var number_3 = toInt_0(value_3);
                INT$result_0 = number_3;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_0 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_0 = 0;
          }
           while (false);
          var value_4 = INT$result_0 % 60;
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(value_4)) {
              STRING$result = value_4.toString();
              break STRING$break;
            }
             else if (typeof value_4 === 'string') {
              STRING$result = value_4;
              break STRING$break;
            }
             else if (typeof value_4 === 'boolean') {
              STRING$result = value_4.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_4)) {
              STRING$result = value_4.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          var seconds = STRING$result;
          if (seconds.length === 1) {
            seconds = '0' + seconds;
          }
          var tmp$_36 = closure$gageLabel;
          var tmp$_37 = this$Game.view;
          var tmp$_38 = closure$width.v / 2;
          var tmp$_39 = closure$height.v / 2;
          var tmp$_40 = void 0;
          var value_5 = this$Game.gameValue.gameTime;
          var INT$result_1;
          INT$break: do {
            if (value_5 == null) {
              INT$result_1 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value_5)) {
              INT$result_1 = numberToInt(value_5);
              break INT$break;
            }
            if (typeof value_5 === 'string') {
              try {
                var number_4 = toInt_0(value_5);
                INT$result_1 = number_4;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_1 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_1 = 0;
          }
           while (false);
          var value_6 = INT$result_1 / 60 | 0;
          var STRING$result_0;
          STRING$break: do {
            if (Kotlin.isNumber(value_6)) {
              STRING$result_0 = value_6.toString();
              break STRING$break;
            }
             else if (typeof value_6 === 'string') {
              STRING$result_0 = value_6;
              break STRING$break;
            }
             else if (typeof value_6 === 'boolean') {
              STRING$result_0 = value_6.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_6)) {
              STRING$result_0 = value_6.toString();
              break STRING$break;
            }
            STRING$result_0 = '';
          }
           while (false);
          tmp$_36.v = tmp$_37.createLabel_17tgk7$(tmp$_38, tmp$_39, tmp$_40, STRING$result_0 + ':' + seconds, closure$mask.v);
          (tmp$_8 = closure$gageLabel.v) != null ? (tmp$_8.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
          (tmp$_9 = closure$gageLabel.v) != null ? (tmp$_9.SetBlendFactor_mx4ult$(1.0), Unit) : null;
          (tmp$_10 = closure$gageLabel.v) != null ? (tmp$_10.SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$()), Unit) : null;
        }
      }
      (tmp$_11 = closure$gageLabel.v) != null ? (tmp$_11.SetName_61zpoe$('Timer Label'), Unit) : null;
      if (this$Game.gameConfigure.blockDisablePeriodically === true) {
        var percent = this$Game.blockDisableTimeRemain / this$Game.gameValue.blockDisableTime;
        (tmp$_12 = closure$gageBar.v) != null ? (tmp$_12.SetPosition_dleff0$(-1 * closure$width.v + percent * closure$width.v, ensureNotNull(closure$gageBar.v).GetPosition().y), Unit) : null;
        if (closure$prevBlockDisableTime.v !== this$Game.gameValue.blockDisableTime) {
          if (this$Game.gameValue.blockDisableTime === this$Game.gameConfigure.minimumTimeForBlockDisableTime) {
            (tmp$_13 = closure$gageLabel.v) != null ? (tmp$_13.SetColor_vnjrmz$(Color$Companion_getInstance().puzzlePurple_mx4ult$()), Unit) : null;
          }
          if ((tmp$_14 = closure$gageLabel.v) != null) {
            var value_7 = this$Game.gameValue.blockDisableTime;
            var STRING$result_1;
            STRING$break: do {
              if (Kotlin.isNumber(value_7)) {
                STRING$result_1 = value_7.toString();
                break STRING$break;
              }
               else if (typeof value_7 === 'string') {
                STRING$result_1 = value_7;
                break STRING$break;
              }
               else if (typeof value_7 === 'boolean') {
                STRING$result_1 = value_7.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(value_7)) {
                STRING$result_1 = value_7.toString();
                break STRING$break;
              }
              STRING$result_1 = '';
            }
             while (false);
            tmp$_14.SetText_61zpoe$(STRING$result_1);
          }
          (tmp$_15 = closure$gageLabel.v) != null ? (tmp$_15.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
          closure$prevBlockDisableTime.v = this$Game.gameValue.blockDisableTime;
        }
      }
      if (this$Game.gameConfigure.resetTimeEveryClear === true) {
        var timeRemain = this$Game.gameValue.gameTime - this$Game.gameTimeElapsed;
        if (timeRemain <= 0) {
          timeRemain = 0.0;
          (tmp$_16 = closure$gageLabel.v) != null ? (tmp$_16.SetText_61zpoe$('0:00'), Unit) : null;
        }
        var percent_0 = timeRemain / this$Game.gameValue.gameTime;
        (tmp$_17 = closure$gageBar.v) != null ? (tmp$_17.SetPosition_dleff0$(-1 * closure$width.v + percent_0 * closure$width.v, ensureNotNull(closure$gageBar.v).GetPosition().y), Unit) : null;
        if ((tmp$_18 = closure$gageLabel.v) != null) {
          var value_8 = timeRemain + 0.99;
          var INT$result_2;
          INT$break: do {
            if (value_8 == null) {
              INT$result_2 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value_8)) {
              INT$result_2 = numberToInt(value_8);
              break INT$break;
            }
            if (typeof value_8 === 'string') {
              try {
                var number_5 = toInt_0(value_8);
                INT$result_2 = number_5;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_2 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_2 = 0;
          }
           while (false);
          var value_9 = INT$result_2;
          var STRING$result_2;
          STRING$break: do {
            if (Kotlin.isNumber(value_9)) {
              STRING$result_2 = value_9.toString();
              break STRING$break;
            }
             else if (typeof value_9 === 'string') {
              STRING$result_2 = value_9;
              break STRING$break;
            }
             else if (typeof value_9 === 'boolean') {
              STRING$result_2 = value_9.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_9)) {
              STRING$result_2 = value_9.toString();
              break STRING$break;
            }
            STRING$result_2 = '';
          }
           while (false);
          tmp$_18.SetText_61zpoe$(STRING$result_2);
        }
        (tmp$_19 = closure$gageLabel.v) != null ? (tmp$_19.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
      }
       else if (this$Game.gameConfigure.limitGameTime === true) {
        var timeRemain_0 = this$Game.gameRemainTime;
        if (timeRemain_0 <= 0) {
          timeRemain_0 = 0.0;
          (tmp$_20 = closure$gageLabel.v) != null ? (tmp$_20.SetText_61zpoe$('0:00'), Unit) : null;
          (tmp$_21 = closure$gageLabel.v) != null ? (tmp$_21.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
        }
        var value_10 = timeRemain_0;
        var INT$result_3;
        INT$break: do {
          if (value_10 == null) {
            INT$result_3 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_10)) {
            INT$result_3 = numberToInt(value_10);
            break INT$break;
          }
          if (typeof value_10 === 'string') {
            try {
              var number_6 = toInt_0(value_10);
              INT$result_3 = number_6;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_3 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_3 = 0;
        }
         while (false);
        if (INT$result_3 !== closure$targetTime.v) {
          var tmp$_41 = closure$targetTime;
          var value_11 = timeRemain_0;
          var INT$result_4;
          INT$break: do {
            if (value_11 == null) {
              INT$result_4 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value_11)) {
              INT$result_4 = numberToInt(value_11);
              break INT$break;
            }
            if (typeof value_11 === 'string') {
              try {
                var number_7 = toInt_0(value_11);
                INT$result_4 = number_7;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_4 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_4 = 0;
          }
           while (false);
          tmp$_41.v = INT$result_4;
          var value_12 = closure$targetTime.v + 1 | 0;
          var INT$result_5;
          INT$break: do {
            if (value_12 == null) {
              INT$result_5 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value_12)) {
              INT$result_5 = numberToInt(value_12);
              break INT$break;
            }
            if (typeof value_12 === 'string') {
              try {
                var number_8 = toInt_0(value_12);
                INT$result_5 = number_8;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_5 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_5 = 0;
          }
           while (false);
          var value_13 = INT$result_5 % 60;
          var STRING$result_3;
          STRING$break: do {
            if (Kotlin.isNumber(value_13)) {
              STRING$result_3 = value_13.toString();
              break STRING$break;
            }
             else if (typeof value_13 === 'string') {
              STRING$result_3 = value_13;
              break STRING$break;
            }
             else if (typeof value_13 === 'boolean') {
              STRING$result_3 = value_13.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_13)) {
              STRING$result_3 = value_13.toString();
              break STRING$break;
            }
            STRING$result_3 = '';
          }
           while (false);
          var seconds_0 = STRING$result_3;
          if (seconds_0.length === 1) {
            seconds_0 = '0' + seconds_0;
          }
          if ((tmp$_22 = closure$gageLabel.v) != null) {
            var value_14 = closure$targetTime.v + 1 | 0;
            var INT$result_6;
            INT$break: do {
              if (value_14 == null) {
                INT$result_6 = 0;
                break INT$break;
              }
              if (Kotlin.isNumber(value_14)) {
                INT$result_6 = numberToInt(value_14);
                break INT$break;
              }
              if (typeof value_14 === 'string') {
                try {
                  var number_9 = toInt_0(value_14);
                  INT$result_6 = number_9;
                  break INT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    INT$result_6 = 0;
                    break INT$break;
                  }
                   else
                    throw e;
                }
              }
              INT$result_6 = 0;
            }
             while (false);
            var value_15 = INT$result_6 / 60 | 0;
            var STRING$result_4;
            STRING$break: do {
              if (Kotlin.isNumber(value_15)) {
                STRING$result_4 = value_15.toString();
                break STRING$break;
              }
               else if (typeof value_15 === 'string') {
                STRING$result_4 = value_15;
                break STRING$break;
              }
               else if (typeof value_15 === 'boolean') {
                STRING$result_4 = value_15.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(value_15)) {
                STRING$result_4 = value_15.toString();
                break STRING$break;
              }
              STRING$result_4 = '';
            }
             while (false);
            tmp$_22.SetText_61zpoe$(STRING$result_4 + ':' + seconds_0);
          }
          (tmp$_23 = closure$gageLabel.v) != null ? (tmp$_23.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
        }
        var tmp$_42 = this$Game.gameRemainTime;
        var value_16 = this$Game.gameValue.gameTime;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_16 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_16)) {
            FLOAT$result_2 = numberToDouble(value_16);
            break FLOAT$break;
          }
          if (typeof value_16 === 'string') {
            try {
              var number_10 = toDouble(value_16);
              FLOAT$result_2 = number_10;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        var percent_1 = tmp$_42 / FLOAT$result_2;
        if (percent_1 >= 0) {
          (tmp$_24 = closure$gageBar.v) != null ? (tmp$_24.SetPosition_dleff0$(-1 * closure$width.v + percent_1 * closure$width.v, ensureNotNull(closure$gageBar.v).GetPosition().y), Unit) : null;
        }
        if (timeRemain_0 <= 5) {
          if (this$Game.timerSoundFired === false) {
            SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('timer', -1);
            this$Game.timerSoundFired = true;
          }
        }
      }
      return true;
    };
  }
  Game_0.prototype.createTimeBar = function () {
    var mask = {v: null};
    var gageBar = {v: null};
    var gageLabel = {v: null};
    var prevBlockDisableTime = {v: 0.0};
    var currentTime = {v: 0.0};
    var targetTime = {v: 0};
    var motion = new Motion();
    var value = this.gameConfigure.width;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var width = {v: this.gameConfigure.tileWidthResult * FLOAT$result - this.gameConfigure.tileWidthGap * 4};
    var height = {v: this.gameConfigure.bottomGaugeHeight};
    var position = this.view.positionDeviceToUniversal_xpb3zu$(0.0, this.boardRect.y + this.boardRect.height + this.gameConfigure.tileHeightGap);
    var size = this.view.positionDeviceToUniversal_xpb3zu$(width.v, height.v);
    var x = 160.0;
    var y = position.y;
    width.v = size.x;
    height.v = size.y;
    this.view.createAction_xcdeti$('Time Bar', void 0, void 0, void 0, void 0, void 0, void 0, Game$createTimeBar$lambda(this, x, y, width, height, mask, gageBar, currentTime, targetTime, gageLabel, prevBlockDisableTime));
  };
  function Game$createFeverGage$lambda$lambda(closure$state, closure$motion, closure$currentGage, closure$targetGage, closure$gageLabel, this$Game, closure$gageBar) {
    return function () {
      var tmp$, tmp$_0;
      closure$state.v = 3;
      var tmp$_1 = closure$motion;
      var tmp$_2 = void 0;
      var tmp$_3 = void 0;
      var value = closure$currentGage.v;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      tmp$_1.reset_y2kzbl$(tmp$_2, tmp$_3, FLOAT$result);
      var tmp$_4 = closure$motion;
      var value_0 = closure$targetGage.v;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      tmp$_4.SetTarget_nfvrp9$(FLOAT$result_0, -50.0, 0.5, void 0, -1.0);
      if ((tmp$ = closure$gageLabel.v) != null) {
        var value_1 = this$Game.gameValue.feverLevel;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value_1)) {
            STRING$result = value_1.toString();
            break STRING$break;
          }
           else if (typeof value_1 === 'string') {
            STRING$result = value_1;
            break STRING$break;
          }
           else if (typeof value_1 === 'boolean') {
            STRING$result = value_1.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_1)) {
            STRING$result = value_1.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        tmp$.SetText_61zpoe$(STRING$result);
      }
      (tmp$_0 = closure$gageLabel.v) != null ? (tmp$_0.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
      return Unit;
    };
  }
  function Game$createFeverGage$lambda$lambda$lambda(this$) {
    return function () {
      if (this$.gameOverFlag === false) {
        SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this$.view.screen), 'MainBGM', void 0, 0.5);
      }
      return Unit;
    };
  }
  function Game$createFeverGage$lambda$lambda$lambda_0(closure$state, this$, closure$targetGage, closure$motion, closure$currentGage) {
    return function () {
      closure$state.v = 1;
      closure$targetGage.v = this$.gameValue.feverGage;
      var tmp$ = closure$motion;
      var tmp$_0 = void 0;
      var tmp$_1 = void 0;
      var value = closure$currentGage.v;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      tmp$.reset_y2kzbl$(tmp$_0, tmp$_1, FLOAT$result);
      var tmp$_2 = closure$motion;
      var value_0 = closure$targetGage.v;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      tmp$_2.SetTarget_nfvrp9$(FLOAT$result_0, -50.0, 0.5, void 0, -1.0);
      return Unit;
    };
  }
  function Game$createFeverGage$lambda(this$Game, closure$x, closure$y, closure$width, closure$height, closure$mask, closure$gageBar, closure$gageLabel, closure$currentLevel, closure$state, closure$targetGage, closure$motion, closure$currentGage, closure$prev) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
      if (info.count === 1) {
        var tmp$_10 = closure$mask;
        var tmp$_11 = this$Game.view;
        var tmp$_12 = closure$x;
        var tmp$_13 = closure$y;
        var value = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        tmp$_10.v = tmp$_11.createMask_jga54f$(tmp$_12, tmp$_13, FLOAT$result, this$Game.gameConfigure.uiFolder + 'fever_board', closure$width.v, closure$height.v, void 0, void 0, false, void 0, void 0, false);
        (tmp$ = closure$mask.v) != null ? (tmp$.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
        (tmp$_0 = closure$mask.v) != null ? (tmp$_0.SetVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance()), Unit) : null;
        (tmp$_1 = closure$mask.v) != null ? (tmp$_1.SetName_61zpoe$('Fever Gauge Mask'), Unit) : null;
        var tmp$_14 = this$Game.view;
        var tmp$_15 = closure$x - closure$width.v * 0.5;
        var tmp$_16 = closure$y;
        var value_0 = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        var left = tmp$_14.createSprite_591x4d$(tmp$_15, tmp$_16, FLOAT$result_0, this$Game.gameConfigure.uiFolder + 'fever_board_left', -1.0, closure$height.v, void 0, void 0, false, false);
        left.SetHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
        left.SetVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
        var tmp$_17 = this$Game.view;
        var tmp$_18 = closure$x + closure$width.v * 0.5;
        var tmp$_19 = closure$y;
        var value_1 = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_1 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toDouble(value_1);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var right = tmp$_17.createSprite_591x4d$(tmp$_18, tmp$_19, FLOAT$result_1, this$Game.gameConfigure.uiFolder + 'fever_board_right', -1.0, closure$height.v, void 0, void 0, false, false);
        right.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
        right.SetVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
        closure$width.v = ensureNotNull(closure$mask.v).GetSize().width;
        closure$height.v = ensureNotNull(closure$mask.v).GetSize().height;
        var gageBoard = Sprite_init(0.0, 0.0, void 0, this$Game.gameConfigure.uiFolder + 'fever_board', closure$width.v, closure$height.v);
        gageBoard.SetBlendFactor_mx4ult$(1.0);
        (tmp$_2 = closure$mask.v) != null ? (tmp$_2.addChild_g5h3xp$(gageBoard), Unit) : null;
        closure$gageBar.v = Sprite_init(0.0, closure$height.v * 0.2, void 0, this$Game.gameConfigure.uiFolder + 'fever_gage', 0.0, closure$height.v * 0.6);
        (tmp$_3 = closure$gageBar.v) != null ? (tmp$_3.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        (tmp$_4 = closure$mask.v) != null ? (tmp$_4.addChild_g5h3xp$(ensureNotNull(closure$gageBar.v)), Unit) : null;
        this$Game.view.SetFontHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        this$Game.view.SetFontVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        this$Game.view.SetFontName_61zpoe$('Gage/');
        closure$gageLabel.v = this$Game.view.createLabel_17tgk7$(closure$width.v / 2, closure$height.v / 2, void 0, '', closure$mask.v);
        (tmp$_5 = closure$gageLabel.v) != null ? (tmp$_5.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
        (tmp$_6 = closure$gageLabel.v) != null ? (tmp$_6.SetSize_dleff0$(-1.0, ensureNotNull(closure$gageBar.v).GetSize().height * 1.2), Unit) : null;
        (tmp$_7 = closure$gageLabel.v) != null ? (tmp$_7.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        (tmp$_8 = closure$gageLabel.v) != null ? (tmp$_8.SetColor_vnjrmz$(Color$Companion_getInstance().puzzleYellow_mx4ult$()), Unit) : null;
        this$Game.view.SetFontName_61zpoe$();
      }
      if (closure$currentLevel.v < this$Game.gameValue.feverLevel && closure$state.v < 3) {
        closure$targetGage.v = 100.0;
        closure$state.v = 99;
        (tmp$_9 = this$Game.view.screen) != null ? (tmp$_9.actionDelay_ab0iom$(0.7, void 0, Game$createFeverGage$lambda$lambda(closure$state, closure$motion, closure$currentGage, closure$targetGage, closure$gageLabel, this$Game, closure$gageBar)), Unit) : null;
        if (this$Game.gameConfigure.resetInactiveWhenFever === true) {
          this$Game.resetDisabledBlock_wnu51o$(void 0, void 0, false, false);
        }
      }
      switch (closure$state.v) {
        case 0:
          var $receiver = this$Game;
          var closure$currentLevel_0 = closure$currentLevel;
          var closure$gageBar_0 = closure$gageBar;
          var closure$gageLabel_0 = closure$gageLabel;
          var closure$currentGage_0 = closure$currentGage;
          var closure$state_0 = closure$state;
          var closure$targetGage_0 = closure$targetGage;
          var closure$motion_0 = closure$motion;
          var tmp$_20, tmp$_21;
          if (closure$currentLevel_0.v > 0 && $receiver.gameValue.feverLevel === 0) {
            ensureNotNull(closure$gageBar_0.v).SetBlendFactor_mx4ult$(1.0);
            closure$currentLevel_0.v = 0;
            (tmp$_20 = closure$gageLabel_0.v) != null ? (tmp$_20.SetText_61zpoe$(''), Unit) : null;
            if ($receiver.quality >= 1) {
              $receiver.removeFeverBackgroundEffect();
              $receiver.createBackgroundEffect();
            }
            SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull($receiver.view.screen), 'FeverBGM', void 0, 0.5, Game$createFeverGage$lambda$lambda$lambda($receiver));
          }

          if (closure$currentGage_0.v < $receiver.gameValue.feverGage) {
            closure$state_0.v = 99;
            (tmp$_21 = $receiver.view.screen) != null ? (tmp$_21.actionDelay_ab0iom$(0.6, void 0, Game$createFeverGage$lambda$lambda$lambda_0(closure$state_0, $receiver, closure$targetGage_0, closure$motion_0, closure$currentGage_0)), Unit) : null;
          }

          if (closure$currentGage_0.v > $receiver.gameValue.feverGage) {
            closure$state_0.v = 2;
            closure$targetGage_0.v = $receiver.gameValue.feverGage;
            var tmp$_22 = void 0;
            var tmp$_23 = void 0;
            var value_2 = closure$currentGage_0.v;
            var FLOAT$result_2;
            FLOAT$break: do {
              if (value_2 == null) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_2)) {
                FLOAT$result_2 = numberToDouble(value_2);
                break FLOAT$break;
              }
              if (typeof value_2 === 'string') {
                try {
                  var number_2 = toDouble(value_2);
                  FLOAT$result_2 = number_2;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_2 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_2 = 0.0;
            }
             while (false);
            closure$motion_0.reset_y2kzbl$(tmp$_22, tmp$_23, FLOAT$result_2);
            var value_3 = closure$targetGage_0.v;
            var FLOAT$result_3;
            FLOAT$break: do {
              if (value_3 == null) {
                FLOAT$result_3 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_3)) {
                FLOAT$result_3 = numberToDouble(value_3);
                break FLOAT$break;
              }
              if (typeof value_3 === 'string') {
                try {
                  var number_3 = toDouble(value_3);
                  FLOAT$result_3 = number_3;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_3 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_3 = 0.0;
            }
             while (false);
            closure$motion_0.SetTarget_nfvrp9$(FLOAT$result_3, 50.0, 0.5, void 0, -1.0);
          }

          break;
        case 1:
          var $receiver_0 = this$Game;
          var closure$targetGage_1 = closure$targetGage;
          var closure$state_1 = closure$state;
          var closure$motion_1 = closure$motion;
          var closure$currentGage_1 = closure$currentGage;
          var closure$gageBar_1 = closure$gageBar;
          var closure$width_0 = closure$width;
          block$break: do {
            var tmp$_24;
            if (closure$targetGage_1.v !== $receiver_0.gameValue.feverGage) {
              closure$state_1.v = 0;
              break block$break;
            }
            closure$currentGage_1.v = closure$motion_1.update_mx4ult$(info.elapsed);
            if (closure$currentGage_1.v >= closure$targetGage_1.v) {
              closure$currentGage_1.v = closure$targetGage_1.v;
              closure$state_1.v = 0;
            }
            (tmp$_24 = closure$gageBar_1.v) != null ? (tmp$_24.SetSize_dleff0$(closure$currentGage_1.v * closure$width_0.v / 100, ensureNotNull(closure$gageBar_1.v).GetSize().height), Unit) : null;
          }
           while (false);
          break;
        case 2:
          var $receiver_1 = this$Game;
          var closure$targetGage_2 = closure$targetGage;
          var closure$state_2 = closure$state;
          var closure$motion_2 = closure$motion;
          var closure$currentGage_2 = closure$currentGage;
          var closure$gageBar_2 = closure$gageBar;
          var closure$width_1 = closure$width;
          block$break: do {
            var tmp$_25;
            if (closure$targetGage_2.v !== $receiver_1.gameValue.feverGage) {
              closure$state_2.v = 0;
              break block$break;
            }
            closure$currentGage_2.v = closure$motion_2.update_mx4ult$(info.elapsed);
            if (closure$currentGage_2.v <= closure$targetGage_2.v) {
              closure$currentGage_2.v = closure$targetGage_2.v;
              closure$state_2.v = 0;
            }
            (tmp$_25 = closure$gageBar_2.v) != null ? (tmp$_25.SetSize_dleff0$(closure$currentGage_2.v * closure$width_1.v / 100, ensureNotNull(closure$gageBar_2.v).GetSize().height), Unit) : null;
          }
           while (false);
          break;
        case 3:
          var $receiver_2 = this$Game;
          var closure$motion_3 = closure$motion;
          var closure$currentGage_3 = closure$currentGage;
          var closure$targetGage_3 = closure$targetGage;
          var closure$prev_0 = closure$prev;
          var closure$currentLevel_1 = closure$currentLevel;
          var closure$state_3 = closure$state;
          var closure$gageBar_3 = closure$gageBar;
          var closure$width_2 = closure$width;
          block$break: do {
            var tmp$_26;
            closure$currentGage_3.v = closure$motion_3.update_mx4ult$(info.elapsed);
            if (closure$currentGage_3.v >= closure$targetGage_3.v) {
              closure$currentGage_3.v = closure$targetGage_3.v;
              closure$prev_0.v = info.age;
              closure$currentLevel_1.v = $receiver_2.gameValue.feverLevel;
              closure$state_3.v = 0;
              break block$break;
            }
            (tmp$_26 = closure$gageBar_3.v) != null ? (tmp$_26.SetSize_dleff0$(closure$currentGage_3.v * closure$width_2.v / 100, ensureNotNull(closure$gageBar_3.v).GetSize().height), Unit) : null;
          }
           while (false);
          break;
        case 4:
          var closure$prev_1 = closure$prev;
          var closure$state_4 = closure$state;
          var closure$gageBar_4 = closure$gageBar;
          var closure$currentGage_4 = closure$currentGage;
          var closure$width_3 = closure$width;
          block$break: do {
            var tmp$_27;
            if (closure$prev_1.v + 1.0 < info.age) {
              closure$state_4.v = 0;
              break block$break;
            }
            (tmp$_27 = closure$gageBar_4.v) != null ? (tmp$_27.SetSize_dleff0$(closure$currentGage_4.v * closure$width_3.v / 100, ensureNotNull(closure$gageBar_4.v).GetSize().height), Unit) : null;
          }
           while (false);
          break;
      }
      return true;
    };
  }
  Game_0.prototype.createFeverGage = function () {
    var mask = {v: null};
    var gageBar = {v: null};
    var gageLabel = {v: null};
    var currentGage = {v: 0.0};
    var targetGage = {v: 0.0};
    var currentLevel = {v: 0};
    var state = {v: 0};
    var motion = new Motion();
    var prev = {v: 0.0};
    var value = this.gameConfigure.width;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var width = {v: this.gameConfigure.tileWidthResult * FLOAT$result - this.gameConfigure.tileWidthGap * 4};
    var height = {v: this.gameConfigure.topGaugeHeight};
    var position = this.view.positionDeviceToUniversal_xpb3zu$(0.0, this.boardRect.y - this.gameConfigure.tileHeightGap);
    var size = this.view.positionDeviceToUniversal_xpb3zu$(width.v, height.v);
    var x = 160.0;
    var y = position.y;
    width.v = size.x;
    height.v = size.y;
    this.view.createAction_xcdeti$('Fever Gage', void 0, void 0, void 0, void 0, void 0, void 0, Game$createFeverGage$lambda(this, x, y, width, height, mask, gageBar, gageLabel, currentLevel, state, targetGage, motion, currentGage, prev));
  };
  function Game$explodeSameBlock$lambda(closure$bar) {
    return function (value, complete) {
      if (complete === true) {
        closure$bar.removeFromParent();
      }
    };
  }
  function Game$explodeSameBlock$lambda_0(closure$list, this$Game, closure$score) {
    return function () {
      var tmp$;
      if (closure$list.v.size > 0) {
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('singlebomb');
        this$Game.increaseCombo();
      }
      tmp$ = closure$list.v.iterator();
      while (tmp$.hasNext()) {
        var block = tmp$.next();
        block.explode_nhq4am$();
        var scorePos = Position_init(block.GetRealScreenX(), block.GetRealScreenY());
        this$Game.createScore_l4u1g4$(scorePos, closure$score.first);
      }
      return Unit;
    };
  }
  Game_0.prototype.explodeSameBlock_n119nu$ = function (item) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var value = item.subValue;
    var list = {v: ArrayList_init()};
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], TileEntity) ? tmp$_1 : null;
        if (block != null) {
          if (Kotlin.isType(block, BlockEntity)) {
            if (block.value === value) {
              list.v.add_11rb$(block);
              this.removeBlock_vux9f0$(x, y);
            }
          }
        }
      }
    }
    if (list.v.size === 0) {
      return 0.0;
    }
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('laser');
    this.shakeBoard_s2l86p$(void 0, void 0, void 0, 1.0, 2.5);
    var delay = 0.6;
    var width = this.gameConfigure.tileWidth * 0.7;
    var x_0 = item.GetRealScreenX();
    var y_0 = item.GetRealScreenY();
    tmp$_2 = list.v.iterator();
    while (tmp$_2.hasNext()) {
      var block_0 = tmp$_2.next();
      var tx = block_0.GetRealScreenX();
      var ty = block_0.GetRealScreenY();
      var pos = Position_init(tx - x_0, ty - y_0);
      var length = pos.length2D();
      var degree = pos.GetDegree();
      var info = Kotlin.isType(tmp$_3 = this.gameValue.blockInfo, BlockItem) ? tmp$_3 : throwCCE();
      var tmp$_6 = x_0 + pos.x * 0.5;
      var tmp$_7 = y_0 + pos.y * 0.5;
      var value_0 = SceneLayer$gameTileTop_getInstance().value;
      var FLOAT$result;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number = toDouble(value_0);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var bar = Sprite_init(tmp$_6, tmp$_7, FLOAT$result, 'Lightning01_' + info.colorMap.get_za3lpa$(value), width, length);
      var frame = ['Lightning01_' + info.colorMap.get_za3lpa$(value), 'Lightning02_' + info.colorMap.get_za3lpa$(value), 'Lightning03_' + info.colorMap.get_za3lpa$(value)];
      var animation = new Animation(frame, 0.1, -1, width, length, 0.0, 0.0);
      var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(3);
      var INT$result;
      INT$break: do {
        if (value_1 == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          INT$result = numberToInt(value_1);
          break INT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_0 = toInt_0(value_1);
            INT$result = number_0;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      animation.SetStartFrame_za3lpa$(INT$result);
      animation.SetEndFrame_za3lpa$(2);
      bar.SetAnimation_pe1q5w$(animation);
      bar.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      bar.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      bar.SetRotationDegree_mx4ult$(degree);
      bar.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
      bar.SetBlendFactor_mx4ult$(1.0);
      this.view.addChild_g5h3xp$(bar);
      (tmp$_4 = this.view.screen) != null ? (tmp$_4.actionFade_ntk7i0$(delay, this.gameConfigure.tileWidth * 0.8, 0.0, null, Game$explodeSameBlock$lambda(bar)), Unit) : null;
    }
    var score = this.calcScore_za3lpa$(list.v.size);
    (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionDelay_ab0iom$(delay, void 0, Game$explodeSameBlock$lambda_0(list, this, score)), Unit) : null;
    this.gameValue.lastEarnedScore = this.gameValue.lastEarnedScore + score.second | 0;
    this.gameValue.score = this.gameValue.score + score.second | 0;
    HAL$Companion_getInstance().shared().SetTitle_61zpoe$(formatted(this.gameValue.score));
    return delay;
  };
  function Game$explodeNearBlock$lambda(closure$block, this$Game, closure$size) {
    return function () {
      var image = 'Resource/UI/Particle';
      var xxx = closure$block.GetRealScreenX();
      var yyy = closure$block.GetRealScreenY();
      var num = 10;
      var tmp$ = this$Game.particleManager;
      var tmp$_0 = Position_init(xxx, yyy, -50.0);
      var tmp$_1 = this$Game.gameConfigure.tileWidth / 2;
      var tmp$_2 = closure$size.v;
      var tmp$_3 = Color$Companion_getInstance().white_mx4ult$();
      var tmp$_4 = Position_init(this$Game.gameConfigure.tileWidth / 4, this$Game.gameConfigure.tileWidth / 4, -10.0);
      var tmp$_5 = Position_init(this$Game.gameConfigure.tileWidth / 2, this$Game.gameConfigure.tileWidth / 2, 500.0);
      var value = SceneLayer$parent_getInstance().value;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      tmp$.createExplosion_3jyyep$(tmp$_0, tmp$_1, num, tmp$_2, 1.0, image, tmp$_3, tmp$_4, tmp$_5, true, FLOAT$result);
      return Unit;
    };
  }
  function Game$explodeNearBlock$lambda$lambda(closure$marker, closure$scale) {
    return function (info) {
      closure$marker.SetScaleFromOriginal_mx4ult$(closure$scale.v);
      if (closure$scale.v <= 3.0)
        if (closure$scale.v > 0.8) {
          closure$marker.SetAlpha_8ca0d4$(1.0);
        }
         else {
          closure$marker.SetAlpha_8ca0d4$(0.0);
        }
      closure$scale.v += info.elapsed * 25.0;
      if (info.age > 0.15) {
        closure$marker.SetAlpha_8ca0d4$(1.0 - (info.age - 0.15) * 2);
      }
      if (info.age > 1.0) {
        closure$marker.SetTimeToLive_mx4ult$(0.0);
      }
      return true;
    };
  }
  function Game$explodeNearBlock$lambda_0(this$Game, closure$tx, closure$ty) {
    return function () {
      var scale = {v: 0.0};
      var value = SceneLayer$uiTop_getInstance().value;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var marker = Sprite_init(0.0, 0.0, FLOAT$result, 'Resource/UI/IconMarker', this$Game.gameConfigure.tileWidthResult, this$Game.gameConfigure.tileHeightResult);
      marker.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      marker.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      marker.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
      marker.SetBlendFactor_mx4ult$(1.0);
      marker.SetAlpha_8ca0d4$(0.0);
      this$Game.view.addChild_g5h3xp$(marker);
      var tmp$ = this$Game.boardRect.x;
      var value_0 = closure$tx;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var tmp$_0 = tmp$ + FLOAT$result_0 * this$Game.gameConfigure.tileWidthResult + this$Game.gameConfigure.tileWidthResult * 0.5;
      var tmp$_1 = this$Game.boardRect.y;
      var value_1 = closure$ty;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_1 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toDouble(value_1);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      marker.SetPosition_dleff0$(tmp$_0, tmp$_1 + FLOAT$result_1 * this$Game.gameConfigure.tileHeightResult + this$Game.gameConfigure.tileHeightResult * 0.5);
      marker.addUpdateCallback_sds54w$('Marker', void 0, void 0, void 0, void 0, void 0, Game$explodeNearBlock$lambda$lambda(marker, scale));
      return Unit;
    };
  }
  function Game$explodeNearBlock$lambda_1(closure$explodeCount, this$Game, closure$list, closure$type) {
    return function () {
      var tmp$;
      if (closure$explodeCount.v > 0) {
        this$Game.increaseCombo();
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('boom');
        this$Game.shakeBoard_s2l86p$(void 0, void 0, void 0, 2.0, 5.0);
      }
      tmp$ = closure$list.v.iterator();
      while (tmp$.hasNext()) {
        var block = tmp$.next();
        if (closure$type === 0) {
          block.explode_nhq4am$(void 0, void 0, 0.3);
        }
      }
      return Unit;
    };
  }
  function Game$explodeNearBlock$lambda$lambda_0(this$Game, closure$list) {
    return function () {
      this$Game.increaseFeverGage_8ca0d4$(this$Game.GetFeverGagePerBlock_za3lpa$(closure$list.v.size) + this$Game.GetFeverGageBonusPerCombo_za3lpa$(this$Game.gameValue.combo));
      return Unit;
    };
  }
  function Game$explodeNearBlock$lambda_2(closure$explodeCount, this$Game, closure$tx, closure$ty, closure$score, closure$list) {
    return function () {
      var tmp$;
      var tmp$_0 = this$Game.boardRect.x;
      var value = closure$tx;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var tmp$_1 = tmp$_0 + FLOAT$result * this$Game.gameConfigure.tileWidth;
      var value_0 = this$Game.gameConfigure.tileWidth / 2;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var tmp$_2 = tmp$_1 + FLOAT$result_0;
      var tmp$_3 = this$Game.boardRect.y;
      var value_1 = closure$ty;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_1 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toDouble(value_1);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      var tmp$_4 = tmp$_3 + FLOAT$result_1 * this$Game.gameConfigure.tileHeight;
      var value_2 = this$Game.gameConfigure.tileHeight / 2;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_2 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      var scorePos = Position_init(tmp$_2, tmp$_4 + FLOAT$result_2);
      this$Game.createScore_l4u1g4$(scorePos, closure$score.second);
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, Game$explodeNearBlock$lambda$lambda_0(this$Game, closure$list)), Unit) : null;
      this$Game.gameValue.lastEarnedScore = this$Game.gameValue.lastEarnedScore + closure$score.second | 0;
      this$Game.gameValue.score = this$Game.gameValue.score + closure$score.second | 0;
      HAL$Companion_getInstance().shared().SetTitle_61zpoe$(formatted(this$Game.gameValue.score));
      return Unit;
    };
  }
  Game_0.prototype.explodeNearBlock_qt1dr2$ = function (tx, ty, type) {
    if (type === void 0)
      type = 0;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var posList = [new Pair(tx + 1 | 0, ty + 1 | 0), new Pair(tx, ty + 1 | 0), new Pair(tx - 1 | 0, ty + 1 | 0), new Pair(tx - 1 | 0, ty), new Pair(tx - 1 | 0, ty - 1 | 0), new Pair(tx, ty - 1 | 0), new Pair(tx + 1 | 0, ty - 1 | 0), new Pair(tx + 1 | 0, ty)];
    var list = {v: ArrayList_init()};
    var explodeCount = {v: 0};
    for (tmp$ = 0; tmp$ !== posList.length; ++tmp$) {
      var pos = posList[tmp$];
      if (pos.first >= 0 && pos.first < this.gameConfigure.width && pos.second >= 0 && pos.second < this.gameConfigure.height) {
        var block = Kotlin.isType(tmp$_0 = this.map[pos.first][pos.second], TileEntity) ? tmp$_0 : null;
        if (block != null) {
          if (Kotlin.isType(block, BlockEntity) || Kotlin.isType(block, ObstacleEntity)) {
            list.v.add_11rb$(block);
            if (type === 0) {
              this.removeBlock_vux9f0$(pos.first, pos.second);
              explodeCount.v = explodeCount.v + 1 | 0;
            }
          }
        }
      }
    }
    if (list.v.size === 0) {
      return 0.0;
    }
    var size = {v: this.gameConfigure.tileWidth * 3};
    if (this.gameConfigure.width > 3) {
      size.v *= 2.0;
    }
    var value = list.v.size;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var delayDelta = 0.6 / FLOAT$result;
    if (delayDelta > 0.06) {
      delayDelta = 0.06;
    }
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('pop9');
    var i = 0;
    for (var tmp$_4 = list.v.iterator(); tmp$_4.hasNext(); ++i) {
      var block_0 = tmp$_4.next();
      var tmp$_5;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (i == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(i)) {
          FLOAT$result_0 = numberToDouble(i);
          break FLOAT$break;
        }
        if (typeof i === 'string') {
          try {
            var number_0 = toDouble(i);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var delay = FLOAT$result_0 * delayDelta;
      (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionDelay_ab0iom$(delay, void 0, Game$explodeNearBlock$lambda(block_0, this, size)), Unit) : null;
    }
    if ((tmp$_1 = this.view.screen) != null) {
      var value_0 = list.v.size - 1.0;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_1 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_1 = toDouble(value_0);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      tmp$_1.actionDelay_ab0iom$(FLOAT$result_1 * delayDelta + 0.2, void 0, Game$explodeNearBlock$lambda_0(this, tx, ty));
    }
    if ((tmp$_2 = this.view.screen) != null) {
      var value_1 = list.v.size - 1 | 0;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_2 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_2 = toDouble(value_1);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      tmp$_2.actionDelay_ab0iom$(FLOAT$result_2 * delayDelta + 0.3, void 0, Game$explodeNearBlock$lambda_1(explodeCount, this, list, type));
    }
    var score = this.calcScore_za3lpa$(explodeCount.v);
    if ((tmp$_3 = this.view.screen) != null) {
      var value_2 = list.v.size - 1 | 0;
      var FLOAT$result_3;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_3 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_3 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_3 = toDouble(value_2);
            FLOAT$result_3 = number_3;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_3 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_3 = 0.0;
      }
       while (false);
      tmp$_3.actionDelay_ab0iom$(FLOAT$result_3 * delayDelta, void 0, Game$explodeNearBlock$lambda_2(explodeCount, this, tx, ty, score, list));
    }
    var value_3 = list.v.size - 1 | 0;
    var FLOAT$result_4;
    FLOAT$break: do {
      if (value_3 == null) {
        FLOAT$result_4 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_3)) {
        FLOAT$result_4 = numberToDouble(value_3);
        break FLOAT$break;
      }
      if (typeof value_3 === 'string') {
        try {
          var number_4 = toDouble(value_3);
          FLOAT$result_4 = number_4;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_4 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_4 = 0.0;
    }
     while (false);
    return FLOAT$result_4 * delayDelta + 0.3;
  };
  function Game$explodeLineBlock$lambda(closure$hbar) {
    return function (value, complete) {
      if (complete === true) {
        closure$hbar.removeFromParent();
      }
    };
  }
  function Game$explodeLineBlock$lambda_0(closure$vbar) {
    return function (value, complete) {
      if (complete === true) {
        closure$vbar.removeFromParent();
      }
    };
  }
  function Game$explodeLineBlock$lambda$lambda(closure$block, this$Game, closure$score) {
    return function () {
      var scorePos = Position_init(closure$block.GetRealScreenX(), closure$block.GetRealScreenY());
      this$Game.createScore_l4u1g4$(scorePos, closure$score.first);
      return Unit;
    };
  }
  function Game$explodeLineBlock$lambda_1(closure$block, this$Game, closure$score) {
    return function () {
      var tmp$;
      if (Kotlin.isType(closure$block, ObstacleEntity)) {
        closure$block.explode_nhq4am$(10, 0.0, this$Game.gameConfigure.removeFireDelay + 0.5);
      }
       else {
        closure$block.explode_nhq4am$(10, 0.0, 0.5);
      }
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.2, void 0, Game$explodeLineBlock$lambda$lambda(closure$block, this$Game, closure$score)), Unit) : null;
      return Unit;
    };
  }
  function Game$explodeLineBlock$lambda$lambda_0(closure$block, this$Game, closure$score) {
    return function () {
      var scorePos = Position_init(closure$block.GetRealScreenX(), closure$block.GetRealScreenY());
      this$Game.createScore_l4u1g4$(scorePos, closure$score.first);
      return Unit;
    };
  }
  function Game$explodeLineBlock$lambda_2(closure$block, this$Game, closure$score) {
    return function () {
      var tmp$;
      if (Kotlin.isType(closure$block, ObstacleEntity)) {
        closure$block.explode_nhq4am$(10, 0.0, this$Game.gameConfigure.removeFireDelay + 0.5);
      }
       else {
        closure$block.explode_nhq4am$(10, 0.0, 0.5);
      }
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.2, void 0, Game$explodeLineBlock$lambda$lambda_0(closure$block, this$Game, closure$score)), Unit) : null;
      return Unit;
    };
  }
  function Game$explodeLineBlock$lambda$lambda_1(this$Game, closure$explodeCount) {
    return function () {
      this$Game.increaseFeverGage_8ca0d4$(this$Game.GetFeverGagePerBlock_za3lpa$(closure$explodeCount.v + 1 | 0) + this$Game.GetFeverGageBonusPerCombo_za3lpa$(this$Game.gameValue.combo));
      return Unit;
    };
  }
  function Game$explodeLineBlock$lambda_3(closure$explodeCount, this$Game, closure$score) {
    return function () {
      var tmp$;
      if (closure$explodeCount.v > 0) {
        if (this$Game.gameValue.combo < 1) {
          SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('feverPop0');
        }
         else {
          var num = ((this$Game.gameValue.combo - 1 | 0) / 5 | 0) + 1 | 0;
          if (num > 5) {
            num = 5;
          }
          var tmp$_0 = SoundManager$Companion_getInstance().shared();
          var value = num;
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(value)) {
              STRING$result = value.toString();
              break STRING$break;
            }
             else if (typeof value === 'string') {
              STRING$result = value;
              break STRING$break;
            }
             else if (typeof value === 'boolean') {
              STRING$result = value.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value)) {
              STRING$result = value.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          tmp$_0.playEffect_bm4lxs$('feverPop' + STRING$result);
        }
      }
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, Game$explodeLineBlock$lambda$lambda_1(this$Game, closure$explodeCount)), Unit) : null;
      this$Game.gameValue.lastEarnedScore = this$Game.gameValue.lastEarnedScore + closure$score.second | 0;
      this$Game.gameValue.score = this$Game.gameValue.score + closure$score.second | 0;
      HAL$Companion_getInstance().shared().SetTitle_61zpoe$(formatted(this$Game.gameValue.score));
      return Unit;
    };
  }
  Game_0.prototype.explodeLineBlock_lwb297$ = function (item, tx, ty) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var listHorizontal = ArrayList_init();
    var listVertical = ArrayList_init();
    var explodeCount = {v: 0};
    var type = (Kotlin.isType(tmp$ = item, LineBombEntity) ? tmp$ : throwCCE()).subValue;
    if (type === 0 || type === 2) {
      tmp$_0 = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$_0; x++) {
        var block = this.map[x][ty];
        if (Kotlin.isType(block, BlockEntity)) {
          block.connectionBitMask = 0;
          block.removeConnection();
          listHorizontal.add_11rb$(block);
          this.removeBlock_vux9f0$(x, ty);
          explodeCount.v = explodeCount.v + 1 | 0;
        }
         else if (Kotlin.isType(block, ObstacleEntity)) {
          if (block.isStone === false) {
            listHorizontal.add_11rb$(block);
            this.removeBlock_vux9f0$(x, ty);
            explodeCount.v = explodeCount.v + 1 | 0;
          }
        }
         else if (Kotlin.isType(block, ItemEntity)) {
          if (block === item) {
            listHorizontal.add_11rb$(block);
            this.removeBlock_vux9f0$(x, ty);
            explodeCount.v = explodeCount.v + 1 | 0;
          }
        }
      }
    }
    if (type === 1 || type === 2) {
      for (var y = this.gameConfigure.height - 1 | 0; y >= 0; y--) {
        var block_0 = this.map[tx][y];
        if (Kotlin.isType(block_0, BlockEntity)) {
          block_0.connectionBitMask = 0;
          block_0.removeConnection();
          listVertical.add_11rb$(block_0);
          this.removeBlock_vux9f0$(tx, y);
          explodeCount.v = explodeCount.v + 1 | 0;
        }
         else if (Kotlin.isType(block_0, ObstacleEntity)) {
          if (block_0.isStone === false) {
            listVertical.add_11rb$(block_0);
            this.removeBlock_vux9f0$(tx, y);
            explodeCount.v = explodeCount.v + 1 | 0;
          }
        }
         else if (Kotlin.isType(block_0, ItemEntity)) {
          if (block_0 === item) {
            listVertical.add_11rb$(block_0);
            this.removeBlock_vux9f0$(tx, y);
            explodeCount.v = explodeCount.v + 1 | 0;
          }
        }
      }
    }
    if (listHorizontal.size === 0 && listVertical.size === 0) {
      return 0.0;
    }
    this.increaseCombo();
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('electricity');
    this.shakeBoard_s2l86p$(void 0, void 0, void 0, 1.5, 3.0);
    var delay = 0.8;
    var frame = ['LineFlash01_red', 'LineFlash02_red', 'LineFlash03_red'];
    if (listHorizontal.size > 0) {
      var width = this.gameConfigure.tileWidth;
      var tmp$_6 = this.gameConfigure.tileHeightResult;
      var value = this.gameConfigure.height;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var length = tmp$_6 * FLOAT$result;
      var tmp$_7 = this.boardRect.x;
      var tmp$_8 = this.gameConfigure.tileHeightResult;
      var value_0 = this.gameConfigure.height;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var x_0 = tmp$_7 + tmp$_8 * FLOAT$result_0 * 0.5;
      var tmp$_9 = this.boardRect.y;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (ty == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(ty)) {
          FLOAT$result_1 = numberToDouble(ty);
          break FLOAT$break;
        }
        if (typeof ty === 'string') {
          try {
            var number_1 = toDouble(ty);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      var y_0 = tmp$_9 + FLOAT$result_1 * this.gameConfigure.tileHeightResult + this.gameConfigure.tileHeightResult / 2.0;
      var value_1 = SceneLayer$gameTileTop_getInstance().value;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_2 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_2 = toDouble(value_1);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      var hbar = Sprite_init(x_0, y_0, FLOAT$result_2, 'LineFlash03_red', width, length);
      var animation = new Animation(frame, 0.1, -1, width, length, 0.0, 0.0);
      var value_2 = Random_getInstance().arc4random_uniform_za3lpa$(3);
      var INT$result;
      INT$break: do {
        if (value_2 == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          INT$result = numberToInt(value_2);
          break INT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_3 = toInt_0(value_2);
            INT$result = number_3;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      animation.SetStartFrame_za3lpa$(INT$result);
      animation.SetEndFrame_za3lpa$(2);
      hbar.SetAnimation_pe1q5w$(animation);
      hbar.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      hbar.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      hbar.SetRotationDegree_mx4ult$(90.0);
      hbar.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
      hbar.SetBlendFactor_mx4ult$(1.0);
      this.view.addChild_g5h3xp$(hbar);
      (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionFade_ntk7i0$(delay, this.gameConfigure.tileWidth, 0.0, null, Game$explodeLineBlock$lambda(hbar)), Unit) : null;
    }
    if (listVertical.size > 0) {
      var width_0 = this.gameConfigure.tileWidth;
      var tmp$_10 = this.gameConfigure.tileHeightResult;
      var value_3 = this.gameConfigure.height;
      var FLOAT$result_3;
      FLOAT$break: do {
        if (value_3 == null) {
          FLOAT$result_3 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_3)) {
          FLOAT$result_3 = numberToDouble(value_3);
          break FLOAT$break;
        }
        if (typeof value_3 === 'string') {
          try {
            var number_4 = toDouble(value_3);
            FLOAT$result_3 = number_4;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_3 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_3 = 0.0;
      }
       while (false);
      var length_0 = tmp$_10 * FLOAT$result_3;
      var tmp$_11 = this.boardRect.x;
      var FLOAT$result_4;
      FLOAT$break: do {
        if (tx == null) {
          FLOAT$result_4 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(tx)) {
          FLOAT$result_4 = numberToDouble(tx);
          break FLOAT$break;
        }
        if (typeof tx === 'string') {
          try {
            var number_5 = toDouble(tx);
            FLOAT$result_4 = number_5;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_4 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_4 = 0.0;
      }
       while (false);
      var x_1 = tmp$_11 + FLOAT$result_4 * this.gameConfigure.tileWidthResult + this.gameConfigure.tileWidthResult / 2;
      var y_1 = this.boardRect.y;
      var value_4 = SceneLayer$gameTileTop_getInstance().value;
      var FLOAT$result_5;
      FLOAT$break: do {
        if (value_4 == null) {
          FLOAT$result_5 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_4)) {
          FLOAT$result_5 = numberToDouble(value_4);
          break FLOAT$break;
        }
        if (typeof value_4 === 'string') {
          try {
            var number_6 = toDouble(value_4);
            FLOAT$result_5 = number_6;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_5 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_5 = 0.0;
      }
       while (false);
      var vbar = Sprite_init(x_1, y_1, FLOAT$result_5, 'LineFlash03_red', width_0, length_0);
      var animation_0 = new Animation(frame, 0.1, -1, width_0, length_0, 0.0, 0.0);
      var value_5 = Random_getInstance().arc4random_uniform_za3lpa$(3);
      var INT$result_0;
      INT$break: do {
        if (value_5 == null) {
          INT$result_0 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_5)) {
          INT$result_0 = numberToInt(value_5);
          break INT$break;
        }
        if (typeof value_5 === 'string') {
          try {
            var number_7 = toInt_0(value_5);
            INT$result_0 = number_7;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_0 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_0 = 0;
      }
       while (false);
      animation_0.SetStartFrame_za3lpa$(INT$result_0);
      animation_0.SetEndFrame_za3lpa$(2);
      vbar.SetAnimation_pe1q5w$(animation_0);
      vbar.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
      vbar.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      vbar.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
      vbar.SetBlendFactor_mx4ult$(1.0);
      this.view.addChild_g5h3xp$(vbar);
      (tmp$_2 = this.view.screen) != null ? (tmp$_2.actionFade_ntk7i0$(delay, this.gameConfigure.tileWidth, 0.0, null, Game$explodeLineBlock$lambda_0(vbar)), Unit) : null;
    }
    var score = this.calcScore_za3lpa$(explodeCount.v + 1 | 0);
    var delay2 = 0.8;
    var value_6 = this.gameConfigure.width;
    var FLOAT$result_6;
    FLOAT$break: do {
      if (value_6 == null) {
        FLOAT$result_6 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_6)) {
        FLOAT$result_6 = numberToDouble(value_6);
        break FLOAT$break;
      }
      if (typeof value_6 === 'string') {
        try {
          var number_8 = toDouble(value_6);
          FLOAT$result_6 = number_8;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_6 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_6 = 0.0;
    }
     while (false);
    var delayDelta = delay2 / FLOAT$result_6;
    if (delayDelta > delay2 / 10) {
      delayDelta = delay2 / 10;
    }
    tmp$_3 = reversed(withIndex(listHorizontal)).iterator();
    while (tmp$_3.hasNext()) {
      var tmp$_12 = tmp$_3.next();
      var i = tmp$_12.component1()
      , block_1 = tmp$_12.component2();
      var tmp$_13 = delay - 0.2;
      var FLOAT$result_7;
      FLOAT$break: do {
        if (i == null) {
          FLOAT$result_7 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(i)) {
          FLOAT$result_7 = numberToDouble(i);
          break FLOAT$break;
        }
        if (typeof i === 'string') {
          try {
            var number_9 = toDouble(i);
            FLOAT$result_7 = number_9;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_7 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_7 = 0.0;
      }
       while (false);
      var delay3 = tmp$_13 + FLOAT$result_7 * delayDelta;
      (tmp$_4 = this.view.screen) != null ? (tmp$_4.actionDelay_ab0iom$(delay3, void 0, Game$explodeLineBlock$lambda_1(block_1, this, score)), Unit) : null;
    }
    var i_0 = 0;
    for (var tmp$_14 = listVertical.iterator(); tmp$_14.hasNext(); ++i_0) {
      var block_2 = tmp$_14.next();
      var tmp$_15;
      var tmp$_16 = delay - 0.2;
      var FLOAT$result_8;
      FLOAT$break: do {
        if (i_0 == null) {
          FLOAT$result_8 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(i_0)) {
          FLOAT$result_8 = numberToDouble(i_0);
          break FLOAT$break;
        }
        if (typeof i_0 === 'string') {
          try {
            var number_10 = toDouble(i_0);
            FLOAT$result_8 = number_10;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_8 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_8 = 0.0;
      }
       while (false);
      var delay3_0 = tmp$_16 + FLOAT$result_8 * delayDelta;
      (tmp$_15 = this.view.screen) != null ? (tmp$_15.actionDelay_ab0iom$(delay3_0, void 0, Game$explodeLineBlock$lambda_2(block_2, this, score)), Unit) : null;
    }
    (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionDelay_ab0iom$(delay, void 0, Game$explodeLineBlock$lambda_3(explodeCount, this, score)), Unit) : null;
    return delay - 0.2 + delay2;
  };
  function Game$resetDisabledBlock$lambda(it) {
    return it.GetRealScreenY();
  }
  function Game$resetDisabledBlock$lambda$lambda$lambda(closure$block) {
    return function () {
      var tmp$;
      (Kotlin.isType(tmp$ = closure$block, BlockEntity) ? tmp$ : throwCCE()).resetDisable_6taknv$();
      return Unit;
    };
  }
  function Game$resetDisabledBlock$lambda$lambda(closure$bar, closure$block, this$Game, closure$length, closure$delay, closure$prev, closure$origin) {
    return function (info) {
      var tmp$, tmp$_0;
      if (info.elapsed === 0.0) {
        closure$bar.SetAlpha_8ca0d4$(0.0);
        if (Kotlin.isType(closure$block, BlockEntity)) {
          (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, Game$resetDisabledBlock$lambda$lambda$lambda(closure$block)), Unit) : null;
        }
         else if (Kotlin.isType(closure$block, ObstacleEntity)) {
          (Kotlin.isType(tmp$_0 = closure$block, ObstacleEntity) ? tmp$_0 : throwCCE()).explode_nhq4am$(10, 0.0, this$Game.gameConfigure.removeFireDelay + 0.5);
        }
        return;
      }
      var newHeight = closure$length;
      if (newHeight < 0) {
        newHeight = 0.0;
      }
      var newWidth = this$Game.gameConfigure.tileWidth * 0.6 - this$Game.gameConfigure.tileWidth * 0.6 / closure$delay * info.age;
      closure$bar.SetSize_dleff0$(newWidth, newHeight);
      if (closure$prev.v + 0.1 <= info.age) {
        closure$prev.v = info.age;
        var tmp$_1 = Random_getInstance();
        var value = this$Game.gameConfigure.tileWidth * 0.3;
        var INT$result;
        INT$break: do {
          if (value == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value)) {
            INT$result = numberToInt(value);
            break INT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toInt_0(value);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        var value_0 = tmp$_1.arc4random_uniform_za3lpa$(INT$result);
        var INT$result_0;
        INT$break: do {
          if (value_0 == null) {
            INT$result_0 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            INT$result_0 = numberToInt(value_0);
            break INT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toInt_0(value_0);
              INT$result_0 = number_0;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_0 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_0 = 0;
        }
         while (false);
        var tmp$_2 = INT$result_0;
        var value_1 = this$Game.gameConfigure.tileWidth * 0.15;
        var INT$result_1;
        INT$break: do {
          if (value_1 == null) {
            INT$result_1 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            INT$result_1 = numberToInt(value_1);
            break INT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toInt_0(value_1);
              INT$result_1 = number_1;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_1 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_1 = 0;
        }
         while (false);
        var offset = tmp$_2 - INT$result_1 | 0;
        var tmp$_3 = closure$bar;
        var tmp$_4 = closure$origin.x;
        var FLOAT$result;
        FLOAT$break: do {
          if (offset == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(offset)) {
            FLOAT$result = numberToDouble(offset);
            break FLOAT$break;
          }
          if (typeof offset === 'string') {
            try {
              var number_2 = toDouble(offset);
              FLOAT$result = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        tmp$_3.SetPosition_dleff0$(tmp$_4 + FLOAT$result, closure$origin.y);
      }
      return;
    };
  }
  function Game$resetDisabledBlock$lambda_0(closure$x, closure$y, closure$width, closure$length, this$Game, closure$block, closure$delay) {
    return function () {
      var tmp$, tmp$_0;
      var tmp$_1 = closure$x;
      var tmp$_2 = closure$y;
      var value = SceneLayer$gameTileTop_getInstance().value;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var bar = Sprite_init(tmp$_1, tmp$_2, FLOAT$result, 'Resource/UI/LightningBar', closure$width, closure$length);
      bar.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
      bar.SetBlendFactor_mx4ult$(1.0);
      this$Game.view.addChild_g5h3xp$(bar);
      bar.SetVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
      bar.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      bar.SetTimeToLive_mx4ult$(0.5);
      var info = Kotlin.isType(tmp$ = this$Game.gameValue.blockInfo, BlockItem) ? tmp$ : throwCCE();
      if (Kotlin.isType(closure$block, BlockEntity)) {
        switch (info.colorMap.get_za3lpa$(closure$block.value)) {
          case 'yellow':
            bar.SetColor_vnjrmz$(Color$Companion_getInstance().yellow_mx4ult$());
            break;
          case 'red':
            bar.SetColor_vnjrmz$(Color$Companion_getInstance().red_mx4ult$());
            break;
          case 'green':
            bar.SetColor_vnjrmz$(Color$Companion_getInstance().green_mx4ult$());
            break;
          case 'blue':
            bar.SetColor_vnjrmz$(Color$Companion_getInstance().blue_mx4ult$());
            break;
          default:bar.SetColor_vnjrmz$(Color$Companion_getInstance().purple_mx4ult$());
            break;
        }
      }
       else {
        bar.SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$());
      }
      bar.SetAlpha_8ca0d4$(0.9);
      var origin = bar.GetPosition();
      var prev = {v: 0.0};
      (tmp$_0 = this$Game.view.screen) != null ? (tmp$_0.actionInstant_cinp1s$(0.0, 0.5, void 0, void 0, Game$resetDisabledBlock$lambda$lambda(bar, closure$block, this$Game, closure$length, closure$delay, prev, origin)), Unit) : null;
      return Unit;
    };
  }
  function Game$resetDisabledBlock$lambda_1() {
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('feverPop5');
    return Unit;
  }
  function Game$resetDisabledBlock$lambda$lambda_0(this$Game, closure$explodeCount) {
    return function () {
      this$Game.increaseFeverGage_8ca0d4$(this$Game.GetFeverGagePerBlock_za3lpa$(closure$explodeCount.v + 1 | 0) + this$Game.GetFeverGageBonusPerCombo_za3lpa$(this$Game.gameValue.combo));
      return Unit;
    };
  }
  function Game$resetDisabledBlock$lambda_2(this$Game, closure$explodeCount, closure$score) {
    return function () {
      var tmp$;
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, Game$resetDisabledBlock$lambda$lambda_0(this$Game, closure$explodeCount)), Unit) : null;
      this$Game.gameValue.lastEarnedScore = this$Game.gameValue.lastEarnedScore + closure$score.second | 0;
      this$Game.gameValue.score = this$Game.gameValue.score + closure$score.second | 0;
      HAL$Companion_getInstance().shared().SetTitle_61zpoe$(formatted(this$Game.gameValue.score));
      return Unit;
    };
  }
  var compareBy$lambda_0 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function Comparator$ObjectLiteral_0(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_0.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  Game_0.prototype.resetDisabledBlock_wnu51o$ = function (beginX, endX, effect, removeObstacle) {
    if (beginX === void 0)
      beginX = 0;
    if (endX === void 0)
      endX = 2;
    if (effect === void 0)
      effect = true;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var beginX_0 = 0;
    var endX_0 = this.gameConfigure.width - 1 | 0;
    var disabled = ArrayList_init();
    var explodeCount = {v: 0};
    for (var x = beginX_0; x <= endX_0; x++) {
      tmp$ = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$; y++) {
        var block = this.map[x][y];
        if (Kotlin.isType(block, BlockEntity)) {
          if (block.GetAttribute() === TileEntity$Attribute$disabled_getInstance() || block.transformCount !== 0) {
            disabled.add_11rb$(block);
          }
        }
         else if (Kotlin.isType(block, ObstacleEntity)) {
          if (removeObstacle === true) {
            disabled.add_11rb$(block);
            this.removeBlock_vux9f0$(x, y);
            explodeCount.v = explodeCount.v + 1 | 0;
          }
        }
      }
    }
    if (disabled.size === 0) {
      return 0.0;
    }
    if (effect === false) {
      SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('feverPop5');
      tmp$_0 = disabled.iterator();
      while (tmp$_0.hasNext()) {
        var block_0 = tmp$_0.next();
        if (Kotlin.isType(block_0, BlockEntity)) {
          (Kotlin.isType(tmp$_1 = block_0, BlockEntity) ? tmp$_1 : throwCCE()).resetDisable_6taknv$();
        }
         else if (Kotlin.isType(block_0, ObstacleEntity)) {
          (Kotlin.isType(tmp$_2 = block_0, ObstacleEntity) ? tmp$_2 : throwCCE()).explode_nhq4am$();
        }
      }
      return 0.0;
    }
    var sort = sortedWith_0(disabled, new Comparator$ObjectLiteral_0(compareBy$lambda_0(Game$resetDisabledBlock$lambda)));
    var width = this.gameConfigure.tileWidth * 0.8;
    var tmp$_5 = this.boardRect.y;
    var tmp$_6 = this.gameConfigure.tileHeight;
    var value = this.gameConfigure.height;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var length = tmp$_5 + tmp$_6 * FLOAT$result;
    var delay = 1.0;
    var value_0 = sort.size;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var delayDelta = delay / FLOAT$result_0;
    var i = 0;
    for (var tmp$_7 = sort.iterator(); tmp$_7.hasNext(); ++i) {
      var block_1 = tmp$_7.next();
      var tmp$_8;
      var x_0 = block_1.GetRealScreenX();
      var y_0 = block_1.GetRealScreenY();
      if ((tmp$_8 = this.view.screen) != null) {
        var FLOAT$result_1;
        FLOAT$break: do {
          if (i == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(i)) {
            FLOAT$result_1 = numberToDouble(i);
            break FLOAT$break;
          }
          if (typeof i === 'string') {
            try {
              var number_1 = toDouble(i);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        tmp$_8.actionDelay_ab0iom$(FLOAT$result_1 * delayDelta, void 0, Game$resetDisabledBlock$lambda_0(x_0, y_0, width, length, this, block_1, delay));
      }
    }
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('angel');
    this.shakeBoard_s2l86p$(void 0, void 0, -0.5, 2.0, 2.5);
    (tmp$_3 = this.view.screen) != null ? (tmp$_3.actionDelay_ab0iom$(delay, void 0, Game$resetDisabledBlock$lambda_1), Unit) : null;
    if (explodeCount.v > 0) {
      this.increaseCombo();
    }
    var score = this.calcScore_za3lpa$(explodeCount.v + 1 | 0);
    (tmp$_4 = this.view.screen) != null ? (tmp$_4.actionDelay_ab0iom$(delay + 0.5, void 0, Game$resetDisabledBlock$lambda_2(this, explodeCount, score)), Unit) : null;
    var value_1 = delay + 0.5;
    var FLOAT$result_2;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_2 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_2 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_2 = toDouble(value_1);
          FLOAT$result_2 = number_2;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_2 = 0.0;
    }
     while (false);
    return FLOAT$result_2;
  };
  Game_0.prototype.getRandomBlocks_za3lpa$ = function (count) {
    var tmp$, tmp$_0, tmp$_1;
    var list = ArrayList_init();
    var array = new Int32Array(Kotlin.imul(this.gameConfigure.width, this.gameConfigure.height));
    var tmp$_2;
    tmp$_2 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_2; i++) {
      array[i] = 0;
    }
    var pick = array;
    tmp$ = count - 1 | 0;
    for (var a = 0; a <= tmp$; a++) {
      var r = Random_getInstance().arc4random_uniform_za3lpa$(pick.length) + 1 | 0;
      var j = 0;
      var k = 0;
      while (true) {
        if (pick[j] === 0) {
          k = k + 1 | 0;
          if (k === r) {
            break;
          }
        }
        j = j + 1 | 0;
        if (j >= pick.length) {
          j = 0;
        }
      }
      pick[j] = 1;
    }
    tmp$_0 = pick.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      if (pick[i_0] === 1) {
        var x = i_0 % this.gameConfigure.width;
        var y = i_0 / this.gameConfigure.width | 0;
        var block = Kotlin.isType(tmp$_1 = this.map[x][y], TileEntity) ? tmp$_1 : null;
        if (block != null) {
          list.add_11rb$(block);
        }
      }
    }
    return list;
  };
  Game_0.prototype.getBottomBlocks_za3lpa$ = function (count) {
    var tmp$, tmp$_0;
    var list = ArrayList_init();
    for (var y = 1; y <= count; y++) {
      tmp$ = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        var block = Kotlin.isType(tmp$_0 = this.map[x][this.gameConfigure.height - y | 0], TileEntity) ? tmp$_0 : null;
        if (block != null) {
          list.add_11rb$(block);
        }
      }
    }
    return list;
  };
  function Game$explodeBlocks$lambda$lambda(closure$block) {
    return function () {
      if (Kotlin.isType(closure$block, BlockEntity)) {
        closure$block.connectionBitMask = 0;
        closure$block.removeConnection();
        closure$block.explode_902hsc$(void 0, void 0, void 0, 2);
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('feverPop0');
      }
       else {
        closure$block.explode_nhq4am$();
      }
      return Unit;
    };
  }
  function Game$explodeBlocks$lambda$lambda_0(closure$count, this$Game) {
    return function () {
      this$Game.prepareDrop_103y6$(closure$count, false, false);
      return Unit;
    };
  }
  function Game$explodeBlocks$lambda$lambda_1(this$Game) {
    return function () {
      this$Game.isPaused = false;
      return Unit;
    };
  }
  function Game$explodeBlocks$lambda(closure$list, this$Game, closure$delayGap, closure$count) {
    return function () {
      var tmp$, tmp$_0;
      var i = 0;
      for (var tmp$_1 = closure$list.iterator(); tmp$_1.hasNext(); ++i) {
        var block = tmp$_1.next();
        var tmp$_2;
        (tmp$_2 = this$Game.view.screen) != null ? (tmp$_2.actionDelay_ab0iom$(i * closure$delayGap, void 0, Game$explodeBlocks$lambda$lambda(block)), Unit) : null;
      }
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$delayGap * closure$count + 0.3, void 0, Game$explodeBlocks$lambda$lambda_0(closure$count, this$Game)), Unit) : null;
      (tmp$_0 = this$Game.view.screen) != null ? (tmp$_0.actionDelay_ab0iom$(closure$delayGap * closure$count, void 0, Game$explodeBlocks$lambda$lambda_1(this$Game)), Unit) : null;
      return Unit;
    };
  }
  Game_0.prototype.explodeBlocks_mti8id$ = function (list, delayGap) {
    var tmp$, tmp$_0, tmp$_1;
    if (list.size === 0) {
      return 0.0;
    }
    tmp$ = list.iterator();
    while (tmp$.hasNext()) {
      var block = tmp$.next();
      var block_0 = Kotlin.isType(tmp$_0 = block, TileEntity) ? tmp$_0 : null;
      if (block_0 != null) {
        var x = block_0.GetScreenX();
        var y = block_0.GetScreenY();
        this.removeBlock_vux9f0$(x, y);
      }
    }
    var count = list.size;
    this.isPaused = true;
    (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionDelay_ab0iom$(0.5, void 0, Game$explodeBlocks$lambda(list, this, delayGap, count)), Unit) : null;
    return 0.0;
  };
  function Game$shakeBoard$lambda(closure$duration, this$Game, closure$motion) {
    return function (info) {
      if (info.age > closure$duration) {
        this$Game.view.SetPosition_dleff0$(0.0, 0.0);
        return false;
      }
      var pos = closure$motion.update_mx4ult$(info.elapsed);
      this$Game.view.SetPosition_dleff0$(pos, this$Game.view.GetPosition().y);
      return true;
    };
  }
  Game_0.prototype.shakeBoard_s2l86p$ = function (speed, accel, ampAccel, duration, scale) {
    if (speed === void 0)
      speed = 10.0;
    if (accel === void 0)
      accel = 0.0;
    if (ampAccel === void 0)
      ampAccel = -1.0;
    if (duration === void 0)
      duration = 1.0;
    if (scale === void 0)
      scale = 2.5;
    var motion = Wave_init(speed, accel, void 0, ampAccel);
    motion.SetScale_mx4ult$(this.view.sizeScale.xRatio * scale);
    this.view.createAction_xcdeti$('shake', false, void 0, void 0, void 0, void 0, void 0, Game$shakeBoard$lambda(duration, this, motion));
  };
  function Game$touchListener$lambda(this$Game) {
    return function (pos, delta, speed, event, elapsed) {
      switch (event.name) {
        case 'began':
          if (pos.x < this$Game.boardRect.x || pos.y < this$Game.boardRect.y) {
            return;
          }

          var tmp$ = pos.x - this$Game.boardRect.x;
          var value = this$Game.gameConfigure.tileWidthResult;
          var FLOAT$result;
          FLOAT$break: do {
            if (value == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value)) {
              FLOAT$result = numberToDouble(value);
              break FLOAT$break;
            }
            if (typeof value === 'string') {
              try {
                var number = toDouble(value);
                FLOAT$result = number;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          var value_0 = tmp$ / FLOAT$result;
          var INT$result;
          INT$break: do {
            if (value_0 == null) {
              INT$result = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value_0)) {
              INT$result = numberToInt(value_0);
              break INT$break;
            }
            if (typeof value_0 === 'string') {
              try {
                var number_0 = toInt_0(value_0);
                INT$result = number_0;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result = 0;
          }
           while (false);
          var nextX = INT$result;
          var tmp$_0 = pos.y - this$Game.boardRect.y;
          var value_1 = this$Game.gameConfigure.tileHeightResult;
          var FLOAT$result_0;
          FLOAT$break: do {
            if (value_1 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_1)) {
              FLOAT$result_0 = numberToDouble(value_1);
              break FLOAT$break;
            }
            if (typeof value_1 === 'string') {
              try {
                var number_1 = toDouble(value_1);
                FLOAT$result_0 = number_1;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          var value_2 = tmp$_0 / FLOAT$result_0;
          var INT$result_0;
          INT$break: do {
            if (value_2 == null) {
              INT$result_0 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value_2)) {
              INT$result_0 = numberToInt(value_2);
              break INT$break;
            }
            if (typeof value_2 === 'string') {
              try {
                var number_2 = toInt_0(value_2);
                INT$result_0 = number_2;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_0 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_0 = 0;
          }
           while (false);
          var nextY = INT$result_0;
          if (nextX < 0 || nextX >= this$Game.gameConfigure.width) {
            return;
          }

          if (nextY < 0 || nextY >= this$Game.gameConfigure.height) {
            return;
          }

          this$Game.pressPos = new Pair(nextX, nextY);
          if (this$Game.map[nextX][nextY] != null) {
            this$Game.addKeyInput_ydzd23$(nextX, nextY);
          }

          this$Game.pressPos = new Pair(-1, -1);
          break;
        case 'moved':
          break;
        case 'ended':
          this$Game.pressPos = new Pair(-1, -1);
          break;
        case 'cancelled':
          this$Game.pressPos = new Pair(-1, -1);
          break;
        case 'scroll':
          break;
      }
    };
  }
  function Game$onReady$lambda$lambda$lambda$lambda(closure$bg) {
    return function () {
      closure$bg.SetTimeToLive_mx4ult$(0.0);
      return Unit;
    };
  }
  function Game$onReady$lambda$lambda$lambda$lambda_0(this$Game, closure$startLabel) {
    return function (info) {
      var tmp$, tmp$_0;
      if (info.elapsed === 0.0) {
        return false;
      }
      if (info.count === 1) {
        var button = Kotlin.isType(tmp$ = this$Game.view.findChildByName_3m52m6$('Pause Switch'), Button) ? tmp$ : null;
        if (button != null) {
          ensureNotNull(button).SetEnable_6taknv$(true);
        }
        button = Kotlin.isType(tmp$_0 = this$Game.view.findChildByName_3m52m6$('Abandon Button'), Button) ? tmp$_0 : null;
        if (button != null) {
          ensureNotNull(button).SetEnable_6taknv$(true);
        }
      }
      if (closure$startLabel.age <= 1.0) {
        closure$startLabel.SetAlpha_8ca0d4$(1.0 - (closure$startLabel.age - 0.5) * 2.0);
        closure$startLabel.SetScale_mx4ult$(1.0 + 0.2 * closure$startLabel.age);
      }
       else {
        closure$startLabel.removeFromParent();
        return true;
      }
      return true;
    };
  }
  function Game$onReady$lambda$lambda$lambda(closure$readyLabel, this$Game, closure$bg) {
    return function (info) {
      var tmp$;
      if (info.elapsed === 0.0) {
        return false;
      }
      if (closure$readyLabel.age <= 0.1) {
        closure$readyLabel.SetAlpha_8ca0d4$(0.5 + 10.0 * closure$readyLabel.age);
        closure$readyLabel.SetScale_mx4ult$(1 + 2 * info.elapsed);
      }
       else if (closure$readyLabel.age <= 0.3) {
        closure$readyLabel.SetScale_mx4ult$(1 - info.elapsed);
      }
       else if (closure$readyLabel.age >= 0.9)
        if (closure$readyLabel.age <= 1.0) {
          closure$readyLabel.SetAlpha_8ca0d4$(1.0 - 10.0 * (closure$readyLabel.age - 0.9));
        }
         else {
          (tmp$ = this$Game.view.screen) != null ? (tmp$.actionFadeOut_7vo5wp$(closure$bg, 0.6, void 0, 0.3, void 0, void 0, void 0, Game$onReady$lambda$lambda$lambda$lambda(closure$bg)), Unit) : null;
          var startLabel = this$Game.view.createSprite_9wuqyc$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 'Resource/UI/START', 240.0);
          startLabel.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          startLabel.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          startLabel.SetTimeToLive_mx4ult$(1.0);
          startLabel.addUpdateCallback_sds54w$('Game Start', void 0, void 0, void 0, void 0, void 0, Game$onReady$lambda$lambda$lambda$lambda_0(this$Game, startLabel));
          this$Game.view.addChild_g5h3xp$(startLabel);
          closure$readyLabel.removeFromParent();
          return true;
        }
      return true;
    };
  }
  function Game$onReady$lambda$lambda(this$Game, closure$bg) {
    return function () {
      var readyLabel = this$Game.view.createSprite_9wuqyc$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 'Resource/UI/READY', 240.0);
      readyLabel.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      readyLabel.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      readyLabel.SetTimeToLive_mx4ult$(2.0);
      readyLabel.addUpdateCallback_sds54w$('Game Ready', void 0, void 0, void 0, void 0, void 0, Game$onReady$lambda$lambda$lambda(readyLabel, this$Game, closure$bg));
      return Unit;
    };
  }
  function Game$onReady$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0, tmp$_1;
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      if (this$Game.isIdle() === true) {
        if (this$Game.gameConfigure.showReadyStart === true) {
          var bg = this$Game.view.createSprite_9wuqyc$(0.0, 240.0, SceneLayer$uiTop_getInstance(), null, 320.0, 100.0, void 0, void 0, false);
          bg.SetColor_vnjrmz$(Color$Companion_getInstance().black_mx4ult$(0.0));
          bg.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          bg.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
          (tmp$ = this$Game.view.screen) != null ? (tmp$.actionFadeIn_hkbjms$(bg, 0.0, 0.6, void 0, 0.1, void 0, void 0, void 0, Game$onReady$lambda$lambda(this$Game, bg)), Unit) : null;
          this$Game.gameState.SetNextState_9sobi5$('timerStart', 1.0);
        }
         else {
          var button = Kotlin.isType(tmp$_0 = this$Game.view.findChildByName_3m52m6$('Pause Switch'), Button) ? tmp$_0 : null;
          if (button != null) {
            ensureNotNull(button).SetEnable_6taknv$(true);
          }
          button = Kotlin.isType(tmp$_1 = this$Game.view.findChildByName_3m52m6$('Abandon Button'), Button) ? tmp$_1 : null;
          if (button != null) {
            ensureNotNull(button).SetEnable_6taknv$(true);
          }
          this$Game.gameState.SetNextState_9sobi5$('timerStart');
        }
      }
       else {
        this$Game.processCheck();
      }
    };
  }
  function Game$onTimerStart$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      (tmp$ = this$Game.gameTimer) != null ? (tmp$.start(), Unit) : null;
      (tmp$_0 = this$Game.beginnerTimer) != null ? (tmp$_0.start(), Unit) : null;
      (tmp$_1 = this$Game.feverTimer) != null ? (tmp$_1.start(), Unit) : null;
      (tmp$_2 = this$Game.comboTimer) != null ? (tmp$_2.start(), Unit) : null;
      (tmp$_3 = this$Game.blockDisableTimer) != null ? (tmp$_3.start(), Unit) : null;
      this$Game.gameState.SetNextState_9sobi5$('running');
    };
  }
  function Game$onTimerRestart$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0;
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      (tmp$ = this$Game.beginnerTimer) != null ? (tmp$.restart(), Unit) : null;
      (tmp$_0 = this$Game.blockDisableTimer) != null ? (tmp$_0.restart(), Unit) : null;
      this$Game.updateInfo();
      this$Game.gameState.SetNextState_9sobi5$('running');
    };
  }
  function Game$onRunning$lambda$lambda(this$Game) {
    return function (result) {
      if (result === true) {
        this$Game.noMoreMatch = true;
      }
    };
  }
  function Game$onRunning$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      if (this$Game.isPausedOnlyForLogic === true) {
        return;
      }
      if (this$Game.gameConfigure.touchInputMode === 0) {
        this$Game.processKeyInput();
      }
      if (this$Game.isIdle() === true) {
        if (this$Game.onIdling === false) {
          this$Game.updateBlockConnection();
          if (this$Game.gameConfigure.takeSnapshot === true) {
            this$Game.takeSnapshot();
          }
          this$Game.onIdling = true;
          this$Game.idleStartTime = this$Game.masterTimer.current;
          this$Game.completeCheckNoMoreMatch = false;
          this$Game.completeMakeHint = false;
          this$Game.gameValue.playingTime = this$Game.gameTimeElapsed;
          this$Game.checkDelayedBlock();
          if (this$Game.gameConfigure.obstacleType === 1) {
            this$Game.checkBottomObstacle();
          }
        }
        if (this$Game.gameConfigure.checkNoMoreMatch === true && this$Game.completeCheckNoMoreMatch === false) {
          if (this$Game.masterTimer.current - this$Game.idleStartTime > 1) {
            var find = false;
            tmp$ = this$Game.entityManager.GetList();
            for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
              var entity = tmp$[tmp$_0];
              if (Kotlin.isType(entity, ItemEntity)) {
                this$Game.completeCheckNoMoreMatch = true;
                find = true;
                break;
              }
            }
            if (find === false) {
              this$Game.completeCheckNoMoreMatch = true;
              this$Game.checkNoMoreMatch_y8twos$(Game$onRunning$lambda$lambda(this$Game));
            }
          }
        }
        if (this$Game.gameConfigure.showHint === true) {
          if (this$Game.completeMakeHint === false) {
            if (this$Game.masterTimer.current - this$Game.idleStartTime > 10) {
              this$Game.boardGenerator.makeHint_klim6j$(this$Game.map);
              this$Game.completeMakeHint = true;
            }
          }
           else if (this$Game.masterTimer.current - this$Game.idleStartTime > 3) {
            this$Game.idleStartTime = this$Game.masterTimer.current;
            this$Game.showHint();
          }
        }
        if (this$Game.gameConfigure.touchInputMode === 1) {
          this$Game.processKeyInput();
        }
        if (this$Game.comboRestart === true) {
          (tmp$_1 = this$Game.comboTimer) != null ? (tmp$_1.restart(), Unit) : null;
          this$Game.comboRestart = false;
        }
        if (this$Game.gameOverFlag === true) {
          if (this$Game.gameConfigure.limitGameTime === true && this$Game.gameConfigure.resetTimeEveryClear === false) {
            if (this$Game.lastChanceFlag === true) {
              SoundManager$Companion_getInstance().shared().stop_61zpoe$('timer');
              if (this$Game.processRemain() === false) {
                this$Game.gameState.SetNextState_9sobi5$('gameOver');
              }
            }
             else {
              if (this$Game.isAllDisabled() === true || this$Game.gameValue.feverLevel === 0) {
                SoundManager$Companion_getInstance().shared().stop_61zpoe$('timer');
                this$Game.gameState.SetNextState_9sobi5$('gameOver');
              }
            }
          }
           else {
            this$Game.gameState.SetNextState_9sobi5$('noMoreMove');
          }
        }
         else {
          if (this$Game.isAllDisabled() === true || this$Game.noMoreMatch === true) {
            if (this$Game.processRemain() === false) {
              if (this$Game.gameConfigure.regenNoMoreMove === true) {
                this$Game.gameState.SetNextState_9sobi5$('regenAll');
              }
               else {
                this$Game.gameOverFlag = true;
              }
            }
            this$Game.noMoreMatch = false;
          }
           else {
            if (equals((tmp$_2 = this$Game.blockDisableTimer) != null ? tmp$_2.state : null, ScheduledJob$State$paused_getInstance())) {
              (tmp$_3 = this$Game.blockDisableTimer) != null ? (tmp$_3.restart(), Unit) : null;
            }
            if (equals((tmp$_4 = this$Game.beginnerTimer) != null ? tmp$_4.state : null, ScheduledJob$State$paused_getInstance())) {
              (tmp$_5 = this$Game.beginnerTimer) != null ? (tmp$_5.restart(), Unit) : null;
            }
          }
        }
        if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Auto Play'), 'true')) {
          this$Game.boardGenerator.makeHint_klim6j$(this$Game.map);
          var hint = this$Game.boardGenerator.GetHint();
          if (hint.first !== -1 && hint.second !== -1) {
            this$Game.addKeyInput_ydzd23$(hint.first, hint.second);
          }
           else {
            var tmp$_8 = this$Game;
            var value = this$Game.autoPlayKeyIndex % this$Game.gameConfigure.width;
            var INT$result;
            INT$break: do {
              if (value == null) {
                INT$result = 0;
                break INT$break;
              }
              if (Kotlin.isNumber(value)) {
                INT$result = numberToInt(value);
                break INT$break;
              }
              if (typeof value === 'string') {
                try {
                  var number = toInt_0(value);
                  INT$result = number;
                  break INT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    INT$result = 0;
                    break INT$break;
                  }
                   else
                    throw e;
                }
              }
              INT$result = 0;
            }
             while (false);
            var tmp$_9 = INT$result;
            var value_0 = this$Game.autoPlayKeyIndex / this$Game.gameConfigure.width | 0;
            var INT$result_0;
            INT$break: do {
              if (value_0 == null) {
                INT$result_0 = 0;
                break INT$break;
              }
              if (Kotlin.isNumber(value_0)) {
                INT$result_0 = numberToInt(value_0);
                break INT$break;
              }
              if (typeof value_0 === 'string') {
                try {
                  var number_0 = toInt_0(value_0);
                  INT$result_0 = number_0;
                  break INT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    INT$result_0 = 0;
                    break INT$break;
                  }
                   else
                    throw e;
                }
              }
              INT$result_0 = 0;
            }
             while (false);
            tmp$_8.addKeyInput_ydzd23$(tmp$_9, INT$result_0);
            this$Game.autoPlayKeyIndex = this$Game.autoPlayKeyIndex + 1 | 0;
            if (this$Game.autoPlayKeyIndex >= Kotlin.imul(this$Game.gameConfigure.width, this$Game.gameConfigure.height)) {
              this$Game.autoPlayKeyIndex = 0;
            }
          }
        }
      }
       else {
        this$Game.onIdling = false;
        this$Game.showHintNow = false;
        if (this$Game.gameConfigure.touchInputMode === 1) {
          this$Game.cancelKeyInput_za3lpa$();
        }
        if (this$Game.processCheck() === true) {
          (tmp$_6 = this$Game.comboTimer) != null ? (tmp$_6.pause(), Unit) : null;
          this$Game.comboRestart = true;
        }
         else {
          if (this$Game.gameConfigure.comboMode === 0) {
            (tmp$_7 = this$Game.comboTimer) != null ? (tmp$_7.pause(), Unit) : null;
            this$Game.comboRestart = true;
          }
        }
      }
    };
  }
  function Game$onRegenAll$lambda$lambda$lambda(this$Game) {
    return function () {
      var tmp$;
      this$Game.regenAllBlock_za3lpa$(-9);
      this$Game.gameValue.feverGage = 0.0;
      if (this$Game.gameValue.feverLevel > 0) {
        this$Game.gameValue.feverLevel = 0;
        this$Game.stopFever();
      }
      this$Game.comboReset();
      (tmp$ = this$Game.comboTimer) != null ? (tmp$.restart(), Unit) : null;
      this$Game.gameState.SetNextState_9sobi5$('running');
      return Unit;
    };
  }
  function Game$onRegenAll$lambda$lambda(this$Game) {
    return function () {
      var tmp$;
      this$Game.dropOffAllBlock();
      (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.5, void 0, Game$onRegenAll$lambda$lambda$lambda(this$Game)), Unit) : null;
      return Unit;
    };
  }
  function Game$onRegenAll$lambda(this$Game) {
    return function (event) {
      var tmp$;
      if (equals(event, 'enter')) {
        (tmp$ = this$Game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(this$Game.gameConfigure.matchDelay, void 0, Game$onRegenAll$lambda$lambda(this$Game)), Unit) : null;
      }
    };
  }
  function Game$onNoMoreMove$lambda$lambda() {
    SoundManager$Companion_getInstance().shared().SetVolume_9sobi5$('GameOverBGM', 100.0);
    SoundManager$Companion_getInstance().shared().playBGM_llw80p$('GameOverBGM', 0);
    return Unit;
  }
  function Game$onNoMoreMove$lambda$lambda_0() {
    return Unit;
  }
  function Game$onNoMoreMove$lambda$lambda_1(closure$motion, closure$gameLabel) {
    return function (info) {
      closure$motion.update_mx4ult$(info.elapsed);
      var pos = closure$motion.GetPosition();
      closure$gameLabel.SetPosition_dleff0$(closure$gameLabel.GetPosition().x, pos);
      return true;
    };
  }
  function Game$onNoMoreMove$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      this$Game.backupForSharing();
      (tmp$ = this$Game.view.screen) != null ? (tmp$.removeAction_81ngrp$('BGM Fade'), Unit) : null;
      if (SoundManager$Companion_getInstance().shared().GetVolume_61zpoe$('FeverBGM') > 0) {
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$Game.view.screen), 'FeverBGM', 0.0, 0.3);
      }
      if (SoundManager$Companion_getInstance().shared().GetVolume_61zpoe$('MainBGM') > 0) {
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$Game.view.screen), 'MainBGM', 0.0, 0.3);
      }
      (tmp$_0 = this$Game.view.screen) != null ? (tmp$_0.actionDelay_ab0iom$(0.5, void 0, Game$onNoMoreMove$lambda$lambda), Unit) : null;
      var button = Kotlin.isType(tmp$_1 = this$Game.view.findChildByName_3m52m6$('Pause Switch'), Button) ? tmp$_1 : null;
      if (button != null) {
        button.SetEnable_6taknv$(false);
      }
      button = Kotlin.isType(tmp$_2 = this$Game.view.findChildByName_3m52m6$('Abandon Button'), Button) ? tmp$_2 : null;
      if (button != null) {
        button.SetEnable_6taknv$(false);
      }
      this$Game.view.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      this$Game.view.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      var mask = this$Game.view.createSprite_9wuqyc$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, void 0, false);
      mask.SetColor_b53zri$(0, 0, 0, 0.0);
      mask.SetShow_6taknv$(true);
      var gameLabel = this$Game.view.createSprite_591x4d$(160.0, -40.0, SceneLayer$uiTop_getInstance().value + 1.0, 'Resource/UI/NOMOREMATCH', 240.0);
      gameLabel.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      gameLabel.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      gameLabel.SetAlpha_8ca0d4$(1.0);
      (tmp$_3 = this$Game.view.screen) != null ? (tmp$_3.actionFadeIn_hkbjms$(mask, void 0, 0.8, void 0, 0.3, void 0, void 0, void 0, Game$onNoMoreMove$lambda$lambda_0), Unit) : null;
      (tmp$_4 = this$Game.view.screen) != null ? (tmp$_4.actionFadeOut_7vo5wp$(gameLabel, void 0, 3.0, 0.5), Unit) : null;
      (tmp$_5 = this$Game.view.screen) != null ? (tmp$_5.actionFadeOut_7vo5wp$(mask, 0.8, 3.0, 0.5), Unit) : null;
      var motion = Bounce_init(0.0, 10 * this$Game.view.sizeScale.yRatio, gameLabel.GetPosition().y, 240 * this$Game.view.sizeScale.yRatio, 0.6);
      motion.SetTimeMultiplier_mx4ult$(20.0);
      gameLabel.addUpdateCallback_sds54w$('Title', void 0, void 0, void 0, void 0, void 0, Game$onNoMoreMove$lambda$lambda_1(motion, gameLabel));
      this$Game.isPausedOnlyForLogic = true;
      (tmp$_6 = this$Game.gameTimer) != null ? (tmp$_6.pause(), Unit) : null;
      (tmp$_7 = this$Game.comboTimer) != null ? (tmp$_7.pause(), Unit) : null;
      (tmp$_8 = this$Game.feverTimer) != null ? (tmp$_8.pause(), Unit) : null;
      (tmp$_9 = this$Game.blockDisableTimer) != null ? (tmp$_9.pause(), Unit) : null;
      this$Game.gameState.SetNextState_9sobi5$('confirmContinue', 4.0);
    };
  }
  function Game$onGameOver$lambda$lambda() {
    SoundManager$Companion_getInstance().shared().SetVolume_9sobi5$('GameOverBGM', 100.0);
    SoundManager$Companion_getInstance().shared().playBGM_llw80p$('GameOverBGM', 0);
    return Unit;
  }
  function Game$onGameOver$lambda$lambda_0(closure$gameLabel) {
    return function (info) {
      if (info.age <= 1.0) {
        closure$gameLabel.SetAlpha_8ca0d4$((info.age - 0.5) * 2);
        closure$gameLabel.SetScaleFromOriginal_mx4ult$(4.0 - 3 * info.age);
      }
      return true;
    };
  }
  function Game$onGameOver$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      if (this$Game.lastChanceFlag === false) {
        if (this$Game.gameConfigure.regenNoMoreMove !== false || this$Game.gameConfigure.limitGameTime !== false) {
          (tmp$ = this$Game.view.screen) != null ? (tmp$.removeAction_81ngrp$('BGM Fade'), Unit) : null;
          if (SoundManager$Companion_getInstance().shared().GetVolume_61zpoe$('FeverBGM') > 0) {
            SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$Game.view.screen), 'FeverBGM', 0.0, 0.3);
          }
          if (SoundManager$Companion_getInstance().shared().GetVolume_61zpoe$('MainBGM') > 0) {
            SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$Game.view.screen), 'MainBGM', 0.0, 0.3);
          }
          (tmp$_0 = this$Game.view.screen) != null ? (tmp$_0.actionDelay_ab0iom$(0.5, void 0, Game$onGameOver$lambda$lambda), Unit) : null;
        }
        var button = Kotlin.isType(tmp$_1 = this$Game.view.findChildByName_3m52m6$('Pause Switch'), Button) ? tmp$_1 : null;
        if (button != null) {
          button.SetEnable_6taknv$(false);
        }
        button = Kotlin.isType(tmp$_2 = this$Game.view.findChildByName_3m52m6$('Abandon Button'), Button) ? tmp$_2 : null;
        if (button != null) {
          button.SetEnable_6taknv$(false);
        }
        this$Game.view.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        this$Game.view.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        var mask = null;
        if (this$Game.gameConfigure.regenNoMoreMove !== false || this$Game.gameConfigure.limitGameTime !== false) {
          mask = this$Game.view.createSprite_9wuqyc$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, void 0, false);
          mask.SetColor_b53zri$(0, 0, 0, 0.0);
          mask.SetShow_6taknv$(true);
          (tmp$_3 = this$Game.view.screen) != null ? (tmp$_3.actionFadeIn_hkbjms$(mask, void 0, 0.8, void 0, 0.3), Unit) : null;
        }
        var gameLabel = this$Game.view.createSprite_591x4d$(160.0, 240.0, SceneLayer$uiTop_getInstance().value + 1.0, 'Resource/UI/GAMEOVER', 200.0);
        gameLabel.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        gameLabel.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        gameLabel.addUpdateCallback_sds54w$('Game Over', void 0, void 0, void 0, void 0, void 0, Game$onGameOver$lambda$lambda_0(gameLabel));
        (tmp$_4 = this$Game.view.screen) != null ? (tmp$_4.actionFadeOut_7vo5wp$(gameLabel, void 0, 3.0, 0.5), Unit) : null;
        if (mask != null) {
          (tmp$_5 = this$Game.view.screen) != null ? (tmp$_5.actionFadeOut_7vo5wp$(mask, 0.8, 3.0, 0.5), Unit) : null;
        }
        this$Game.isPausedOnlyForLogic = true;
        (tmp$_6 = this$Game.gameTimer) != null ? (tmp$_6.pause(), Unit) : null;
        (tmp$_7 = this$Game.comboTimer) != null ? (tmp$_7.pause(), Unit) : null;
        (tmp$_8 = this$Game.feverTimer) != null ? (tmp$_8.pause(), Unit) : null;
        (tmp$_9 = this$Game.blockDisableTimer) != null ? (tmp$_9.pause(), Unit) : null;
        this$Game.gameState.SetNextState_9sobi5$('confirmContinueForTimeAttack', 4.0);
        return;
      }
      this$Game.backupForSharing();
      this$Game.boardList.clear();
      if (this$Game.lastChanceFlag === false) {
        this$Game.gameState.SetNextState_9sobi5$('waitForStop', 3.0);
      }
       else {
        this$Game.gameState.SetNextState_9sobi5$('waitForStop', 1.0);
      }
    };
  }
  function Game$onConfirmContinue$lambda$lambda$lambda(closure$starText) {
    return function () {
      closure$starText.addText_r4v59z$('[image Resource/UI/IconStar 20] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
      return Unit;
    };
  }
  function Game$onConfirmContinue$lambda$lambda$lambda_0(this$Game) {
    return function (it) {
      this$Game.continueGame();
      return Unit;
    };
  }
  function Game$onConfirmContinue$lambda$lambda(this$Game, closure$needStar) {
    return function (button) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      if (equals(button, 'star')) {
        this$Game.continueByStar = this$Game.continueByStar + 1 | 0;
        StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(closure$needStar.v);
        var starText = Kotlin.isType(tmp$ = this$Game.view.findChildByName_3m52m6$('Star Amount'), TextArea) ? tmp$ : null;
        if (starText != null) {
          starText.clearText_gam257$(void 0, Game$onConfirmContinue$lambda$lambda$lambda(starText));
        }
        Util$Companion_getInstance().closeNotice();
        this$Game.continueGame();
      }
       else if (equals(button, 'video')) {
        Util$Companion_getInstance().closeNotice();
        this$Game.continueByVideo = this$Game.continueByVideo + 1 | 0;
        var result = AppController$Companion_getInstance().shared().playRewarded_y8twos$(Game$onConfirmContinue$lambda$lambda$lambda_0(this$Game));
        if (result === false) {
          this$Game.continueGame();
        }
      }
       else {
        Util$Companion_getInstance().closeNotice();
        (tmp$_0 = this$Game.blockDisableTimer) != null ? (tmp$_0.stop(), Unit) : null;
        (tmp$_1 = this$Game.beginnerTimer) != null ? (tmp$_1.stop(), Unit) : null;
        (tmp$_2 = this$Game.gameTimer) != null ? (tmp$_2.stop(), Unit) : null;
        (tmp$_3 = this$Game.feverTimer) != null ? (tmp$_3.stop(), Unit) : null;
        this$Game.gameState.SetNextState_9sobi5$('waitForStop');
      }
    };
  }
  function Game$onConfirmContinue$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (!equals(event, 'enter')) {
        return;
      }
      var continueLimitForStar = 1;
      if (AppController$Companion_getInstance().shared().isRewardReady() === false) {
        continueLimitForStar = 2;
      }
      var needStar = {v: Kotlin.imul(this$Game.gameConfigure.needStarForContinue, this$Game.continueByStar + 1 | 0)};
      if ((StoreManager$Companion_getInstance().shared().GetStarAmount() < needStar.v || this$Game.continueByStar >= continueLimitForStar) && (this$Game.continueByVideo > 0 || AppController$Companion_getInstance().shared().isRewardReady() === false) || (this$Game.continueByStar + this$Game.continueByVideo | 0) >= 2) {
        (tmp$ = this$Game.blockDisableTimer) != null ? (tmp$.stop(), Unit) : null;
        (tmp$_0 = this$Game.beginnerTimer) != null ? (tmp$_0.stop(), Unit) : null;
        (tmp$_1 = this$Game.gameTimer) != null ? (tmp$_1.stop(), Unit) : null;
        (tmp$_2 = this$Game.feverTimer) != null ? (tmp$_2.stop(), Unit) : null;
        this$Game.gameState.SetNextState_9sobi5$('waitForStop');
        return;
      }
      var star;
      var video;
      var or = '  ' + local('MENU_17') + '   ';
      var ok = '';
      if (this$Game.continueByStar >= continueLimitForStar) {
        star = '';
        or = '';
      }
       else if (StoreManager$Companion_getInstance().shared().GetStarAmount() < needStar.v) {
        var value = needStar.v;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        star = '[Button Resource/UI/IconContinueDisabled 50 star false] [Scale 1.2]x ' + STRING$result;
      }
       else {
        var value_0 = needStar.v;
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (typeof value_0 === 'string') {
            STRING$result_0 = value_0;
            break STRING$break;
          }
           else if (typeof value_0 === 'boolean') {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        star = '[Button Resource/UI/IconContinue 50 star] [Scale 1.2]x ' + STRING$result_0;
        ok = 'star';
      }
      if (this$Game.continueByVideo > 0 || AppController$Companion_getInstance().shared().isRewardReady() === false) {
        video = '';
        or = '';
      }
       else {
        video = '[Button Resource/UI/IconVideo 50 video]';
        if (equals(ok, '')) {
          ok = 'video';
        }
      }
      Util$Companion_getInstance().showNotice_sprpts$(this$Game.view, local('MENU_16') + '\n\n\n' + star + or + video + '\n\n\n[Button Resource/UI/IconAbandon 50 no]', void 0, void 0, ok, Game$onConfirmContinue$lambda$lambda(this$Game, needStar));
    };
  }
  function Game$onConfirmContinueForTimeAttack$lambda$lambda$lambda(closure$starText) {
    return function () {
      closure$starText.addText_r4v59z$('[image Resource/UI/IconStar 20] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
      return Unit;
    };
  }
  function Game$onConfirmContinueForTimeAttack$lambda$lambda$lambda_0(this$Game) {
    return function (it) {
      this$Game.continueGame();
      return Unit;
    };
  }
  function Game$onConfirmContinueForTimeAttack$lambda$lambda(this$Game, closure$needStar) {
    return function (button) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      if (equals(button, 'star')) {
        this$Game.continueByStar = this$Game.continueByStar + 1 | 0;
        StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(closure$needStar.v);
        var starText = Kotlin.isType(tmp$ = this$Game.view.findChildByName_3m52m6$('Star Amount'), TextArea) ? tmp$ : null;
        if (starText != null) {
          starText.clearText_gam257$(void 0, Game$onConfirmContinueForTimeAttack$lambda$lambda$lambda(starText));
        }
        Util$Companion_getInstance().closeNotice();
        this$Game.continueGame();
      }
       else if (equals(button, 'video')) {
        Util$Companion_getInstance().closeNotice();
        this$Game.continueByVideo = this$Game.continueByVideo + 1 | 0;
        var result = AppController$Companion_getInstance().shared().playRewarded_y8twos$(Game$onConfirmContinueForTimeAttack$lambda$lambda$lambda_0(this$Game));
        if (result === false) {
          this$Game.continueGame();
        }
      }
       else {
        Util$Companion_getInstance().closeNotice();
        (tmp$_0 = this$Game.blockDisableTimer) != null ? (tmp$_0.stop(), Unit) : null;
        (tmp$_1 = this$Game.beginnerTimer) != null ? (tmp$_1.stop(), Unit) : null;
        (tmp$_2 = this$Game.gameTimer) != null ? (tmp$_2.stop(), Unit) : null;
        (tmp$_3 = this$Game.feverTimer) != null ? (tmp$_3.stop(), Unit) : null;
        this$Game.gameState.SetNextState_9sobi5$('waitForStop');
      }
    };
  }
  function Game$onConfirmContinueForTimeAttack$lambda(this$Game) {
    return function (event) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (!equals(event, 'enter')) {
        return;
      }
      var continueLimitForStar = 1;
      if (AppController$Companion_getInstance().shared().isRewardReady() === false) {
        continueLimitForStar = 2;
      }
      var needStar = {v: Kotlin.imul(this$Game.gameConfigure.needStarForContinue, this$Game.continueByStar + 1 | 0)};
      if ((StoreManager$Companion_getInstance().shared().GetStarAmount() < needStar.v || this$Game.continueByStar >= continueLimitForStar) && (this$Game.continueByVideo > 0 || AppController$Companion_getInstance().shared().isRewardReady() === false) || (this$Game.continueByStar + this$Game.continueByVideo | 0) >= 2) {
        (tmp$ = this$Game.blockDisableTimer) != null ? (tmp$.stop(), Unit) : null;
        (tmp$_0 = this$Game.beginnerTimer) != null ? (tmp$_0.stop(), Unit) : null;
        (tmp$_1 = this$Game.gameTimer) != null ? (tmp$_1.stop(), Unit) : null;
        (tmp$_2 = this$Game.feverTimer) != null ? (tmp$_2.stop(), Unit) : null;
        this$Game.gameState.SetNextState_9sobi5$('waitForStop');
        return;
      }
      var star;
      var video;
      var or = '  ' + local('MENU_17') + '   ';
      var ok = '';
      if (this$Game.continueByStar >= continueLimitForStar) {
        star = '';
        or = '';
      }
       else if (StoreManager$Companion_getInstance().shared().GetStarAmount() < needStar.v) {
        var value = needStar.v;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        star = '[Button Resource/UI/IconContinueDisabled 50 star false] [Scale 1.2]x ' + STRING$result;
      }
       else {
        var value_0 = needStar.v;
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (typeof value_0 === 'string') {
            STRING$result_0 = value_0;
            break STRING$break;
          }
           else if (typeof value_0 === 'boolean') {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        star = '[Button Resource/UI/IconContinue 50 star] [Scale 1.2]x ' + STRING$result_0;
        ok = 'star';
      }
      if (this$Game.continueByVideo > 0 || AppController$Companion_getInstance().shared().isRewardReady() === false) {
        video = '';
        or = '';
      }
       else {
        video = '[Button Resource/UI/IconVideo 50 video]';
        if (equals(ok, '')) {
          ok = 'video';
        }
      }
      Util$Companion_getInstance().showNotice_sprpts$(this$Game.view, local('MENU_21') + '\n\n\n' + star + or + video + '\n\n\n[Button Resource/UI/IconAbandon 50 no]', void 0, void 0, ok, Game$onConfirmContinueForTimeAttack$lambda$lambda(this$Game, needStar));
    };
  }
  function Game$onWaitForStop$lambda(this$Game) {
    return function (event) {
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      this$Game.boardGenerator.cancelFindNoMoreMatch();
      this$Game.gameState.SetNextState_9sobi5$('gameClose', 0.0);
    };
  }
  function Game$onGameClose$lambda(this$Game) {
    return function (event) {
      var tmp$;
      if (equals(event, 'enter')) {
        this$Game.masterTimer.stop();
        this$Game.stop();
        var scene = GameOverView_init(this$Game);
        (tmp$ = this$Game.view.screen) != null ? (tmp$.presentView_xl35ob$(scene), Unit) : null;
        var output = '';
        var value = this$Game.gameTimeElapsed;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        output += STRING$result;
        var value_0 = this$Game.gameValue.score;
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (typeof value_0 === 'string') {
            STRING$result_0 = value_0;
            break STRING$break;
          }
           else if (typeof value_0 === 'boolean') {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        output += ',' + STRING$result_0;
        var value_1 = this$Game.gameValue.clickAllCount;
        var STRING$result_1;
        STRING$break: do {
          if (Kotlin.isNumber(value_1)) {
            STRING$result_1 = value_1.toString();
            break STRING$break;
          }
           else if (typeof value_1 === 'string') {
            STRING$result_1 = value_1;
            break STRING$break;
          }
           else if (typeof value_1 === 'boolean') {
            STRING$result_1 = value_1.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_1)) {
            STRING$result_1 = value_1.toString();
            break STRING$break;
          }
          STRING$result_1 = '';
        }
         while (false);
        output += ',' + STRING$result_1;
        var value_2 = this$Game.gameValue.maxComboOnGame;
        var STRING$result_2;
        STRING$break: do {
          if (Kotlin.isNumber(value_2)) {
            STRING$result_2 = value_2.toString();
            break STRING$break;
          }
           else if (typeof value_2 === 'string') {
            STRING$result_2 = value_2;
            break STRING$break;
          }
           else if (typeof value_2 === 'boolean') {
            STRING$result_2 = value_2.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_2)) {
            STRING$result_2 = value_2.toString();
            break STRING$break;
          }
          STRING$result_2 = '';
        }
         while (false);
        output += ',' + STRING$result_2;
        var value_3 = this$Game.gameValue.maxFeverOnGame;
        var STRING$result_3;
        STRING$break: do {
          if (Kotlin.isNumber(value_3)) {
            STRING$result_3 = value_3.toString();
            break STRING$break;
          }
           else if (typeof value_3 === 'string') {
            STRING$result_3 = value_3;
            break STRING$break;
          }
           else if (typeof value_3 === 'boolean') {
            STRING$result_3 = value_3.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_3)) {
            STRING$result_3 = value_3.toString();
            break STRING$break;
          }
          STRING$result_3 = '';
        }
         while (false);
        output += ',' + STRING$result_3;
        println(output);
      }
    };
  }
  function Game$gameCancel$lambda(this$Game) {
    return function () {
      var tmp$, tmp$_0;
      (tmp$ = this$Game.view.screen) != null ? (tmp$.removeAction_81ngrp$('BGM Fade'), Unit) : null;
      if (SoundManager$Companion_getInstance().shared().GetVolume_61zpoe$('FeverBGM') > 0) {
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$Game.view.screen), 'FeverBGM', 0.0, 0.3);
      }
      if (SoundManager$Companion_getInstance().shared().GetVolume_61zpoe$('MainBGM') > 0) {
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$Game.view.screen), 'MainBGM', 0.0, 0.3);
      }
      SoundManager$Companion_getInstance().shared().stop_61zpoe$('timer');
      this$Game.boardGenerator.cancelFindNoMoreMatch();
      this$Game.stop();
      var scene = GameOverView_init(this$Game);
      (tmp$_0 = this$Game.view.screen) != null ? (tmp$_0.presentView_xl35ob$(scene), Unit) : null;
    };
  }
  function Game$update$lambda(this$Game) {
    return function (elapsed) {
      this$Game.particleManager.updateObject_mx4ult$(elapsed);
      this$Game.particleManager.projection_1s1xds$(this$Game.view.size, Position_init(0.0, 0.0 * this$Game.view.sizeScale.yRatio));
      if (this$Game.isPaused === false) {
        this$Game.gameState.update_mx4ult$(elapsed);
      }
      this$Game.entityManager.update_mx4ult$(elapsed);
      this$Game.updateInfo();
    };
  }
  function Game$comboTimerUpdateCallback$lambda(this$Game) {
    return function (elapsed) {
      var tmp$;
      if (this$Game.comboTimeRemain > 0) {
        this$Game.comboTimeRemain -= elapsed;
        if (this$Game.comboTimeRemain <= 0) {
          this$Game.comboTimeRemain = 0.0;
          this$Game.showHintNow = true;
          this$Game.comboReset();
          (tmp$ = this$Game.comboTimer) != null ? (tmp$.restart(), Unit) : null;
        }
      }
    };
  }
  function Game$comboTimerRestartCallback$lambda(this$Game) {
    return function () {
      var tmp$ = this$Game.gameConfigure.comboTiming;
      var value = this$Game.gameValue.combo;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var timing = tmp$ - FLOAT$result * this$Game.gameConfigure.comboTimingAdjust;
      if (timing < this$Game.gameConfigure.comboTimingLowest) {
        timing = this$Game.gameConfigure.comboTimingLowest;
      }
      this$Game.comboTimeRemain = timing;
    };
  }
  function Game$feverTimerUpdateCallback$lambda(this$Game) {
    return function (elapsed) {
      if (this$Game.feverTimeRemain > 0) {
        this$Game.feverTimeRemain -= elapsed;
        if (this$Game.feverTimeRemain <= 0) {
          if (this$Game.gameValue.feverLevel > 0) {
            this$Game.gameValue.feverGage = 0.0;
            this$Game.gameValue.feverLevel = 0;
            this$Game.stopFever();
          }
        }
      }
    };
  }
  function Game$feverTimerRestartCallback$lambda(this$Game) {
    return function () {
      this$Game.feverTimeRemain = this$Game.gameConfigure.feverTime;
      this$Game.updateInfo();
    };
  }
  function Game$gameTimeUpdateCallback$lambda(this$Game) {
    return function (elapsed) {
      this$Game.gameTimeElapsed += elapsed;
      this$Game.gameRemainTime -= elapsed;
      if (this$Game.gameRemainTime <= 0) {
        this$Game.gameRemainTime = 0.0;
        if (this$Game.gameConfigure.limitGameTime === true) {
          this$Game.gameOverFlag = true;
        }
      }
    };
  }
  function Game$blockDisableTimeUpdateCallback$lambda(this$Game) {
    return function (elapsed) {
      var contagionMode = false;
      this$Game.blockDisableTimeRemain -= elapsed;
      if (this$Game.blockDisableTimeRemain <= 0) {
        if (!equals(this$Game.gameState.GetState(), 'running')) {
          return;
        }
        var tmp$ = this$Game.gameValue;
        var tmp$_0 = this$Game.gameConfigure.blockDisableTime;
        var value = this$Game.gameTimeElapsed;
        var INT$result;
        INT$break: do {
          if (value == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value)) {
            INT$result = numberToInt(value);
            break INT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toInt_0(value);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        var tmp$_1 = INT$result;
        var value_0 = this$Game.gameConfigure.timeForAdjustBlockDisableTime;
        var INT$result_0;
        INT$break: do {
          if (value_0 == null) {
            INT$result_0 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            INT$result_0 = numberToInt(value_0);
            break INT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toInt_0(value_0);
              INT$result_0 = number_0;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_0 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_0 = 0;
        }
         while (false);
        var value_1 = tmp$_1 / INT$result_0 | 0;
        var FLOAT$result;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toDouble(value_1);
              FLOAT$result = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        tmp$.blockDisableTime = tmp$_0 - FLOAT$result * this$Game.gameConfigure.adjustTimeForBlockDisableTime;
        if (this$Game.gameValue.blockDisableTime < this$Game.gameConfigure.minimumTimeForBlockDisableTime) {
          this$Game.gameValue.blockDisableTime = this$Game.gameConfigure.minimumTimeForBlockDisableTime;
        }
        var clicked = this$Game.GetClickedButton();
        if (clicked.first !== -1) {
          return;
        }
        while (this$Game.blockDisableTimeRemain <= 0) {
          var tmp$_2 = this$Game;
          var value_2 = this$Game.gameValue.blockDisableTime;
          var FLOAT$result_0;
          FLOAT$break: do {
            if (value_2 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_2)) {
              FLOAT$result_0 = numberToDouble(value_2);
              break FLOAT$break;
            }
            if (typeof value_2 === 'string') {
              try {
                var number_2 = toDouble(value_2);
                FLOAT$result_0 = number_2;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          tmp$_2.blockDisableTimeRemain += FLOAT$result_0;
          if (this$Game.gameConfigure.blockDisablePeriodically === true) {
            if (!contagionMode) {
              this$Game.disableOneBlock();
            }
          }
        }
      }
    };
  }
  function Game$beginnerTimeUpdateCallback$lambda(this$Game) {
    return function (elapsed) {
      this$Game.gameTimeElapsed += elapsed;
      if (this$Game.gameTimeElapsed >= this$Game.gameValue.gameTime) {
        SoundManager$Companion_getInstance().shared().stop_61zpoe$('timer');
        this$Game.gameOverFlag = true;
      }
    };
  }
  function Game$blockDisableTimeRestartCallback$lambda(this$Game) {
    return function () {
      var tmp$ = this$Game.gameValue;
      var tmp$_0 = this$Game.gameConfigure.blockDisableTime;
      var value = this$Game.gameTimeElapsed;
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      var tmp$_1 = INT$result;
      var value_0 = this$Game.gameConfigure.timeForAdjustBlockDisableTime;
      var INT$result_0;
      INT$break: do {
        if (value_0 == null) {
          INT$result_0 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          INT$result_0 = numberToInt(value_0);
          break INT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toInt_0(value_0);
            INT$result_0 = number_0;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_0 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_0 = 0;
      }
       while (false);
      var value_1 = tmp$_1 / INT$result_0 | 0;
      var FLOAT$result;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toDouble(value_1);
            FLOAT$result = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      tmp$.blockDisableTime = tmp$_0 - FLOAT$result * this$Game.gameConfigure.adjustTimeForBlockDisableTime;
      if (this$Game.gameValue.blockDisableTime < this$Game.gameConfigure.minimumTimeForBlockDisableTime) {
        this$Game.gameValue.blockDisableTime = this$Game.gameConfigure.minimumTimeForBlockDisableTime;
      }
      var tmp$_2 = this$Game;
      var value_2 = this$Game.gameValue.blockDisableTime;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_0 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_0 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      tmp$_2.blockDisableTimeRemain = FLOAT$result_0;
    };
  }
  function Game$beginnerTimeRestartCallback$lambda(this$Game) {
    return function () {
      this$Game.gameTimeElapsed = 0.0;
      var tmp$ = this$Game.gameValue;
      var tmp$_0 = this$Game.gameValue.gameTimeInitialValue;
      var value = this$Game.gameValue.score / this$Game.gameConfigure.gameTimeAdjustPerScore | 0;
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      var value_0 = INT$result;
      var FLOAT$result;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      tmp$.gameTime = tmp$_0 - FLOAT$result;
      if (this$Game.gameValue.gameTime < 2) {
        this$Game.gameValue.gameTime = 2.0;
      }
    };
  }
  Game_0.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Game',
    interfaces: []
  };
  function Game_init(configure, $this) {
    $this = $this || Object.create(Game_0.prototype);
    Game_0.call($this);
    $this.gameConfigure = configure;
    return $this;
  }
  function GameState() {
    this.cur_0 = '_init';
    this.next_0 = '_transform';
    this.elapsed = 0.0;
    this.delay = 0.0;
    this.onUpdateCallback = LinkedHashMap_init();
    this.cur_0 = '_init';
    this.next_0 = '_init';
    this.elapsed = 0.0;
    this.delay = 0.0;
  }
  GameState.prototype.GetState = function () {
    return this.cur_0;
  };
  GameState.prototype.SetNextState_9sobi5$ = function (next, delay) {
    if (delay === void 0)
      delay = 0.0;
    var callback = this.onUpdateCallback.get_11rb$(this.cur_0);
    if (callback != null) {
      callback('leave');
    }
    this.elapsed = 0.0;
    this.delay = delay;
    this.cur_0 = '_transform';
    this.next_0 = next;
  };
  GameState.prototype.GetNextState = function () {
    return this.next_0;
  };
  GameState.prototype.update_mx4ult$ = function (elapsed) {
    this.elapsed = this.elapsed + elapsed;
    if (!equals(this.cur_0, this.next_0)) {
      if (this.elapsed >= this.delay) {
        this.cur_0 = this.next_0;
        var callback = this.onUpdateCallback.get_11rb$(this.cur_0);
        if (callback != null) {
          callback('enter');
        }
      }
    }
    if (!equals(this.cur_0, this.next_0)) {
      return false;
    }
    var callback_0 = this.onUpdateCallback.get_11rb$(this.cur_0);
    if (callback_0 != null) {
      callback_0('run');
    }
    return true;
  };
  GameState.prototype.addOnUpdateCallback_bodv9c$ = function (state, function_0) {
    if (equals(state, '_init') || equals(state, '_transform')) {
      return;
    }
    this.onUpdateCallback.put_xwzc9p$(state, function_0);
  };
  GameState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameState',
    interfaces: []
  };
  function GameValue(configure) {
    this.configure = configure;
    this.blockSet = '';
    this.blockInfo_3jid96$_0 = this.blockInfo_3jid96$_0;
    this.basicBonus = 1.0;
    this.gameTime = configure.gameTime;
    this.gameTimeInitialValue = configure.gameTime;
    this.blockDisableTime = configure.blockDisableTime;
    this.blockDisableTimeInitialValue = configure.blockDisableTime;
    this.score = 0;
    this.lastEarnedScore = 0;
    this.combo = 0;
    this.earnedStar = 0;
    this.finalFlag = false;
    this.maxComboOnGame = 0;
    this.maxFeverOnGame = 0;
    this.seq = 0;
    this.seqMax = 0;
    this.feverGage = 0.0;
    this.feverGageDecreaseValue = 0.5;
    this.feverLevel = 0;
    this.perfectPlay = true;
    this.hintFlag = false;
    this.clickCount = 0;
    this.clickAllCount = 0;
    var array = new Int32Array(configure.kindOfNumber);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = 0;
    }
    this.clearBlockType = array;
    var array_0 = new Int32Array(Kotlin.imul(configure.width, configure.height) + 1 | 0);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = 0;
    }
    this.clearBlockCount = array_0;
    this.clearBlockAmount = 0;
    this.clearedObstacleSum = 0;
    var array_1 = new Int32Array(configure.kindOfNumber);
    var tmp$_1;
    tmp$_1 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      array_1[i_1] = 0;
    }
    this.clearedObstacleSumByType = array_1;
    this.mapForSharing_9nqlsq$_0 = this.mapForSharing_9nqlsq$_0;
    this.playingTime = 0.0;
    this.addTimeEveryFeverAmount = 0.0;
  }
  Object.defineProperty(GameValue.prototype, 'blockInfo', {
    get: function () {
      if (this.blockInfo_3jid96$_0 == null)
        return throwUPAE('blockInfo');
      return this.blockInfo_3jid96$_0;
    },
    set: function (blockInfo) {
      this.blockInfo_3jid96$_0 = blockInfo;
    }
  });
  Object.defineProperty(GameValue.prototype, 'mapForSharing', {
    get: function () {
      if (this.mapForSharing_9nqlsq$_0 == null)
        return throwUPAE('mapForSharing');
      return this.mapForSharing_9nqlsq$_0;
    },
    set: function (mapForSharing) {
      this.mapForSharing_9nqlsq$_0 = mapForSharing;
    }
  });
  GameValue.prototype.reset = function () {
    this.gameTime = this.gameTimeInitialValue;
    this.blockDisableTime = this.blockDisableTimeInitialValue;
    this.score = 0;
    this.lastEarnedScore = 0;
    this.combo = 0;
    this.earnedStar = 0;
    this.finalFlag = false;
    this.maxComboOnGame = 0;
    this.seq = 0;
    this.seqMax = 0;
    this.feverGage = 0.0;
    this.feverLevel = 0;
    this.perfectPlay = true;
    this.hintFlag = false;
    this.clickCount = 0;
    this.clickAllCount = 0;
    var array = new Int32Array(this.configure.kindOfNumber);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = 0;
    }
    this.clearBlockType = array;
    var array_0 = new Int32Array(Kotlin.imul(this.configure.width, this.configure.height) + 1 | 0);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = 0;
    }
    this.clearBlockCount = array_0;
    this.clearedObstacleSum = 0;
    var array_1 = new Int32Array(this.configure.kindOfNumber);
    var tmp$_1;
    tmp$_1 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      array_1[i_1] = 0;
    }
    this.clearedObstacleSumByType = array_1;
    this.mapForSharing = [];
    this.playingTime = 0.0;
    this.addTimeEveryFeverAmount = 0.0;
  };
  GameValue.prototype.addBlockType_za3lpa$ = function (type) {
    var tmp$;
    tmp$ = this.clearBlockType;
    tmp$[type] = tmp$[type] + 1 | 0;
  };
  GameValue.prototype.addBlockCount_za3lpa$ = function (count) {
    var tmp$;
    tmp$ = this.clearBlockCount;
    tmp$[count] = tmp$[count] + 1 | 0;
    this.clearBlockAmount = this.clearBlockAmount + count | 0;
  };
  GameValue.prototype.addObstacleClear_za3lpa$ = function (type) {
    var tmp$;
    this.clearedObstacleSum = this.clearedObstacleSum + 1 | 0;
    tmp$ = this.clearedObstacleSumByType;
    tmp$[type % 1000] = tmp$[type % 1000] + 1 | 0;
  };
  GameValue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameValue',
    interfaces: []
  };
  function ScheduledJob(startTime, endTime, interval, repeatCount, name) {
    if (interval === void 0)
      interval = 0.0;
    if (repeatCount === void 0)
      repeatCount = 0;
    if (name === void 0)
      name = '';
    this.name = name;
    this.manager_punyzj$_0 = this.manager_punyzj$_0;
    this.startTime = startTime;
    this.endTime = endTime;
    this.interval = interval;
    this.repeatCount = repeatCount;
    this.lastExcuteTime = 0.0;
    this.onUpdateCallback = null;
    this.onChangeCallback = LinkedHashMap_init();
    this.state = ScheduledJob$State$ready_getInstance();
  }
  function ScheduledJob$State(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ScheduledJob$State_initFields() {
    ScheduledJob$State_initFields = function () {
    };
    ScheduledJob$State$ready_instance = new ScheduledJob$State('ready', 0);
    ScheduledJob$State$running_instance = new ScheduledJob$State('running', 1);
    ScheduledJob$State$paused_instance = new ScheduledJob$State('paused', 2);
    ScheduledJob$State$stop_instance = new ScheduledJob$State('stop', 3);
  }
  var ScheduledJob$State$ready_instance;
  function ScheduledJob$State$ready_getInstance() {
    ScheduledJob$State_initFields();
    return ScheduledJob$State$ready_instance;
  }
  var ScheduledJob$State$running_instance;
  function ScheduledJob$State$running_getInstance() {
    ScheduledJob$State_initFields();
    return ScheduledJob$State$running_instance;
  }
  var ScheduledJob$State$paused_instance;
  function ScheduledJob$State$paused_getInstance() {
    ScheduledJob$State_initFields();
    return ScheduledJob$State$paused_instance;
  }
  var ScheduledJob$State$stop_instance;
  function ScheduledJob$State$stop_getInstance() {
    ScheduledJob$State_initFields();
    return ScheduledJob$State$stop_instance;
  }
  ScheduledJob$State.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'State',
    interfaces: [Enum]
  };
  function ScheduledJob$State$values() {
    return [ScheduledJob$State$ready_getInstance(), ScheduledJob$State$running_getInstance(), ScheduledJob$State$paused_getInstance(), ScheduledJob$State$stop_getInstance()];
  }
  ScheduledJob$State.values = ScheduledJob$State$values;
  function ScheduledJob$State$valueOf(name) {
    switch (name) {
      case 'ready':
        return ScheduledJob$State$ready_getInstance();
      case 'running':
        return ScheduledJob$State$running_getInstance();
      case 'paused':
        return ScheduledJob$State$paused_getInstance();
      case 'stop':
        return ScheduledJob$State$stop_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.logic.ScheduledJob.State.' + name);
    }
  }
  ScheduledJob$State.valueOf_61zpoe$ = ScheduledJob$State$valueOf;
  Object.defineProperty(ScheduledJob.prototype, 'manager', {
    get: function () {
      if (this.manager_punyzj$_0 == null)
        return throwUPAE('manager');
      return this.manager_punyzj$_0;
    },
    set: function (manager) {
      this.manager_punyzj$_0 = manager;
    }
  });
  ScheduledJob.prototype.SetUpdateCallback_d6xl6w$ = function (callback) {
    this.onUpdateCallback = callback;
  };
  ScheduledJob.prototype.SetStartCallback_o14v8n$ = function (callback) {
    this.onChangeCallback.put_xwzc9p$('start', callback);
  };
  ScheduledJob.prototype.SetPauseCallback_o14v8n$ = function (callback) {
    this.onChangeCallback.put_xwzc9p$('pause', callback);
  };
  ScheduledJob.prototype.SetResumeCallback_o14v8n$ = function (callback) {
    this.onChangeCallback.put_xwzc9p$('resume', callback);
  };
  ScheduledJob.prototype.SetRestartCallback_o14v8n$ = function (callback) {
    this.onChangeCallback.put_xwzc9p$('restart', callback);
  };
  ScheduledJob.prototype.SetStopCallback_o14v8n$ = function (callback) {
    this.onChangeCallback.put_xwzc9p$('stop', callback);
  };
  ScheduledJob.prototype.SetRemoveCallback_o14v8n$ = function (callback) {
    this.onChangeCallback.put_xwzc9p$('remove', callback);
  };
  ScheduledJob.prototype.SetInterver_mx4ult$ = function (interval) {
    this.interval = interval;
  };
  ScheduledJob.prototype.update_mx4ult$ = function (elapsed) {
    var tmp$;
    (tmp$ = this.onUpdateCallback) != null ? tmp$(elapsed) : null;
  };
  ScheduledJob.prototype.start = function () {
    var tmp$;
    if (this.state === ScheduledJob$State$ready_getInstance()) {
      (tmp$ = this.onChangeCallback.get_11rb$('start')) != null ? tmp$() : null;
      this.lastExcuteTime = this.manager.currentTime;
      this.startTime = this.manager.currentTime + this.interval;
      this.state = ScheduledJob$State$running_getInstance();
    }
  };
  ScheduledJob.prototype.pause = function () {
    var tmp$;
    if (this.state === ScheduledJob$State$running_getInstance()) {
      (tmp$ = this.onChangeCallback.get_11rb$('pause')) != null ? tmp$() : null;
      this.startTime = this.startTime - this.manager.currentTime;
      this.state = ScheduledJob$State$paused_getInstance();
    }
  };
  ScheduledJob.prototype.resume = function () {
    var tmp$;
    if (this.state === ScheduledJob$State$paused_getInstance()) {
      (tmp$ = this.onChangeCallback.get_11rb$('resume')) != null ? tmp$() : null;
      this.lastExcuteTime = this.manager.currentTime;
      this.startTime += this.manager.currentTime;
      this.state = ScheduledJob$State$running_getInstance();
    }
  };
  ScheduledJob.prototype.restart = function () {
    var tmp$;
    (tmp$ = this.onChangeCallback.get_11rb$('restart')) != null ? tmp$() : null;
    this.lastExcuteTime = this.manager.currentTime;
    this.startTime = this.manager.currentTime + this.interval;
    this.state = ScheduledJob$State$running_getInstance();
  };
  ScheduledJob.prototype.stop = function () {
    var tmp$;
    if (this.state !== ScheduledJob$State$stop_getInstance()) {
      (tmp$ = this.onChangeCallback.get_11rb$('stop')) != null ? tmp$() : null;
      this.state = ScheduledJob$State$stop_getInstance();
    }
  };
  ScheduledJob.prototype.remove = function () {
    var tmp$;
    (tmp$ = this.onChangeCallback.get_11rb$('remove')) != null ? tmp$() : null;
    this.onUpdateCallback = null;
    this.onChangeCallback.clear();
  };
  ScheduledJob.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScheduledJob',
    interfaces: []
  };
  function ScheduledJobManager() {
    this.currentTime = 0.0;
    this.list = ArrayList_init();
    this.update = ScheduledJobManager$update$lambda(this);
  }
  ScheduledJobManager.prototype.addJob_5h0cc$ = function (job) {
    job.manager = this;
    this.list.add_11rb$(job);
  };
  function ScheduledJobManager$update$lambda(this$ScheduledJobManager) {
    return function (elapsed) {
      this$ScheduledJobManager.currentTime = this$ScheduledJobManager.currentTime + elapsed;
      var curTime = this$ScheduledJobManager.currentTime;
      for (var index = this$ScheduledJobManager.list.size - 1 | 0; index >= 0; index--) {
        var job = this$ScheduledJobManager.list.get_za3lpa$(index);
        switch (job.state.name) {
          case 'running':
            if (job.endTime > 0 && job.endTime <= curTime) {
              job.state = ScheduledJob$State$stop_getInstance();
            }
             else {
              if (job.startTime <= curTime) {
                job.update_mx4ult$(curTime - job.lastExcuteTime);
                job.lastExcuteTime = curTime;
                job.startTime = curTime + job.interval;
                if (job.repeatCount > 0) {
                  job.repeatCount = job.repeatCount - 1 | 0;
                  if (job.repeatCount === 0) {
                    job.state = ScheduledJob$State$stop_getInstance();
                  }
                }
              }
            }

            break;
          case 'stop':
            job.remove();
            this$ScheduledJobManager.list.removeAt_za3lpa$(index);
            break;
        }
      }
    };
  }
  ScheduledJobManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScheduledJobManager',
    interfaces: []
  };
  function Tutorial() {
    this.inputEnable = ArrayList_init();
    this.inputMask = ArrayList_init();
    this.availableInputCount = 0;
    this.lastIncrease = new Pair(-1, -1);
    this.justDropType = 0;
    this.justDropCount = -1;
    this.markerScale = new Float32Array([]);
    this.item = ArrayList_init();
    this.onReady_1hbg4m$_0 = Tutorial$onReady$lambda(this);
    this.onGameOver_mfeufl$_0 = Tutorial$onGameOver$lambda(this);
    this.onWaitForStop_7w6bbt$_0 = Tutorial$onWaitForStop$lambda(this);
  }
  Tutorial.prototype.initGameVariables = function () {
    var tmp$;
    Game_0.prototype.initGameVariables.call(this);
    var blockInfo = Kotlin.isType(tmp$ = ItemManager$Companion_getInstance().shared().GetItemInfo_61zpoe$('BlocksetNumber'), BlockItem) ? tmp$ : throwCCE();
    this.gameValue.blockInfo = blockInfo;
    this.gameValue.blockSet = blockInfo.resource;
    var array = new Float32Array(Kotlin.imul(this.gameConfigure.width, this.gameConfigure.height));
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_0; i++) {
      array[i] = 0.0;
    }
    this.markerScale = array;
  };
  function Tutorial$initAdditional$lambda(this$Tutorial, closure$x, closure$y, closure$marker) {
    return function (info) {
      var scale = this$Tutorial.markerScale[closure$x + Kotlin.imul(closure$y, this$Tutorial.gameConfigure.width) | 0];
      closure$marker.SetScaleFromOriginal_mx4ult$(scale);
      if (scale > 1.0) {
        closure$marker.SetAlpha_8ca0d4$(1.0 - (scale - 1.0));
      }
       else if (scale > 0.8) {
        closure$marker.SetAlpha_8ca0d4$(1.0);
      }
       else {
        closure$marker.SetAlpha_8ca0d4$(0.0);
      }
      this$Tutorial.markerScale[closure$x + Kotlin.imul(closure$y, this$Tutorial.gameConfigure.width) | 0] = this$Tutorial.markerScale[closure$x + Kotlin.imul(closure$y, this$Tutorial.gameConfigure.width) | 0] + info.elapsed * 1.5;
      if (this$Tutorial.markerScale[closure$x + Kotlin.imul(closure$y, this$Tutorial.gameConfigure.width) | 0] > 2.0) {
        this$Tutorial.markerScale[closure$x + Kotlin.imul(closure$y, this$Tutorial.gameConfigure.width) | 0] = 0.0;
      }
      return true;
    };
  }
  Tutorial.prototype.initAdditional = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    this.view.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.view.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    var blockInfo = Kotlin.isType(tmp$ = this.gameValue.blockInfo, BlockItem) ? tmp$ : throwCCE();
    tmp$_0 = this.gameConfigure.height - 1 | 0;
    for (var y = 0; y <= tmp$_0; y++) {
      tmp$_1 = this.gameConfigure.width - 1 | 0;
      for (var x = 0; x <= tmp$_1; x++) {
        var tmp$_4 = this.boardRect.x;
        var FLOAT$result;
        FLOAT$break: do {
          if (x == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(x)) {
            FLOAT$result = numberToDouble(x);
            break FLOAT$break;
          }
          if (typeof x === 'string') {
            try {
              var number = toDouble(x);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        var tmp$_5 = tmp$_4 + FLOAT$result * this.gameConfigure.tileWidthResult + this.gameConfigure.tileWidthGap * 0.5;
        var tmp$_6 = this.boardRect.y;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (y == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(y)) {
            FLOAT$result_0 = numberToDouble(y);
            break FLOAT$break;
          }
          if (typeof y === 'string') {
            try {
              var number_0 = toDouble(y);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        var tmp$_7 = tmp$_6 + FLOAT$result_0 * this.gameConfigure.tileHeightResult + this.gameConfigure.tileHeightGap * 0.5;
        var value = SceneLayer$gameBoardBottom_getInstance().value;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result_1 = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number_1 = toDouble(value);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var sprite = Sprite_init(tmp$_5, tmp$_7, FLOAT$result_1, blockInfo.resource + 'board_tile', this.gameConfigure.tileWidth, this.gameConfigure.tileHeight);
        sprite.SetBlendMode_ieo8yr$(BlendMode$alpha_getInstance());
        sprite.SetBlendFactor_mx4ult$(1.0);
        sprite.SetColor_vnjrmz$(blockInfo.tileColor);
        this.view.addChild_g5h3xp$(sprite);
        this.boardList.add_11rb$(sprite);
        var tmp$_8 = this.boardRect.x;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (x == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(x)) {
            FLOAT$result_2 = numberToDouble(x);
            break FLOAT$break;
          }
          if (typeof x === 'string') {
            try {
              var number_2 = toDouble(x);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        var tmp$_9 = tmp$_8 + FLOAT$result_2 * this.gameConfigure.tileWidthResult;
        var tmp$_10 = this.boardRect.y;
        var FLOAT$result_3;
        FLOAT$break: do {
          if (y == null) {
            FLOAT$result_3 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(y)) {
            FLOAT$result_3 = numberToDouble(y);
            break FLOAT$break;
          }
          if (typeof y === 'string') {
            try {
              var number_3 = toDouble(y);
              FLOAT$result_3 = number_3;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_3 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_3 = 0.0;
        }
         while (false);
        var tmp$_11 = tmp$_10 + FLOAT$result_3 * this.gameConfigure.tileHeightResult;
        var value_0 = SceneLayer$uiBottom_getInstance().value;
        var FLOAT$result_4;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_4 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_4 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_4 = toDouble(value_0);
              FLOAT$result_4 = number_4;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_4 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_4 = 0.0;
        }
         while (false);
        var mask = Sprite_init(tmp$_9, tmp$_11, FLOAT$result_4, null, this.gameConfigure.tileWidthResult, this.gameConfigure.tileHeightResult);
        mask.SetBlendMode_ieo8yr$(BlendMode$alpha_getInstance());
        mask.SetColor_vnjrmz$(Color$Companion_getInstance().black_mx4ult$());
        mask.SetAlpha_8ca0d4$(0.0);
        mask.SetShow_6taknv$(true);
        this.view.addChild_g5h3xp$(mask);
        this.inputMask.add_11rb$(mask);
        this.inputEnable.add_11rb$(true);
      }
    }
    var region = [Rect_init(0.0, 0.0, this.view.size.width, this.boardRect.y), Rect_init(0.0, this.boardRect.y, this.boardRect.x, this.boardRect.height), Rect_init(this.boardRect.x + this.boardRect.width, this.boardRect.y, this.view.size.width - (this.boardRect.x + this.boardRect.width), this.boardRect.height), Rect_init(0.0, this.boardRect.y + this.boardRect.height, this.view.size.width, this.view.size.height - (this.boardRect.y + this.boardRect.height))];
    for (var i = 0; i <= 3; i++) {
      var tmp$_12 = region[i].x;
      var tmp$_13 = region[i].y;
      var value_1 = SceneLayer$uiBottom_getInstance().value;
      var FLOAT$result_5;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_5 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_5 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_5 = toDouble(value_1);
            FLOAT$result_5 = number_5;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_5 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_5 = 0.0;
      }
       while (false);
      var mask_0 = Sprite_init(tmp$_12, tmp$_13, FLOAT$result_5, null, region[i].width, region[i].height);
      mask_0.SetBlendMode_ieo8yr$(BlendMode$alpha_getInstance());
      mask_0.SetColor_vnjrmz$(Color$Companion_getInstance().black_mx4ult$());
      mask_0.SetAlpha_8ca0d4$(0.0);
      mask_0.SetShow_6taknv$(true);
      this.view.addChild_g5h3xp$(mask_0);
      this.inputMask.add_11rb$(mask_0);
    }
    var tmp$_14 = this.boardRect.x;
    var tmp$_15 = this.boardRect.y;
    var value_2 = SceneLayer$gameBoardTop_getInstance().value;
    var FLOAT$result_6;
    FLOAT$break: do {
      if (value_2 == null) {
        FLOAT$result_6 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_2)) {
        FLOAT$result_6 = numberToDouble(value_2);
        break FLOAT$break;
      }
      if (typeof value_2 === 'string') {
        try {
          var number_6 = toDouble(value_2);
          FLOAT$result_6 = number_6;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_6 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_6 = 0.0;
    }
     while (false);
    var mask_1 = Mask_init(tmp$_14, tmp$_15, FLOAT$result_6, 'Resource/UI/board_mask', this.boardRect.width, this.boardRect.height);
    mask_1.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    mask_1.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    this.view.addChild_g5h3xp$(mask_1);
    this.view.mask = mask_1;
    tmp$_2 = this.gameConfigure.height - 1 | 0;
    for (var y_0 = 0; y_0 <= tmp$_2; y_0++) {
      tmp$_3 = this.gameConfigure.width - 1 | 0;
      for (var x_0 = 0; x_0 <= tmp$_3; x_0++) {
        this.markerScale[x_0 + Kotlin.imul(y_0, this.gameConfigure.width) | 0] = 0.0;
        var value_3 = SceneLayer$uiTop_getInstance().value;
        var FLOAT$result_7;
        FLOAT$break: do {
          if (value_3 == null) {
            FLOAT$result_7 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_3)) {
            FLOAT$result_7 = numberToDouble(value_3);
            break FLOAT$break;
          }
          if (typeof value_3 === 'string') {
            try {
              var number_7 = toDouble(value_3);
              FLOAT$result_7 = number_7;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_7 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_7 = 0.0;
        }
         while (false);
        var marker = Sprite_init(0.0, 0.0, FLOAT$result_7, 'Resource/UI/IconMarker', this.gameConfigure.tileWidthResult, this.gameConfigure.tileHeightResult);
        marker.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        marker.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        var value_4 = x_0 + Kotlin.imul(y_0, this.gameConfigure.width) | 0;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value_4)) {
            STRING$result = value_4.toString();
            break STRING$break;
          }
           else if (typeof value_4 === 'string') {
            STRING$result = value_4;
            break STRING$break;
          }
           else if (typeof value_4 === 'boolean') {
            STRING$result = value_4.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_4)) {
            STRING$result = value_4.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        marker.SetName_61zpoe$('Marker' + STRING$result);
        marker.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
        marker.SetBlendFactor_mx4ult$(1.0);
        marker.SetAlpha_8ca0d4$(0.0);
        this.view.addChild_g5h3xp$(marker);
        marker.SetShow_6taknv$(false);
        var tmp$_16 = this.boardRect.x;
        var FLOAT$result_8;
        FLOAT$break: do {
          if (x_0 == null) {
            FLOAT$result_8 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(x_0)) {
            FLOAT$result_8 = numberToDouble(x_0);
            break FLOAT$break;
          }
          if (typeof x_0 === 'string') {
            try {
              var number_8 = toDouble(x_0);
              FLOAT$result_8 = number_8;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_8 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_8 = 0.0;
        }
         while (false);
        var tmp$_17 = tmp$_16 + FLOAT$result_8 * this.gameConfigure.tileWidthResult + this.gameConfigure.tileWidthResult * 0.5;
        var tmp$_18 = this.boardRect.y;
        var FLOAT$result_9;
        FLOAT$break: do {
          if (y_0 == null) {
            FLOAT$result_9 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(y_0)) {
            FLOAT$result_9 = numberToDouble(y_0);
            break FLOAT$break;
          }
          if (typeof y_0 === 'string') {
            try {
              var number_9 = toDouble(y_0);
              FLOAT$result_9 = number_9;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_9 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_9 = 0.0;
        }
         while (false);
        marker.SetPosition_dleff0$(tmp$_17, tmp$_18 + FLOAT$result_9 * this.gameConfigure.tileHeightResult + this.gameConfigure.tileHeightResult * 0.5);
        marker.addUpdateCallback_sds54w$('Marker', void 0, void 0, void 0, void 0, void 0, Tutorial$initAdditional$lambda(this, x_0, y_0, marker));
        var value_5 = SceneLayer$uiTop_getInstance().value;
        var FLOAT$result_10;
        FLOAT$break: do {
          if (value_5 == null) {
            FLOAT$result_10 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_5)) {
            FLOAT$result_10 = numberToDouble(value_5);
            break FLOAT$break;
          }
          if (typeof value_5 === 'string') {
            try {
              var number_10 = toDouble(value_5);
              FLOAT$result_10 = number_10;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_10 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_10 = 0.0;
        }
         while (false);
        var finger = Sprite_init(0.0, 0.0, FLOAT$result_10, 'Resource/UI/IconFinger_0', this.gameConfigure.tileWidthResult, this.gameConfigure.tileHeightResult);
        var frame = ['Resource/UI/IconFinger_0', 'Resource/UI/IconFinger_1'];
        var animation = new Animation(frame, 0.5, -1, this.gameConfigure.tileWidthResult, this.gameConfigure.tileHeightResult, 0.0, 0.0);
        animation.SetStartFrame_za3lpa$(0);
        animation.SetEndFrame_za3lpa$(1);
        finger.SetAnimation_pe1q5w$(animation);
        finger.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        finger.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        var value_6 = x_0 + Kotlin.imul(y_0, this.gameConfigure.width) | 0;
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value_6)) {
            STRING$result_0 = value_6.toString();
            break STRING$break;
          }
           else if (typeof value_6 === 'string') {
            STRING$result_0 = value_6;
            break STRING$break;
          }
           else if (typeof value_6 === 'boolean') {
            STRING$result_0 = value_6.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_6)) {
            STRING$result_0 = value_6.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        finger.SetName_61zpoe$('Finger' + STRING$result_0);
        this.view.addChild_g5h3xp$(finger);
        finger.SetShow_6taknv$(false);
        var tmp$_19 = this.boardRect.x;
        var FLOAT$result_11;
        FLOAT$break: do {
          if (x_0 == null) {
            FLOAT$result_11 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(x_0)) {
            FLOAT$result_11 = numberToDouble(x_0);
            break FLOAT$break;
          }
          if (typeof x_0 === 'string') {
            try {
              var number_11 = toDouble(x_0);
              FLOAT$result_11 = number_11;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_11 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_11 = 0.0;
        }
         while (false);
        var tmp$_20 = tmp$_19 + FLOAT$result_11 * this.gameConfigure.tileWidthResult + this.gameConfigure.tileWidthResult * 0.5;
        var tmp$_21 = this.boardRect.y;
        var FLOAT$result_12;
        FLOAT$break: do {
          if (y_0 == null) {
            FLOAT$result_12 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(y_0)) {
            FLOAT$result_12 = numberToDouble(y_0);
            break FLOAT$break;
          }
          if (typeof y_0 === 'string') {
            try {
              var number_12 = toDouble(y_0);
              FLOAT$result_12 = number_12;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_12 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_12 = 0.0;
        }
         while (false);
        finger.SetPosition_dleff0$(tmp$_20, tmp$_21 + FLOAT$result_12 * this.gameConfigure.tileHeightResult + this.gameConfigure.tileHeightResult * 1.0);
      }
    }
  };
  Tutorial.prototype.deinitGameVariables = function () {
    var tmp$, tmp$_0;
    (tmp$ = this.view.mask) != null ? (tmp$.removeFromParent(), Unit) : null;
    for (var i = this.boardList.size - 1 | 0; i >= 0; i--) {
      var board = this.boardList.removeAt_za3lpa$(i);
      board.removeFromParent();
      var mask = this.inputMask.removeAt_za3lpa$(i);
      mask.removeFromParent();
    }
    Game_0.prototype.deinitGameVariables.call(this);
    (tmp$_0 = this.view.screen) != null ? (tmp$_0.removeTouchListener_61zpoe$('For Game'), Unit) : null;
  };
  Tutorial.prototype.start = function () {
    var tmp$;
    this.masterTimer.start();
    (tmp$ = this.gameLogicUpdater) != null ? (tmp$.start(), Unit) : null;
    this.gameState.SetNextState_9sobi5$('ready');
    this.cancelKeyInput_za3lpa$();
    this.initializeDone = true;
  };
  Tutorial.prototype.generateBoard = function () {
    this.regenAllBlock_za3lpa$(this.gameConfigure.dropAdjust);
  };
  Tutorial.prototype.SetBoardIndex_3oypbd$ = function (map, block, item, reuseBlock, reuseWhenNoMoreMove, resetClearBlockCount) {
    if (map === void 0)
      map = null;
    if (block === void 0)
      block = new Int32Array([]);
    if (item === void 0)
      item = new Int32Array([]);
    if (reuseBlock === void 0)
      reuseBlock = false;
    if (reuseWhenNoMoreMove === void 0)
      reuseWhenNoMoreMove = false;
    if (resetClearBlockCount === void 0)
      resetClearBlockCount = false;
    this.boardGenerator = TutorialBoardGenerator_init(this, void 0, map, block, reuseBlock, reuseWhenNoMoreMove, resetClearBlockCount);
  };
  Tutorial.prototype.addBlock_q5rwfd$ = function (block) {
    var tmp$;
    (Kotlin.isType(tmp$ = this.boardGenerator, TutorialBoardGenerator) ? tmp$ : throwCCE()).addBlock_q5rwfd$(block);
  };
  Object.defineProperty(Tutorial.prototype, 'onReady', {
    get: function () {
      return this.onReady_1hbg4m$_0;
    }
  });
  Object.defineProperty(Tutorial.prototype, 'onGameOver', {
    get: function () {
      return this.onGameOver_mfeufl$_0;
    }
  });
  Object.defineProperty(Tutorial.prototype, 'onWaitForStop', {
    get: function () {
      return this.onWaitForStop_7w6bbt$_0;
    }
  });
  Tutorial.prototype.updateInfo = function () {
  };
  Tutorial.prototype.processKeyInput = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    if (this.availableInputCount === 0) {
      this.cancelKeyInput_za3lpa$();
      return;
    }
    var clicked = this.GetClickedButton();
    if (clicked.first !== -1 && clicked.second !== -1) {
      var x = clicked.first;
      var y = clicked.second;
      if (this.inputEnable.get_za3lpa$(x + Kotlin.imul(y, this.gameConfigure.width) | 0) === false) {
        this.cancelKeyInput_za3lpa$();
        return;
      }
      tmp$ = this.gameValue;
      tmp$.clickAllCount = tmp$.clickAllCount + 1 | 0;
      var tile = Kotlin.isType(tmp$_0 = this.map[x][y], TileEntity) ? tmp$_0 : null;
      if (tile != null) {
        if (Kotlin.isType(tile, BlockEntity)) {
          var block = Kotlin.isType(tmp$_1 = tile, BlockEntity) ? tmp$_1 : throwCCE();
          if (this.isBlockClickable_nwthlc$(block) === false) {
            if (block.GetAttribute() === TileEntity$Attribute$disabled_getInstance()) {
              SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('shake');
              this.cancelKeyInput_za3lpa$(0);
              block.shake_7b5o5w$();
            }
            return;
          }
          if (this.preIncreaseChainedTile_qt1dr2$(x, y, block.value) === false) {
            return;
          }
          SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('change');
          this.boardGenerator.clearHint();
          this.checkDelayedBlock();
          this.increaseChainedTile_qt1dr2$(x, y, block.value);
          tmp$_2 = this.gameValue;
          tmp$_2.clickCount = tmp$_2.clickCount + 1 | 0;
          if (this.availableInputCount > 0) {
            this.availableInputCount = this.availableInputCount - 1 | 0;
          }
          (tmp$_3 = this.blockDisableTimer) != null ? (tmp$_3.pause(), Unit) : null;
          this.gameValue.seq = 0;
          this.lastIncrease = new Pair(x, y);
        }
         else if (Kotlin.isType(tile, ItemEntity)) {
          this.boardGenerator.clearHint();
          this.checkDelayedBlock();
          var item = Kotlin.isType(tmp$_4 = tile, ItemEntity) ? tmp$_4 : throwCCE();
          item.SetUsed_6taknv$(true);
          tmp$_5 = this.gameValue;
          tmp$_5.clickCount = tmp$_5.clickCount + 1 | 0;
          if (this.availableInputCount > 0) {
            this.availableInputCount = this.availableInputCount - 1 | 0;
          }
          (tmp$_6 = this.blockDisableTimer) != null ? (tmp$_6.pause(), Unit) : null;
          this.gameValue.seq = 0;
        }
         else if (Kotlin.isType(tile, ObstacleEntity)) {
          SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('shake');
          tile.shake_7b5o5w$();
        }
      }
      this.cancelKeyInput_za3lpa$(0);
    }
  };
  Tutorial.prototype.checkJustDrop_za3lpa$ = function (count) {
    if (this.justDropCount === count) {
      if (this.gameValue.clearBlockType[this.justDropType] === count) {
        return true;
      }
    }
    return false;
  };
  Tutorial.prototype.createComboMark = function () {
  };
  Tutorial.prototype.createScore_l4u1g4$ = function (position, score) {
  };
  Tutorial.prototype.createFeverMark = function () {
  };
  Tutorial.prototype.createItem_mbbjvw$$default = function (value, subValue, x, y, tileX, tileY) {
    if (this.item.size > 0) {
      var next = this.item.removeAt_za3lpa$(0);
      return this.createItem_mbbjvw$(next % 100000, next / 100000 | 0, x, y, tileX, tileY, Game_0.prototype.createItem_mbbjvw$$default.bind(this));
    }
    return this.createItem_mbbjvw$(value, subValue, x, y, tileX, tileY, Game_0.prototype.createItem_mbbjvw$$default.bind(this));
  };
  Tutorial.prototype.SetInputEnable_vux9f0$ = function (x, y) {
    var index = x + Kotlin.imul(y, this.gameConfigure.width) | 0;
    this.inputEnable.set_wxm5ur$(index, true);
    return;
  };
  Tutorial.prototype.SetInputEnableAll = function () {
    var tmp$;
    tmp$ = this.inputEnable.size - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      this.inputEnable.set_wxm5ur$(i, true);
    }
  };
  Tutorial.prototype.SetInputDisable_vux9f0$ = function (x, y) {
    var index = x + Kotlin.imul(y, this.gameConfigure.width) | 0;
    this.inputEnable.set_wxm5ur$(index, false);
    return;
  };
  Tutorial.prototype.SetInputDisableAll_vux9f0$ = function (x, y) {
    if (x === void 0)
      x = -1;
    if (y === void 0)
      y = -1;
    var tmp$;
    tmp$ = this.inputEnable.size - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      if ((x + Kotlin.imul(y, this.gameConfigure.width) | 0) === i) {
        this.inputEnable.set_wxm5ur$(i, true);
      }
       else {
        this.inputEnable.set_wxm5ur$(i, false);
      }
    }
  };
  Tutorial.prototype.showInputMask = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.inputMask.size - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      if (i >= this.inputEnable.size) {
        (tmp$_0 = this.view.screen) != null ? (tmp$_0.actionFadeIn_hkbjms$(this.inputMask.get_za3lpa$(i), void 0, 0.75, void 0, 0.5), Unit) : null;
        continue;
      }
      if (this.inputEnable.get_za3lpa$(i) !== true) {
        (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionFadeIn_hkbjms$(this.inputMask.get_za3lpa$(i), void 0, 0.75, void 0, 0.5), Unit) : null;
      }
    }
  };
  Tutorial.prototype.hideInputMask = function () {
    var tmp$, tmp$_0;
    tmp$ = this.inputMask.size - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      (tmp$_0 = this.view.screen) != null ? (tmp$_0.actionFadeOut_7vo5wp$(this.inputMask.get_za3lpa$(i), this.inputMask.get_za3lpa$(i).GetAlpha(), void 0, 0.5), Unit) : null;
    }
  };
  Tutorial.prototype.SetAvailableInputCount_za3lpa$ = function (count) {
    if (count === void 0)
      count = -1;
    this.availableInputCount = count;
    if (this.availableInputCount === 0) {
      this.cancelKeyInput_za3lpa$();
    }
  };
  Tutorial.prototype.showMarker_vux9f0$ = function (x, y) {
    var tmp$ = this.view;
    var value = x + Kotlin.imul(y, this.gameConfigure.width) | 0;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var marker = tmp$.findChildByName_3m52m6$('Marker' + STRING$result);
    if (marker != null) {
      this.markerScale[x + Kotlin.imul(y, this.gameConfigure.width) | 0] = 0.0;
      marker.SetShow_6taknv$(true);
    }
  };
  Tutorial.prototype.hideMarker = function () {
    var tmp$, tmp$_0;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var tmp$_1 = this.view;
        var value = x + Kotlin.imul(y, this.gameConfigure.width) | 0;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        var marker = tmp$_1.findChildByName_3m52m6$('Marker' + STRING$result);
        if (marker != null) {
          marker.SetShow_6taknv$(false);
        }
      }
    }
  };
  Tutorial.prototype.showFinger_vux9f0$ = function (x, y) {
    var tmp$ = this.view;
    var value = x + Kotlin.imul(y, this.gameConfigure.width) | 0;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var marker = tmp$.findChildByName_3m52m6$('Finger' + STRING$result);
    if (marker != null) {
      marker.SetShow_6taknv$(true);
      marker.SetAlpha_8ca0d4$(0.8);
    }
  };
  Tutorial.prototype.hideFinger = function () {
    var tmp$, tmp$_0;
    tmp$ = this.gameConfigure.width - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = this.gameConfigure.height - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var tmp$_1 = this.view;
        var value = x + Kotlin.imul(y, this.gameConfigure.width) | 0;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        var marker = tmp$_1.findChildByName_3m52m6$('Finger' + STRING$result);
        if (marker != null) {
          marker.SetShow_6taknv$(false);
        }
      }
    }
  };
  Tutorial.prototype.createFeverBackgroundEffect = function () {
  };
  Tutorial.prototype.removeFeverBackgroundEffect = function () {
  };
  Tutorial.prototype.SetTransformDelay_mx4ult$ = function (delay) {
    if (delay === void 0)
      delay = 0.2;
    this.gameConfigure.transformDelay = delay;
  };
  Tutorial.prototype.SetMatchDelay_mx4ult$ = function (delay) {
    if (delay === void 0)
      delay = 0.0;
    this.gameConfigure.matchDelay = delay;
  };
  Tutorial.prototype.SetMatchEffectSpeed_mx4ult$ = function (speed) {
    if (speed === void 0)
      speed = 0.8;
    var ratio = 0.8 / speed;
    this.gameConfigure.matchEffectSpeed = speed;
    this.gameConfigure.matchEffectDuration = 0.5 * ratio;
    this.gameConfigure.removeFireDelay = 0.4 * ratio;
  };
  Tutorial.prototype.SetDropAdjust_za3lpa$ = function (adjust) {
    if (adjust === void 0)
      adjust = -1;
    this.gameConfigure.dropAdjust = adjust;
  };
  Tutorial.prototype.SetRegenNoMoreMove_6taknv$ = function (regen) {
    this.gameConfigure.regenNoMoreMove = regen;
  };
  Tutorial.prototype.SetJustDrop_vux9f0$ = function (type, count) {
    if (count === void 0)
      count = -1;
    this.justDropType = type;
    this.justDropCount = count;
  };
  function Tutorial$onReady$lambda(this$Tutorial) {
    return function (event) {
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      if (this$Tutorial.isIdle() === true) {
        this$Tutorial.gameState.SetNextState_9sobi5$('timerStart');
      }
       else {
        this$Tutorial.processCheck();
      }
    };
  }
  function Tutorial$onGameOver$lambda(this$Tutorial) {
    return function (event) {
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      this$Tutorial.gameOverFlag = false;
      this$Tutorial.gameState.SetNextState_9sobi5$('running');
    };
  }
  function Tutorial$onWaitForStop$lambda(this$Tutorial) {
    return function (event) {
      if (equals(event, 'enter') || equals(event, 'leave')) {
        return;
      }
      this$Tutorial.gameState.SetNextState_9sobi5$('gameClose');
    };
  }
  Tutorial.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Tutorial',
    interfaces: [Game_0]
  };
  function Tutorial_init(configure, $this) {
    $this = $this || Object.create(Tutorial.prototype);
    Game_init(configure, $this);
    Tutorial.call($this);
    return $this;
  }
  function TutorialBoardGenerator() {
    this.index = 1;
    this.block = ArrayList_init();
    this.blockIndex = 0;
    this.reuseBlock = false;
    this.reuseWhenNoMoreMove = false;
    this.resetClearBlockCount = false;
    this.stopCreateBlock = false;
  }
  TutorialBoardGenerator.prototype.createNewBoard_s8cxhz$$default = function (id) {
    var tmp$;
    if (this.reuseWhenNoMoreMove === true) {
      this.blockIndex = 0;
    }
    if (this.resetClearBlockCount === true) {
      tmp$ = ensureNotNull(this.game).gameValue.clearBlockType;
      for (var i = 0; i !== tmp$.length; ++i) {
        ensureNotNull(this.game).gameValue.clearBlockType[i] = 0;
      }
    }
  };
  TutorialBoardGenerator.prototype.GetAvailableBlock_vux9f0$ = function (x, y) {
    if (this.stopCreateBlock === true) {
      return -1;
    }
    if (this.blockIndex < this.block.size) {
      var block = this.block.get_za3lpa$(this.blockIndex);
      this.blockIndex = this.blockIndex + 1 | 0;
      return block;
    }
    if (this.reuseBlock === true && this.block.size > 0) {
      this.blockIndex = 0;
      var block_0 = this.block.get_za3lpa$(this.blockIndex);
      this.blockIndex = this.blockIndex + 1 | 0;
      return block_0;
    }
    var value = Random_getInstance().arc4random_uniform_za3lpa$(ensureNotNull(this.game).gameConfigure.kindOfNumber);
    var INT$result;
    INT$break: do {
      if (value == null) {
        INT$result = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value)) {
        INT$result = numberToInt(value);
        break INT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toInt_0(value);
          INT$result = number;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result = 0;
    }
     while (false);
    return INT$result;
  };
  TutorialBoardGenerator.prototype.GetAvailableBlockOriginal_za3lpa$ = function (x) {
    return this.GetAvailableBlock_vux9f0$(x, 0);
  };
  TutorialBoardGenerator.prototype.addBlock_q5rwfd$ = function (list) {
    this.block.addAll_brywnq$(toList_0(list));
  };
  TutorialBoardGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TutorialBoardGenerator',
    interfaces: [BoardGenerator]
  };
  function TutorialBoardGenerator_init(game, index, map, block, reuseBlock, reuseWhenNoMoreMove, resetClearBlockCount, $this) {
    if (index === void 0)
      index = -1;
    if (map === void 0)
      map = null;
    if (block === void 0)
      block = new Int32Array([]);
    if (reuseBlock === void 0)
      reuseBlock = false;
    if (reuseWhenNoMoreMove === void 0)
      reuseWhenNoMoreMove = false;
    if (resetClearBlockCount === void 0)
      resetClearBlockCount = false;
    $this = $this || Object.create(TutorialBoardGenerator.prototype);
    BoardGenerator_init(game, game.gameConfigure.width, game.gameConfigure.height, game.gameConfigure.kindOfNumber, game.gameConfigure.minOfComplete, $this);
    TutorialBoardGenerator.call($this);
    $this.index = index;
    $this.block = toMutableList(block);
    $this.reuseBlock = reuseBlock;
    $this.reuseWhenNoMoreMove = reuseWhenNoMoreMove;
    $this.resetClearBlockCount = resetClearBlockCount;
    if (map == null) {
      $this.createNewBoard_s8cxhz$(Kotlin.Long.ZERO, BoardGenerator.prototype.createNewBoard_s8cxhz$$default.bind($this));
    }
     else {
      $this.map = $this.rotateMap_ytlutl$(ensureNotNull(map));
    }
    return $this;
  }
  function ClassicConfigureForWatch() {
  }
  ClassicConfigureForWatch.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClassicConfigureForWatch',
    interfaces: [GameConfigure]
  };
  function ClassicConfigureForWatch_init(screenSize, $this) {
    $this = $this || Object.create(ClassicConfigureForWatch.prototype);
    GameConfigure_init(screenSize, $this);
    ClassicConfigureForWatch.call($this);
    $this.modeString = 'Classic';
    $this.localizedModeString = local('Classic Mode');
    $this.needStar = 0;
    $this.blockDisablePeriodically = false;
    $this.blockDisableTime = 2.0;
    $this.comboMode = 1;
    $this.showHint = false;
    $this.limitGameTime = true;
    $this.gameTime = 60.0;
    $this.lastChance = true;
    $this.kindOfNumber = 4;
    $this.minOfComplete = 3;
    $this.obstacleRatio = 15;
    $this.obstacleMinimumScore = 0;
    $this.obstacleMaximumNumber = 0;
    $this.itemTable = new Int32Array([-1]);
    $this.regenNoMoreMove = true;
    $this.checkNoMoreMatch = true;
    $this.touchInputMode = 0;
    $this.onetimeGrow = false;
    $this.clickOnce = true;
    $this.createNewBlockWithClicked = false;
    $this.dropBlock = true;
    $this.rotation = true;
    $this.disableChained = true;
    $this.dropAdjust = -1;
    $this.fallingSpeed = 0.0;
    $this.fallingSpeedLimit = 300.0;
    $this.acceleration = 100.0;
    $this.transformDelay = 0.14;
    $this.matchDelay = 0.2;
    $this.addTimeEveryFever = true;
    $this.addTimeEveryFeverAmount = 5.0;
    $this.addTimeEveryFeverAmountAdjust = 0.5;
    $this.addTimeEveryFeverAmountMinimum = 3.0;
    $this.allowFeverGaugeIncreasementAfterGameOver = true;
    $this.showSPS = true;
    return $this;
  }
  function ClassicConfigureForAndroid() {
  }
  ClassicConfigureForAndroid.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClassicConfigureForAndroid',
    interfaces: [ClassicConfigureForWatch]
  };
  function ClassicConfigureForAndroid_init(screenSize, $this) {
    $this = $this || Object.create(ClassicConfigureForAndroid.prototype);
    ClassicConfigureForWatch_init(screenSize, $this);
    ClassicConfigureForAndroid.call($this);
    $this.needStar = 0;
    $this.needStarForContinue = 10;
    $this.bonusTime = 15.0;
    $this.transformDelay = 0.14;
    $this.matchDelay = 0.2;
    $this.scorePerBlock = new Int32Array([0, 10, 20, 30, 40, 60, 90, 130, 180, 1000]);
    $this.topMargin = 0.65;
    $this.boardSize = 180.0;
    $this.gaugeHeightRatio = 0.5;
    return $this;
  }
  function ClassicConfigure6x6ForiOS() {
  }
  ClassicConfigure6x6ForiOS.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClassicConfigure6x6ForiOS',
    interfaces: [ClassicConfigureForWatch]
  };
  function ClassicConfigure6x6ForiOS_init(screenSize, $this) {
    $this = $this || Object.create(ClassicConfigure6x6ForiOS.prototype);
    ClassicConfigureForWatch_init(screenSize, $this);
    ClassicConfigure6x6ForiOS.call($this);
    $this.modeString = 'Classic6x6';
    $this.localizedModeString = local('Classic Mode 6x6');
    $this.needStar = 10;
    $this.comboMode = 1;
    $this.comboTimingLowest = 1.5;
    $this.kindOfNumber = 5;
    $this.minOfComplete = 3;
    $this.indexOfGroup = new Int32Array([0, 0, 0, 0, 0, -1]);
    $this.startOfGroup = new Int32Array([0]);
    $this.countOfGroup = new Int32Array([5]);
    $this.obstacleMaximumNumber = 36;
    $this.checkNoMoreMatch = true;
    $this.itemTable = new Int32Array([-1, -1, -1, -1, -1, -1, 101, 102, 103, 104, 100]);
    $this.alternativeItemForNirvana = 102;
    $this.reactivateAfter = 2.0;
    $this.resetInactiveWhenFever = false;
    $this.amountOfNirvana = 10;
    $this.transformDelay = 0.12;
    $this.matchDelay = 0.12;
    $this.scorePerBlock = new Int32Array([0, 10, 20, 30, 40, 60, 90, 120, 180]);
    $this.feverGagePerBlock = [new Float32Array([0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 9.0, 13.0, 18.0, 18.0])];
    $this.topMargin = 0.65;
    $this.width = 6;
    $this.height = 6;
    $this.fallingSpeed = 0.0;
    $this.fallingSpeedLimit = 300.0;
    $this.acceleration = 200.0;
    $this.fallingSpeedLimitForNoMoreMove = 16.0;
    $this.boardSize = 270.0;
    $this.gaugeHeightRatio = 0.5;
    return $this;
  }
  function GameConfigure() {
    this.screenSize = Rect_init();
    this.modeString = '';
    this.localizedModeString = '';
    this.needStar = 0;
    this.needStarForContinue = 5;
    this.explodeForContinue = 4;
    this.bonusTime = 15.0;
    this.score = 0;
    this.gameUpdateInterval = 0.0;
    this.comboTimerInterval = 0.0;
    this.feverTimerInterval = 0.0;
    this.blockDisableTimerInterval = 0.0;
    this.gameTimerInterval = 0.0;
    this.showReadyStart = true;
    this.takeSnapshot = false;
    this.comboMode = 1;
    this.showHint = false;
    this.blockDisablePeriodically = false;
    this.blockDisableTime = 2.0;
    this.adjustTimeForBlockDisableTime = 0.1;
    this.timeForAdjustBlockDisableTime = 60.0;
    this.minimumTimeForBlockDisableTime = 0.1;
    this.scoreForAdjustBlockDisableTime = 5000;
    this.blockDisableCountAtOnce = 1;
    this.checkPerfectPlay = false;
    this.limitGameTime = true;
    this.gameTime = 60.0;
    this.resetTimeEveryClear = false;
    this.gameTimeAdjustPerScore = 3000;
    this.kindOfNumber = 4;
    this.minOfComplete = 3;
    this.indexOfGroup = new Int32Array([0, 0, 0, 0, -1]);
    this.startOfGroup = new Int32Array([0]);
    this.countOfGroup = new Int32Array([4]);
    this.obstacleRatio = 0;
    this.obstacleMinimumScore = 0;
    this.obstacleMaximumNumber = 1;
    this.obstacleType = 0;
    this.itemTable = new Int32Array([-1, -1, -1, -1, -1, -1, 101, 103, 104, 102, 100]);
    this.alternativeItemForNirvana = -1;
    this.regenNoMoreMove = false;
    this.checkNoMoreMatch = false;
    this.lastChance = false;
    this.touchInputMode = 0;
    this.onetimeGrow = false;
    this.clickOnce = true;
    this.preventStreakClick = true;
    this.createNewBlock = true;
    this.createNewBlockWithClicked = false;
    this.dropBlock = true;
    this.rotation = true;
    this.disableChained = true;
    this.reactivateDisabled = false;
    this.reactivateAfter = 0.0;
    this.amountOfNirvana = 9;
    this.scorePerBlock = new Int32Array([0, 11, 22, 33, 44, 66, 99, 143, 198, 1100]);
    this.scoreMultiplierPerCombo = new Float32Array([1.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 9.0, 10.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]);
    this.scoreMultiplierPerFever = new Float32Array([1.0, 2.0, 2.5, 3.0, 3.5, 4.0, 5.0]);
    this.feverGagePerBlock = [new Float32Array([0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 9.0, 13.0, 18.0, 100.0])];
    this.feverGageBonusPerCombo = new Float32Array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0]);
    this.starPerFever = new Int32Array([0, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6]);
    this.starForNirvanaPerFever = new Int32Array([10, 25]);
    this.feverTime = 10.0;
    this.resetInactiveWhenFever = true;
    this.topMargin = 0.6;
    this.width = 3;
    this.height = 3;
    this.tileWidthResult = 45.0;
    this.tileHeightResult = 45.0;
    this.tileWidthGapRatio = 0.1;
    this.tileHeightGapRatio = 0.1;
    this.tileWidthGap = 0.0;
    this.tileHeightGap = 0.0;
    this.tileWidth = 0.0;
    this.tileHeight = 0.0;
    this.uiFolder = 'Resource/UI/';
    this.dropAdjust = -1;
    this.bounceOnLanding = true;
    this.fallingSpeed = 12.0;
    this.fallingSpeedLimit = 12.0;
    this.acceleration = 14.0;
    this.fallingSpeedLimitForNoMoreMove = 12.0;
    this.transformDelay = 0.2;
    this.matchDelay = 0.0;
    this.matchEffectSpeed = 2.0;
    this.matchEffectDuration = 0.5;
    this.removeFireDelay = 0.1;
    this.shakeDuration = 0.4;
    this.scoreDuration = 0.1;
    this.comboTiming = 2.0;
    this.comboTimingAdjust = 0.03;
    this.comboTimingLowest = 1.0;
    this.nirvanaDelayGap = 0.05;
    this.boardSize = 360.0;
    this.gaugeHeightRatio = 0.38;
    this.topGaugeHeight = 30.0;
    this.bottomGaugeHeight = 30.0;
    this.addTimeEveryFever = false;
    this.addTimeEveryFeverAmount = 30.0;
    this.addTimeEveryFeverAmountAdjust = -0.5;
    this.addTimeEveryFeverAmountMinimum = 0.0;
    this.allowFeverGaugeIncreasementAfterGameOver = false;
    this.showSPS = false;
    this.minimumSecondsForSPS = 60.0;
  }
  GameConfigure.prototype.GetStarPerFever_za3lpa$ = function (fever) {
    var fever_0 = fever;
    if (fever_0 >= this.starPerFever.length) {
      fever_0 = this.starPerFever.length - 1 | 0;
    }
    return this.starPerFever[fever_0];
  };
  GameConfigure.prototype.GetStarForNirvanaPerFever_za3lpa$ = function (fever) {
    var fever_0 = fever;
    if (fever_0 >= this.starForNirvanaPerFever.length) {
      fever_0 = this.starForNirvanaPerFever.length - 1 | 0;
    }
    return this.starForNirvanaPerFever[fever_0];
  };
  GameConfigure.prototype.adjustTileSize = function () {
    var maxHeight = this.screenSize.height * (this.boardSize / 480);
    var maxWidth = this.screenSize.width * (this.boardSize / 320);
    if (maxHeight > maxWidth) {
      maxHeight = maxWidth;
    }
    if (maxWidth > maxHeight) {
      maxWidth = maxHeight;
    }
    this.tileWidthResult = maxWidth / this.width;
    this.tileHeightResult = maxHeight / this.height;
    if (this.tileWidthResult > this.tileHeightResult) {
      this.tileWidthResult = this.tileHeightResult;
    }
    if (this.tileHeightResult > this.tileWidthResult) {
      this.tileHeightResult = this.tileWidthResult;
    }
    this.tileWidthGap = this.tileWidthResult * this.tileWidthGapRatio;
    this.tileHeightGap = this.tileHeightResult * this.tileHeightGapRatio;
    this.tileWidth = this.tileWidthResult - this.tileWidthGap;
    this.tileHeight = this.tileHeightResult - this.tileHeightGap;
    this.topGaugeHeight = this.tileHeight * this.gaugeHeightRatio;
    this.bottomGaugeHeight = this.tileHeight * this.gaugeHeightRatio;
  };
  GameConfigure.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameConfigure',
    interfaces: []
  };
  function GameConfigure_init(screenSize, $this) {
    $this = $this || Object.create(GameConfigure.prototype);
    GameConfigure.call($this);
    $this.screenSize = screenSize;
    return $this;
  }
  function InfiniteConfigureForWatch() {
  }
  InfiniteConfigureForWatch.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InfiniteConfigureForWatch',
    interfaces: [GameConfigure]
  };
  function InfiniteConfigureForWatch_init(screenSize, $this) {
    $this = $this || Object.create(InfiniteConfigureForWatch.prototype);
    GameConfigure_init(screenSize, $this);
    InfiniteConfigureForWatch.call($this);
    $this.modeString = 'Beginner';
    $this.localizedModeString = local('Beginner Mode');
    $this.showReadyStart = false;
    $this.blockDisablePeriodically = false;
    $this.blockDisableTime = 2.0;
    $this.showHint = false;
    $this.limitGameTime = false;
    $this.resetTimeEveryClear = false;
    $this.itemTable = new Int32Array([-1]);
    $this.width = 3;
    $this.height = 3;
    $this.kindOfNumber = 4;
    $this.minOfComplete = 3;
    $this.obstacleRatio = 15;
    $this.obstacleMinimumScore = 300000;
    $this.obstacleMaximumNumber = 0;
    $this.regenNoMoreMove = false;
    $this.checkNoMoreMatch = true;
    $this.clickOnce = true;
    $this.createNewBlockWithClicked = false;
    $this.dropBlock = true;
    $this.onetimeGrow = false;
    $this.rotation = true;
    $this.disableChained = true;
    $this.fallingSpeed = 0.0;
    $this.fallingSpeedLimit = 300.0;
    $this.acceleration = 100.0;
    $this.transformDelay = 0.14;
    $this.matchDelay = 0.2;
    $this.feverGagePerBlock = [new Float32Array([0.0, 0.0, 0.0, 6.0, 8.0, 12.0, 18.0, 26.0, 36.0, 100.0]), new Float32Array([0.0, 0.0, 0.0, 4.0, 5.0, 8.0, 12.0, 17.0, 24.0, 100.0]), new Float32Array([0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 9.0, 13.0, 18.0, 100.0])];
    $this.topMargin = 0.6;
    $this.takeSnapshot = true;
    return $this;
  }
  function InfiniteConfigureForiOS() {
  }
  InfiniteConfigureForiOS.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InfiniteConfigureForiOS',
    interfaces: [InfiniteConfigureForWatch]
  };
  function InfiniteConfigureForiOS_init(screenSize, $this) {
    $this = $this || Object.create(InfiniteConfigureForiOS.prototype);
    InfiniteConfigureForWatch_init(screenSize, $this);
    InfiniteConfigureForiOS.call($this);
    $this.transformDelay = 0.14;
    $this.matchDelay = 0.2;
    $this.scorePerBlock = new Int32Array([0, 10, 20, 30, 40, 60, 90, 130, 180, 1000]);
    $this.topMargin = 0.65;
    $this.boardSize = 180.0;
    $this.gaugeHeightRatio = 0.5;
    return $this;
  }
  function InfiniteConfigure6x6ForiOS() {
  }
  InfiniteConfigure6x6ForiOS.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InfiniteConfigure6x6ForiOS',
    interfaces: [InfiniteConfigureForWatch]
  };
  function InfiniteConfigure6x6ForiOS_init(screenSize, $this) {
    $this = $this || Object.create(InfiniteConfigure6x6ForiOS.prototype);
    InfiniteConfigureForWatch_init(screenSize, $this);
    InfiniteConfigure6x6ForiOS.call($this);
    $this.modeString = 'Beginner6x6';
    $this.localizedModeString = local('Beginner Mode 6x6');
    $this.needStar = 0;
    $this.needStarForContinue = 20;
    $this.explodeForContinue = 12;
    $this.comboMode = 1;
    $this.comboTimingLowest = 1.5;
    $this.kindOfNumber = 5;
    $this.minOfComplete = 3;
    $this.indexOfGroup = new Int32Array([0, 0, 0, 0, 0, -1]);
    $this.startOfGroup = new Int32Array([0]);
    $this.countOfGroup = new Int32Array([5]);
    $this.obstacleRatio = 6;
    $this.obstacleMinimumScore = 0;
    $this.obstacleMaximumNumber = 36;
    $this.obstacleType = 1;
    $this.checkNoMoreMatch = true;
    $this.itemTable = new Int32Array([-1, -1, -1, -1, -1, -1, 101, 103, 102, 104, 100]);
    $this.alternativeItemForNirvana = 102;
    $this.reactivateDisabled = false;
    $this.reactivateAfter = 2.0;
    $this.resetInactiveWhenFever = false;
    $this.amountOfNirvana = 10;
    $this.transformDelay = 0.12;
    $this.matchDelay = 0.12;
    $this.scorePerBlock = new Int32Array([0, 10, 20, 30, 40, 60, 90, 120, 180]);
    $this.feverGagePerBlock = [new Float32Array([0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 9.0, 13.0, 18.0, 18.0])];
    $this.topMargin = 0.65;
    $this.width = 6;
    $this.height = 6;
    $this.fallingSpeed = 0.0;
    $this.fallingSpeedLimit = 300.0;
    $this.acceleration = 200.0;
    $this.boardSize = 270.0;
    $this.gaugeHeightRatio = 0.5;
    return $this;
  }
  function PuzzleConfigure() {
  }
  PuzzleConfigure.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PuzzleConfigure',
    interfaces: [GameConfigure]
  };
  function PuzzleConfigure_init(screenSize, $this) {
    $this = $this || Object.create(PuzzleConfigure.prototype);
    GameConfigure_init(screenSize, $this);
    PuzzleConfigure.call($this);
    $this.modeString = 'Classic';
    $this.localizedModeString = local('Classic Mode');
    $this.needStar = 0;
    $this.blockDisablePeriodically = false;
    $this.blockDisableTime = 2.0;
    $this.comboMode = 1;
    $this.showHint = false;
    $this.limitGameTime = true;
    $this.gameTime = 60.0;
    $this.lastChance = true;
    $this.kindOfNumber = 4;
    $this.minOfComplete = 3;
    $this.obstacleRatio = 15;
    $this.obstacleMinimumScore = 0;
    $this.obstacleMaximumNumber = 0;
    $this.itemTable = new Int32Array([-1]);
    $this.regenNoMoreMove = true;
    $this.checkNoMoreMatch = true;
    $this.touchInputMode = 0;
    $this.onetimeGrow = false;
    $this.clickOnce = true;
    $this.createNewBlockWithClicked = false;
    $this.dropBlock = true;
    $this.rotation = true;
    $this.disableChained = true;
    $this.dropAdjust = -1;
    $this.fallingSpeed = 0.0;
    $this.fallingSpeedLimit = 300.0;
    $this.acceleration = 160.0;
    $this.transformDelay = 0.12;
    $this.matchDelay = 0.2;
    return $this;
  }
  function TimelessConfigureForWatch() {
  }
  TimelessConfigureForWatch.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TimelessConfigureForWatch',
    interfaces: [GameConfigure]
  };
  function TimelessConfigureForWatch_init(screenSize, $this) {
    $this = $this || Object.create(TimelessConfigureForWatch.prototype);
    GameConfigure_init(screenSize, $this);
    TimelessConfigureForWatch.call($this);
    $this.modeString = 'Timeless';
    $this.localizedModeString = local('Timeless Mode');
    $this.blockDisablePeriodically = true;
    $this.blockDisableTime = 0.5;
    $this.adjustTimeForBlockDisableTime = 0.01;
    $this.timeForAdjustBlockDisableTime = 1.0;
    $this.minimumTimeForBlockDisableTime = 0.3;
    $this.blockDisableCountAtOnce = 1;
    $this.limitGameTime = false;
    $this.obstacleRatio = 15;
    $this.obstacleMinimumScore = 0;
    $this.obstacleMaximumNumber = 0;
    $this.itemTable = new Int32Array([-1]);
    $this.starPerFever = new Int32Array([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8]);
    $this.starForNirvanaPerFever = new Int32Array([50, 50]);
    $this.width = 3;
    $this.height = 3;
    $this.fallingSpeed = 0.0;
    $this.fallingSpeedLimit = 300.0;
    $this.acceleration = 160.0;
    $this.transformDelay = 0.12;
    $this.matchDelay = 0.15;
    return $this;
  }
  function TimelessConfigureForiOS() {
  }
  TimelessConfigureForiOS.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TimelessConfigureForiOS',
    interfaces: [TimelessConfigureForWatch]
  };
  function TimelessConfigureForiOS_init(screenSize, $this) {
    $this = $this || Object.create(TimelessConfigureForiOS.prototype);
    TimelessConfigureForWatch_init(screenSize, $this);
    TimelessConfigureForiOS.call($this);
    $this.needStar = 5;
    $this.transformDelay = 0.12;
    $this.matchDelay = 0.15;
    $this.scorePerBlock = new Int32Array([0, 10, 20, 30, 40, 60, 90, 130, 180, 1000]);
    $this.acceleration = 240.0;
    $this.fallingSpeedLimitForNoMoreMove = 16.0;
    $this.topMargin = 0.65;
    $this.boardSize = 180.0;
    $this.gaugeHeightRatio = 0.5;
    return $this;
  }
  function TimelessConfigure6x6ForiOS() {
  }
  TimelessConfigure6x6ForiOS.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TimelessConfigure6x6ForiOS',
    interfaces: [TimelessConfigureForWatch]
  };
  function TimelessConfigure6x6ForiOS_init(screenSize, $this) {
    $this = $this || Object.create(TimelessConfigure6x6ForiOS.prototype);
    TimelessConfigureForWatch_init(screenSize, $this);
    TimelessConfigure6x6ForiOS.call($this);
    $this.modeString = 'Timeless6x6';
    $this.localizedModeString = local('Timeless Mode 6x6');
    $this.needStar = 20;
    $this.comboMode = 1;
    $this.comboTimingLowest = 1.5;
    $this.blockDisableTime = 0.5;
    $this.minimumTimeForBlockDisableTime = 0.2;
    $this.kindOfNumber = 5;
    $this.minOfComplete = 3;
    $this.indexOfGroup = new Int32Array([0, 0, 0, 0, 0, -1]);
    $this.startOfGroup = new Int32Array([0]);
    $this.countOfGroup = new Int32Array([5]);
    $this.obstacleRatio = 30;
    $this.obstacleMinimumScore = 0;
    $this.obstacleMaximumNumber = 36;
    $this.itemTable = new Int32Array([-1, -1, -1, -1, -1, -1, 101, 102, 103, 104, 100]);
    $this.alternativeItemForNirvana = 102;
    $this.amountOfNirvana = 10;
    $this.transformDelay = 0.12;
    $this.matchDelay = 0.1;
    $this.scorePerBlock = new Int32Array([0, 10, 20, 30, 40, 60, 90, 120, 180]);
    $this.feverGagePerBlock = [new Float32Array([0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 9.0, 13.0, 18.0, 18.0])];
    $this.starPerFever = new Int32Array([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8]);
    $this.starForNirvanaPerFever = new Int32Array([50, 50]);
    $this.resetInactiveWhenFever = false;
    $this.topMargin = 0.65;
    $this.width = 6;
    $this.height = 6;
    $this.acceleration = 240.0;
    $this.fallingSpeedLimitForNoMoreMove = 16.0;
    $this.boardSize = 270.0;
    $this.gaugeHeightRatio = 0.5;
    return $this;
  }
  function TutorialConfigure() {
  }
  TutorialConfigure.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TutorialConfigure',
    interfaces: [GameConfigure]
  };
  function TutorialConfigure_init(screenSize, $this) {
    $this = $this || Object.create(TutorialConfigure.prototype);
    GameConfigure_init(screenSize, $this);
    TutorialConfigure.call($this);
    $this.modeString = 'Tutorial';
    $this.limitGameTime = false;
    $this.regenNoMoreMove = true;
    $this.clickOnce = true;
    $this.blockDisablePeriodically = false;
    $this.itemTable = new Int32Array([-1]);
    $this.width = 3;
    $this.height = 3;
    $this.fallingSpeed = 0.0;
    $this.fallingSpeedLimit = 12.0;
    $this.acceleration = 100.0;
    $this.dropAdjust = -5;
    $this.amountOfNirvana = 9;
    $this.transformDelay = 0.2;
    $this.matchDelay = 0.0;
    $this.comboMode = 0;
    $this.starPerFever = new Int32Array([0]);
    $this.starForNirvanaPerFever = new Int32Array([0]);
    $this.boardSize = 180.0;
    $this.topMargin = 0.5;
    return $this;
  }
  function BlockEntity() {
    this.transformCount = 0;
    this.disabledMask = null;
    var value = SceneLayer$gameTileTop_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    this.disabledMaskZ = FLOAT$result;
    this.disabledDone = true;
    this.effectSprite = null;
    var value_0 = SceneLayer$gameTileTop_getInstance().value;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    this.effectSpriteZ = FLOAT$result_0;
    this.connectionBitMask = 0;
    this.connection = [null, null, null, null];
    this.onWait = BlockEntity$onWait$lambda(this);
    this.onRollback = BlockEntity$onRollback$lambda(this);
  }
  BlockEntity.prototype.remove = function () {
    var tmp$;
    TileEntity.prototype.remove.call(this);
    if (this.disabledMask != null) {
      ensureNotNull(this.disabledMask).removeFromParent();
      this.disabledMask = null;
    }
    tmp$ = this.connection;
    for (var i = 0; i !== tmp$.length; ++i) {
      var sprite = tmp$[i];
      if (sprite != null) {
        ensureNotNull(sprite).removeFromParent();
        this.connection[i] = null;
      }
    }
    if (this.effectSprite != null) {
      ensureNotNull(this.effectSprite).removeFromParent();
      this.effectSprite = null;
    }
  };
  BlockEntity.prototype.GetAttribute = function () {
    return this.attribute;
  };
  BlockEntity.prototype.SetAttribute_c9f3gi$ = function (attr) {
    this.attribute = attr;
  };
  BlockEntity.prototype.GetBlockState = function () {
    return this.animationState.GetState();
  };
  BlockEntity.prototype.SetDisabled = function () {
    this.transformCount = this.transformCount + 1 | 0;
    this.SetAttribute_c9f3gi$(TileEntity$Attribute$disabled_getInstance());
    this.disabledDone = false;
  };
  function BlockEntity$transform$lambda(this$BlockEntity) {
    return function () {
      this$BlockEntity.animationState.SetNextState_9sobi5$('transform');
      this$BlockEntity.transformMotion();
      return Unit;
    };
  }
  BlockEntity.prototype.transform_mx4ult$ = function (delay) {
    if (delay === void 0)
      delay = 0.0;
    var tmp$;
    this.transformCount = this.transformCount + 1 | 0;
    this.needCheck = true;
    this.needCheckReason = 0;
    this.isTransforming = true;
    if (this.value < 0 || this.value >= this.game.gameConfigure.indexOfGroup.length) {
      println('Abnormal BlockEntity Value : ' + toString(this.value));
      this.value = 0;
    }
    var group = this.game.gameConfigure.indexOfGroup[this.value];
    this.value = this.value + 1 | 0;
    if (this.game.gameConfigure.indexOfGroup[this.value] !== group) {
      this.value = this.game.gameConfigure.startOfGroup[group];
    }
    (tmp$ = this.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(delay, void 0, BlockEntity$transform$lambda(this)), Unit) : null;
    this.removeConnection();
  };
  function BlockEntity$transformMotion$lambda(closure$motion, closure$delay, this$BlockEntity, closure$originWidth, closure$originHeight, closure$change, closure$spriteNext, closure$minWidth, closure$minHeight) {
    return function (info) {
      closure$motion.v.update_mx4ult$(info.elapsed);
      var pos = closure$motion.v.GetPosition();
      if (info.age < closure$delay) {
        ensureNotNull(this$BlockEntity.sprite).SetSize_dleff0$(closure$originWidth - pos, closure$originHeight - pos);
      }
      if (info.elapsed === 0.0 || info.age > closure$delay * 2) {
        if (closure$change.v === false) {
          ensureNotNull(this$BlockEntity.sprite).SetImage_9xt0da$(ensureNotNull(closure$spriteNext.GetImage()), closure$originWidth, closure$originHeight);
          closure$spriteNext.removeFromParent();
        }
        ensureNotNull(this$BlockEntity.sprite).SetSize_dleff0$(closure$originWidth, closure$originHeight);
        this$BlockEntity.animationState.SetNextState_9sobi5$('wait');
        return false;
      }
      if (info.age >= closure$delay && info.age <= closure$delay * 2) {
        if (closure$change.v === false) {
          closure$minWidth.v = ensureNotNull(this$BlockEntity.sprite).GetSize().width;
          closure$minHeight.v = ensureNotNull(this$BlockEntity.sprite).GetSize().height;
          ensureNotNull(this$BlockEntity.sprite).SetImage_9xt0da$(ensureNotNull(closure$spriteNext.GetImage()), closure$minWidth.v, closure$minHeight.v);
          closure$motion.v = HyperTan_init(1 / closure$delay);
          var tmp$ = closure$motion.v;
          var value = this$BlockEntity.game.gameConfigure.tileHeight / 2;
          var FLOAT$result;
          FLOAT$break: do {
            if (value == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value)) {
              FLOAT$result = numberToDouble(value);
              break FLOAT$break;
            }
            if (typeof value === 'string') {
              try {
                var number = toDouble(value);
                FLOAT$result = number;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          tmp$.SetScale_mx4ult$(FLOAT$result);
          closure$spriteNext.removeFromParent();
          closure$change.v = true;
        }
         else {
          ensureNotNull(this$BlockEntity.sprite).SetSize_dleff0$(closure$minWidth.v + pos, closure$minHeight.v + pos);
        }
      }
      return true;
    };
  }
  BlockEntity.prototype.transformMotion = function () {
    var tmp$;
    var image;
    if (this.goingToRollback) {
      this.animationState.SetNextState_9sobi5$('rollback', 0.5);
    }
     else {
      if (((tmp$ = this.disabledMask) != null ? tmp$.GetAlpha() : null) !== 0.0) {
        var tmp$_0 = this.game.gameValue.blockSet;
        var value = this.value;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        image = tmp$_0 + STRING$result + '_normal';
      }
       else {
        var tmp$_1 = this.game.gameValue.blockSet;
        var value_0 = this.value;
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (typeof value_0 === 'string') {
            STRING$result_0 = value_0;
            break STRING$break;
          }
           else if (typeof value_0 === 'boolean') {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_0)) {
            STRING$result_0 = value_0.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        image = tmp$_1 + STRING$result_0 + '_normal';
      }
      var tmp$_2 = this.GetBoardX();
      var tmp$_3 = this.GetBoardY();
      var tmp$_4 = this.spriteZ;
      var tmp$_5 = image;
      var value_1 = this.game.gameConfigure.tileWidth;
      var FLOAT$result;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number = toDouble(value_1);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var tmp$_6 = FLOAT$result;
      var value_2 = this.game.gameConfigure.tileHeight;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_0 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_0 = toDouble(value_2);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var spriteNext = Sprite_init(tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, FLOAT$result_0);
      spriteNext.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      spriteNext.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      var originWidth = ensureNotNull(this.sprite).GetSize().width;
      var originHeight = ensureNotNull(this.sprite).GetSize().height;
      var minWidth = {v: 0.0};
      var minHeight = {v: 0.0};
      var delay = this.game.gameConfigure.transformDelay * 0.5;
      var motion = {v: HyperTan_init(1 / delay)};
      var tmp$_7 = motion.v;
      var value_3 = this.game.gameConfigure.tileHeight / 2;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_3 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_3)) {
          FLOAT$result_1 = numberToDouble(value_3);
          break FLOAT$break;
        }
        if (typeof value_3 === 'string') {
          try {
            var number_1 = toDouble(value_3);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      tmp$_7.SetScale_mx4ult$(FLOAT$result_1);
      var change = {v: false};
      ensureNotNull(this.sprite).addUpdateCallback_sds54w$(void 0, void 0, void 0, void 0, void 0, void 0, BlockEntity$transformMotion$lambda(motion, delay, this, originWidth, originHeight, change, spriteNext, minWidth, minHeight));
    }
  };
  BlockEntity.prototype.rollback = function () {
    this.transformCount = this.transformCount - 1 | 0;
    var tmp$ = this.game.gameValue.blockSet;
    var value = this.value;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var image = tmp$ + STRING$result + '_normal';
    if (this.sprite != null) {
      var tmp$_0 = ensureNotNull(this.sprite);
      var value_0 = this.game.gameConfigure.tileWidth;
      var FLOAT$result;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number = toDouble(value_0);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var tmp$_1 = FLOAT$result;
      var value_1 = this.game.gameConfigure.tileHeight;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_0 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_0 = toDouble(value_1);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      tmp$_0.SetImage_9xt0da$(image, tmp$_1, FLOAT$result_0);
    }
    if (this.attribute !== TileEntity$Attribute$disabled_getInstance()) {
      if (this.disabledMask != null) {
        var tmp$_2 = ensureNotNull(this.disabledMask);
        var tmp$_3 = this.game.gameValue.blockSet;
        var value_2 = this.value;
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value_2)) {
            STRING$result_0 = value_2.toString();
            break STRING$break;
          }
           else if (typeof value_2 === 'string') {
            STRING$result_0 = value_2;
            break STRING$break;
          }
           else if (typeof value_2 === 'boolean') {
            STRING$result_0 = value_2.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_2)) {
            STRING$result_0 = value_2.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        var tmp$_4 = tmp$_3 + STRING$result_0 + '_bg';
        var value_3 = this.game.gameConfigure.tileWidth;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_3 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_3)) {
            FLOAT$result_1 = numberToDouble(value_3);
            break FLOAT$break;
          }
          if (typeof value_3 === 'string') {
            try {
              var number_1 = toDouble(value_3);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var tmp$_5 = FLOAT$result_1;
        var value_4 = this.game.gameConfigure.tileHeight;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_4 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_4)) {
            FLOAT$result_2 = numberToDouble(value_4);
            break FLOAT$break;
          }
          if (typeof value_4 === 'string') {
            try {
              var number_2 = toDouble(value_4);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        tmp$_2.SetImage_9xt0da$(tmp$_4, tmp$_5, FLOAT$result_2);
      }
    }
    var group = this.game.gameConfigure.indexOfGroup[this.value];
    this.value = this.value - 1 | 0;
    if (this.value < 0) {
      this.value = this.game.gameConfigure.countOfGroup[group] - 1 | 0;
    }
    if (this.game.gameConfigure.indexOfGroup[this.value] !== group) {
      this.value = this.game.gameConfigure.startOfGroup[group];
    }
    this.animationState.SetNextState_9sobi5$('transform');
    this.needCheck = false;
    this.goingToRollback = false;
    this.isTransforming = true;
  };
  function BlockEntity$explode$lambda$lambda(this$BlockEntity) {
    return function () {
      this$BlockEntity.remove();
      return Unit;
    };
  }
  function BlockEntity$explode$lambda(closure$effect, this$BlockEntity, closure$count, closure$delay2) {
    return function (value, complete) {
      var tmp$;
      closure$effect.SetAlpha_8ca0d4$(value);
      if (complete === true) {
        ensureNotNull(this$BlockEntity.sprite).SetAlpha_8ca0d4$(0.0);
        this$BlockEntity.explodeEffect_24o109$(closure$count, 0.0);
        (tmp$ = this$BlockEntity.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$delay2, void 0, BlockEntity$explode$lambda$lambda(this$BlockEntity)), Unit) : null;
        this$BlockEntity.animationState.SetNextState_9sobi5$('remove');
      }
    };
  }
  function BlockEntity$explode$lambda$lambda_0(closure$moveNext, this$BlockEntity, closure$motion, closure$spriteNext, closure$originSize) {
    return function (info) {
      if (info.elapsed === 0.0) {
        if (closure$moveNext.v === false) {
          this$BlockEntity.animationState.SetNextState_9sobi5$('remove');
        }
        return false;
      }
      if (info.age > this$BlockEntity.game.gameConfigure.removeFireDelay) {
        if (closure$moveNext.v === false) {
          this$BlockEntity.animationState.SetNextState_9sobi5$('remove');
          closure$moveNext.v = true;
        }
      }
      closure$motion.update_mx4ult$(info.elapsed);
      var pos = closure$motion.GetPosition();
      closure$spriteNext.SetSize_dleff0$(closure$originSize.width * (0.5 + pos), closure$originSize.height * (0.5 + pos));
      if (info.age > 0.3) {
        closure$spriteNext.SetAlpha_8ca0d4$(1.0 - (info.age - 0.3) * 5.0);
      }
      return true;
    };
  }
  function BlockEntity$explode$lambda$lambda_1(this$BlockEntity) {
    return function () {
      this$BlockEntity.remove();
      return Unit;
    };
  }
  function BlockEntity$explode$lambda_0(this$BlockEntity, closure$spriteNext, closure$count, closure$delay2) {
    return function () {
      var tmp$;
      var originSize = Size_init(ensureNotNull(this$BlockEntity.sprite).GetSize().width, ensureNotNull(this$BlockEntity.sprite).GetSize().height);
      var motion = new Motion(this$BlockEntity.game.gameConfigure.matchEffectSpeed, 1.0, 0.5);
      var moveNext = {v: false};
      closure$spriteNext.SetTimeToLive_mx4ult$(this$BlockEntity.game.gameConfigure.matchEffectDuration);
      closure$spriteNext.addUpdateCallback_sds54w$('BlockEntity Matched', void 0, void 0, void 0, void 0, void 0, BlockEntity$explode$lambda$lambda_0(moveNext, this$BlockEntity, motion, closure$spriteNext, originSize));
      this$BlockEntity.explodeEffect_24o109$(closure$count, 0.0);
      (tmp$ = this$BlockEntity.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$delay2, void 0, BlockEntity$explode$lambda$lambda_1(this$BlockEntity)), Unit) : null;
      return Unit;
    };
  }
  function BlockEntity$explode$lambda$lambda_2(closure$moveNext, this$BlockEntity, closure$motion, closure$spriteNext, closure$originSize) {
    return function (info) {
      if (info.elapsed === 0.0) {
        if (closure$moveNext.v === false) {
          this$BlockEntity.animationState.SetNextState_9sobi5$('remove');
        }
        return false;
      }
      if (info.age > this$BlockEntity.game.gameConfigure.removeFireDelay) {
        if (closure$moveNext.v === false) {
          this$BlockEntity.animationState.SetNextState_9sobi5$('remove');
          closure$moveNext.v = true;
        }
      }
      closure$motion.update_mx4ult$(info.elapsed);
      var pos = closure$motion.GetPosition();
      closure$spriteNext.SetSize_dleff0$(closure$originSize.width * (0.5 + pos), closure$originSize.height * (0.5 + pos));
      closure$spriteNext.SetAlpha_8ca0d4$(1.0 - info.age * 3.0);
      return true;
    };
  }
  function BlockEntity$explode$lambda$lambda_3(this$BlockEntity) {
    return function () {
      this$BlockEntity.remove();
      return Unit;
    };
  }
  function BlockEntity$explode$lambda_1(this$BlockEntity, closure$spriteNext, closure$count, closure$delay2) {
    return function () {
      var tmp$;
      var originSize = Size_init(ensureNotNull(this$BlockEntity.sprite).GetSize().width, ensureNotNull(this$BlockEntity.sprite).GetSize().height);
      var motion = new Motion(this$BlockEntity.game.gameConfigure.matchEffectSpeed, 1.0, 0.5);
      var moveNext = {v: false};
      closure$spriteNext.SetTimeToLive_mx4ult$(this$BlockEntity.game.gameConfigure.matchEffectDuration);
      closure$spriteNext.addUpdateCallback_sds54w$('BlockEntity Matched', void 0, void 0, void 0, void 0, void 0, BlockEntity$explode$lambda$lambda_2(moveNext, this$BlockEntity, motion, closure$spriteNext, originSize));
      this$BlockEntity.explodeEffect_24o109$(closure$count, 0.0);
      (tmp$ = this$BlockEntity.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$delay2, void 0, BlockEntity$explode$lambda$lambda_3(this$BlockEntity)), Unit) : null;
      return Unit;
    };
  }
  function BlockEntity$explode$lambda$lambda_4(this$BlockEntity) {
    return function () {
      this$BlockEntity.remove();
      return Unit;
    };
  }
  function BlockEntity$explode$lambda_2(this$BlockEntity, closure$count, closure$delay2) {
    return function () {
      var tmp$;
      this$BlockEntity.explodeEffect_24o109$(closure$count, 0.0);
      (tmp$ = this$BlockEntity.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$delay2, void 0, BlockEntity$explode$lambda$lambda_4(this$BlockEntity)), Unit) : null;
      this$BlockEntity.animationState.SetNextState_9sobi5$('remove');
      return Unit;
    };
  }
  BlockEntity.prototype.explode_902hsc$ = function (count, delay, delay2, animation) {
    if (count === void 0)
      count = 3;
    if (delay === void 0)
      delay = 0.0;
    if (delay2 === void 0)
      delay2 = 0.0;
    if (animation === void 0)
      animation = 0;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    this.goingToRemove = true;
    if (this.disabledMask != null) {
      ensureNotNull(this.disabledMask).removeFromParent();
    }
    if (animation === 0) {
      var effect = Sprite_init(0.0, 0.0, void 0, ensureNotNull(this.sprite).GetImage(), ensureNotNull(this.sprite).GetSize().width, ensureNotNull(this.sprite).GetSize().height);
      effect.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
      effect.SetBlendFactor_mx4ult$(1.0);
      effect.SetAlpha_8ca0d4$(0.0);
      ensureNotNull(this.sprite).addChild_g5h3xp$(effect);
      (tmp$ = this.game.view.screen) != null ? (tmp$.actionFade_ntk7i0$(delay + this.game.gameConfigure.removeFireDelay, 0.0, 1.0, null, BlockEntity$explode$lambda(effect, this, count, delay2)), Unit) : null;
    }
     else if (animation === 1) {
      (tmp$_0 = this.sprite) != null ? (tmp$_0.SetAlpha_8ca0d4$(0.0), Unit) : null;
      var tmp$_5 = this.GetRealScreenX();
      var tmp$_6 = this.GetRealScreenY();
      var tmp$_7 = this.spriteZ;
      var tmp$_8 = ensureNotNull(this.sprite).GetImage();
      var value = this.game.gameConfigure.tileWidth;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var tmp$_9 = FLOAT$result;
      var value_0 = this.game.gameConfigure.tileHeight;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var spriteNext = Sprite_init(tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, FLOAT$result_0);
      spriteNext.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      spriteNext.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      this.game.view.addChild_g5h3xp$(spriteNext);
      (tmp$_1 = this.game.view.screen) != null ? (tmp$_1.actionDelay_ab0iom$(delay, void 0, BlockEntity$explode$lambda_0(this, spriteNext, count, delay2)), Unit) : null;
    }
     else if (animation === 2) {
      (tmp$_2 = this.sprite) != null ? (tmp$_2.SetAlpha_8ca0d4$(0.0), Unit) : null;
      var tmp$_10 = this.GetRealScreenX();
      var tmp$_11 = this.GetRealScreenY();
      var tmp$_12 = this.spriteZ;
      var tmp$_13 = ensureNotNull(this.sprite).GetImage();
      var value_1 = this.game.gameConfigure.tileWidth;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_1 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          FLOAT$result_1 = numberToDouble(value_1);
          break FLOAT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toDouble(value_1);
            FLOAT$result_1 = number_1;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      var tmp$_14 = FLOAT$result_1;
      var value_2 = this.game.gameConfigure.tileHeight;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_2 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      var spriteNext_0 = Sprite_init(tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, FLOAT$result_2);
      spriteNext_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      spriteNext_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      spriteNext_0.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
      spriteNext_0.SetColor_vnjrmz$(Color$Companion_getInstance().white_mx4ult$());
      this.game.view.addChild_g5h3xp$(spriteNext_0);
      (tmp$_3 = this.game.view.screen) != null ? (tmp$_3.actionDelay_ab0iom$(delay, void 0, BlockEntity$explode$lambda_1(this, spriteNext_0, count, delay2)), Unit) : null;
    }
     else {
      (tmp$_4 = this.game.view.screen) != null ? (tmp$_4.actionDelay_ab0iom$(delay + this.game.gameConfigure.removeFireDelay, void 0, BlockEntity$explode$lambda_2(this, count, delay2)), Unit) : null;
    }
  };
  BlockEntity.prototype.explode_nhq4am$$default = function (count, delay, delay2) {
    this.explode_902hsc$(count, delay, delay2, 0);
  };
  BlockEntity.prototype.explodeEffect_24o109$ = function (count, delay) {
    var sprite = this.game.view.findChildByName_3m52m6$('Fever Gauge Mask');
    if (sprite != null) {
      this.createHoming_7thp2o$(count, Position_init(sprite.GetPosition().x - sprite.GetSize().width * 0.5 + this.game.gameValue.feverGage * sprite.GetSize().width / 100.0, sprite.GetPosition().y - sprite.GetSize().height * 0.5));
    }
    this.createExplosion_za3lpa$(count);
  };
  BlockEntity.prototype.fall_6taknv$ = function (doShake) {
    if (this.attribute === TileEntity$Attribute$disabled_getInstance()) {
      if (this.disabledDone === false) {
        this.makeDisable();
      }
    }
    this.needCheck = true;
    this.needCheckReason = 1;
    this.isDropping = true;
    if (doShake === true) {
      this.shake_7b5o5w$(5.0, 0.0, 0.0, this.game.gameConfigure.shakeDuration);
    }
    this.connectionBitMask = 0;
    this.removeConnection();
  };
  BlockEntity.prototype.animate_mx4ult$ = function (elapsed) {
    this.animationState.update_mx4ult$(elapsed);
  };
  BlockEntity.prototype.draw = function () {
    var tmp$;
    var x = this.GetBoardX();
    var y = this.GetBoardY();
    if (this.isTransforming === false) {
      if (this.disabledMask != null) {
        ensureNotNull(this.disabledMask).SetPosition_dleff0$(x, y);
      }
      (tmp$ = this.sprite) != null ? (tmp$.SetPosition_dleff0$(x, y), Unit) : null;
    }
    if (this.effectSprite != null) {
      ensureNotNull(this.effectSprite).SetPosition_dleff0$(x, y);
    }
  };
  function BlockEntity$onLanding$lambda(closure$motion, this$BlockEntity, closure$origin) {
    return function (info) {
      closure$motion.update_mx4ult$(info.elapsed);
      var posY = closure$motion.GetPosition();
      if (posY >= 0) {
        this$BlockEntity.needCheck = true;
        this$BlockEntity.needCheckReason = 1;
        this$BlockEntity.bouncing = false;
        return false;
      }
      ensureNotNull(this$BlockEntity.sprite).SetPosition_dleff0$(closure$origin.x, closure$origin.y + posY);
      var dm = this$BlockEntity.disabledMask;
      if (dm != null) {
        dm.SetPosition_dleff0$(closure$origin.x, closure$origin.y + posY);
      }
      return true;
    };
  }
  BlockEntity.prototype.onLanding_vux9f0$ = function (x, y) {
    TileEntity.prototype.onLanding_vux9f0$.call(this, x, y);
    if (this.game.gameConfigure.bounceOnLanding === true) {
      if (this.sprite != null) {
        this.bouncing = true;
        var FLOAT$result;
        FLOAT$break: do {
          if (y == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(y)) {
            FLOAT$result = numberToDouble(y);
            break FLOAT$break;
          }
          if (typeof y === 'string') {
            try {
              var number = toDouble(y);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        this.spriteZ = 7 + FLOAT$result * 0.1;
        var origin = Position_init(this.GetBoardX(), this.GetBoardY());
        var motion = new Motion();
        motion.SetTarget_nfvrp9$(-5.0, 5.0, 0.15);
        var value = this.game.gameConfigure.tileHeight;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result_0 = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number_0 = toDouble(value);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        motion.SetScale_mx4ult$(FLOAT$result_0 / 50.0);
        ensureNotNull(this.sprite).addUpdateCallback_sds54w$('BlockEntity Landing', void 0, void 0, void 0, void 0, void 0, BlockEntity$onLanding$lambda(motion, this, origin));
      }
    }
     else {
      this.needCheck = true;
      this.needCheckReason = 1;
      this.bouncing = false;
    }
  };
  BlockEntity.prototype.isMatchCheckable = function () {
    if (this.isTransforming === true) {
      return false;
    }
    return true;
  };
  function BlockEntity$makeDisableGray$lambda(this$BlockEntity) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (info.count === 1) {
        var tmp$_3 = this$BlockEntity;
        var tmp$_4 = this$BlockEntity.GetBoardX();
        var tmp$_5 = this$BlockEntity.GetBoardY();
        var tmp$_6 = this$BlockEntity.disabledMaskZ;
        var tmp$_7 = this$BlockEntity.game.gameValue.blockSet;
        var value = this$BlockEntity.value;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        var tmp$_8 = tmp$_7 + STRING$result + '_gray';
        var value_0 = this$BlockEntity.game.gameConfigure.tileWidth;
        var FLOAT$result;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number = toDouble(value_0);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        var tmp$_9 = FLOAT$result;
        var value_1 = this$BlockEntity.game.gameConfigure.tileHeight;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_0 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_0 = toDouble(value_1);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        tmp$_3.disabledMask = Sprite_init(tmp$_4, tmp$_5, tmp$_6, tmp$_8, tmp$_9, FLOAT$result_0);
        (tmp$ = this$BlockEntity.disabledMask) != null ? (tmp$.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
        (tmp$_0 = this$BlockEntity.disabledMask) != null ? (tmp$_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
        this$BlockEntity.game.view.GetMask().addChild_g5h3xp$(ensureNotNull(this$BlockEntity.disabledMask));
        ensureNotNull(this$BlockEntity.disabledMask).SetAlpha_8ca0d4$(0.0);
        return true;
      }
      if (info.elapsed === 0.0) {
        var tmp$_10 = ensureNotNull(this$BlockEntity.sprite);
        var tmp$_11 = this$BlockEntity.game.gameValue.blockSet;
        var value_2 = this$BlockEntity.value;
        var STRING$result_0;
        STRING$break: do {
          if (Kotlin.isNumber(value_2)) {
            STRING$result_0 = value_2.toString();
            break STRING$break;
          }
           else if (typeof value_2 === 'string') {
            STRING$result_0 = value_2;
            break STRING$break;
          }
           else if (typeof value_2 === 'boolean') {
            STRING$result_0 = value_2.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value_2)) {
            STRING$result_0 = value_2.toString();
            break STRING$break;
          }
          STRING$result_0 = '';
        }
         while (false);
        var tmp$_12 = tmp$_11 + STRING$result_0 + '_gray';
        var value_3 = this$BlockEntity.game.gameConfigure.tileWidth;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_3 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_3)) {
            FLOAT$result_1 = numberToDouble(value_3);
            break FLOAT$break;
          }
          if (typeof value_3 === 'string') {
            try {
              var number_1 = toDouble(value_3);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var tmp$_13 = FLOAT$result_1;
        var value_4 = this$BlockEntity.game.gameConfigure.tileHeight;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_4 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_4)) {
            FLOAT$result_2 = numberToDouble(value_4);
            break FLOAT$break;
          }
          if (typeof value_4 === 'string') {
            try {
              var number_2 = toDouble(value_4);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        tmp$_10.SetImage_9xt0da$(tmp$_12, tmp$_13, FLOAT$result_2);
        ensureNotNull(this$BlockEntity.sprite).SetAlpha_8ca0d4$(1.0);
        (tmp$_1 = this$BlockEntity.disabledMask) != null ? (tmp$_1.removeFromParent(), Unit) : null;
        if (this$BlockEntity.game.gameConfigure.clickOnce === false) {
          this$BlockEntity.makeEnable();
        }
        return false;
      }
      (tmp$_2 = this$BlockEntity.disabledMask) != null ? (tmp$_2.SetAlpha_8ca0d4$(info.age * (1 / 0.3)), Unit) : null;
      return true;
    };
  }
  BlockEntity.prototype.makeDisableGray = function () {
    var tmp$;
    (tmp$ = this.sprite) != null ? (tmp$.addUpdateCallback_sds54w$(void 0, false, void 0, void 0, 0.3, void 0, BlockEntity$makeDisableGray$lambda(this)), Unit) : null;
    ensureNotNull(this.sprite).SetAnimation_pe1q5w$(null);
    this.disabledDone = true;
  };
  BlockEntity.prototype.removeConnection = function () {
    this.connectionBitMask = 0;
    if (this.connection[0] != null) {
      ensureNotNull(this.connection[0]).removeFromParent();
      this.connection[0] = null;
    }
    if (this.connection[1] != null) {
      ensureNotNull(this.connection[1]).removeFromParent();
      this.connection[1] = null;
    }
    if (this.connection[2] != null) {
      ensureNotNull(this.connection[2]).removeFromParent();
      this.connection[2] = null;
    }
    if (this.connection[3] != null) {
      ensureNotNull(this.connection[3]).removeFromParent();
      this.connection[3] = null;
    }
  };
  BlockEntity.prototype.adjustConnection = function () {
    var sprite = this.connection[2];
    if (sprite != null) {
      sprite.SetPosition_dleff0$(ensureNotNull(this.sprite).GetPosition().x - this.game.gameConfigure.tileWidth * 0.5, sprite.GetPosition().y);
    }
    sprite = this.connection[3];
    if (sprite != null) {
      sprite.SetPosition_dleff0$(ensureNotNull(this.sprite).GetPosition().x + this.game.gameConfigure.tileWidth * 0.5, sprite.GetPosition().y);
    }
  };
  function BlockEntity$updateConnection$lambda(closure$connection) {
    return function (value, complete) {
      closure$connection.SetSize_dleff0$(closure$connection.GetSize().width, value);
    };
  }
  function BlockEntity$updateConnection$lambda_0(closure$old, closure$connection, this$BlockEntity) {
    return function () {
      closure$old.removeFromParent();
      this$BlockEntity.connection[0] = closure$connection;
      return Unit;
    };
  }
  function BlockEntity$updateConnection$lambda_1(closure$connection) {
    return function (value, complete) {
      closure$connection.SetSize_dleff0$(closure$connection.GetSize().width, value);
    };
  }
  function BlockEntity$updateConnection$lambda_2(closure$old, closure$connection, this$BlockEntity) {
    return function () {
      closure$old.removeFromParent();
      this$BlockEntity.connection[1] = closure$connection;
      return Unit;
    };
  }
  function BlockEntity$updateConnection$lambda_3(closure$connection) {
    return function (value, complete) {
      closure$connection.SetSize_dleff0$(value, closure$connection.GetSize().height);
    };
  }
  function BlockEntity$updateConnection$lambda_4(closure$old, closure$connection, this$BlockEntity) {
    return function () {
      closure$old.removeFromParent();
      this$BlockEntity.connection[2] = closure$connection;
      return Unit;
    };
  }
  function BlockEntity$updateConnection$lambda_5(closure$connection) {
    return function (value, complete) {
      closure$connection.SetSize_dleff0$(value, closure$connection.GetSize().height);
    };
  }
  function BlockEntity$updateConnection$lambda_6(closure$old, closure$connection, this$BlockEntity) {
    return function () {
      closure$old.removeFromParent();
      this$BlockEntity.connection[3] = closure$connection;
      return Unit;
    };
  }
  BlockEntity.prototype.updateConnection = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    if ((this.connectionBitMask & 1) === 1) {
      var newImage = this.game.gameValue.blockSet + 'connect_0';
      var old = this.connection[0];
      if (old != null && !equals(ensureNotNull(old).image, newImage) || old == null) {
        var tmp$_11 = this.GetBoardX() - this.game.gameConfigure.tileWidth * 0.5;
        var tmp$_12 = this.GetBoardY() - this.game.gameConfigure.tileHeight * 0.5;
        var value = SceneLayer$gameTileTop_getInstance().value;
        var FLOAT$result;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        var connection = Sprite_init(tmp$_11, tmp$_12, FLOAT$result, newImage, this.game.gameConfigure.tileWidth, 0.0);
        var info = Kotlin.isType(tmp$ = this.game.gameValue.blockInfo, BlockItem) ? tmp$ : null;
        if (info != null) {
          var color = Color_init(info.colorMap.get_za3lpa$(this.value + 5 | 0));
          connection.SetColor_vnjrmz$(color);
          connection.SetBlendFactor_mx4ult$(1.0);
        }
        connection.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
        connection.SetVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
        this.game.view.GetMask().addChild_g5h3xp$(connection);
        connection.SetAlpha_8ca0d4$(1.0);
        (tmp$_0 = this.game.view.screen) != null ? (tmp$_0.actionFade_ntk7i0$(0.1, 0.0, this.game.gameConfigure.tileHeightGap, void 0, BlockEntity$updateConnection$lambda(connection)), Unit) : null;
        if (old != null) {
          (tmp$_1 = this.game.view.screen) != null ? (tmp$_1.actionFadeOut_7vo5wp$(old, void 0, void 0, 0.2, void 0, void 0, void 0, BlockEntity$updateConnection$lambda_0(old, connection, this)), Unit) : null;
        }
         else {
          this.connection[0] = connection;
        }
      }
    }
     else {
      if (this.connection[0] != null) {
        ensureNotNull(this.connection[0]).removeFromParent();
        this.connection[0] = null;
      }
    }
    if ((this.connectionBitMask & 2) === 2) {
      var newImage_0 = this.game.gameValue.blockSet + 'connect_1';
      var old_0 = this.connection[1];
      if (old_0 != null && !equals(ensureNotNull(old_0).image, newImage_0) || old_0 == null) {
        var tmp$_13 = this.GetBoardX() - this.game.gameConfigure.tileWidth * 0.5;
        var tmp$_14 = this.GetBoardY() + this.game.gameConfigure.tileHeight * 0.5;
        var value_0 = SceneLayer$gameTileTop_getInstance().value;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        var connection_0 = Sprite_init(tmp$_13, tmp$_14, FLOAT$result_0, newImage_0, this.game.gameConfigure.tileWidth, 0.0);
        var info_0 = Kotlin.isType(tmp$_2 = this.game.gameValue.blockInfo, BlockItem) ? tmp$_2 : null;
        if (info_0 != null) {
          var color_0 = Color_init(info_0.colorMap.get_za3lpa$(this.value + 10 | 0));
          connection_0.SetColor_vnjrmz$(color_0);
          connection_0.SetBlendFactor_mx4ult$(1.0);
        }
        this.game.view.GetMask().addChild_g5h3xp$(connection_0);
        connection_0.SetAlpha_8ca0d4$(1.0);
        (tmp$_3 = this.game.view.screen) != null ? (tmp$_3.actionFade_ntk7i0$(0.1, 0.0, this.game.gameConfigure.tileHeightGap, void 0, BlockEntity$updateConnection$lambda_1(connection_0)), Unit) : null;
        if (old_0 != null) {
          (tmp$_4 = this.game.view.screen) != null ? (tmp$_4.actionFadeOut_7vo5wp$(old_0, void 0, void 0, 0.2, void 0, void 0, void 0, BlockEntity$updateConnection$lambda_2(old_0, connection_0, this)), Unit) : null;
        }
         else {
          this.connection[1] = connection_0;
        }
      }
    }
     else {
      if (this.connection[1] != null) {
        ensureNotNull(this.connection[1]).removeFromParent();
        this.connection[1] = null;
      }
    }
    if ((this.connectionBitMask & 4) === 4) {
      var newImage_1 = this.game.gameValue.blockSet + 'connect_2';
      var old_1 = this.connection[2];
      if (old_1 != null && !equals(ensureNotNull(old_1).image, newImage_1) || old_1 == null) {
        var tmp$_15 = this.GetBoardX() - this.game.gameConfigure.tileWidth * 0.5;
        var tmp$_16 = this.GetBoardY() - this.game.gameConfigure.tileHeight * 0.5;
        var value_1 = SceneLayer$gameTileTop_getInstance().value;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_1 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toDouble(value_1);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var connection_1 = Sprite_init(tmp$_15, tmp$_16, FLOAT$result_1, newImage_1, 0.0, this.game.gameConfigure.tileHeight);
        var info_1 = Kotlin.isType(tmp$_5 = this.game.gameValue.blockInfo, BlockItem) ? tmp$_5 : null;
        if (info_1 != null) {
          var color_1 = Color_init(info_1.colorMap.get_za3lpa$(this.value + 5 | 0));
          connection_1.SetColor_vnjrmz$(color_1);
          connection_1.SetBlendFactor_mx4ult$(1.0);
        }
        connection_1.SetHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
        connection_1.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        this.game.view.GetMask().addChild_g5h3xp$(connection_1);
        connection_1.SetAlpha_8ca0d4$(1.0);
        (tmp$_6 = this.game.view.screen) != null ? (tmp$_6.actionFade_ntk7i0$(0.1, 0.0, this.game.gameConfigure.tileWidthGap, void 0, BlockEntity$updateConnection$lambda_3(connection_1)), Unit) : null;
        if (old_1 != null) {
          (tmp$_7 = this.game.view.screen) != null ? (tmp$_7.actionFadeOut_7vo5wp$(old_1, void 0, void 0, 0.2, void 0, void 0, void 0, BlockEntity$updateConnection$lambda_4(old_1, connection_1, this)), Unit) : null;
        }
         else {
          this.connection[2] = connection_1;
        }
      }
    }
     else {
      if (this.connection[2] != null) {
        ensureNotNull(this.connection[2]).removeFromParent();
        this.connection[2] = null;
      }
    }
    if ((this.connectionBitMask & 8) === 8) {
      var newImage_2 = this.game.gameValue.blockSet + 'connect_3';
      var old_2 = this.connection[3];
      if (old_2 != null && !equals(ensureNotNull(old_2).image, newImage_2) || old_2 == null) {
        var tmp$_17 = this.GetBoardX() + this.game.gameConfigure.tileWidth * 0.5;
        var tmp$_18 = this.GetBoardY() - this.game.gameConfigure.tileHeight * 0.5;
        var value_2 = SceneLayer$gameTileTop_getInstance().value;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_2 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_2)) {
            FLOAT$result_2 = numberToDouble(value_2);
            break FLOAT$break;
          }
          if (typeof value_2 === 'string') {
            try {
              var number_2 = toDouble(value_2);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        var connection_2 = Sprite_init(tmp$_17, tmp$_18, FLOAT$result_2, newImage_2, 0.0, this.game.gameConfigure.tileHeight);
        var info_2 = Kotlin.isType(tmp$_8 = this.game.gameValue.blockInfo, BlockItem) ? tmp$_8 : null;
        if (info_2 != null) {
          var color_2 = Color_init(info_2.colorMap.get_za3lpa$(this.value + 10 | 0));
          connection_2.SetColor_vnjrmz$(color_2);
          connection_2.SetBlendFactor_mx4ult$(1.0);
        }
        this.game.view.GetMask().addChild_g5h3xp$(connection_2);
        connection_2.SetAlpha_8ca0d4$(1.0);
        (tmp$_9 = this.game.view.screen) != null ? (tmp$_9.actionFade_ntk7i0$(0.1, 0.0, this.game.gameConfigure.tileWidthGap, void 0, BlockEntity$updateConnection$lambda_5(connection_2)), Unit) : null;
        if (old_2 != null) {
          (tmp$_10 = this.game.view.screen) != null ? (tmp$_10.actionFadeOut_7vo5wp$(old_2, void 0, void 0, 0.2, void 0, void 0, void 0, BlockEntity$updateConnection$lambda_6(old_2, connection_2, this)), Unit) : null;
        }
         else {
          this.connection[3] = connection_2;
        }
      }
    }
     else {
      if (this.connection[3] != null) {
        ensureNotNull(this.connection[3]).removeFromParent();
        this.connection[3] = null;
      }
    }
  };
  function BlockEntity$makeDisable$lambda(this$BlockEntity) {
    return function (info) {
      var tmp$;
      if (info.elapsed === 0.0) {
        ensureNotNull(this$BlockEntity.disabledMask).SetAlpha_8ca0d4$(1.0);
        if (this$BlockEntity.game.gameConfigure.clickOnce === false) {
          this$BlockEntity.makeEnable();
        }
        return false;
      }
      (tmp$ = this$BlockEntity.disabledMask) != null ? (tmp$.SetAlpha_8ca0d4$(info.age * (1 / 0.3)), Unit) : null;
      return true;
    };
  }
  BlockEntity.prototype.makeDisable = function () {
    var tmp$;
    (tmp$ = this.disabledMask) != null ? (tmp$.addUpdateCallback_sds54w$('BlockEntity makeDisable', void 0, void 0, void 0, 0.3, void 0, BlockEntity$makeDisable$lambda(this)), Unit) : null;
    ensureNotNull(this.sprite).SetAnimation_pe1q5w$(null);
    this.disabledDone = true;
  };
  function BlockEntity$resetDisable$lambda(this$BlockEntity) {
    return function () {
      this$BlockEntity.createExplosion_za3lpa$(3);
      return Unit;
    };
  }
  BlockEntity.prototype.resetDisable_6taknv$ = function (explode) {
    if (explode === void 0)
      explode = true;
    var tmp$;
    if (this.disabledMask != null) {
      if (explode === true) {
        ensureNotNull(this.disabledMask).removeUpdateCallback_9sobi5$('BlockEntity makeDisable');
        ensureNotNull(this.disabledMask).SetAlpha_8ca0d4$(0.0);
        (tmp$ = this.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, BlockEntity$resetDisable$lambda(this)), Unit) : null;
      }
       else {
        ensureNotNull(this.disabledMask).removeUpdateCallback_9sobi5$('BlockEntity makeDisable');
        ensureNotNull(this.disabledMask).SetAlpha_8ca0d4$(0.0);
      }
    }
    this.transformCount = 0;
    this.needCheck = true;
    this.disabledDone = true;
    this.SetAttribute_c9f3gi$(TileEntity$Attribute$normal_getInstance());
  };
  function BlockEntity$makeEnable$lambda(this$BlockEntity) {
    return function (info) {
      if (info.elapsed === 0.0) {
        ensureNotNull(this$BlockEntity.disabledMask).SetAlpha_8ca0d4$(0.0);
        this$BlockEntity.transformCount = 0;
        this$BlockEntity.SetAttribute_c9f3gi$(TileEntity$Attribute$normal_getInstance());
        return false;
      }
      if (info.age > 0.7) {
        ensureNotNull(this$BlockEntity.disabledMask).SetAlpha_8ca0d4$(1 - (info.age - 0.7) * (1 / 0.3));
      }
      return true;
    };
  }
  BlockEntity.prototype.makeEnable = function () {
    var tmp$;
    (tmp$ = this.disabledMask) != null ? (tmp$.addUpdateCallback_sds54w$('BlockEntity makeEnable', void 0, void 0, void 0, 1.0, void 0, BlockEntity$makeEnable$lambda(this)), Unit) : null;
  };
  function BlockEntity$shake$lambda(closure$duration, this$BlockEntity, closure$motion) {
    return function (info) {
      if (info.age > closure$duration) {
        this$BlockEntity.adjustConnection();
        return false;
      }
      var pos = closure$motion.update_mx4ult$(info.elapsed);
      var sp = ensureNotNull(this$BlockEntity.sprite);
      sp.SetPosition_dleff0$(sp.GetPosition().x + pos, sp.GetPosition().y);
      this$BlockEntity.adjustConnection();
      var dm = this$BlockEntity.disabledMask;
      if (dm != null) {
        dm.SetPosition_dleff0$(dm.GetPosition().x + pos, dm.GetPosition().y);
      }
      return true;
    };
  }
  BlockEntity.prototype.shake_7b5o5w$$default = function (speed, accel, ampAccel, duration) {
    var motion = Wave_init(speed, accel, void 0, ampAccel);
    motion.SetScale_mx4ult$(this.game.view.sizeScale.xRatio * 2);
    ensureNotNull(this.sprite).addUpdateCallback_sds54w$('shake', false, void 0, void 0, void 0, void 0, BlockEntity$shake$lambda(duration, this, motion));
  };
  BlockEntity.prototype.createHoming_7thp2o$ = function (count, target) {
    if (count === void 0)
      count = 1;
    var tmp$;
    if (this.game.quality < 1) {
      return;
    }
    var x = this.GetRealScreenX();
    var y = this.GetRealScreenY();
    var num = 3;
    var color = Color$Companion_getInstance().white_mx4ult$();
    var image;
    if (this.game.quality < 2) {
      num = 1;
    }
    var info = Kotlin.isType(tmp$ = this.game.gameValue.blockInfo, BlockItem) ? tmp$ : throwCCE();
    image = 'Particle_' + info.colorMap.get_za3lpa$(this.value);
    var size = this.game.gameConfigure.tileWidth * 7;
    var r = this.game.gameConfigure.tileWidth / 2 * 10.0;
    var pos = Position_init(x, y, 0.0);
    var mStart = Position_init(this.game.gameConfigure.tileWidth / 4, this.game.gameConfigure.tileWidth / 4, -50.0);
    var mEnd = Position_init(this.game.gameConfigure.tileWidth / 2, this.game.gameConfigure.tileWidth / 2, -50.0);
    var ignoreMax = true;
    if (count === Kotlin.imul(this.game.gameConfigure.width, this.game.gameConfigure.height)) {
      ignoreMax = true;
      pos = Position_init(x, y, 0.0);
      mStart = Position_init(this.game.gameConfigure.tileWidth / 4, this.game.gameConfigure.tileWidth / 4, -50.0);
      mEnd = Position_init(this.game.gameConfigure.tileWidth / 2, this.game.gameConfigure.tileWidth / 2, -50.0);
    }
    if (this.game.gameConfigure.width > 3) {
      size *= 1.5;
      mEnd.x = this.game.gameConfigure.tileWidth;
      mEnd.y = this.game.gameConfigure.tileWidth;
    }
    var tmp$_0 = this.game.particleManager;
    var tmp$_1 = pos;
    var tmp$_2 = num;
    var tmp$_3 = mStart;
    var tmp$_4 = mEnd;
    var value = SceneLayer$parent_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    tmp$_0.createHoming_nxmntm$(target, tmp$_1, r, tmp$_2, size, 1.5, image, color, tmp$_3, tmp$_4, true, FLOAT$result, ignoreMax);
  };
  function BlockEntity$onWait$lambda$lambda(this$BlockEntity) {
    return function () {
      this$BlockEntity.resetDisable_6taknv$(true);
      return Unit;
    };
  }
  function BlockEntity$onWait$lambda(this$BlockEntity) {
    return function (state) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
      if (equals(state, 'run')) {
        if (this$BlockEntity.needCheck === false && this$BlockEntity.goingToRemove === false) {
          if (this$BlockEntity.attribute === TileEntity$Attribute$disabled_getInstance()) {
            if (this$BlockEntity.disabledDone === false) {
              this$BlockEntity.makeDisable();
            }
          }
        }
      }
       else if (equals(state, 'enter')) {
        var tmp$_5 = this$BlockEntity.game.gameValue.blockSet;
        var value = this$BlockEntity.value;
        var STRING$result;
        STRING$break: do {
          if (Kotlin.isNumber(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (typeof value === 'string') {
            STRING$result = value;
            break STRING$break;
          }
           else if (typeof value === 'boolean') {
            STRING$result = value.toString();
            break STRING$break;
          }
           else if (Kotlin.isChar(value)) {
            STRING$result = value.toString();
            break STRING$break;
          }
          STRING$result = '';
        }
         while (false);
        var image = tmp$_5 + STRING$result + '_normal';
        this$BlockEntity.isTransforming = false;
        this$BlockEntity.isDropping = false;
        if (this$BlockEntity.transformCount > 0) {
          if (this$BlockEntity.game.gameConfigure.clickOnce === true) {
            this$BlockEntity.SetAttribute_c9f3gi$(TileEntity$Attribute$disabled_getInstance());
            this$BlockEntity.disabledDone = false;
            if (this$BlockEntity.game.gameConfigure.reactivateDisabled === true) {
              (tmp$ = this$BlockEntity.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(this$BlockEntity.game.gameConfigure.reactivateAfter, void 0, BlockEntity$onWait$lambda$lambda(this$BlockEntity)), Unit) : null;
            }
          }
        }
        if (this$BlockEntity.sprite == null) {
          var tmp$_6 = this$BlockEntity;
          var tmp$_7 = this$BlockEntity.GetBoardX();
          var tmp$_8 = this$BlockEntity.GetBoardY();
          var tmp$_9 = this$BlockEntity.spriteZ;
          var value_0 = this$BlockEntity.game.gameConfigure.tileWidth;
          var FLOAT$result;
          FLOAT$break: do {
            if (value_0 == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_0)) {
              FLOAT$result = numberToDouble(value_0);
              break FLOAT$break;
            }
            if (typeof value_0 === 'string') {
              try {
                var number = toDouble(value_0);
                FLOAT$result = number;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          var tmp$_10 = FLOAT$result;
          var value_1 = this$BlockEntity.game.gameConfigure.tileHeight;
          var FLOAT$result_0;
          FLOAT$break: do {
            if (value_1 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_1)) {
              FLOAT$result_0 = numberToDouble(value_1);
              break FLOAT$break;
            }
            if (typeof value_1 === 'string') {
              try {
                var number_0 = toDouble(value_1);
                FLOAT$result_0 = number_0;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          tmp$_6.sprite = Sprite_init(tmp$_7, tmp$_8, tmp$_9, image, tmp$_10, FLOAT$result_0);
          (tmp$_0 = this$BlockEntity.sprite) != null ? (tmp$_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
          (tmp$_1 = this$BlockEntity.sprite) != null ? (tmp$_1.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
          this$BlockEntity.game.view.GetMask().addChild_g5h3xp$(ensureNotNull(this$BlockEntity.sprite));
          var tmp$_11 = this$BlockEntity;
          var tmp$_12 = this$BlockEntity.GetBoardX();
          var tmp$_13 = this$BlockEntity.GetBoardY();
          var tmp$_14 = this$BlockEntity.disabledMaskZ;
          var tmp$_15 = this$BlockEntity.game.gameValue.blockSet + 'inactive_mask';
          var value_2 = this$BlockEntity.game.gameConfigure.tileWidth;
          var FLOAT$result_1;
          FLOAT$break: do {
            if (value_2 == null) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_2)) {
              FLOAT$result_1 = numberToDouble(value_2);
              break FLOAT$break;
            }
            if (typeof value_2 === 'string') {
              try {
                var number_1 = toDouble(value_2);
                FLOAT$result_1 = number_1;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_1 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_1 = 0.0;
          }
           while (false);
          var tmp$_16 = FLOAT$result_1;
          var value_3 = this$BlockEntity.game.gameConfigure.tileHeight;
          var FLOAT$result_2;
          FLOAT$break: do {
            if (value_3 == null) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value_3)) {
              FLOAT$result_2 = numberToDouble(value_3);
              break FLOAT$break;
            }
            if (typeof value_3 === 'string') {
              try {
                var number_2 = toDouble(value_3);
                FLOAT$result_2 = number_2;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_2 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_2 = 0.0;
          }
           while (false);
          tmp$_11.disabledMask = Sprite_init(tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, FLOAT$result_2);
          (tmp$_2 = this$BlockEntity.disabledMask) != null ? (tmp$_2.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
          (tmp$_3 = this$BlockEntity.disabledMask) != null ? (tmp$_3.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
          this$BlockEntity.game.view.GetMask().addChild_g5h3xp$(ensureNotNull(this$BlockEntity.disabledMask));
          ensureNotNull(this$BlockEntity.disabledMask).SetAlpha_8ca0d4$(0.0);
        }
      }
       else if (equals(state, 'leave')) {
        (tmp$_4 = this$BlockEntity.sprite) != null ? (tmp$_4.SetAnimation_pe1q5w$(null), Unit) : null;
      }
    };
  }
  function BlockEntity$onRollback$lambda(this$BlockEntity) {
    return function (state) {
      if (equals(state, 'run')) {
        this$BlockEntity.animationState.SetNextState_9sobi5$('wait', 0.1);
      }
       else if (equals(state, 'enter')) {
        this$BlockEntity.rollback();
      }
    };
  }
  BlockEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlockEntity',
    interfaces: [TileEntity]
  };
  function BlockEntity_init(game, value, screenX, screenY, $this) {
    $this = $this || Object.create(BlockEntity.prototype);
    TileEntity_init(game, value, screenX, screenY, $this);
    BlockEntity.call($this);
    $this.animationState.addOnUpdateCallback_bodv9c$('wait', $this.onWait);
    $this.animationState.addOnUpdateCallback_bodv9c$('transform', BlockEntity_init$lambda);
    $this.animationState.addOnUpdateCallback_bodv9c$('remove', BlockEntity_init$lambda_0);
    $this.animationState.addOnUpdateCallback_bodv9c$('rollback', $this.onRollback);
    $this.animationState.SetNextState_9sobi5$('wait');
    return $this;
  }
  function BlockEntity_init$lambda(it) {
    return Unit;
  }
  function BlockEntity_init$lambda_0(it) {
    return Unit;
  }
  function BlankEntity() {
  }
  BlankEntity.prototype.remove = function () {
    TileEntity.prototype.remove.call(this);
    if (this.sprite != null) {
      ensureNotNull(this.sprite).removeFromParent();
      this.sprite = null;
    }
  };
  BlankEntity.prototype.SetAttribute_c9f3gi$ = function (attr) {
  };
  BlankEntity.prototype.draw = function () {
    var tmp$;
    var x = this.GetRealScreenX();
    var y = this.GetRealScreenY();
    (tmp$ = this.sprite) != null ? (tmp$.SetPosition_dleff0$(x, y), Unit) : null;
  };
  BlankEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlankEntity',
    interfaces: [TileEntity]
  };
  function BlankEntity_init(game, value, screenX, screenY, $this) {
    $this = $this || Object.create(BlankEntity.prototype);
    TileEntity_init(game, value, screenX, screenY, $this);
    BlankEntity.call($this);
    var tmp$ = game.gameValue.blockSet + 'puzzle_clear_';
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var image = tmp$ + STRING$result;
    $this.sprite = game.view.createSprite_vzsiy1$($this.GetRealScreenX(), $this.GetRealScreenY(), $this.spriteZ, image);
    return $this;
  }
  function EntityManager() {
    this.entityList = null;
  }
  EntityManager.prototype.removeAll = function () {
    var tmp$;
    tmp$ = reversed(this.entityList).iterator();
    while (tmp$.hasNext()) {
      var entity = tmp$.next();
      entity.remove();
    }
    this.flush();
  };
  EntityManager.prototype.GetList = function () {
    return copyToArray(this.entityList);
  };
  EntityManager.prototype.flush = function () {
    var tmp$;
    tmp$ = reversed(withIndex(this.entityList)).iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var i = tmp$_0.component1()
      , entity = tmp$_0.component2();
      if (entity.GetEntityState() === GameEntity$EntityState$dead_getInstance()) {
        this.entityList.removeAt_za3lpa$(i);
      }
    }
    this.printEntity();
  };
  EntityManager.prototype.addEntity_268i5w$ = function (entity) {
    this.entityList.add_wxm5ur$(this.entityList.size, entity);
    this.printEntity();
  };
  EntityManager.prototype.createBlock_mwco6a$ = function (game, value, subValue, screenX, screenY) {
    if (subValue === void 0)
      subValue = 0;
    var tmp$, tmp$_0;
    var entity;
    if (value === 100) {
      entity = new ReactivateItemEntity(game, value, subValue, screenX, screenY);
    }
     else if (value === 101) {
      entity = new SameBombEntity(game, value, subValue, screenX, screenY);
    }
     else if (value === 102) {
      entity = new NearBombEntity(game, value, subValue, screenX, screenY);
    }
     else if (value === 103) {
      entity = new LineBombEntity(game, value, subValue, screenX, screenY);
    }
     else if (value === 104) {
      entity = new LineBombEntity(game, value, 2, screenX, screenY);
    }
     else if (value >= 10000) {
      var realValue = value - 10000 | 0;
      if (realValue >= 1000) {
        entity = ObstacleEntity_init(game, realValue, screenX, screenY);
        (Kotlin.isType(tmp$ = entity, ObstacleEntity) ? tmp$ : throwCCE()).makeStone();
      }
       else {
        entity = BlockEntity_init(game, realValue, screenX, screenY);
        (Kotlin.isType(tmp$_0 = entity, BlockEntity) ? tmp$_0 : throwCCE()).SetDisabled();
      }
    }
     else {
      if (value >= 1000) {
        entity = ObstacleEntity_init(game, value, screenX, screenY);
      }
       else {
        var v = value;
        if (v < 0 || v >= game.gameConfigure.kindOfNumber) {
          v = 0;
        }
        entity = BlockEntity_init(game, v, screenX, screenY);
      }
    }
    this.addEntity_268i5w$(entity);
    return entity;
  };
  EntityManager.prototype.update_mx4ult$ = function (elapsed) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.flush();
    tmp$ = this.entityList.iterator();
    while (tmp$.hasNext()) {
      var entity = tmp$.next();
      if (entity.GetOrder() === GameEntity$ZOrder$bottom_getInstance()) {
        entity.preprocessMove_mx4ult$(elapsed);
        entity.update_mx4ult$(elapsed);
        entity.draw();
      }
    }
    tmp$_0 = this.entityList.iterator();
    while (tmp$_0.hasNext()) {
      var entity_0 = tmp$_0.next();
      if (entity_0.GetOrder() === GameEntity$ZOrder$middle_getInstance()) {
        entity_0.preprocessMove_mx4ult$(elapsed);
        entity_0.update_mx4ult$(elapsed);
        entity_0.draw();
      }
    }
    tmp$_1 = this.entityList.iterator();
    while (tmp$_1.hasNext()) {
      var entity_1 = tmp$_1.next();
      if (entity_1.GetOrder() === GameEntity$ZOrder$top_getInstance()) {
        entity_1.preprocessMove_mx4ult$(elapsed);
        entity_1.update_mx4ult$(elapsed);
        entity_1.draw();
      }
    }
    tmp$_2 = this.entityList.iterator();
    while (tmp$_2.hasNext()) {
      var entity_2 = tmp$_2.next();
      entity_2.preprocessed = false;
    }
  };
  EntityManager.prototype.printEntity = function () {
  };
  EntityManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EntityManager',
    interfaces: []
  };
  function EntityManager_init($this) {
    $this = $this || Object.create(EntityManager.prototype);
    EntityManager.call($this);
    $this.entityList = ArrayList_init();
    return $this;
  }
  function GameEntity() {
    this.lifetime = 0;
    this.timeToLive_prt4ss$_0 = 0;
    this.game_7su03y$_0 = this.game_7su03y$_0;
    this.value = 0;
    this.text = null;
    this.entityState_e2ys3e$_0 = null;
    this.order_ws1p7q$_0 = null;
    this.internalX = null;
    this.internalY = null;
    this.nextX = null;
    this.nextY = null;
    this.preprocessed = false;
    this.hasGoal = false;
    this.moveToX = null;
    this.moveToY = null;
    this.speedX = null;
    this.speedY = null;
    this.accelX = null;
    this.accelY = null;
    this.speedXLimit = null;
    this.speedYLimit = null;
    this.checkCollide_22kq6u$_0 = true;
    this.needLanding_redr4d$_0 = false;
    this.prevLanding = new Pair(-1, -1);
  }
  function GameEntity$EntityState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function GameEntity$EntityState_initFields() {
    GameEntity$EntityState_initFields = function () {
    };
    GameEntity$EntityState$alive_instance = new GameEntity$EntityState('alive', 0);
    GameEntity$EntityState$dead_instance = new GameEntity$EntityState('dead', 1);
  }
  var GameEntity$EntityState$alive_instance;
  function GameEntity$EntityState$alive_getInstance() {
    GameEntity$EntityState_initFields();
    return GameEntity$EntityState$alive_instance;
  }
  var GameEntity$EntityState$dead_instance;
  function GameEntity$EntityState$dead_getInstance() {
    GameEntity$EntityState_initFields();
    return GameEntity$EntityState$dead_instance;
  }
  GameEntity$EntityState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EntityState',
    interfaces: [Enum]
  };
  function GameEntity$EntityState$values() {
    return [GameEntity$EntityState$alive_getInstance(), GameEntity$EntityState$dead_getInstance()];
  }
  GameEntity$EntityState.values = GameEntity$EntityState$values;
  function GameEntity$EntityState$valueOf(name) {
    switch (name) {
      case 'alive':
        return GameEntity$EntityState$alive_getInstance();
      case 'dead':
        return GameEntity$EntityState$dead_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.logic.entity.GameEntity.EntityState.' + name);
    }
  }
  GameEntity$EntityState.valueOf_61zpoe$ = GameEntity$EntityState$valueOf;
  function GameEntity$ZOrder(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function GameEntity$ZOrder_initFields() {
    GameEntity$ZOrder_initFields = function () {
    };
    GameEntity$ZOrder$bottom_instance = new GameEntity$ZOrder('bottom', 0);
    GameEntity$ZOrder$middle_instance = new GameEntity$ZOrder('middle', 1);
    GameEntity$ZOrder$top_instance = new GameEntity$ZOrder('top', 2);
  }
  var GameEntity$ZOrder$bottom_instance;
  function GameEntity$ZOrder$bottom_getInstance() {
    GameEntity$ZOrder_initFields();
    return GameEntity$ZOrder$bottom_instance;
  }
  var GameEntity$ZOrder$middle_instance;
  function GameEntity$ZOrder$middle_getInstance() {
    GameEntity$ZOrder_initFields();
    return GameEntity$ZOrder$middle_instance;
  }
  var GameEntity$ZOrder$top_instance;
  function GameEntity$ZOrder$top_getInstance() {
    GameEntity$ZOrder_initFields();
    return GameEntity$ZOrder$top_instance;
  }
  GameEntity$ZOrder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZOrder',
    interfaces: [Enum]
  };
  function GameEntity$ZOrder$values() {
    return [GameEntity$ZOrder$bottom_getInstance(), GameEntity$ZOrder$middle_getInstance(), GameEntity$ZOrder$top_getInstance()];
  }
  GameEntity$ZOrder.values = GameEntity$ZOrder$values;
  function GameEntity$ZOrder$valueOf(name) {
    switch (name) {
      case 'bottom':
        return GameEntity$ZOrder$bottom_getInstance();
      case 'middle':
        return GameEntity$ZOrder$middle_getInstance();
      case 'top':
        return GameEntity$ZOrder$top_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.logic.entity.GameEntity.ZOrder.' + name);
    }
  }
  GameEntity$ZOrder.valueOf_61zpoe$ = GameEntity$ZOrder$valueOf;
  Object.defineProperty(GameEntity.prototype, 'game', {
    get: function () {
      if (this.game_7su03y$_0 == null)
        return throwUPAE('game');
      return this.game_7su03y$_0;
    },
    set: function (game) {
      this.game_7su03y$_0 = game;
    }
  });
  GameEntity.prototype.SetTimeToLive_mx4ult$ = function (time) {
    this.timeToLive_prt4ss$_0 = time;
  };
  GameEntity.prototype.GetTimeToLive = function () {
    return this.timeToLive_prt4ss$_0;
  };
  GameEntity.prototype.SetEntityState_b38ml0$ = function (entityState) {
    this.entityState_e2ys3e$_0 = entityState;
  };
  GameEntity.prototype.GetEntityState = function () {
    return this.entityState_e2ys3e$_0;
  };
  GameEntity.prototype.SetOrder_mb3qz2$ = function (order) {
    this.order_ws1p7q$_0 = order;
  };
  GameEntity.prototype.GetOrder = function () {
    return this.order_ws1p7q$_0;
  };
  GameEntity.prototype.SetScreenX_za3lpa$ = function (x) {
    this.internalX = Kotlin.Long.fromInt(x * 1000 | 0);
  };
  GameEntity.prototype.SetScreenY_za3lpa$ = function (y) {
    this.internalY = Kotlin.Long.fromInt(y * 1000 | 0);
  };
  GameEntity.prototype.GetScreenX = function () {
    var x = this.internalX.div(Kotlin.Long.fromInt(1000)).toNumber();
    return numberToInt(Math_0.floor(x));
  };
  GameEntity.prototype.GetScreenY = function () {
    var x = this.internalY.div(Kotlin.Long.fromInt(1000)).toNumber();
    return numberToInt(Math_0.floor(x));
  };
  GameEntity.prototype.GetRealScreenX = function () {
    return this.game.boardRect.x + this.internalX.toNumber() * this.game.gameConfigure.tileWidthResult / 1000 + this.game.gameConfigure.tileWidthResult * 0.5;
  };
  GameEntity.prototype.GetRealScreenY = function () {
    return this.game.boardRect.y + this.internalY.toNumber() * this.game.gameConfigure.tileHeightResult / 1000 + this.game.gameConfigure.tileHeightResult * 0.5;
  };
  GameEntity.prototype.GetBoardX = function () {
    return this.internalX.toNumber() * this.game.gameConfigure.tileWidthResult / 1000 + this.game.gameConfigure.tileWidthResult * 0.5;
  };
  GameEntity.prototype.GetBoardY = function () {
    return this.internalY.toNumber() * this.game.gameConfigure.tileHeightResult / 1000 + this.game.gameConfigure.tileHeightResult * 0.5;
  };
  GameEntity.prototype.SetCheckCollide_6taknv$ = function (collide) {
    this.checkCollide_22kq6u$_0 = collide;
    this.SetNeedLanding_6taknv$(false);
  };
  GameEntity.prototype.SetNeedLanding_6taknv$ = function (landing) {
    this.needLanding_redr4d$_0 = landing;
  };
  GameEntity.prototype.moveTo_mp7p4f$ = function (screenX, screenY, speedY, speedYLimit, accelY) {
    if (speedY === void 0)
      speedY = 0.0;
    this.moveToX = Kotlin.Long.fromInt(screenX * 1000 | 0);
    this.moveToY = Kotlin.Long.fromInt(screenY * 1000 | 0);
    this.speedX = Kotlin.Long.ZERO;
    this.speedY = Kotlin.Long.fromNumber(speedY * 1000);
    this.accelX = Kotlin.Long.ZERO;
    this.accelY = Kotlin.Long.fromNumber(accelY * 1000);
    this.speedXLimit = Kotlin.Long.ZERO;
    this.speedYLimit = Kotlin.Long.fromNumber(speedYLimit * 1000);
    this.needLanding_redr4d$_0 = true;
  };
  GameEntity.prototype.isArrived = function () {
    if (equals(this.speedX, Kotlin.Long.ZERO) && equals(this.speedY, Kotlin.Long.ZERO)) {
      return true;
    }
    return false;
  };
  GameEntity.prototype.update_mx4ult$ = function (elapsed) {
    this.lifetime = this.lifetime + elapsed;
    if (this.lifetime >= this.timeToLive_prt4ss$_0 && this.timeToLive_prt4ss$_0 !== 0.0) {
      this.remove();
    }
     else {
      this.doUpdate_mx4ult$(elapsed);
    }
  };
  GameEntity.prototype.doUpdate_mx4ult$ = function (elapsed) {
    this.animate_mx4ult$(elapsed);
    this.move_mx4ult$(elapsed);
  };
  GameEntity.prototype.animate_mx4ult$ = function (elapsed) {
  };
  GameEntity.prototype.onLanding_vux9f0$ = function (x, y) {
    this.game.map[x][y] = this;
    this.prevLanding = new Pair(x, y);
    this.needLanding_redr4d$_0 = false;
    this.speedX = Kotlin.Long.ZERO;
    this.speedY = Kotlin.Long.ZERO;
    this.accelX = Kotlin.Long.ZERO;
    this.accelY = Kotlin.Long.ZERO;
  };
  GameEntity.prototype.landing = function () {
    var x = this.GetScreenX();
    var y = this.GetScreenY();
    if (this.game.map[x][y] == null) {
      if (this.prevLanding.first === x && this.prevLanding.second === y) {
        return;
      }
      this.onLanding_vux9f0$(x, y);
    }
  };
  GameEntity.prototype.move_mx4ult$ = function (elapsed) {
    this.internalX = this.nextX;
    this.internalY = this.nextY;
    var x = this.GetScreenX();
    var y = this.GetScreenY();
    if (this.checkCollide_22kq6u$_0 === true) {
      if (y === (this.game.gameConfigure.height - 1 | 0)) {
        this.SetScreenX_za3lpa$(x);
        this.SetScreenY_za3lpa$(y);
        if (this.needLanding_redr4d$_0 === true) {
          this.landing();
        }
      }
       else if (y >= 0) {
        if (this.game.map[x][y + 1 | 0] != null) {
          this.SetScreenX_za3lpa$(x);
          this.SetScreenY_za3lpa$(y);
          if (this.needLanding_redr4d$_0 === true) {
            this.landing();
          }
        }
      }
    }
     else {
      if (y >= this.game.gameConfigure.height) {
        this.remove();
      }
    }
  };
  GameEntity.prototype.draw = function () {
  };
  GameEntity.prototype.remove = function () {
    this.entityState_e2ys3e$_0 = GameEntity$EntityState$dead_getInstance();
  };
  GameEntity.prototype.preprocessMove_mx4ult$ = function (elapsed) {
    var tmp$, tmp$_0;
    if (this.preprocessed === true) {
      return;
    }
    var time = Kotlin.Long.fromNumber(elapsed * 1000);
    this.speedX = this.speedX.add(this.accelX.multiply(time).div(Kotlin.Long.fromInt(1000)));
    if (this.speedX.compareTo_11rb$(this.speedXLimit) > 0) {
      this.speedX = this.speedXLimit;
    }
    var v0Y = this.speedY;
    this.speedY = this.speedY.add(this.accelY.multiply(time).div(Kotlin.Long.fromInt(1000)));
    if (this.speedY.compareTo_11rb$(this.speedYLimit) > 0) {
      this.speedY = this.speedYLimit;
    }
    var nextY = this.internalY.add(v0Y.multiply(time).div(Kotlin.Long.fromInt(1000))).add(this.accelY.multiply(time).multiply(time).div(Kotlin.Long.fromInt(2)).div(Kotlin.Long.fromInt(1000 * 1000 | 0)));
    if (!equals(this.speedX, Kotlin.Long.ZERO) || !equals(this.speedY, Kotlin.Long.ZERO)) {
      if (this.checkCollide_22kq6u$_0 === true) {
        var entityList = (tmp$ = this.game.entityManager) != null ? tmp$.GetList() : null;
        if (entityList != null) {
          for (tmp$_0 = 0; tmp$_0 !== entityList.length; ++tmp$_0) {
            var target = entityList[tmp$_0];
            if (Kotlin.isType(target, TileEntity)) {
              if (target !== this) {
                if (!equals(target.internalX, this.internalX)) {
                  continue;
                }
                if (target.internalY.compareTo_11rb$(this.internalY) <= 0) {
                  continue;
                }
                target.preprocessMove_mx4ult$(elapsed);
                if (target.checkCollideNext_61feqd$(this.internalX, nextY, elapsed) === true) {
                  nextY = target.nextY.subtract(Kotlin.Long.fromInt(1000));
                  this.speedY = Kotlin.Long.ZERO;
                }
              }
            }
          }
        }
        if (nextY.compareTo_11rb$(Kotlin.Long.fromInt((this.game.gameConfigure.height - 1 | 0) * 1000 | 0)) >= 0) {
          nextY = Kotlin.Long.fromInt((this.game.gameConfigure.height - 1 | 0) * 1000 | 0);
        }
      }
      this.nextY = nextY;
    }
     else {
      this.nextY = this.internalY;
    }
    this.preprocessed = true;
  };
  GameEntity.prototype.checkCollide_61feqd$ = function (x, y, elapsed) {
    if (this.checkCollide_22kq6u$_0 === false) {
      return false;
    }
    var time = Kotlin.Long.fromNumber(elapsed * 1000);
    var v0X = this.speedX;
    var v0Y = this.speedY;
    var myX = this.internalX.add(v0X.multiply(time).div(Kotlin.Long.fromInt(1000))).add(this.accelX.multiply(time).multiply(time).div(Kotlin.Long.fromInt(2)).div(Kotlin.Long.fromInt(1000 * 1000 | 0)));
    var myY = this.internalY.add(v0Y.multiply(time).div(Kotlin.Long.fromInt(1000))).add(this.accelY.multiply(time).multiply(time).div(Kotlin.Long.fromInt(2)).div(Kotlin.Long.fromInt(1000 * 1000 | 0)));
    if (x.compareTo_11rb$(myX) >= 0 && x.compareTo_11rb$(myX.add(Kotlin.Long.fromInt(1000))) < 0 || (x.add(Kotlin.Long.fromInt(1000)).compareTo_11rb$(myX) >= 0 && x.add(Kotlin.Long.fromInt(1000)).compareTo_11rb$(myX.add(Kotlin.Long.fromInt(1000))) < 0)) {
      if (y.compareTo_11rb$(myY) >= 0 && y.compareTo_11rb$(myY.add(Kotlin.Long.fromInt(1000))) < 0 || (y.add(Kotlin.Long.fromInt(1000)).compareTo_11rb$(myY) >= 0 && y.add(Kotlin.Long.fromInt(1000)).compareTo_11rb$(myY.add(Kotlin.Long.fromInt(1000))) < 0)) {
        return true;
      }
    }
    return false;
  };
  GameEntity.prototype.checkCollideNext_61feqd$ = function (x, y, elapsed) {
    if (this.checkCollide_22kq6u$_0 === false) {
      return false;
    }
    var myX = this.nextX;
    var myY = this.nextY;
    if (x.compareTo_11rb$(myX) >= 0 && x.compareTo_11rb$(myX.add(Kotlin.Long.fromInt(1000))) < 0 || (x.add(Kotlin.Long.fromInt(1000)).compareTo_11rb$(myX) >= 0 && x.add(Kotlin.Long.fromInt(1000)).compareTo_11rb$(myX.add(Kotlin.Long.fromInt(1000))) < 0)) {
      if (y.compareTo_11rb$(myY) >= 0 || y.add(Kotlin.Long.fromInt(1000)).compareTo_11rb$(myY) >= 0) {
        return true;
      }
    }
    return false;
  };
  GameEntity.prototype.GetNextPosition_mx4ult$ = function (elapsed) {
    return new Pair(this.nextX, this.nextY);
  };
  GameEntity.prototype.isMatchCheckable = function () {
    return false;
  };
  GameEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameEntity',
    interfaces: []
  };
  function GameEntity_init(game, value, screenX, screenY, $this) {
    $this = $this || Object.create(GameEntity.prototype);
    GameEntity.call($this);
    $this.lifetime = 0.0;
    $this.timeToLive_prt4ss$_0 = 0.0;
    $this.game = game;
    $this.value = value;
    $this.text = '';
    $this.entityState_e2ys3e$_0 = GameEntity$EntityState$alive_getInstance();
    $this.order_ws1p7q$_0 = GameEntity$ZOrder$middle_getInstance();
    $this.internalX = Kotlin.Long.fromInt(screenX * 1000 | 0);
    $this.internalY = Kotlin.Long.fromInt(screenY * 1000 | 0);
    $this.nextX = $this.internalX;
    $this.nextY = $this.internalY;
    $this.preprocessed = false;
    $this.hasGoal = false;
    $this.moveToX = $this.internalX;
    $this.moveToY = $this.internalY;
    $this.speedX = Kotlin.Long.ZERO;
    $this.speedY = Kotlin.Long.ZERO;
    $this.accelX = Kotlin.Long.ZERO;
    $this.accelY = Kotlin.Long.ZERO;
    $this.speedXLimit = Kotlin.Long.ZERO;
    $this.speedYLimit = Kotlin.Long.ZERO;
    return $this;
  }
  function ItemEntity() {
    this.subValue = 0;
    this.used = false;
    this.effectDelay = 0.0;
  }
  ItemEntity.prototype.SetImage = function () {
  };
  ItemEntity.prototype.remove = function () {
    TileEntity.prototype.remove.call(this);
    if (this.sprite != null) {
      ensureNotNull(this.sprite).removeFromParent();
      this.sprite = null;
    }
  };
  ItemEntity.prototype.SetAttribute_c9f3gi$ = function (attr) {
  };
  ItemEntity.prototype.draw = function () {
    var tmp$;
    var x = this.GetBoardX();
    var y = this.GetBoardY();
    (tmp$ = this.sprite) != null ? (tmp$.SetPosition_dleff0$(x, y), Unit) : null;
  };
  ItemEntity.prototype.SetUsed_6taknv$ = function (used) {
    var tmp$, tmp$_0;
    this.used = used;
    if (used === true) {
      this.needCheck = true;
      (tmp$ = this.sprite) != null ? (tmp$.yMotion = null) : null;
      var xMotion = Wave_init(10.0, void 0, void 0, 0.0);
      xMotion.SetScale_mx4ult$(this.game.gameConfigure.tileWidth * 0.06);
      (tmp$_0 = this.sprite) != null ? (tmp$_0.SetXMotion_vn0wwp$(xMotion, true), Unit) : null;
    }
     else {
      this.needCheck = false;
    }
  };
  ItemEntity.prototype.isUsed = function () {
    return this.used;
  };
  ItemEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ItemEntity',
    interfaces: [TileEntity]
  };
  function ItemEntity_init(game, value, subValue, screenX, screenY, $this) {
    $this = $this || Object.create(ItemEntity.prototype);
    TileEntity_init(game, value, screenX, screenY, $this);
    ItemEntity.call($this);
    var tmp$;
    $this.subValue = subValue;
    $this.SetImage();
    if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 0) >= 2) {
      var yMotion = Wave_init(1.0);
      yMotion.SetScale_mx4ult$(game.gameConfigure.tileHeight * 0.05);
      (tmp$ = $this.sprite) != null ? (tmp$.SetYMotion_vn0wwp$(yMotion, true), Unit) : null;
    }
    return $this;
  }
  function ReactivateItemEntity(game, value, subValue, screenX, screenY) {
    ItemEntity_init(game, value, subValue, screenX, screenY, this);
  }
  ReactivateItemEntity.prototype.SetImage = function () {
    var tmp$, tmp$_0;
    var image = 'Item_100';
    var tmp$_1 = this.GetBoardX();
    var tmp$_2 = this.GetBoardY();
    var tmp$_3 = this.spriteZ;
    var value = this.game.gameConfigure.tileWidth * 0.8;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_4 = FLOAT$result;
    var value_0 = this.game.gameConfigure.tileHeight * 0.8;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    this.sprite = Sprite_init(tmp$_1, tmp$_2, tmp$_3, image, tmp$_4, FLOAT$result_0);
    (tmp$ = this.sprite) != null ? (tmp$.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_0 = this.sprite) != null ? (tmp$_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
    this.game.view.GetMask().addChild_g5h3xp$(ensureNotNull(this.sprite));
  };
  ReactivateItemEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ReactivateItemEntity',
    interfaces: [ItemEntity]
  };
  function SameBombEntity(game, value, subValue, screenX, screenY) {
    ItemEntity_init(game, value, subValue, screenX, screenY, this);
  }
  SameBombEntity.prototype.SetImage = function () {
    var tmp$, tmp$_0, tmp$_1;
    var info = Kotlin.isType(tmp$ = this.game.gameValue.blockInfo, BlockItem) ? tmp$ : throwCCE();
    var value = info.colorMap.get_za3lpa$(this.subValue);
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var image = 'Item_101_' + STRING$result;
    var tmp$_2 = this.GetBoardX();
    var tmp$_3 = this.GetBoardY();
    var tmp$_4 = this.spriteZ;
    var value_0 = this.game.gameConfigure.tileWidth * 0.8;
    var FLOAT$result;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number = toDouble(value_0);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_5 = FLOAT$result;
    var value_1 = this.game.gameConfigure.tileHeight * 0.8;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_0 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_0 = toDouble(value_1);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    this.sprite = Sprite_init(tmp$_2, tmp$_3, tmp$_4, image, tmp$_5, FLOAT$result_0);
    (tmp$_0 = this.sprite) != null ? (tmp$_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_1 = this.sprite) != null ? (tmp$_1.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
    this.game.view.GetMask().addChild_g5h3xp$(ensureNotNull(this.sprite));
  };
  SameBombEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SameBombEntity',
    interfaces: [ItemEntity]
  };
  function NearBombEntity(game, value, subValue, screenX, screenY) {
    ItemEntity_init(game, value, subValue, screenX, screenY, this);
  }
  NearBombEntity.prototype.SetImage = function () {
    var tmp$, tmp$_0;
    var image = 'Item_102';
    var tmp$_1 = this.GetBoardX();
    var tmp$_2 = this.GetBoardY();
    var tmp$_3 = this.spriteZ;
    var value = this.game.gameConfigure.tileWidth * 0.8;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_4 = FLOAT$result;
    var value_0 = this.game.gameConfigure.tileHeight * 0.8;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    this.sprite = Sprite_init(tmp$_1, tmp$_2, tmp$_3, image, tmp$_4, FLOAT$result_0);
    (tmp$ = this.sprite) != null ? (tmp$.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_0 = this.sprite) != null ? (tmp$_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
    this.game.view.GetMask().addChild_g5h3xp$(ensureNotNull(this.sprite));
  };
  NearBombEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NearBombEntity',
    interfaces: [ItemEntity]
  };
  function LineBombEntity(game, value, subValue, screenX, screenY) {
    ItemEntity_init(game, value, subValue, screenX, screenY, this);
  }
  LineBombEntity.prototype.SetImage = function () {
    var tmp$, tmp$_0;
    var image = 'Item_103_h';
    if (this.value === 104 && this.subValue === 2) {
      image = 'Item_104';
    }
     else {
      if (this.subValue === 0) {
        image = 'Item_103_h';
      }
      if (this.subValue === 1) {
        image = 'Item_103_v';
      }
    }
    var tmp$_1 = this.GetBoardX();
    var tmp$_2 = this.GetBoardY();
    var tmp$_3 = this.spriteZ;
    var tmp$_4 = image;
    var value = this.game.gameConfigure.tileWidth * 0.8;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_5 = FLOAT$result;
    var value_0 = this.game.gameConfigure.tileHeight * 0.8;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    this.sprite = Sprite_init(tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, FLOAT$result_0);
    (tmp$ = this.sprite) != null ? (tmp$.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_0 = this.sprite) != null ? (tmp$_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
    this.game.view.GetMask().addChild_g5h3xp$(ensureNotNull(this.sprite));
  };
  LineBombEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineBombEntity',
    interfaces: [ItemEntity]
  };
  function ObstacleEntity() {
    this.matched = false;
    this.isStone = false;
  }
  ObstacleEntity.prototype.remove = function () {
    TileEntity.prototype.remove.call(this);
    if (this.sprite != null) {
      ensureNotNull(this.sprite).removeFromParent();
      this.sprite = null;
    }
  };
  ObstacleEntity.prototype.SetAttribute_c9f3gi$ = function (attr) {
  };
  ObstacleEntity.prototype.draw = function () {
    var tmp$;
    var x = this.GetBoardX();
    var y = this.GetBoardY();
    (tmp$ = this.sprite) != null ? (tmp$.SetPosition_dleff0$(x, y), Unit) : null;
  };
  function ObstacleEntity$explode$lambda(closure$moveNext, this$ObstacleEntity, closure$motion, closure$spriteNext, closure$originSize) {
    return function (info) {
      if (info.elapsed === 0.0) {
        if (closure$moveNext.v === false) {
          this$ObstacleEntity.animationState.SetNextState_9sobi5$('remove');
        }
        return false;
      }
      if (info.age > this$ObstacleEntity.game.gameConfigure.removeFireDelay) {
        if (closure$moveNext.v === false) {
          this$ObstacleEntity.animationState.SetNextState_9sobi5$('remove');
          closure$moveNext.v = true;
        }
      }
      closure$motion.update_mx4ult$(info.elapsed);
      var pos = closure$motion.GetPosition();
      closure$spriteNext.SetSize_dleff0$(closure$originSize.width * (0.5 + pos), closure$originSize.height * (0.5 + pos));
      if (info.age > 0.3) {
        closure$spriteNext.SetAlpha_8ca0d4$(1.0 - (info.age - 0.3) * 5.0);
      }
      return true;
    };
  }
  ObstacleEntity.prototype.explode_nhq4am$$default = function (count, delay, delay2) {
    var tmp$, tmp$_0, tmp$_1;
    if (this.sprite == null) {
      return;
    }
    (tmp$ = this.game.view.screen) != null ? (tmp$.removeAction_81ngrp$('blink', void 0, this.sprite), Unit) : null;
    (tmp$_0 = this.sprite) != null ? (tmp$_0.SetAlpha_8ca0d4$(0.0), Unit) : null;
    var tmp$_2 = this.GetRealScreenX();
    var tmp$_3 = this.GetRealScreenY();
    var tmp$_4 = this.spriteZ;
    var value = this.game.gameConfigure.tileWidth;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_5 = FLOAT$result;
    var value_0 = this.game.gameConfigure.tileHeight;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var spriteNext = Sprite_init(tmp$_2, tmp$_3, tmp$_4, 'Ghost_blank', tmp$_5, FLOAT$result_0);
    spriteNext.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    spriteNext.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    var info = Kotlin.isType(tmp$_1 = this.game.gameValue.blockInfo, BlockItem) ? tmp$_1 : null;
    if (info != null) {
      spriteNext.SetBlendMode_ieo8yr$(info.blendMode);
      spriteNext.SetBlendFactor_mx4ult$(info.blendFactor);
      spriteNext.SetColor_vnjrmz$(info.color);
    }
    this.game.view.addChild_g5h3xp$(spriteNext);
    var originSize = Size_init(ensureNotNull(this.sprite).GetSize().width, ensureNotNull(this.sprite).GetSize().height);
    var motion = new Motion(this.game.gameConfigure.matchEffectSpeed, 1.0, 0.5);
    var moveNext = {v: false};
    spriteNext.SetTimeToLive_mx4ult$(this.game.gameConfigure.matchEffectDuration);
    spriteNext.addUpdateCallback_sds54w$('BlockEntity Matched', void 0, void 0, void 0, void 0, void 0, ObstacleEntity$explode$lambda(moveNext, this, motion, spriteNext, originSize));
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('ghost');
    this.explodeEffect_24o109$(count, delay2);
  };
  function ObstacleEntity$explodeEffect$lambda$lambda(this$ObstacleEntity) {
    return function () {
      this$ObstacleEntity.remove();
      return Unit;
    };
  }
  function ObstacleEntity$explodeEffect$lambda(this$ObstacleEntity, closure$count, closure$delay) {
    return function () {
      var tmp$;
      this$ObstacleEntity._createExplosion_vl24u5$(closure$count, 9, 'Resource/UI/Particle', this$ObstacleEntity.game.gameConfigure.tileWidth * 8);
      (tmp$ = this$ObstacleEntity.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$delay, void 0, ObstacleEntity$explodeEffect$lambda$lambda(this$ObstacleEntity)), Unit) : null;
      return Unit;
    };
  }
  function ObstacleEntity$explodeEffect$lambda_0(closure$sprite) {
    return function () {
      closure$sprite.SetTimeToLive_mx4ult$(0.0);
      return Unit;
    };
  }
  ObstacleEntity.prototype.explodeEffect_24o109$ = function (count, delay) {
    var tmp$, tmp$_0;
    (tmp$ = this.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, ObstacleEntity$explodeEffect$lambda(this, count, delay)), Unit) : null;
    var image = 'Ghost_white';
    var tmp$_1 = this.GetRealScreenX();
    var tmp$_2 = this.GetRealScreenY();
    var value = SceneLayer$gameTileTop_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_3 = FLOAT$result;
    var value_0 = this.game.gameConfigure.tileWidth * 1.2;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var tmp$_4 = FLOAT$result_0;
    var value_1 = this.game.gameConfigure.tileHeight * 1.2;
    var FLOAT$result_1;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_1 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_1 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_1 = toDouble(value_1);
          FLOAT$result_1 = number_1;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_1 = 0.0;
    }
     while (false);
    var sprite = Sprite_init(tmp$_1, tmp$_2, tmp$_3, image, tmp$_4, FLOAT$result_1);
    sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.game.view.addChild_g5h3xp$(sprite);
    (tmp$_0 = this.game.view.screen) != null ? (tmp$_0.actionFadeOut_7vo5wp$(sprite, void 0, 0.5, 0.5, void 0, void 0, void 0, ObstacleEntity$explodeEffect$lambda_0(sprite)), Unit) : null;
    var xMotion = Wave_init(6.0, void 0, void 0, -3.0);
    xMotion.SetAmplitude_mx4ult$(8.0);
    sprite.SetXMotion_vn0wwp$(xMotion, true);
    var yMotion = new Motion(void 0, void 0, 0.0);
    yMotion.SetTarget_nfvrp9$(-2.5 * this.game.gameConfigure.tileHeight, 30.0, 1.5, void 0, 0.0);
    sprite.SetYMotion_vn0wwp$(yMotion, true);
  };
  ObstacleEntity.prototype.isPair_za3lpa$ = function (value) {
    if (this.value % 1000 === value) {
      return true;
    }
    return false;
  };
  ObstacleEntity.prototype.makeStone = function () {
    var tmp$, tmp$_0, tmp$_1;
    this.isStone = true;
    (tmp$ = this.sprite) != null ? (tmp$.xMotion = null) : null;
    (tmp$_0 = this.game.view.screen) != null ? (tmp$_0.removeAction_81ngrp$('blink', void 0, this.sprite), Unit) : null;
    var tmp$_2 = ensureNotNull(this.sprite).GetSize().width * 0.5;
    var tmp$_3 = ensureNotNull(this.sprite).GetSize().height * 0.5;
    var tmp$_4 = void 0;
    var value = this.game.gameConfigure.tileWidth;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_5 = FLOAT$result;
    var value_0 = this.game.gameConfigure.tileHeight;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var mask = Sprite_init(tmp$_2, tmp$_3, tmp$_4, 'InactiveMaskForGhost', tmp$_5, FLOAT$result_0);
    mask.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    mask.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    ensureNotNull(this.sprite).addChild_g5h3xp$(mask);
    mask.SetAlpha_8ca0d4$(0.0);
    (tmp$_1 = this.game.view.screen) != null ? (tmp$_1.actionFadeIn_hkbjms$(mask, 0.0, 1.0, void 0, 0.5, void 0, void 0, this.sprite), Unit) : null;
  };
  ObstacleEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ObstacleEntity',
    interfaces: [TileEntity]
  };
  function ObstacleEntity_init(game, value, screenX, screenY, $this) {
    $this = $this || Object.create(ObstacleEntity.prototype);
    TileEntity_init(game, value, screenX, screenY, $this);
    ObstacleEntity.call($this);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var info = Kotlin.isType(tmp$ = game.gameValue.blockInfo, BlockItem) ? tmp$ : throwCCE();
    var image = 'Ghost_' + info.colorMap.get_za3lpa$(value % 1000);
    var tmp$_3 = $this.GetBoardX();
    var tmp$_4 = $this.GetBoardY();
    var tmp$_5 = $this.spriteZ;
    var value_0 = game.gameConfigure.tileWidth * 0.7;
    var FLOAT$result;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number = toDouble(value_0);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_6 = FLOAT$result;
    var value_1 = game.gameConfigure.tileHeight * 0.7;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_0 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_0 = toDouble(value_1);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    $this.sprite = Sprite_init(tmp$_3, tmp$_4, tmp$_5, image, tmp$_6, FLOAT$result_0);
    (tmp$_0 = $this.sprite) != null ? (tmp$_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_1 = $this.sprite) != null ? (tmp$_1.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance()), Unit) : null;
    game.view.GetMask().addChild_g5h3xp$(ensureNotNull($this.sprite));
    if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 0) >= 2) {
      (tmp$_2 = game.view.screen) != null ? (tmp$_2.actionFadeLoop_xukj3e$('blink', 0.6, 0.6, 1.0, $this.sprite, ObstacleEntity_init$lambda($this)), Unit) : null;
    }
    return $this;
  }
  function ObstacleEntity_init$lambda(this$ObstacleEntity) {
    return function (value, quit) {
      var tmp$, tmp$_0;
      if (quit === true) {
        (tmp$ = this$ObstacleEntity.sprite) != null ? (tmp$.SetAlpha_8ca0d4$(1.0), Unit) : null;
      }
       else {
        (tmp$_0 = this$ObstacleEntity.sprite) != null ? (tmp$_0.SetAlpha_8ca0d4$(value), Unit) : null;
      }
      return true;
    };
  }
  function TileEntity() {
    this.attribute = TileEntity$Attribute$normal_getInstance();
    this.animationState = new GameState();
    this.bouncing = false;
    this.needCheck = false;
    this.needCheckReason = -1;
    this.isDropping = false;
    this.isTransforming = false;
    this.goingToRemove = false;
    this.goingToRollback = false;
    this.sprite = null;
    this.spriteZ = 7.0;
    this.score = 0;
  }
  function TileEntity$Attribute(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function TileEntity$Attribute_initFields() {
    TileEntity$Attribute_initFields = function () {
    };
    TileEntity$Attribute$normal_instance = new TileEntity$Attribute('normal', 0);
    TileEntity$Attribute$disabled_instance = new TileEntity$Attribute('disabled', 1);
    TileEntity$Attribute$hint_instance = new TileEntity$Attribute('hint', 2);
    TileEntity$Attribute$clear_instance = new TileEntity$Attribute('clear', 3);
  }
  var TileEntity$Attribute$normal_instance;
  function TileEntity$Attribute$normal_getInstance() {
    TileEntity$Attribute_initFields();
    return TileEntity$Attribute$normal_instance;
  }
  var TileEntity$Attribute$disabled_instance;
  function TileEntity$Attribute$disabled_getInstance() {
    TileEntity$Attribute_initFields();
    return TileEntity$Attribute$disabled_instance;
  }
  var TileEntity$Attribute$hint_instance;
  function TileEntity$Attribute$hint_getInstance() {
    TileEntity$Attribute_initFields();
    return TileEntity$Attribute$hint_instance;
  }
  var TileEntity$Attribute$clear_instance;
  function TileEntity$Attribute$clear_getInstance() {
    TileEntity$Attribute_initFields();
    return TileEntity$Attribute$clear_instance;
  }
  TileEntity$Attribute.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Attribute',
    interfaces: [Enum]
  };
  function TileEntity$Attribute$values() {
    return [TileEntity$Attribute$normal_getInstance(), TileEntity$Attribute$disabled_getInstance(), TileEntity$Attribute$hint_getInstance(), TileEntity$Attribute$clear_getInstance()];
  }
  TileEntity$Attribute.values = TileEntity$Attribute$values;
  function TileEntity$Attribute$valueOf(name) {
    switch (name) {
      case 'normal':
        return TileEntity$Attribute$normal_getInstance();
      case 'disabled':
        return TileEntity$Attribute$disabled_getInstance();
      case 'hint':
        return TileEntity$Attribute$hint_getInstance();
      case 'clear':
        return TileEntity$Attribute$clear_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.logic.entity.TileEntity.Attribute.' + name);
    }
  }
  TileEntity$Attribute.valueOf_61zpoe$ = TileEntity$Attribute$valueOf;
  TileEntity.prototype.remove = function () {
    GameEntity.prototype.remove.call(this);
    if (this.sprite != null) {
      ensureNotNull(this.sprite).removeFromParent();
      this.sprite = null;
    }
  };
  TileEntity.prototype.GetAttribute = function () {
    return this.attribute;
  };
  TileEntity.prototype.SetAttribute_c9f3gi$ = function (attr) {
  };
  TileEntity.prototype.fall_6taknv$ = function (doShake) {
    if (doShake === true) {
      this.shake_7b5o5w$(5.0, 0.0, 0.0, this.game.gameConfigure.shakeDuration);
    }
  };
  function TileEntity$onLanding$lambda(closure$motion, this$TileEntity, closure$origin) {
    return function (info) {
      closure$motion.update_mx4ult$(info.elapsed);
      var posY = closure$motion.GetPosition();
      if (posY >= 0) {
        this$TileEntity.needCheck = true;
        this$TileEntity.needCheckReason = 1;
        this$TileEntity.bouncing = false;
        return false;
      }
      ensureNotNull(this$TileEntity.sprite).SetPosition_dleff0$(closure$origin.x, closure$origin.y + posY);
      return true;
    };
  }
  TileEntity.prototype.onLanding_vux9f0$ = function (x, y) {
    GameEntity.prototype.onLanding_vux9f0$.call(this, x, y);
    if (this.game.gameConfigure.bounceOnLanding === true) {
      if (this.sprite != null) {
        this.bouncing = true;
        var FLOAT$result;
        FLOAT$break: do {
          if (y == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(y)) {
            FLOAT$result = numberToDouble(y);
            break FLOAT$break;
          }
          if (typeof y === 'string') {
            try {
              var number = toDouble(y);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        this.spriteZ = 7 + FLOAT$result * 0.1;
        var origin = Position_init(this.GetBoardX(), this.GetBoardY());
        var motion = new Motion();
        motion.SetTarget_nfvrp9$(-5.0, 5.0, 0.15);
        var value = this.game.gameConfigure.tileHeight;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result_0 = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number_0 = toDouble(value);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        motion.SetScale_mx4ult$(FLOAT$result_0 / 50.0);
        ensureNotNull(this.sprite).addUpdateCallback_sds54w$('BlockEntity Landing', void 0, void 0, void 0, void 0, void 0, TileEntity$onLanding$lambda(motion, this, origin));
      }
    }
     else {
      this.needCheck = true;
      this.needCheckReason = 1;
      this.bouncing = false;
    }
  };
  function TileEntity$shake$lambda(closure$duration, closure$motion, this$TileEntity) {
    return function (info) {
      if (info.age > closure$duration) {
        return false;
      }
      var pos = closure$motion.update_mx4ult$(info.elapsed);
      var sp = ensureNotNull(this$TileEntity.sprite);
      sp.SetPosition_dleff0$(sp.GetPosition().x + pos, sp.GetPosition().y);
      return true;
    };
  }
  TileEntity.prototype.shake_7b5o5w$$default = function (speed, accel, ampAccel, duration) {
    var motion = Wave_init(speed, accel, void 0, ampAccel);
    motion.SetScale_mx4ult$(this.game.view.sizeScale.xRatio * 2);
    ensureNotNull(this.sprite).addUpdateCallback_sds54w$('shake', false, void 0, void 0, void 0, void 0, TileEntity$shake$lambda(duration, motion, this));
  };
  TileEntity.prototype.shake_7b5o5w$ = function (speed, accel, ampAccel, duration, callback$default) {
    if (speed === void 0)
      speed = 10.0;
    if (accel === void 0)
      accel = 0.0;
    if (ampAccel === void 0)
      ampAccel = 0.0;
    if (duration === void 0)
      duration = 0.5;
    callback$default ? callback$default(speed, accel, ampAccel, duration) : this.shake_7b5o5w$$default(speed, accel, ampAccel, duration);
  };
  function TileEntity$bounce$lambda(closure$motion, this$TileEntity, closure$origin) {
    return function (info) {
      if (closure$motion.GetBounceCount() > 4) {
        return false;
      }
      var pos = closure$motion.update_mx4ult$(info.elapsed);
      if (closure$motion.GetBounceCount() > 0) {
        var sp = ensureNotNull(this$TileEntity.sprite);
        sp.SetPosition_dleff0$(closure$origin.x, closure$origin.y + pos);
      }
      return true;
    };
  }
  TileEntity.prototype.bounce = function () {
    ensureNotNull(this.sprite).SetZPosition_8ca0d4$(this.spriteZ);
    var origin = Position_init(ensureNotNull(this.sprite).GetPosition().x, ensureNotNull(this.sprite).GetPosition().y);
    var value = this.game.gameConfigure.tileHeight;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var motion = Bounce_init(0.0, 10.0, -1 * FLOAT$result * 0.6, 0.0, 0.7);
    motion.SetTimeMultiplier_mx4ult$(15.0);
    ensureNotNull(this.sprite).addUpdateCallback_sds54w$('BlockEntity Bounce', false, void 0, void 0, void 0, void 0, TileEntity$bounce$lambda(motion, this, origin));
  };
  TileEntity.prototype.removeBounce = function () {
    ensureNotNull(this.sprite).removeUpdateCallback_9sobi5$('BlockEntity Bounce');
  };
  function TileEntity$explode$lambda$lambda(this$TileEntity) {
    return function () {
      this$TileEntity.remove();
      return Unit;
    };
  }
  function TileEntity$explode$lambda(closure$effect, this$TileEntity, closure$count, closure$delay2) {
    return function (value, complete) {
      var tmp$;
      closure$effect.SetAlpha_8ca0d4$(value);
      if (complete === true) {
        ensureNotNull(this$TileEntity.sprite).SetAlpha_8ca0d4$(0.0);
        this$TileEntity.explodeEffect_24o109$(closure$count, 0.0);
        (tmp$ = this$TileEntity.game.view.screen) != null ? (tmp$.actionDelay_ab0iom$(closure$delay2, void 0, TileEntity$explode$lambda$lambda(this$TileEntity)), Unit) : null;
        this$TileEntity.animationState.SetNextState_9sobi5$('remove');
      }
    };
  }
  TileEntity.prototype.explode_nhq4am$$default = function (count, delay, delay2) {
    var tmp$;
    var effect = Sprite_init(0.0, 0.0, void 0, ensureNotNull(this.sprite).GetImage(), ensureNotNull(this.sprite).GetSize().width, ensureNotNull(this.sprite).GetSize().height);
    effect.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
    effect.SetBlendFactor_mx4ult$(1.0);
    effect.SetAlpha_8ca0d4$(0.0);
    ensureNotNull(this.sprite).addChild_g5h3xp$(effect);
    (tmp$ = this.game.view.screen) != null ? (tmp$.actionFade_ntk7i0$(delay + this.game.gameConfigure.removeFireDelay, 0.0, 1.0, null, TileEntity$explode$lambda(effect, this, count, delay2)), Unit) : null;
  };
  TileEntity.prototype.explode_nhq4am$ = function (count, delay, delay2, callback$default) {
    if (count === void 0)
      count = 3;
    if (delay === void 0)
      delay = 0.0;
    if (delay2 === void 0)
      delay2 = 0.0;
    callback$default ? callback$default(count, delay, delay2) : this.explode_nhq4am$$default(count, delay, delay2);
  };
  TileEntity.prototype.explodeEffect_24o109$ = function (count, delay) {
    this._createExplosion_vl24u5$(count, 6, 'Resource/UI/Particle', this.game.gameConfigure.tileWidth * 8);
  };
  TileEntity.prototype.createExplosion_za3lpa$ = function (count) {
    var tmp$;
    if (this.game.quality < 1) {
      return;
    }
    var image = '';
    if (count <= 3) {
      image = 'Resource/UI/Particle';
    }
     else {
      var info = Kotlin.isType(tmp$ = this.game.gameValue.blockInfo, BlockItem) ? tmp$ : throwCCE();
      image = 'Particle_' + info.colorMap.get_za3lpa$(this.value);
    }
    var size = this.game.gameConfigure.tileWidth * 4;
    if (this.game.gameConfigure.width > 3) {
      size *= 2;
    }
    var tmp$_0 = size;
    var value = count - 3 | 0;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    size = tmp$_0 + FLOAT$result * this.game.gameConfigure.tileWidth;
    if (size > this.game.gameConfigure.tileWidth * 8) {
      size = this.game.gameConfigure.tileWidth * 8;
    }
    this._createExplosion_vl24u5$(count, 6, image, size);
  };
  TileEntity.prototype._createExplosion_vl24u5$ = function (count, num, image, size) {
    if (this.game.quality < 1) {
      return;
    }
    var x = this.GetRealScreenX();
    var y = this.GetRealScreenY();
    var num_0 = num;
    var color = Color$Companion_getInstance().white_mx4ult$();
    if (this.game.quality < 2) {
      num_0 = num_0 / 2 | 0;
    }
    var mStart = Position_init(this.game.gameConfigure.tileWidth / 4, this.game.gameConfigure.tileWidth / 4, -20.0);
    var mEnd = Position_init(this.game.gameConfigure.tileWidth / 2, this.game.gameConfigure.tileWidth / 2, 500.0);
    var pos = Position_init(x, y, -50.0);
    if (count >= Kotlin.imul(this.game.gameConfigure.width, this.game.gameConfigure.height)) {
      pos = Position_init(x, y, 0.0);
      mStart = Position_init(this.game.gameConfigure.tileWidth / 4, this.game.gameConfigure.tileWidth / 4, -30.0);
      mEnd = Position_init(this.game.gameConfigure.tileWidth / 2, this.game.gameConfigure.tileWidth / 2, -50.0);
    }
    var r = this.game.gameConfigure.tileWidth / 2 * 0.8;
    var tmp$ = this.game.particleManager;
    var tmp$_0 = pos;
    var tmp$_1 = num_0;
    var value = Random_getInstance().arc4random_uniform_za3lpa$(5);
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_2 = 1.0 + FLOAT$result / 10.0;
    var tmp$_3 = mStart;
    var tmp$_4 = mEnd;
    var value_0 = SceneLayer$parent_getInstance().value;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    tmp$.createExplosion_3jyyep$(tmp$_0, r, tmp$_1, size, tmp$_2, image, color, tmp$_3, tmp$_4, true, FLOAT$result_0);
  };
  TileEntity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TileEntity',
    interfaces: [GameEntity]
  };
  function TileEntity_init(game, value, screenX, screenY, $this) {
    $this = $this || Object.create(TileEntity.prototype);
    GameEntity_init(game, value, screenX, screenY, $this);
    TileEntity.call($this);
    return $this;
  }
  function AndroidPlayerAchievement() {
    this.user = null;
    this.achievementList = LinkedHashMap_init();
    this.achievementIdentifierList = listOf_0([DataKey$BEGINNER_COMBOS_5_getInstance(), DataKey$BEGINNER_COMBOS_10_getInstance(), DataKey$BEGINNER_COMBOS_20_getInstance(), DataKey$BEGINNER_COMBOS_50_getInstance(), DataKey$BEGINNER_COMBOS_100_getInstance(), DataKey$BEGINNER_COMBOS_150_getInstance(), DataKey$BEGINNER_FEVER_1_getInstance(), DataKey$BEGINNER_FEVER_3_getInstance(), DataKey$BEGINNER_FEVER_5_getInstance(), DataKey$BEGINNER_FEVER_10_getInstance(), DataKey$BEGINNER_50K_getInstance(), DataKey$BEGINNER_100K_getInstance(), DataKey$BEGINNER_200K_getInstance(), DataKey$BEGINNER_1M_getInstance(), DataKey$BEGINNER_2M_getInstance(), DataKey$BEGINNER_3M_getInstance(), DataKey$BEGINNER_CLEAR_9_getInstance(), DataKey$CLASSIC_COMBOS_10_getInstance(), DataKey$CLASSIC_COMBOS_30_getInstance(), DataKey$CLASSIC_FEVER_1_getInstance(), DataKey$CLASSIC_FEVER_5_getInstance(), DataKey$CLASSIC_100K_getInstance(), DataKey$CLASSIC_300K_getInstance(), DataKey$CLASSIC_1500K_getInstance(), DataKey$CLASSIC_CLEAR_9_getInstance(), DataKey$TIMELESS_MODE_OPEN_getInstance(), DataKey$TIMELESS_COMBOS_50_getInstance(), DataKey$TIMELESS_COMBOS_80_getInstance(), DataKey$TIMELESS_COMBOS_100_getInstance(), DataKey$TIMELESS_FEVER_10_getInstance(), DataKey$TIMELESS_1M_getInstance(), DataKey$TIMELESS_2M_getInstance(), DataKey$HARDCORE_MODE_OPEN_getInstance(), DataKey$HARDCORE_COMBOS_60_getInstance(), DataKey$HARDCORE_FEVER_10_getInstance(), DataKey$HARDCORE_1M_getInstance(), DataKey$GHOST_50_getInstance(), DataKey$GHOST_100_getInstance(), DataKey$GHOST_150_getInstance(), DataKey$GHOST_200_getInstance(), DataKey$BEGINNER6x6_COMBOS_30_getInstance(), DataKey$BEGINNER6x6_COMBOS_50_getInstance(), DataKey$BEGINNER6x6_COMBOS_100_getInstance(), DataKey$BEGINNER6x6_500K_getInstance(), DataKey$BEGINNER6x6_1M_getInstance(), DataKey$CLASSIC6x6_MODE_OPEN_getInstance(), DataKey$CLASSIC6x6_COMBOS_50_getInstance(), DataKey$CLASSIC6x6_1M_getInstance(), DataKey$TIMELESS6x6_MODE_OPEN_getInstance(), DataKey$TIMELESS6x6_COMBOS_100_getInstance(), DataKey$TIMELESS6x6_2M_getInstance()]);
  }
  AndroidPlayerAchievement.prototype.GetList = function () {
    return this.achievementList;
  };
  AndroidPlayerAchievement.prototype.AddAchievement_ze4fts$$default = function (identifier, percentComplete) {
    this.AddAchievementString_io5o9c$(identifier.value, percentComplete);
  };
  AndroidPlayerAchievement.prototype.AddAchievementString_io5o9c$$default = function (identifier, percentComplete) {
    var $receiver = this.achievementList;
    var value = Achievement_init(identifier, percentComplete);
    $receiver.put_xwzc9p$(identifier, value);
  };
  AndroidPlayerAchievement.prototype.UpdateAchievement_ze4fts$ = function (identifier, percentComplete) {
    this.UpdateAchievementString_io5o9c$(identifier.value, percentComplete);
  };
  AndroidPlayerAchievement.prototype.UpdateAchievementString_io5o9c$ = function (identifier, percentComplete) {
    var achievement = this.GetAchievementString_61zpoe$(identifier);
    if (achievement != null) {
      achievement.percentComplete = percentComplete;
      this.SaveAchievementString_61zpoe$(identifier);
    }
  };
  AndroidPlayerAchievement.prototype.GetAchievement_chhr4e$ = function (identifier) {
    return this.GetAchievementString_61zpoe$(identifier.value);
  };
  AndroidPlayerAchievement.prototype.GetAchievementString_61zpoe$ = function (identifier) {
    return this.achievementList.get_11rb$(identifier);
  };
  AndroidPlayerAchievement.prototype.LoadAchievement = function () {
    var tmp$;
    tmp$ = this.achievementIdentifierList.iterator();
    while (tmp$.hasNext()) {
      var identifier = tmp$.next();
      var data = DataUtil$Companion_getInstance().GetDouble_yzmc4y$(identifier);
      this.AddAchievement_ze4fts$(identifier, data);
    }
  };
  AndroidPlayerAchievement.prototype.SaveAchievement_chhr4e$ = function (identifier) {
    this.SaveAchievementString_61zpoe$(identifier.value);
  };
  AndroidPlayerAchievement.prototype.SaveAchievementString_61zpoe$ = function (identifier) {
    var achievement = this.GetAchievementString_61zpoe$(identifier);
    if (achievement != null) {
      DataUtil$Companion_getInstance().SetDouble_do2bxa$(identifier, void 0, achievement.percentComplete);
    }
  };
  AndroidPlayerAchievement.prototype.SetPercentComplete_gspc9z$$default = function (identifier, percentComplete, moreThanOnce) {
    this.SetPercentCompleteString_1truf$(identifier.value, percentComplete, moreThanOnce);
  };
  AndroidPlayerAchievement.prototype.SetPercentCompleteString_1truf$$default = function (identifier, percentComplete, moreThanOnce) {
    var achievement = this.GetAchievementString_61zpoe$(identifier);
    if (achievement != null) {
      if (achievement.percentComplete < percentComplete || moreThanOnce === true) {
        AppController$Companion_getInstance().shared().printLog_7z05hs$(identifier + ' set ' + percentComplete.toString());
        achievement.percentComplete = percentComplete;
        this.SaveAchievementString_61zpoe$(identifier);
      }
    }
     else {
      AppController$Companion_getInstance().shared().printLog_7z05hs$(identifier + ' NOT LOADED');
    }
  };
  AndroidPlayerAchievement.prototype.GetPercentComplete_chhr4e$ = function (identifier) {
    return this.GetPercentCompleteString_61zpoe$(identifier.value);
  };
  AndroidPlayerAchievement.prototype.GetPercentCompleteString_61zpoe$ = function (identifier) {
    var achievement = this.GetAchievementString_61zpoe$(identifier);
    if (achievement != null) {
      return achievement.percentComplete;
    }
    return 0.0;
  };
  AndroidPlayerAchievement.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AndroidPlayerAchievement',
    interfaces: [PlayerAchievement]
  };
  function AndroidPlayerAchievement_init(user, $this) {
    $this = $this || Object.create(AndroidPlayerAchievement.prototype);
    AndroidPlayerAchievement.call($this);
    var tmp$;
    $this.user = user;
    tmp$ = $this.achievementIdentifierList.iterator();
    while (tmp$.hasNext()) {
      var identifier = tmp$.next();
      $this.AddAchievement_ze4fts$(identifier);
    }
    return $this;
  }
  function AndroidPlayerRecord() {
    this.mode = null;
    this.user = null;
    this.highScore = 0;
    this.maxCombo = 0;
    this.maxFever = 0;
    this.minInterval = 0.5;
    this.maxSPS = 0;
  }
  AndroidPlayerRecord.prototype.GetMode = function () {
    return this.mode;
  };
  AndroidPlayerRecord.prototype.SetHighScore_za3lpa$ = function (highScore) {
    this.highScore = highScore;
  };
  AndroidPlayerRecord.prototype.GetHighScore = function () {
    return this.highScore;
  };
  AndroidPlayerRecord.prototype.SaveHighScore_3uxocb$$default = function (callback) {
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$HIGH_SCORE_getInstance(), this.mode, this.GetHighScore());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.LoadHighScore_3uxocb$$default = function (callback) {
    var data = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$HIGH_SCORE_getInstance(), this.mode, 0);
    this.SetHighScore_za3lpa$(data);
    AppController$Companion_getInstance().shared().printLog_7z05hs$(this.mode + ' ' + DataKey$HIGH_SCORE_getInstance().value + ' ' + data.toString());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.SetMaxCombo_za3lpa$ = function (maxCombo) {
    this.maxCombo = maxCombo;
  };
  AndroidPlayerRecord.prototype.GetMaxCombo = function () {
    return this.maxCombo;
  };
  AndroidPlayerRecord.prototype.SaveMaxCombo_3uxocb$$default = function (callback) {
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$MAX_COMBO_getInstance(), this.mode, this.GetMaxCombo());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.LoadMaxCombo_3uxocb$$default = function (callback) {
    var data = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$MAX_COMBO_getInstance(), this.mode, 0);
    this.SetMaxCombo_za3lpa$(data);
    AppController$Companion_getInstance().shared().printLog_7z05hs$(this.mode + ' ' + DataKey$MAX_COMBO_getInstance().value + ' ' + data.toString());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.SetMaxFever_za3lpa$ = function (maxFever) {
    this.maxFever = maxFever;
  };
  AndroidPlayerRecord.prototype.GetMaxFever = function () {
    return this.maxFever;
  };
  AndroidPlayerRecord.prototype.SaveMaxFever_3uxocb$$default = function (callback) {
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$MAX_FEVER_getInstance(), this.mode, this.GetMaxFever());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.LoadMaxFever_3uxocb$$default = function (callback) {
    var data = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$MAX_FEVER_getInstance(), this.mode, 0);
    this.SetMaxFever_za3lpa$(data);
    AppController$Companion_getInstance().shared().printLog_7z05hs$(this.mode + ' ' + DataKey$MAX_FEVER_getInstance().value + ' ' + data.toString());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.SetMinInterval_mx4ult$ = function (interval) {
    this.minInterval = interval;
  };
  AndroidPlayerRecord.prototype.GetMinInterval = function () {
    return this.minInterval;
  };
  AndroidPlayerRecord.prototype.SaveMinInterval_3uxocb$$default = function (callback) {
    DataUtil$Companion_getInstance().SetFloat_x7mx2d$(DataKey$MIN_INTERVAL_getInstance(), this.mode, this.GetMinInterval());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.LoadMinInterval_3uxocb$$default = function (callback) {
    var data = DataUtil$Companion_getInstance().GetFloat_x7mx2d$(DataKey$MIN_INTERVAL_getInstance(), this.mode, 0.4);
    this.SetMinInterval_mx4ult$(data);
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.SetMaxSPS_za3lpa$ = function (maxSPS) {
    this.maxSPS = maxSPS;
  };
  AndroidPlayerRecord.prototype.GetMaxSPS = function () {
    return this.maxSPS;
  };
  AndroidPlayerRecord.prototype.SaveMaxSPS_3uxocb$$default = function (callback) {
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$MAX_SPS_getInstance(), this.mode, this.GetMaxSPS());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.prototype.LoadMaxSPS_3uxocb$$default = function (callback) {
    var data = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$MAX_SPS_getInstance(), this.mode, 0);
    this.SetMaxSPS_za3lpa$(data);
    AppController$Companion_getInstance().shared().printLog_7z05hs$(this.mode + ' ' + DataKey$MAX_SPS_getInstance().value + ' ' + data.toString());
    callback != null ? callback(true) : null;
  };
  AndroidPlayerRecord.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AndroidPlayerRecord',
    interfaces: [PlayerRecord]
  };
  function AndroidPlayerRecord_init(mode, user, $this) {
    if (user === void 0)
      user = 'local';
    $this = $this || Object.create(AndroidPlayerRecord.prototype);
    AndroidPlayerRecord.call($this);
    $this.mode = mode;
    $this.user = user;
    return $this;
  }
  function DataKey(name, ordinal, value) {
    Enum.call(this);
    this.value = value;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function DataKey_initFields() {
    DataKey_initFields = function () {
    };
    DataKey$HIGH_SCORE_instance = new DataKey('HIGH_SCORE', 0, 'HighScore');
    DataKey$MAX_COMBO_instance = new DataKey('MAX_COMBO', 1, 'MaxCombo');
    DataKey$MAX_FEVER_instance = new DataKey('MAX_FEVER', 2, 'MaxFever');
    DataKey$MIN_INTERVAL_instance = new DataKey('MIN_INTERVAL', 3, 'MinInterval');
    DataKey$MAX_SPS_instance = new DataKey('MAX_SPS', 4, 'MaxSPS');
    DataKey$PLAY_COUNT_instance = new DataKey('PLAY_COUNT', 5, 'PlayCount');
    DataKey$GHOST_REMOVAL_instance = new DataKey('GHOST_REMOVAL', 6, 'GhostRemoval');
    DataKey$SOUND_ON_instance = new DataKey('SOUND_ON', 7, 'Sound ON');
    DataKey$MASTER_VOLUME_instance = new DataKey('MASTER_VOLUME', 8, 'Master Volume');
    DataKey$BGM_VOLUME_instance = new DataKey('BGM_VOLUME', 9, 'BGM Volume');
    DataKey$EFFECT_VOLUME_instance = new DataKey('EFFECT_VOLUME', 10, 'Effect Volume');
    DataKey$LAST_PLAYED_MODE_instance = new DataKey('LAST_PLAYED_MODE', 11, 'Last Played Mode');
    DataKey$STAR_LAST_CHARGED_TIME_instance = new DataKey('STAR_LAST_CHARGED_TIME', 12, 'Star Last Charged Time');
    DataKey$STAR_CHARGE_START_instance = new DataKey('STAR_CHARGE_START', 13, 'Star Charge Start');
    DataKey$CURRENT_BLOCK_SET_instance = new DataKey('CURRENT_BLOCK_SET', 14, 'Current Block Set');
    DataKey$CURRENT_BOARD_TYPE_instance = new DataKey('CURRENT_BOARD_TYPE', 15, 'Current Board Type');
    DataKey$BATTERY_USAGE_MODE_instance = new DataKey('BATTERY_USAGE_MODE', 16, 'Battery Usage Mode');
    DataKey$CURRENT_LOCALE_instance = new DataKey('CURRENT_LOCALE', 17, 'Current Locale');
    DataKey$COLOR_MODE_instance = new DataKey('COLOR_MODE', 18, 'Color Mode');
    DataKey$TUTORIAL_COMPLETE_instance = new DataKey('TUTORIAL_COMPLETE', 19, 'Tutorial Complete');
    DataKey$TUTORIAL_3_3_COMPLETE_instance = new DataKey('TUTORIAL_3_3_COMPLETE', 20, 'Tutorial 3x3 Complete');
    DataKey$TUTORIAL_6_6_COMPLETE_instance = new DataKey('TUTORIAL_6_6_COMPLETE', 21, 'Tutorial 6x6 Complete');
    DataKey$BEGINNER_COMBOS_5_instance = new DataKey('BEGINNER_COMBOS_5', 22, 'Samsara_Beginner_Combos_5');
    DataKey$BEGINNER_COMBOS_10_instance = new DataKey('BEGINNER_COMBOS_10', 23, 'Samsara_Beginner_Combos_10');
    DataKey$BEGINNER_COMBOS_20_instance = new DataKey('BEGINNER_COMBOS_20', 24, 'Samsara_Beginner_Combos_20');
    DataKey$BEGINNER_COMBOS_50_instance = new DataKey('BEGINNER_COMBOS_50', 25, 'Samsara_Beginner_Combos_50');
    DataKey$BEGINNER_COMBOS_100_instance = new DataKey('BEGINNER_COMBOS_100', 26, 'Samsara_Beginner_Combos_100');
    DataKey$BEGINNER_COMBOS_150_instance = new DataKey('BEGINNER_COMBOS_150', 27, 'Samsara_Beginner_Combos_150');
    DataKey$BEGINNER_50K_instance = new DataKey('BEGINNER_50K', 28, 'Samsara_Beginner_50K');
    DataKey$BEGINNER_100K_instance = new DataKey('BEGINNER_100K', 29, 'Samsara_Beginner_100K');
    DataKey$BEGINNER_200K_instance = new DataKey('BEGINNER_200K', 30, 'Samsara_Beginner_200K');
    DataKey$BEGINNER_1M_instance = new DataKey('BEGINNER_1M', 31, 'Samsara_Beginner_1M');
    DataKey$BEGINNER_2M_instance = new DataKey('BEGINNER_2M', 32, 'Samsara_Beginner_2M');
    DataKey$BEGINNER_3M_instance = new DataKey('BEGINNER_3M', 33, 'Samsara_Beginner_3M');
    DataKey$BEGINNER_FEVER_1_instance = new DataKey('BEGINNER_FEVER_1', 34, 'Samsara_Beginner_Fever_1');
    DataKey$BEGINNER_FEVER_3_instance = new DataKey('BEGINNER_FEVER_3', 35, 'Samsara_Beginner_Fever_3');
    DataKey$BEGINNER_FEVER_5_instance = new DataKey('BEGINNER_FEVER_5', 36, 'Samsara_Beginner_Fever_5');
    DataKey$BEGINNER_FEVER_10_instance = new DataKey('BEGINNER_FEVER_10', 37, 'Samsara_Beginner_Fever_10');
    DataKey$BEGINNER_CLEAR_9_instance = new DataKey('BEGINNER_CLEAR_9', 38, 'Samsara_Beginner_Clear_9');
    DataKey$CLASSIC_COMBOS_10_instance = new DataKey('CLASSIC_COMBOS_10', 39, 'Samsara_Classic_Combos_10');
    DataKey$CLASSIC_COMBOS_30_instance = new DataKey('CLASSIC_COMBOS_30', 40, 'Samsara_Classic_Combos_30');
    DataKey$CLASSIC_FEVER_1_instance = new DataKey('CLASSIC_FEVER_1', 41, 'Samsara_Classic_Fever_1');
    DataKey$CLASSIC_FEVER_5_instance = new DataKey('CLASSIC_FEVER_5', 42, 'Samsara_Classic_Fever_5');
    DataKey$CLASSIC_100K_instance = new DataKey('CLASSIC_100K', 43, 'Samsara_Classic_100K');
    DataKey$CLASSIC_300K_instance = new DataKey('CLASSIC_300K', 44, 'Samsara_Classic_300K');
    DataKey$CLASSIC_1500K_instance = new DataKey('CLASSIC_1500K', 45, 'Samsara_Classic_1500K');
    DataKey$CLASSIC_CLEAR_9_instance = new DataKey('CLASSIC_CLEAR_9', 46, 'Samsara_Classic_Clear_9');
    DataKey$TIMELESS_MODE_OPEN_instance = new DataKey('TIMELESS_MODE_OPEN', 47, 'Samsara_Timeless_Mode_Open');
    DataKey$TIMELESS_COMBOS_50_instance = new DataKey('TIMELESS_COMBOS_50', 48, 'Samsara_Timeless_Combos_50');
    DataKey$TIMELESS_COMBOS_80_instance = new DataKey('TIMELESS_COMBOS_80', 49, 'Samsara_Timeless_Combos_80');
    DataKey$TIMELESS_COMBOS_100_instance = new DataKey('TIMELESS_COMBOS_100', 50, 'Samsara_Timeless_Combos_100');
    DataKey$TIMELESS_FEVER_10_instance = new DataKey('TIMELESS_FEVER_10', 51, 'Samsara_Timeless_Fever_10');
    DataKey$TIMELESS_1M_instance = new DataKey('TIMELESS_1M', 52, 'Samsara_Timeless_1M');
    DataKey$TIMELESS_2M_instance = new DataKey('TIMELESS_2M', 53, 'Samsara_Timeless_2M');
    DataKey$HARDCORE_MODE_OPEN_instance = new DataKey('HARDCORE_MODE_OPEN', 54, 'Samsara_Hardcore_Mode_Open');
    DataKey$HARDCORE_COMBOS_60_instance = new DataKey('HARDCORE_COMBOS_60', 55, 'Samsara_Hardcore_Combos_60');
    DataKey$HARDCORE_FEVER_10_instance = new DataKey('HARDCORE_FEVER_10', 56, 'Samsara_Hardcore_Fever_10');
    DataKey$HARDCORE_1M_instance = new DataKey('HARDCORE_1M', 57, 'Samsara_Hardcore_1M');
    DataKey$GHOST_50_instance = new DataKey('GHOST_50', 58, 'Samsara_Ghost_50');
    DataKey$GHOST_100_instance = new DataKey('GHOST_100', 59, 'Samsara_Ghost_100');
    DataKey$GHOST_150_instance = new DataKey('GHOST_150', 60, 'Samsara_Ghost_150');
    DataKey$GHOST_200_instance = new DataKey('GHOST_200', 61, 'Samsara_Ghost_200');
    DataKey$BEGINNER6x6_COMBOS_30_instance = new DataKey('BEGINNER6x6_COMBOS_30', 62, 'Samsara_Beginner6x6_Combos_30');
    DataKey$BEGINNER6x6_COMBOS_50_instance = new DataKey('BEGINNER6x6_COMBOS_50', 63, 'Samsara_Beginner6x6_Combos_50');
    DataKey$BEGINNER6x6_COMBOS_100_instance = new DataKey('BEGINNER6x6_COMBOS_100', 64, 'Samsara_Beginner6x6_Combos_100');
    DataKey$BEGINNER6x6_500K_instance = new DataKey('BEGINNER6x6_500K', 65, 'Samsara_Beginner6x6_500K');
    DataKey$BEGINNER6x6_1M_instance = new DataKey('BEGINNER6x6_1M', 66, 'Samsara_Beginner6x6_1M');
    DataKey$CLASSIC6x6_MODE_OPEN_instance = new DataKey('CLASSIC6x6_MODE_OPEN', 67, 'Samsara_Classic6x6_Mode_Open');
    DataKey$CLASSIC6x6_COMBOS_50_instance = new DataKey('CLASSIC6x6_COMBOS_50', 68, 'Samsara_Classic6x6_Combos_50');
    DataKey$CLASSIC6x6_1M_instance = new DataKey('CLASSIC6x6_1M', 69, 'Samsara_Classic6x6_1M');
    DataKey$TIMELESS6x6_MODE_OPEN_instance = new DataKey('TIMELESS6x6_MODE_OPEN', 70, 'Samsara_Timeless6x6_Mode_Open');
    DataKey$TIMELESS6x6_COMBOS_100_instance = new DataKey('TIMELESS6x6_COMBOS_100', 71, 'Samsara_Timeless6x6_Combos_100');
    DataKey$TIMELESS6x6_2M_instance = new DataKey('TIMELESS6x6_2M', 72, 'Samsara_Timeless6x6_2M');
  }
  var DataKey$HIGH_SCORE_instance;
  function DataKey$HIGH_SCORE_getInstance() {
    DataKey_initFields();
    return DataKey$HIGH_SCORE_instance;
  }
  var DataKey$MAX_COMBO_instance;
  function DataKey$MAX_COMBO_getInstance() {
    DataKey_initFields();
    return DataKey$MAX_COMBO_instance;
  }
  var DataKey$MAX_FEVER_instance;
  function DataKey$MAX_FEVER_getInstance() {
    DataKey_initFields();
    return DataKey$MAX_FEVER_instance;
  }
  var DataKey$MIN_INTERVAL_instance;
  function DataKey$MIN_INTERVAL_getInstance() {
    DataKey_initFields();
    return DataKey$MIN_INTERVAL_instance;
  }
  var DataKey$MAX_SPS_instance;
  function DataKey$MAX_SPS_getInstance() {
    DataKey_initFields();
    return DataKey$MAX_SPS_instance;
  }
  var DataKey$PLAY_COUNT_instance;
  function DataKey$PLAY_COUNT_getInstance() {
    DataKey_initFields();
    return DataKey$PLAY_COUNT_instance;
  }
  var DataKey$GHOST_REMOVAL_instance;
  function DataKey$GHOST_REMOVAL_getInstance() {
    DataKey_initFields();
    return DataKey$GHOST_REMOVAL_instance;
  }
  var DataKey$SOUND_ON_instance;
  function DataKey$SOUND_ON_getInstance() {
    DataKey_initFields();
    return DataKey$SOUND_ON_instance;
  }
  var DataKey$MASTER_VOLUME_instance;
  function DataKey$MASTER_VOLUME_getInstance() {
    DataKey_initFields();
    return DataKey$MASTER_VOLUME_instance;
  }
  var DataKey$BGM_VOLUME_instance;
  function DataKey$BGM_VOLUME_getInstance() {
    DataKey_initFields();
    return DataKey$BGM_VOLUME_instance;
  }
  var DataKey$EFFECT_VOLUME_instance;
  function DataKey$EFFECT_VOLUME_getInstance() {
    DataKey_initFields();
    return DataKey$EFFECT_VOLUME_instance;
  }
  var DataKey$LAST_PLAYED_MODE_instance;
  function DataKey$LAST_PLAYED_MODE_getInstance() {
    DataKey_initFields();
    return DataKey$LAST_PLAYED_MODE_instance;
  }
  var DataKey$STAR_LAST_CHARGED_TIME_instance;
  function DataKey$STAR_LAST_CHARGED_TIME_getInstance() {
    DataKey_initFields();
    return DataKey$STAR_LAST_CHARGED_TIME_instance;
  }
  var DataKey$STAR_CHARGE_START_instance;
  function DataKey$STAR_CHARGE_START_getInstance() {
    DataKey_initFields();
    return DataKey$STAR_CHARGE_START_instance;
  }
  var DataKey$CURRENT_BLOCK_SET_instance;
  function DataKey$CURRENT_BLOCK_SET_getInstance() {
    DataKey_initFields();
    return DataKey$CURRENT_BLOCK_SET_instance;
  }
  var DataKey$CURRENT_BOARD_TYPE_instance;
  function DataKey$CURRENT_BOARD_TYPE_getInstance() {
    DataKey_initFields();
    return DataKey$CURRENT_BOARD_TYPE_instance;
  }
  var DataKey$BATTERY_USAGE_MODE_instance;
  function DataKey$BATTERY_USAGE_MODE_getInstance() {
    DataKey_initFields();
    return DataKey$BATTERY_USAGE_MODE_instance;
  }
  var DataKey$CURRENT_LOCALE_instance;
  function DataKey$CURRENT_LOCALE_getInstance() {
    DataKey_initFields();
    return DataKey$CURRENT_LOCALE_instance;
  }
  var DataKey$COLOR_MODE_instance;
  function DataKey$COLOR_MODE_getInstance() {
    DataKey_initFields();
    return DataKey$COLOR_MODE_instance;
  }
  var DataKey$TUTORIAL_COMPLETE_instance;
  function DataKey$TUTORIAL_COMPLETE_getInstance() {
    DataKey_initFields();
    return DataKey$TUTORIAL_COMPLETE_instance;
  }
  var DataKey$TUTORIAL_3_3_COMPLETE_instance;
  function DataKey$TUTORIAL_3_3_COMPLETE_getInstance() {
    DataKey_initFields();
    return DataKey$TUTORIAL_3_3_COMPLETE_instance;
  }
  var DataKey$TUTORIAL_6_6_COMPLETE_instance;
  function DataKey$TUTORIAL_6_6_COMPLETE_getInstance() {
    DataKey_initFields();
    return DataKey$TUTORIAL_6_6_COMPLETE_instance;
  }
  var DataKey$BEGINNER_COMBOS_5_instance;
  function DataKey$BEGINNER_COMBOS_5_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_COMBOS_5_instance;
  }
  var DataKey$BEGINNER_COMBOS_10_instance;
  function DataKey$BEGINNER_COMBOS_10_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_COMBOS_10_instance;
  }
  var DataKey$BEGINNER_COMBOS_20_instance;
  function DataKey$BEGINNER_COMBOS_20_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_COMBOS_20_instance;
  }
  var DataKey$BEGINNER_COMBOS_50_instance;
  function DataKey$BEGINNER_COMBOS_50_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_COMBOS_50_instance;
  }
  var DataKey$BEGINNER_COMBOS_100_instance;
  function DataKey$BEGINNER_COMBOS_100_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_COMBOS_100_instance;
  }
  var DataKey$BEGINNER_COMBOS_150_instance;
  function DataKey$BEGINNER_COMBOS_150_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_COMBOS_150_instance;
  }
  var DataKey$BEGINNER_50K_instance;
  function DataKey$BEGINNER_50K_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_50K_instance;
  }
  var DataKey$BEGINNER_100K_instance;
  function DataKey$BEGINNER_100K_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_100K_instance;
  }
  var DataKey$BEGINNER_200K_instance;
  function DataKey$BEGINNER_200K_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_200K_instance;
  }
  var DataKey$BEGINNER_1M_instance;
  function DataKey$BEGINNER_1M_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_1M_instance;
  }
  var DataKey$BEGINNER_2M_instance;
  function DataKey$BEGINNER_2M_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_2M_instance;
  }
  var DataKey$BEGINNER_3M_instance;
  function DataKey$BEGINNER_3M_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_3M_instance;
  }
  var DataKey$BEGINNER_FEVER_1_instance;
  function DataKey$BEGINNER_FEVER_1_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_FEVER_1_instance;
  }
  var DataKey$BEGINNER_FEVER_3_instance;
  function DataKey$BEGINNER_FEVER_3_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_FEVER_3_instance;
  }
  var DataKey$BEGINNER_FEVER_5_instance;
  function DataKey$BEGINNER_FEVER_5_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_FEVER_5_instance;
  }
  var DataKey$BEGINNER_FEVER_10_instance;
  function DataKey$BEGINNER_FEVER_10_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_FEVER_10_instance;
  }
  var DataKey$BEGINNER_CLEAR_9_instance;
  function DataKey$BEGINNER_CLEAR_9_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER_CLEAR_9_instance;
  }
  var DataKey$CLASSIC_COMBOS_10_instance;
  function DataKey$CLASSIC_COMBOS_10_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_COMBOS_10_instance;
  }
  var DataKey$CLASSIC_COMBOS_30_instance;
  function DataKey$CLASSIC_COMBOS_30_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_COMBOS_30_instance;
  }
  var DataKey$CLASSIC_FEVER_1_instance;
  function DataKey$CLASSIC_FEVER_1_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_FEVER_1_instance;
  }
  var DataKey$CLASSIC_FEVER_5_instance;
  function DataKey$CLASSIC_FEVER_5_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_FEVER_5_instance;
  }
  var DataKey$CLASSIC_100K_instance;
  function DataKey$CLASSIC_100K_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_100K_instance;
  }
  var DataKey$CLASSIC_300K_instance;
  function DataKey$CLASSIC_300K_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_300K_instance;
  }
  var DataKey$CLASSIC_1500K_instance;
  function DataKey$CLASSIC_1500K_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_1500K_instance;
  }
  var DataKey$CLASSIC_CLEAR_9_instance;
  function DataKey$CLASSIC_CLEAR_9_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC_CLEAR_9_instance;
  }
  var DataKey$TIMELESS_MODE_OPEN_instance;
  function DataKey$TIMELESS_MODE_OPEN_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS_MODE_OPEN_instance;
  }
  var DataKey$TIMELESS_COMBOS_50_instance;
  function DataKey$TIMELESS_COMBOS_50_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS_COMBOS_50_instance;
  }
  var DataKey$TIMELESS_COMBOS_80_instance;
  function DataKey$TIMELESS_COMBOS_80_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS_COMBOS_80_instance;
  }
  var DataKey$TIMELESS_COMBOS_100_instance;
  function DataKey$TIMELESS_COMBOS_100_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS_COMBOS_100_instance;
  }
  var DataKey$TIMELESS_FEVER_10_instance;
  function DataKey$TIMELESS_FEVER_10_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS_FEVER_10_instance;
  }
  var DataKey$TIMELESS_1M_instance;
  function DataKey$TIMELESS_1M_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS_1M_instance;
  }
  var DataKey$TIMELESS_2M_instance;
  function DataKey$TIMELESS_2M_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS_2M_instance;
  }
  var DataKey$HARDCORE_MODE_OPEN_instance;
  function DataKey$HARDCORE_MODE_OPEN_getInstance() {
    DataKey_initFields();
    return DataKey$HARDCORE_MODE_OPEN_instance;
  }
  var DataKey$HARDCORE_COMBOS_60_instance;
  function DataKey$HARDCORE_COMBOS_60_getInstance() {
    DataKey_initFields();
    return DataKey$HARDCORE_COMBOS_60_instance;
  }
  var DataKey$HARDCORE_FEVER_10_instance;
  function DataKey$HARDCORE_FEVER_10_getInstance() {
    DataKey_initFields();
    return DataKey$HARDCORE_FEVER_10_instance;
  }
  var DataKey$HARDCORE_1M_instance;
  function DataKey$HARDCORE_1M_getInstance() {
    DataKey_initFields();
    return DataKey$HARDCORE_1M_instance;
  }
  var DataKey$GHOST_50_instance;
  function DataKey$GHOST_50_getInstance() {
    DataKey_initFields();
    return DataKey$GHOST_50_instance;
  }
  var DataKey$GHOST_100_instance;
  function DataKey$GHOST_100_getInstance() {
    DataKey_initFields();
    return DataKey$GHOST_100_instance;
  }
  var DataKey$GHOST_150_instance;
  function DataKey$GHOST_150_getInstance() {
    DataKey_initFields();
    return DataKey$GHOST_150_instance;
  }
  var DataKey$GHOST_200_instance;
  function DataKey$GHOST_200_getInstance() {
    DataKey_initFields();
    return DataKey$GHOST_200_instance;
  }
  var DataKey$BEGINNER6x6_COMBOS_30_instance;
  function DataKey$BEGINNER6x6_COMBOS_30_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER6x6_COMBOS_30_instance;
  }
  var DataKey$BEGINNER6x6_COMBOS_50_instance;
  function DataKey$BEGINNER6x6_COMBOS_50_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER6x6_COMBOS_50_instance;
  }
  var DataKey$BEGINNER6x6_COMBOS_100_instance;
  function DataKey$BEGINNER6x6_COMBOS_100_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER6x6_COMBOS_100_instance;
  }
  var DataKey$BEGINNER6x6_500K_instance;
  function DataKey$BEGINNER6x6_500K_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER6x6_500K_instance;
  }
  var DataKey$BEGINNER6x6_1M_instance;
  function DataKey$BEGINNER6x6_1M_getInstance() {
    DataKey_initFields();
    return DataKey$BEGINNER6x6_1M_instance;
  }
  var DataKey$CLASSIC6x6_MODE_OPEN_instance;
  function DataKey$CLASSIC6x6_MODE_OPEN_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC6x6_MODE_OPEN_instance;
  }
  var DataKey$CLASSIC6x6_COMBOS_50_instance;
  function DataKey$CLASSIC6x6_COMBOS_50_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC6x6_COMBOS_50_instance;
  }
  var DataKey$CLASSIC6x6_1M_instance;
  function DataKey$CLASSIC6x6_1M_getInstance() {
    DataKey_initFields();
    return DataKey$CLASSIC6x6_1M_instance;
  }
  var DataKey$TIMELESS6x6_MODE_OPEN_instance;
  function DataKey$TIMELESS6x6_MODE_OPEN_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS6x6_MODE_OPEN_instance;
  }
  var DataKey$TIMELESS6x6_COMBOS_100_instance;
  function DataKey$TIMELESS6x6_COMBOS_100_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS6x6_COMBOS_100_instance;
  }
  var DataKey$TIMELESS6x6_2M_instance;
  function DataKey$TIMELESS6x6_2M_getInstance() {
    DataKey_initFields();
    return DataKey$TIMELESS6x6_2M_instance;
  }
  DataKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DataKey',
    interfaces: [Enum]
  };
  function DataKey$values() {
    return [DataKey$HIGH_SCORE_getInstance(), DataKey$MAX_COMBO_getInstance(), DataKey$MAX_FEVER_getInstance(), DataKey$MIN_INTERVAL_getInstance(), DataKey$MAX_SPS_getInstance(), DataKey$PLAY_COUNT_getInstance(), DataKey$GHOST_REMOVAL_getInstance(), DataKey$SOUND_ON_getInstance(), DataKey$MASTER_VOLUME_getInstance(), DataKey$BGM_VOLUME_getInstance(), DataKey$EFFECT_VOLUME_getInstance(), DataKey$LAST_PLAYED_MODE_getInstance(), DataKey$STAR_LAST_CHARGED_TIME_getInstance(), DataKey$STAR_CHARGE_START_getInstance(), DataKey$CURRENT_BLOCK_SET_getInstance(), DataKey$CURRENT_BOARD_TYPE_getInstance(), DataKey$BATTERY_USAGE_MODE_getInstance(), DataKey$CURRENT_LOCALE_getInstance(), DataKey$COLOR_MODE_getInstance(), DataKey$TUTORIAL_COMPLETE_getInstance(), DataKey$TUTORIAL_3_3_COMPLETE_getInstance(), DataKey$TUTORIAL_6_6_COMPLETE_getInstance(), DataKey$BEGINNER_COMBOS_5_getInstance(), DataKey$BEGINNER_COMBOS_10_getInstance(), DataKey$BEGINNER_COMBOS_20_getInstance(), DataKey$BEGINNER_COMBOS_50_getInstance(), DataKey$BEGINNER_COMBOS_100_getInstance(), DataKey$BEGINNER_COMBOS_150_getInstance(), DataKey$BEGINNER_50K_getInstance(), DataKey$BEGINNER_100K_getInstance(), DataKey$BEGINNER_200K_getInstance(), DataKey$BEGINNER_1M_getInstance(), DataKey$BEGINNER_2M_getInstance(), DataKey$BEGINNER_3M_getInstance(), DataKey$BEGINNER_FEVER_1_getInstance(), DataKey$BEGINNER_FEVER_3_getInstance(), DataKey$BEGINNER_FEVER_5_getInstance(), DataKey$BEGINNER_FEVER_10_getInstance(), DataKey$BEGINNER_CLEAR_9_getInstance(), DataKey$CLASSIC_COMBOS_10_getInstance(), DataKey$CLASSIC_COMBOS_30_getInstance(), DataKey$CLASSIC_FEVER_1_getInstance(), DataKey$CLASSIC_FEVER_5_getInstance(), DataKey$CLASSIC_100K_getInstance(), DataKey$CLASSIC_300K_getInstance(), DataKey$CLASSIC_1500K_getInstance(), DataKey$CLASSIC_CLEAR_9_getInstance(), DataKey$TIMELESS_MODE_OPEN_getInstance(), DataKey$TIMELESS_COMBOS_50_getInstance(), DataKey$TIMELESS_COMBOS_80_getInstance(), DataKey$TIMELESS_COMBOS_100_getInstance(), DataKey$TIMELESS_FEVER_10_getInstance(), DataKey$TIMELESS_1M_getInstance(), DataKey$TIMELESS_2M_getInstance(), DataKey$HARDCORE_MODE_OPEN_getInstance(), DataKey$HARDCORE_COMBOS_60_getInstance(), DataKey$HARDCORE_FEVER_10_getInstance(), DataKey$HARDCORE_1M_getInstance(), DataKey$GHOST_50_getInstance(), DataKey$GHOST_100_getInstance(), DataKey$GHOST_150_getInstance(), DataKey$GHOST_200_getInstance(), DataKey$BEGINNER6x6_COMBOS_30_getInstance(), DataKey$BEGINNER6x6_COMBOS_50_getInstance(), DataKey$BEGINNER6x6_COMBOS_100_getInstance(), DataKey$BEGINNER6x6_500K_getInstance(), DataKey$BEGINNER6x6_1M_getInstance(), DataKey$CLASSIC6x6_MODE_OPEN_getInstance(), DataKey$CLASSIC6x6_COMBOS_50_getInstance(), DataKey$CLASSIC6x6_1M_getInstance(), DataKey$TIMELESS6x6_MODE_OPEN_getInstance(), DataKey$TIMELESS6x6_COMBOS_100_getInstance(), DataKey$TIMELESS6x6_2M_getInstance()];
  }
  DataKey.values = DataKey$values;
  function DataKey$valueOf(name) {
    switch (name) {
      case 'HIGH_SCORE':
        return DataKey$HIGH_SCORE_getInstance();
      case 'MAX_COMBO':
        return DataKey$MAX_COMBO_getInstance();
      case 'MAX_FEVER':
        return DataKey$MAX_FEVER_getInstance();
      case 'MIN_INTERVAL':
        return DataKey$MIN_INTERVAL_getInstance();
      case 'MAX_SPS':
        return DataKey$MAX_SPS_getInstance();
      case 'PLAY_COUNT':
        return DataKey$PLAY_COUNT_getInstance();
      case 'GHOST_REMOVAL':
        return DataKey$GHOST_REMOVAL_getInstance();
      case 'SOUND_ON':
        return DataKey$SOUND_ON_getInstance();
      case 'MASTER_VOLUME':
        return DataKey$MASTER_VOLUME_getInstance();
      case 'BGM_VOLUME':
        return DataKey$BGM_VOLUME_getInstance();
      case 'EFFECT_VOLUME':
        return DataKey$EFFECT_VOLUME_getInstance();
      case 'LAST_PLAYED_MODE':
        return DataKey$LAST_PLAYED_MODE_getInstance();
      case 'STAR_LAST_CHARGED_TIME':
        return DataKey$STAR_LAST_CHARGED_TIME_getInstance();
      case 'STAR_CHARGE_START':
        return DataKey$STAR_CHARGE_START_getInstance();
      case 'CURRENT_BLOCK_SET':
        return DataKey$CURRENT_BLOCK_SET_getInstance();
      case 'CURRENT_BOARD_TYPE':
        return DataKey$CURRENT_BOARD_TYPE_getInstance();
      case 'BATTERY_USAGE_MODE':
        return DataKey$BATTERY_USAGE_MODE_getInstance();
      case 'CURRENT_LOCALE':
        return DataKey$CURRENT_LOCALE_getInstance();
      case 'COLOR_MODE':
        return DataKey$COLOR_MODE_getInstance();
      case 'TUTORIAL_COMPLETE':
        return DataKey$TUTORIAL_COMPLETE_getInstance();
      case 'TUTORIAL_3_3_COMPLETE':
        return DataKey$TUTORIAL_3_3_COMPLETE_getInstance();
      case 'TUTORIAL_6_6_COMPLETE':
        return DataKey$TUTORIAL_6_6_COMPLETE_getInstance();
      case 'BEGINNER_COMBOS_5':
        return DataKey$BEGINNER_COMBOS_5_getInstance();
      case 'BEGINNER_COMBOS_10':
        return DataKey$BEGINNER_COMBOS_10_getInstance();
      case 'BEGINNER_COMBOS_20':
        return DataKey$BEGINNER_COMBOS_20_getInstance();
      case 'BEGINNER_COMBOS_50':
        return DataKey$BEGINNER_COMBOS_50_getInstance();
      case 'BEGINNER_COMBOS_100':
        return DataKey$BEGINNER_COMBOS_100_getInstance();
      case 'BEGINNER_COMBOS_150':
        return DataKey$BEGINNER_COMBOS_150_getInstance();
      case 'BEGINNER_50K':
        return DataKey$BEGINNER_50K_getInstance();
      case 'BEGINNER_100K':
        return DataKey$BEGINNER_100K_getInstance();
      case 'BEGINNER_200K':
        return DataKey$BEGINNER_200K_getInstance();
      case 'BEGINNER_1M':
        return DataKey$BEGINNER_1M_getInstance();
      case 'BEGINNER_2M':
        return DataKey$BEGINNER_2M_getInstance();
      case 'BEGINNER_3M':
        return DataKey$BEGINNER_3M_getInstance();
      case 'BEGINNER_FEVER_1':
        return DataKey$BEGINNER_FEVER_1_getInstance();
      case 'BEGINNER_FEVER_3':
        return DataKey$BEGINNER_FEVER_3_getInstance();
      case 'BEGINNER_FEVER_5':
        return DataKey$BEGINNER_FEVER_5_getInstance();
      case 'BEGINNER_FEVER_10':
        return DataKey$BEGINNER_FEVER_10_getInstance();
      case 'BEGINNER_CLEAR_9':
        return DataKey$BEGINNER_CLEAR_9_getInstance();
      case 'CLASSIC_COMBOS_10':
        return DataKey$CLASSIC_COMBOS_10_getInstance();
      case 'CLASSIC_COMBOS_30':
        return DataKey$CLASSIC_COMBOS_30_getInstance();
      case 'CLASSIC_FEVER_1':
        return DataKey$CLASSIC_FEVER_1_getInstance();
      case 'CLASSIC_FEVER_5':
        return DataKey$CLASSIC_FEVER_5_getInstance();
      case 'CLASSIC_100K':
        return DataKey$CLASSIC_100K_getInstance();
      case 'CLASSIC_300K':
        return DataKey$CLASSIC_300K_getInstance();
      case 'CLASSIC_1500K':
        return DataKey$CLASSIC_1500K_getInstance();
      case 'CLASSIC_CLEAR_9':
        return DataKey$CLASSIC_CLEAR_9_getInstance();
      case 'TIMELESS_MODE_OPEN':
        return DataKey$TIMELESS_MODE_OPEN_getInstance();
      case 'TIMELESS_COMBOS_50':
        return DataKey$TIMELESS_COMBOS_50_getInstance();
      case 'TIMELESS_COMBOS_80':
        return DataKey$TIMELESS_COMBOS_80_getInstance();
      case 'TIMELESS_COMBOS_100':
        return DataKey$TIMELESS_COMBOS_100_getInstance();
      case 'TIMELESS_FEVER_10':
        return DataKey$TIMELESS_FEVER_10_getInstance();
      case 'TIMELESS_1M':
        return DataKey$TIMELESS_1M_getInstance();
      case 'TIMELESS_2M':
        return DataKey$TIMELESS_2M_getInstance();
      case 'HARDCORE_MODE_OPEN':
        return DataKey$HARDCORE_MODE_OPEN_getInstance();
      case 'HARDCORE_COMBOS_60':
        return DataKey$HARDCORE_COMBOS_60_getInstance();
      case 'HARDCORE_FEVER_10':
        return DataKey$HARDCORE_FEVER_10_getInstance();
      case 'HARDCORE_1M':
        return DataKey$HARDCORE_1M_getInstance();
      case 'GHOST_50':
        return DataKey$GHOST_50_getInstance();
      case 'GHOST_100':
        return DataKey$GHOST_100_getInstance();
      case 'GHOST_150':
        return DataKey$GHOST_150_getInstance();
      case 'GHOST_200':
        return DataKey$GHOST_200_getInstance();
      case 'BEGINNER6x6_COMBOS_30':
        return DataKey$BEGINNER6x6_COMBOS_30_getInstance();
      case 'BEGINNER6x6_COMBOS_50':
        return DataKey$BEGINNER6x6_COMBOS_50_getInstance();
      case 'BEGINNER6x6_COMBOS_100':
        return DataKey$BEGINNER6x6_COMBOS_100_getInstance();
      case 'BEGINNER6x6_500K':
        return DataKey$BEGINNER6x6_500K_getInstance();
      case 'BEGINNER6x6_1M':
        return DataKey$BEGINNER6x6_1M_getInstance();
      case 'CLASSIC6x6_MODE_OPEN':
        return DataKey$CLASSIC6x6_MODE_OPEN_getInstance();
      case 'CLASSIC6x6_COMBOS_50':
        return DataKey$CLASSIC6x6_COMBOS_50_getInstance();
      case 'CLASSIC6x6_1M':
        return DataKey$CLASSIC6x6_1M_getInstance();
      case 'TIMELESS6x6_MODE_OPEN':
        return DataKey$TIMELESS6x6_MODE_OPEN_getInstance();
      case 'TIMELESS6x6_COMBOS_100':
        return DataKey$TIMELESS6x6_COMBOS_100_getInstance();
      case 'TIMELESS6x6_2M':
        return DataKey$TIMELESS6x6_2M_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.user.DataKey.' + name);
    }
  }
  DataKey.valueOf_61zpoe$ = DataKey$valueOf;
  function KeychainWrapper() {
    KeychainWrapper$standard_getInstance();
  }
  function KeychainWrapper$standard() {
    KeychainWrapper$standard_instance = this;
  }
  KeychainWrapper$standard.prototype.obj_61zpoe$ = function (forKey) {
    return UserDefaults$Companion_getInstance().string_61zpoe$(forKey);
  };
  KeychainWrapper$standard.prototype.Set_hwpqgh$ = function (value, forKey) {
    UserDefaults$Companion_getInstance().Set_hwpqgh$(value, forKey);
    return true;
  };
  KeychainWrapper$standard.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'standard',
    interfaces: []
  };
  var KeychainWrapper$standard_instance = null;
  function KeychainWrapper$standard_getInstance() {
    if (KeychainWrapper$standard_instance === null) {
      new KeychainWrapper$standard();
    }
    return KeychainWrapper$standard_instance;
  }
  KeychainWrapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KeychainWrapper',
    interfaces: []
  };
  function DataUtil() {
    DataUtil$Companion_getInstance();
  }
  function DataUtil$Companion() {
    DataUtil$Companion_instance = this;
  }
  DataUtil$Companion.prototype.GetInteger_hh7mhe$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0;
    return this.GetInteger_rjan26$(key.value, subKey, defaultValue);
  };
  DataUtil$Companion.prototype.GetInteger_rjan26$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0;
    var defaults = UserDefaults$Companion_getInstance();
    var data = defaults.string_61zpoe$(key + subKey);
    if (data != null && get_isEmpty(data) === false) {
      var number = toInt_0(data);
      if (number != null) {
        return number;
      }
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetInteger_hh7mhe$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    this.SetInteger_rjan26$(key.value, subKey, value);
  };
  DataUtil$Companion.prototype.SetInteger_rjan26$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    var defaults = UserDefaults$Companion_getInstance();
    var data = value.toString();
    defaults.Set_hwpqgh$(data, key + subKey);
  };
  DataUtil$Companion.prototype.GetFloat_x7mx2d$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0.0;
    return this.GetFloat_whnl05$(key.value, subKey, defaultValue);
  };
  DataUtil$Companion.prototype.GetFloat_whnl05$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var defaults = UserDefaults$Companion_getInstance();
    var data = defaults.string_61zpoe$(key + subKey);
    if (data != null && get_isEmpty(data) === false) {
      var number = toDouble(data);
      if (number != null) {
        return number;
      }
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetFloat_x7mx2d$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    this.SetFloat_whnl05$(key.value, subKey, value);
  };
  DataUtil$Companion.prototype.SetFloat_whnl05$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    var defaults = UserDefaults$Companion_getInstance();
    var data = value.toString();
    defaults.Set_hwpqgh$(data, key + subKey);
  };
  DataUtil$Companion.prototype.GetDouble_yzmc4y$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0.0;
    return this.GetDouble_do2bxa$(key.value, subKey, defaultValue);
  };
  DataUtil$Companion.prototype.GetDouble_do2bxa$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var defaults = UserDefaults$Companion_getInstance();
    var data = defaults.string_61zpoe$(key + subKey);
    if (data != null && get_isEmpty(data) === false) {
      var number = toDouble(data);
      if (number != null) {
        return number;
      }
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetDouble_yzmc4y$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    this.SetDouble_do2bxa$(key.value, subKey, value);
  };
  DataUtil$Companion.prototype.SetDouble_do2bxa$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    var defaults = UserDefaults$Companion_getInstance();
    var data = value.toString();
    defaults.Set_hwpqgh$(data, key + subKey);
  };
  DataUtil$Companion.prototype.GetString_sv46oe$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = '';
    return this.GetString_6hosri$(key.value, subKey, defaultValue);
  };
  DataUtil$Companion.prototype.GetString_6hosri$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = '';
    var defaults = UserDefaults$Companion_getInstance();
    var data = defaults.string_61zpoe$(key + subKey);
    if (data != null && get_isEmpty(data) === false) {
      return data;
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetString_sv46oe$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    this.SetString_6hosri$(key.value, subKey, value);
  };
  DataUtil$Companion.prototype.SetString_6hosri$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    var defaults = UserDefaults$Companion_getInstance();
    defaults.Set_hwpqgh$(value, key + subKey);
  };
  DataUtil$Companion.prototype.GetIntegerPermanent_pngao4$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0;
    var data = KeychainWrapper$standard_getInstance().obj_61zpoe$(key.value + subKey);
    if (data != null) {
      var INT$result;
      INT$break: do {
        if (data == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(data)) {
          INT$result = numberToInt(data);
          break INT$break;
        }
        if (typeof data === 'string') {
          try {
            var number = toInt_0(data);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      return INT$result;
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetIntegerPermanent_pngao4$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    return KeychainWrapper$standard_getInstance().Set_hwpqgh$(value, key.value + subKey);
  };
  DataUtil$Companion.prototype.GetFloatFromKeychain_3a935d$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var data = KeychainWrapper$standard_getInstance().obj_61zpoe$(key.value + subKey);
    if (data != null) {
      var FLOAT$result;
      FLOAT$break: do {
        if (data == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(data)) {
          FLOAT$result = numberToDouble(data);
          break FLOAT$break;
        }
        if (typeof data === 'string') {
          try {
            var number = toDouble(data);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      return FLOAT$result;
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetFloatPermanent_3a935d$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    return KeychainWrapper$standard_getInstance().Set_hwpqgh$(value, key.value + subKey);
  };
  DataUtil$Companion.prototype.GetDoublePermanent_twdn6k$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var data = KeychainWrapper$standard_getInstance().obj_61zpoe$(key.value + subKey);
    if (data != null) {
      var DOUBLE$result;
      DOUBLE$break: do {
        if (data == null) {
          DOUBLE$result = 0.0;
          break DOUBLE$break;
        }
        if (Kotlin.isNumber(data)) {
          DOUBLE$result = numberToDouble(data);
          break DOUBLE$break;
        }
        if (typeof data === 'string') {
          try {
            var number = toDouble(data);
            DOUBLE$result = number;
            break DOUBLE$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              DOUBLE$result = 0.0;
              break DOUBLE$break;
            }
             else
              throw e;
          }
        }
        DOUBLE$result = 0.0;
      }
       while (false);
      return DOUBLE$result;
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetDoublePermanent_twdn6k$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    return KeychainWrapper$standard_getInstance().Set_hwpqgh$(value, key.value + subKey);
  };
  DataUtil$Companion.prototype.GetStringPermanent_xycvms$ = function (key, subKey, defaultValue) {
    if (subKey === void 0)
      subKey = '';
    if (defaultValue === void 0)
      defaultValue = '';
    var data = KeychainWrapper$standard_getInstance().obj_61zpoe$(key.value + subKey);
    if (data != null) {
      var STRING$result;
      STRING$break: do {
        if (Kotlin.isNumber(data)) {
          STRING$result = data.toString();
          break STRING$break;
        }
         else if (typeof data === 'string') {
          STRING$result = data;
          break STRING$break;
        }
         else if (typeof data === 'boolean') {
          STRING$result = data.toString();
          break STRING$break;
        }
         else if (Kotlin.isChar(data)) {
          STRING$result = data.toString();
          break STRING$break;
        }
        STRING$result = '';
      }
       while (false);
      return STRING$result;
    }
    return defaultValue;
  };
  DataUtil$Companion.prototype.SetStringPermanent_xycvms$ = function (key, subKey, value) {
    if (subKey === void 0)
      subKey = '';
    return KeychainWrapper$standard_getInstance().Set_hwpqgh$(value, key.value + subKey);
  };
  DataUtil$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DataUtil$Companion_instance = null;
  function DataUtil$Companion_getInstance() {
    if (DataUtil$Companion_instance === null) {
      new DataUtil$Companion();
    }
    return DataUtil$Companion_instance;
  }
  DataUtil.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DataUtil',
    interfaces: []
  };
  function GameCenterManager() {
    GameCenterManager$Companion_getInstance();
    this.gcScore = LinkedHashMap_init();
  }
  function GameCenterManager$Holder() {
    GameCenterManager$Holder_instance = this;
    this.instance = null;
  }
  GameCenterManager$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var GameCenterManager$Holder_instance = null;
  function GameCenterManager$Holder_getInstance() {
    if (GameCenterManager$Holder_instance === null) {
      new GameCenterManager$Holder();
    }
    return GameCenterManager$Holder_instance;
  }
  function GameCenterManager$Companion() {
    GameCenterManager$Companion_instance = this;
    this.initialized = false;
  }
  GameCenterManager$Companion.prototype.shared = function () {
    if (GameCenterManager$Holder_getInstance().instance == null) {
      GameCenterManager$Holder_getInstance().instance = new GameCenterManager();
    }
    return ensureNotNull(GameCenterManager$Holder_getInstance().instance);
  };
  GameCenterManager$Companion.prototype.shutdown = function () {
    GameCenterManager$Holder_getInstance().instance = null;
  };
  GameCenterManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var GameCenterManager$Companion_instance = null;
  function GameCenterManager$Companion_getInstance() {
    if (GameCenterManager$Companion_instance === null) {
      new GameCenterManager$Companion();
    }
    return GameCenterManager$Companion_instance;
  }
  GameCenterManager.prototype.submitScore_4ipezg$ = function (mode, score, tag, callback) {
    if (tag === void 0)
      tag = '';
    if (callback === void 0)
      callback = null;
    var gcscore = this.gcScore.get_11rb$(mode);
    if (gcscore != null) {
      if (score.compareTo_11rb$(gcscore) < 0) {
        println('Score less than GC High Score. SubmitScore rejected.');
        callback != null ? callback(true) : null;
        return;
      }
    }
    var leaderboardID = 'SamsaraHighScore' + mode;
    AppController$Companion_getInstance().shared().submitScore_ds2soj$(leaderboardID, score, tag);
    callback != null ? callback(true) : null;
  };
  GameCenterManager.prototype.submitSPS_4ipezg$ = function (mode, sps, tag, callback) {
    if (tag === void 0)
      tag = '';
    if (callback === void 0)
      callback = null;
    var leaderboardID = 'SamsaraSPS' + mode;
    AppController$Companion_getInstance().shared().submitScore_ds2soj$(leaderboardID, sps, tag);
    callback != null ? callback(true) : null;
  };
  GameCenterManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameCenterManager',
    interfaces: []
  };
  function ItemType(name, ordinal, value) {
    Enum.call(this);
    this.value = value;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ItemType_initFields() {
    ItemType_initFields = function () {
    };
    ItemType$block_instance = new ItemType('block', 0, 0);
    ItemType$mode_instance = new ItemType('mode', 1, 1);
    ItemType$gameItem_instance = new ItemType('gameItem', 2, 2);
    ItemType$avatar_instance = new ItemType('avatar', 3, 3);
    ItemType$board_instance = new ItemType('board', 4, 4);
    ItemType$End_instance = new ItemType('End', 5, 5);
  }
  var ItemType$block_instance;
  function ItemType$block_getInstance() {
    ItemType_initFields();
    return ItemType$block_instance;
  }
  var ItemType$mode_instance;
  function ItemType$mode_getInstance() {
    ItemType_initFields();
    return ItemType$mode_instance;
  }
  var ItemType$gameItem_instance;
  function ItemType$gameItem_getInstance() {
    ItemType_initFields();
    return ItemType$gameItem_instance;
  }
  var ItemType$avatar_instance;
  function ItemType$avatar_getInstance() {
    ItemType_initFields();
    return ItemType$avatar_instance;
  }
  var ItemType$board_instance;
  function ItemType$board_getInstance() {
    ItemType_initFields();
    return ItemType$board_instance;
  }
  var ItemType$End_instance;
  function ItemType$End_getInstance() {
    ItemType_initFields();
    return ItemType$End_instance;
  }
  ItemType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ItemType',
    interfaces: [Enum]
  };
  function ItemType$values() {
    return [ItemType$block_getInstance(), ItemType$mode_getInstance(), ItemType$gameItem_getInstance(), ItemType$avatar_getInstance(), ItemType$board_getInstance(), ItemType$End_getInstance()];
  }
  ItemType.values = ItemType$values;
  function ItemType$valueOf(name) {
    switch (name) {
      case 'block':
        return ItemType$block_getInstance();
      case 'mode':
        return ItemType$mode_getInstance();
      case 'gameItem':
        return ItemType$gameItem_getInstance();
      case 'avatar':
        return ItemType$avatar_getInstance();
      case 'board':
        return ItemType$board_getInstance();
      case 'End':
        return ItemType$End_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.user.ItemType.' + name);
    }
  }
  ItemType.valueOf_61zpoe$ = ItemType$valueOf;
  function Item() {
  }
  Item.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Item',
    interfaces: []
  };
  function BasicItem() {
    this.category_6wuk60$_0 = null;
    this.id_h9wys5$_0 = null;
    this.name_jm2jcr$_0 = null;
    this.isConsumable_letcrr$_0 = false;
    this.resource_5fbxi0$_0 = null;
    this.description_lg38b6$_0 = '';
    this.amount = 0;
    this.ability = null;
    this.price = null;
  }
  Object.defineProperty(BasicItem.prototype, 'category', {
    get: function () {
      return this.category_6wuk60$_0;
    },
    set: function (category) {
      this.category_6wuk60$_0 = category;
    }
  });
  Object.defineProperty(BasicItem.prototype, 'id', {
    get: function () {
      return this.id_h9wys5$_0;
    },
    set: function (id) {
      this.id_h9wys5$_0 = id;
    }
  });
  Object.defineProperty(BasicItem.prototype, 'name', {
    get: function () {
      return this.name_jm2jcr$_0;
    },
    set: function (name) {
      this.name_jm2jcr$_0 = name;
    }
  });
  Object.defineProperty(BasicItem.prototype, 'isConsumable', {
    get: function () {
      return this.isConsumable_letcrr$_0;
    },
    set: function (isConsumable) {
      this.isConsumable_letcrr$_0 = isConsumable;
    }
  });
  Object.defineProperty(BasicItem.prototype, 'resource', {
    get: function () {
      return this.resource_5fbxi0$_0;
    },
    set: function (resource) {
      this.resource_5fbxi0$_0 = resource;
    }
  });
  Object.defineProperty(BasicItem.prototype, 'description', {
    get: function () {
      return this.description_lg38b6$_0;
    },
    set: function (description) {
      this.description_lg38b6$_0 = description;
    }
  });
  BasicItem.prototype.GetAmount = function () {
    return this.amount;
  };
  BasicItem.prototype.SetAmount_za3lpa$ = function (amount) {
    this.amount = amount;
  };
  BasicItem.prototype.AddAbility_6hosri$ = function (key, value, description) {
    var $receiver = this.ability;
    var value_0 = new Pair(value, description);
    $receiver.put_xwzc9p$(key, value_0);
  };
  BasicItem.prototype.GetAbility_61zpoe$ = function (key) {
    return this.ability.get_11rb$(key);
  };
  BasicItem.prototype.GetAbilityList = function () {
    return this.ability;
  };
  BasicItem.prototype.AddPrice_bm4lxs$ = function (key, value) {
    this.price.put_xwzc9p$(key, value);
  };
  BasicItem.prototype.GetPrice_61zpoe$ = function (key) {
    var price = this.price.get_11rb$(key);
    if (price != null) {
      return price;
    }
    return 0;
  };
  BasicItem.prototype.GetPriceList = function () {
    return this.price;
  };
  BasicItem.prototype.Copy = function () {
    var copy = BasicItem_init(this.category, this.id, this.name, this.resource, void 0, this.ability, this.price);
    return copy;
  };
  BasicItem.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BasicItem',
    interfaces: [Item]
  };
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  function BasicItem_init(category, id, name, resource, description, ability, price, $this) {
    if (description === void 0)
      description = '';
    if (ability === void 0) {
      ability = emptyMap();
    }
    if (price === void 0) {
      price = emptyMap();
    }
    $this = $this || Object.create(BasicItem.prototype);
    BasicItem.call($this);
    $this.category = category;
    $this.id = id;
    $this.name = name;
    $this.resource = resource;
    $this.description = description;
    $this.ability = toMutableMap(ability);
    $this.price = toMutableMap(price);
    return $this;
  }
  function BlockItem() {
    this.blendMode = BlendMode$alpha_getInstance();
    this.blendFactor = 1.0;
    this.color = null;
    this.tileColor = null;
    this.colorMap = listOf_0(['red', 'yellow', 'green', 'blue', 'purple']);
  }
  BlockItem.prototype.Copy = function () {
    var copy = BlockItem_init(this.id, this.name, this.resource, void 0, this.blendMode, this.blendFactor, Color$Companion_getInstance().copy_3nzkge$(this.color), void 0, this.ability, this.price, this.colorMap);
    return copy;
  };
  BlockItem.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlockItem',
    interfaces: [BasicItem]
  };
  function BlockItem_init(id, name, resource, description, blendMode, blendFactor, color, tileColor, ability, price, colorMap, $this) {
    if (description === void 0)
      description = '';
    if (blendMode === void 0)
      blendMode = BlendMode$alpha_getInstance();
    if (blendFactor === void 0)
      blendFactor = 1.0;
    if (color === void 0)
      color = Color$Companion_getInstance().white_mx4ult$();
    if (tileColor === void 0)
      tileColor = Color$Companion_getInstance().white_mx4ult$();
    if (ability === void 0) {
      ability = emptyMap();
    }
    if (price === void 0) {
      price = emptyMap();
    }
    if (colorMap === void 0)
      colorMap = listOf_0(['red', 'yellow', 'green', 'blue', 'purple']);
    $this = $this || Object.create(BlockItem.prototype);
    BasicItem_init(ItemType$block_getInstance(), id, name, resource, description, ability, price, $this);
    BlockItem.call($this);
    $this.blendMode = blendMode;
    $this.blendFactor = blendFactor;
    $this.color = color;
    $this.tileColor = tileColor;
    $this.colorMap = colorMap;
    return $this;
  }
  function BoardItem() {
    this.width = 0;
    this.height = 0;
  }
  BoardItem.prototype.Copy = function () {
    var copy = BoardItem_init(this.id, this.name, this.resource, void 0, this.width, this.height, this.ability, this.price);
    return copy;
  };
  BoardItem.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BoardItem',
    interfaces: [BasicItem]
  };
  function BoardItem_init(id, name, resource, description, width, height, ability, price, $this) {
    if (description === void 0)
      description = '';
    if (ability === void 0) {
      ability = emptyMap();
    }
    if (price === void 0) {
      price = emptyMap();
    }
    $this = $this || Object.create(BoardItem.prototype);
    BasicItem_init(ItemType$board_getInstance(), id, name, resource, description, ability, price, $this);
    BoardItem.call($this);
    $this.width = width;
    $this.height = height;
    return $this;
  }
  function ItemManager() {
    ItemManager$Companion_getInstance();
    this.itemTable = LinkedHashMap_init();
    var array = Array_0(ItemType$End_getInstance().value);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
      array[i] = ArrayList_init();
    }
    this.itemByCategory = array;
  }
  function ItemManager$Holder() {
    ItemManager$Holder_instance = this;
    this.instance = null;
  }
  ItemManager$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var ItemManager$Holder_instance = null;
  function ItemManager$Holder_getInstance() {
    if (ItemManager$Holder_instance === null) {
      new ItemManager$Holder();
    }
    return ItemManager$Holder_instance;
  }
  function ItemManager$Companion() {
    ItemManager$Companion_instance = this;
    this.initialized = false;
  }
  ItemManager$Companion.prototype.shared = function () {
    if (ItemManager$Holder_getInstance().instance == null) {
      ItemManager$Holder_getInstance().instance = new ItemManager();
    }
    return ensureNotNull(ItemManager$Holder_getInstance().instance);
  };
  ItemManager$Companion.prototype.shutdown = function () {
    ItemManager$Holder_getInstance().instance = null;
  };
  ItemManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ItemManager$Companion_instance = null;
  function ItemManager$Companion_getInstance() {
    if (ItemManager$Companion_instance === null) {
      new ItemManager$Companion();
    }
    return ItemManager$Companion_instance;
  }
  ItemManager.prototype.initializeItemTable = function () {
    var test = mapOf_0(new Pair('', ''));
    this.addItemInfo_su1nf8$(BlockItem_init('BlocksetNumber', 'Number', 'Resource/BlockSet/Number/', 'MENU_37', void 0, void 0, void 0, void 0, mapOf_0(new Pair('Basic Bonus', new Pair('1.0', ''))), void 0, listOf_0(['red', 'yellow', 'green', 'blue', 'purple', 'EC4339', 'EFB920', '7CB82F', '00A0DC', '8C68CB', 'EC4339', 'EFB920', '7CB82F', '00A0DC', '8C68CB'])), 1);
    var amount = 0;
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
      amount = 1;
    }
    this.addItemInfo_su1nf8$(BlockItem_init('BlocksetDice', 'Dice', 'Resource/BlockSet/Dice/', 'MENU_38', void 0, void 0, void 0, void 0, mapOf_0(new Pair('Basic Bonus', new Pair('1.10', 'MENU_39'))), mapOf_0(new Pair('Star', 100)), listOf_0(['blue', 'yellow', 'red', 'green', 'purple', '00A0DC', 'EFB920', 'EC4339', '7CB82F', '8C68CB', '00A0DC', 'EFB920', 'EC4339', '7CB82F', '8C68CB'])), amount);
    this.addItemInfo_su1nf8$(BlockItem_init('BlocksetBird', 'Bird', 'Resource/BlockSet/Bird/', 'MENU_42', void 0, void 0, void 0, void 0, mapOf_0(new Pair('Basic Bonus', new Pair('1.20', 'MENU_43'))), mapOf_0(new Pair('Star', 1000)), listOf_0(['green', 'yellow', 'red', 'purple', 'blue', '7CB82F', 'EFB920', 'EC4339', '8C68CB', '00A0DC', '7CB82F', 'EFB920', 'EC4339', '8C68CB', '00A0DC'])), amount);
  };
  ItemManager.prototype.GetItemList = function () {
    return this.itemTable;
  };
  ItemManager.prototype.addItemInfo_su1nf8$ = function (item, amount) {
    if (amount === void 0)
      amount = 0;
    var item_0 = item;
    item_0.SetAmount_za3lpa$(amount);
    var $receiver = this.itemTable;
    var key = item_0.id;
    $receiver.put_xwzc9p$(key, item_0);
    this.itemByCategory[item_0.category.value].add_11rb$(item_0);
  };
  ItemManager.prototype.GetItemInfo_61zpoe$ = function (id) {
    return this.itemTable.get_11rb$(id);
  };
  ItemManager.prototype.GetItemListByCategory_lssvdg$ = function (category) {
    return this.itemByCategory[category.value];
  };
  ItemManager.prototype.GetItemOrderByCategory_99cvmi$ = function (category, id) {
    var i = 0;
    for (var tmp$ = this.itemByCategory[category.value].iterator(); tmp$.hasNext(); ++i) {
      var item = tmp$.next();
      if (equals(item.id, id)) {
        return i;
      }
    }
    return 0;
  };
  ItemManager.prototype.GetItemByCategory_1svh2y$ = function (category, order) {
    var order_0 = order;
    if (order_0 >= this.itemByCategory[category.value].size) {
      order_0 = 0;
    }
    return this.itemByCategory[category.value].get_za3lpa$(order_0);
  };
  ItemManager.prototype.GetNextItemByCategory_99cvmi$ = function (category, id) {
    var order = this.GetItemOrderByCategory_99cvmi$(category, id) + 1 | 0;
    if (order >= this.itemByCategory[category.value].size) {
      order = 0;
    }
    return this.itemByCategory[category.value].get_za3lpa$(order);
  };
  ItemManager.prototype.GetPrevItemByCategory_99cvmi$ = function (category, id) {
    var order = this.GetItemOrderByCategory_99cvmi$(category, id) - 1 | 0;
    if (order < 0) {
      order = this.itemByCategory[category.value].size - 1 | 0;
    }
    return this.itemByCategory[category.value].get_za3lpa$(order);
  };
  ItemManager.prototype.createItem_bm4lxs$ = function (id, amount) {
    var info = this.GetItemInfo_61zpoe$(id);
    if (info != null) {
      var item = info.Copy();
      item.SetAmount_za3lpa$(amount);
      return item;
    }
    return null;
  };
  ItemManager.prototype.loadAllPlayerItem = function () {
    var tmp$;
    tmp$ = this.itemTable.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      this.loadPlayerItem_61zpoe$(item.key);
    }
  };
  ItemManager.prototype.loadPlayerItem_61zpoe$ = function (id) {
    var itemInfo = this.GetItemInfo_61zpoe$(id);
    if (itemInfo != null) {
      itemInfo.SetAmount_za3lpa$(DataUtil$Companion_getInstance().GetInteger_rjan26$(id, void 0, itemInfo.GetAmount()));
    }
  };
  ItemManager.prototype.saveAllPlayerItem = function () {
    var tmp$;
    tmp$ = this.itemTable.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      this.savePlayerItem_61zpoe$(item.key);
    }
  };
  ItemManager.prototype.savePlayerItem_61zpoe$ = function (id) {
    var itemInfo = this.GetItemInfo_61zpoe$(id);
    if (itemInfo != null) {
      if (itemInfo.GetAmount() > 0) {
        DataUtil$Companion_getInstance().SetInteger_rjan26$(id, void 0, itemInfo.GetAmount());
      }
    }
  };
  ItemManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ItemManager',
    interfaces: []
  };
  function PlayerRecord() {
  }
  PlayerRecord.prototype.SaveHighScore_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.SaveHighScore_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.LoadHighScore_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.LoadHighScore_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.SaveMaxCombo_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.SaveMaxCombo_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.LoadMaxCombo_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.LoadMaxCombo_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.SaveMaxFever_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.SaveMaxFever_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.LoadMaxFever_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.LoadMaxFever_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.SaveMinInterval_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.SaveMinInterval_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.LoadMinInterval_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.LoadMinInterval_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.SaveMaxSPS_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.SaveMaxSPS_3uxocb$$default(callback);
  };
  PlayerRecord.prototype.LoadMaxSPS_3uxocb$ = function (callback, callback$default) {
    if (callback === void 0)
      callback = null;
    callback$default ? callback$default(callback) : this.LoadMaxSPS_3uxocb$$default(callback);
  };
  PlayerRecord.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'PlayerRecord',
    interfaces: []
  };
  function Achievement() {
    this.identifier = null;
    this.percentComplete = 0.0;
  }
  Achievement.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Achievement',
    interfaces: []
  };
  function Achievement_init(identifier, percentComplete, $this) {
    if (percentComplete === void 0)
      percentComplete = 0.0;
    $this = $this || Object.create(Achievement.prototype);
    Achievement.call($this);
    $this.identifier = identifier;
    $this.percentComplete = percentComplete;
    return $this;
  }
  function PlayerAchievement() {
  }
  PlayerAchievement.prototype.AddAchievement_ze4fts$ = function (identifier, percentComplete, callback$default) {
    if (percentComplete === void 0)
      percentComplete = 0.0;
    callback$default ? callback$default(identifier, percentComplete) : this.AddAchievement_ze4fts$$default(identifier, percentComplete);
  };
  PlayerAchievement.prototype.AddAchievementString_io5o9c$ = function (identifier, percentComplete, callback$default) {
    if (percentComplete === void 0)
      percentComplete = 0.0;
    callback$default ? callback$default(identifier, percentComplete) : this.AddAchievementString_io5o9c$$default(identifier, percentComplete);
  };
  PlayerAchievement.prototype.SetPercentComplete_gspc9z$ = function (identifier, percentComplete, moreThanOnce, callback$default) {
    if (moreThanOnce === void 0)
      moreThanOnce = false;
    callback$default ? callback$default(identifier, percentComplete, moreThanOnce) : this.SetPercentComplete_gspc9z$$default(identifier, percentComplete, moreThanOnce);
  };
  PlayerAchievement.prototype.SetPercentCompleteString_1truf$ = function (identifier, percentComplete, moreThanOnce, callback$default) {
    if (moreThanOnce === void 0)
      moreThanOnce = false;
    callback$default ? callback$default(identifier, percentComplete, moreThanOnce) : this.SetPercentCompleteString_1truf$$default(identifier, percentComplete, moreThanOnce);
  };
  PlayerAchievement.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'PlayerAchievement',
    interfaces: []
  };
  function PlayerRecordManager() {
    PlayerRecordManager$Companion_getInstance();
    this.userId = '';
    this.recordList = LinkedHashMap_init();
    this.playerAchievement = null;
    this.loadComplete = false;
    this.starAmount = 0;
  }
  function PlayerRecordManager$Holder() {
    PlayerRecordManager$Holder_instance = this;
    this.instance = null;
  }
  PlayerRecordManager$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var PlayerRecordManager$Holder_instance = null;
  function PlayerRecordManager$Holder_getInstance() {
    if (PlayerRecordManager$Holder_instance === null) {
      new PlayerRecordManager$Holder();
    }
    return PlayerRecordManager$Holder_instance;
  }
  function PlayerRecordManager$Companion() {
    PlayerRecordManager$Companion_instance = this;
    this.initialized = false;
  }
  PlayerRecordManager$Companion.prototype.shared = function () {
    if (PlayerRecordManager$Holder_getInstance().instance == null) {
      PlayerRecordManager$Holder_getInstance().instance = PlayerRecordManager_init();
    }
    return ensureNotNull(PlayerRecordManager$Holder_getInstance().instance);
  };
  PlayerRecordManager$Companion.prototype.shutdown = function () {
    PlayerRecordManager$Holder_getInstance().instance = null;
  };
  PlayerRecordManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var PlayerRecordManager$Companion_instance = null;
  function PlayerRecordManager$Companion_getInstance() {
    if (PlayerRecordManager$Companion_instance === null) {
      new PlayerRecordManager$Companion();
    }
    return PlayerRecordManager$Companion_instance;
  }
  PlayerRecordManager.prototype.SetUserId_61zpoe$ = function (id) {
    this.userId = id;
  };
  PlayerRecordManager.prototype.GetuserId = function () {
    return this.userId;
  };
  PlayerRecordManager.prototype.SetLoadComplete = function () {
    this.loadComplete = true;
  };
  PlayerRecordManager.prototype.GetLoadComplete = function () {
    return this.loadComplete;
  };
  PlayerRecordManager.prototype.addRecord_psi95l$ = function (mode, record) {
    var record_0 = record;
    this.recordList.put_xwzc9p$(mode, record_0);
  };
  PlayerRecordManager.prototype.GetRecord_61zpoe$ = function (mode) {
    var record = this.recordList.get_11rb$(mode);
    if (record != null) {
      return record;
    }
    return null;
  };
  PlayerRecordManager.prototype.SetPlayerAchievement_79oy9z$ = function (achievement) {
    this.playerAchievement = achievement;
  };
  PlayerRecordManager.prototype.GetPlayerAchievement = function () {
    return this.playerAchievement;
  };
  PlayerRecordManager.prototype.SetHighScore_bm4lxs$ = function (mode, score) {
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SetHighScore_za3lpa$(score), Unit) : null;
  };
  PlayerRecordManager.prototype.GetHighScore_61zpoe$ = function (mode) {
    var record = this.GetRecord_61zpoe$(mode);
    if (record != null) {
      return record.GetHighScore();
    }
    return 0;
  };
  PlayerRecordManager.prototype.saveHighScore_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SaveHighScore_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.loadHighScore_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.LoadHighScore_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.SetMaxCombo_bm4lxs$ = function (mode, maxCombo) {
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SetMaxCombo_za3lpa$(maxCombo), Unit) : null;
  };
  PlayerRecordManager.prototype.GetMaxCombo_61zpoe$ = function (mode) {
    var record = this.GetRecord_61zpoe$(mode);
    if (record != null) {
      return record.GetMaxCombo();
    }
    return 0;
  };
  PlayerRecordManager.prototype.saveMaxCombo_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SaveMaxCombo_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.loadMaxCombo_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.LoadMaxCombo_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.SetMaxFever_bm4lxs$ = function (mode, maxFever) {
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SetMaxFever_za3lpa$(maxFever), Unit) : null;
  };
  PlayerRecordManager.prototype.GetMaxFever_61zpoe$ = function (mode) {
    var record = this.GetRecord_61zpoe$(mode);
    if (record != null) {
      return record.GetMaxFever();
    }
    return 0;
  };
  PlayerRecordManager.prototype.saveMaxFever_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SaveMaxFever_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.loadMaxFever_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.LoadMaxFever_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.saveMinInterval_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SaveMinInterval_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.loadMinInterval_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.LoadMinInterval_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.SetMaxSPS_bm4lxs$ = function (mode, maxSPS) {
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SetMaxSPS_za3lpa$(maxSPS), Unit) : null;
  };
  PlayerRecordManager.prototype.GetMaxSPS_61zpoe$ = function (mode) {
    var record = this.GetRecord_61zpoe$(mode);
    if (record != null) {
      return record.GetMaxSPS();
    }
    return 0;
  };
  PlayerRecordManager.prototype.saveMaxSPS_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.SaveMaxSPS_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.loadMaxSPS_ae0sr1$ = function (mode, callback) {
    if (callback === void 0)
      callback = null;
    var tmp$;
    (tmp$ = this.GetRecord_61zpoe$(mode)) != null ? (tmp$.LoadMaxSPS_3uxocb$(callback), Unit) : null;
  };
  PlayerRecordManager.prototype.addAchievement_ze4fts$ = function (identifier, percentComplete) {
    if (percentComplete === void 0)
      percentComplete = 0.0;
    var playerAchievement = this.playerAchievement;
    if (playerAchievement != null) {
      playerAchievement.AddAchievement_ze4fts$(identifier, percentComplete);
    }
  };
  PlayerRecordManager.prototype.loadAchievement = function () {
    var playerAchievement = this.playerAchievement;
    if (playerAchievement != null) {
      playerAchievement.LoadAchievement();
    }
  };
  PlayerRecordManager.prototype.saveAchievement_chhr4e$ = function (identifier) {
    var playerAchievement = this.playerAchievement;
    if (playerAchievement != null) {
      playerAchievement.SaveAchievement_chhr4e$(identifier);
    }
  };
  PlayerRecordManager.prototype.SetPercentComplete_gspc9z$ = function (identifier, percentComplete, moreThanOnce) {
    if (moreThanOnce === void 0)
      moreThanOnce = false;
    this.SetPercentComplete_1truf$(identifier.value, percentComplete, moreThanOnce);
  };
  PlayerRecordManager.prototype.SetPercentComplete_1truf$ = function (identifier, percentComplete, moreThanOnce) {
    if (moreThanOnce === void 0)
      moreThanOnce = false;
    var playerAchievement = this.playerAchievement;
    if (playerAchievement != null) {
      playerAchievement.SetPercentCompleteString_1truf$(identifier, percentComplete, moreThanOnce);
    }
  };
  PlayerRecordManager.prototype.GetPercentComplete_chhr4e$ = function (identifier) {
    var playerAchievement = this.playerAchievement;
    if (playerAchievement != null) {
      return playerAchievement.GetPercentComplete_chhr4e$(identifier);
    }
    return 0.0;
  };
  PlayerRecordManager.prototype.GetPercentComplete_61zpoe$ = function (identifier) {
    var playerAchievement = this.playerAchievement;
    if (playerAchievement != null) {
      return playerAchievement.GetPercentCompleteString_61zpoe$(identifier);
    }
    return 0.0;
  };
  PlayerRecordManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PlayerRecordManager',
    interfaces: []
  };
  function PlayerRecordManager_init($this) {
    $this = $this || Object.create(PlayerRecordManager.prototype);
    PlayerRecordManager.call($this);
    return $this;
  }
  function PermanentKey(name, ordinal, value) {
    Enum.call(this);
    this.value = value;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function PermanentKey_initFields() {
    PermanentKey_initFields = function () {
    };
    PermanentKey$EMPTY_KEY_instance = new PermanentKey('EMPTY_KEY', 0, '');
    PermanentKey$STAR_AMOUNT_instance = new PermanentKey('STAR_AMOUNT', 1, 'Star Amount');
    PermanentKey$EXP_instance = new PermanentKey('EXP', 2, 'EXP');
  }
  var PermanentKey$EMPTY_KEY_instance;
  function PermanentKey$EMPTY_KEY_getInstance() {
    PermanentKey_initFields();
    return PermanentKey$EMPTY_KEY_instance;
  }
  var PermanentKey$STAR_AMOUNT_instance;
  function PermanentKey$STAR_AMOUNT_getInstance() {
    PermanentKey_initFields();
    return PermanentKey$STAR_AMOUNT_instance;
  }
  var PermanentKey$EXP_instance;
  function PermanentKey$EXP_getInstance() {
    PermanentKey_initFields();
    return PermanentKey$EXP_instance;
  }
  PermanentKey.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PermanentKey',
    interfaces: [Enum]
  };
  function PermanentKey$values() {
    return [PermanentKey$EMPTY_KEY_getInstance(), PermanentKey$STAR_AMOUNT_getInstance(), PermanentKey$EXP_getInstance()];
  }
  PermanentKey.values = PermanentKey$values;
  function PermanentKey$valueOf(name) {
    switch (name) {
      case 'EMPTY_KEY':
        return PermanentKey$EMPTY_KEY_getInstance();
      case 'STAR_AMOUNT':
        return PermanentKey$STAR_AMOUNT_getInstance();
      case 'EXP':
        return PermanentKey$EXP_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.user.PermanentKey.' + name);
    }
  }
  PermanentKey.valueOf_61zpoe$ = PermanentKey$valueOf;
  function StoreManager() {
    StoreManager$Companion_getInstance();
    this.starAmount = 0;
    this.exp = 0;
  }
  function StoreManager$Holder() {
    StoreManager$Holder_instance = this;
    this.instance = null;
  }
  StoreManager$Holder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Holder',
    interfaces: []
  };
  var StoreManager$Holder_instance = null;
  function StoreManager$Holder_getInstance() {
    if (StoreManager$Holder_instance === null) {
      new StoreManager$Holder();
    }
    return StoreManager$Holder_instance;
  }
  function StoreManager$Companion() {
    StoreManager$Companion_instance = this;
    this.initialized = false;
  }
  StoreManager$Companion.prototype.shared = function () {
    if (StoreManager$Holder_getInstance().instance == null) {
      StoreManager$Holder_getInstance().instance = new StoreManager();
    }
    return ensureNotNull(StoreManager$Holder_getInstance().instance);
  };
  StoreManager$Companion.prototype.shutdown = function () {
    StoreManager$Holder_getInstance().instance = null;
  };
  StoreManager$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StoreManager$Companion_instance = null;
  function StoreManager$Companion_getInstance() {
    if (StoreManager$Companion_instance === null) {
      new StoreManager$Companion();
    }
    return StoreManager$Companion_instance;
  }
  StoreManager.prototype.prepareInAppPurchase_o14v8n$ = function (callback) {
  };
  StoreManager.prototype.load = function () {
    this.loadStar();
    this.loadExp();
  };
  StoreManager.prototype.loadStar = function () {
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
      this.starAmount = 1100;
    }
     else {
      this.starAmount = DataUtil$Companion_getInstance().GetIntegerPermanent_pngao4$(PermanentKey$STAR_AMOUNT_getInstance());
    }
  };
  StoreManager.prototype.saveStar = function () {
    DataUtil$Companion_getInstance().SetIntegerPermanent_pngao4$(PermanentKey$STAR_AMOUNT_getInstance(), void 0, this.starAmount);
  };
  StoreManager.prototype.GetStarAmount = function () {
    return this.starAmount;
  };
  StoreManager.prototype.addStar_za3lpa$ = function (amount) {
    this.starAmount = this.starAmount + amount | 0;
    if (this.starAmount < 0) {
      this.starAmount = 0;
    }
    this.saveStar();
  };
  StoreManager.prototype.decreaseStar_za3lpa$ = function (amount) {
    this.starAmount = this.starAmount - amount | 0;
    if (this.starAmount < 0) {
      this.starAmount = 0;
    }
    this.saveStar();
  };
  StoreManager.prototype.loadExp = function () {
    this.exp = DataUtil$Companion_getInstance().GetIntegerPermanent_pngao4$(PermanentKey$EXP_getInstance());
  };
  StoreManager.prototype.saveExp = function () {
    DataUtil$Companion_getInstance().SetIntegerPermanent_pngao4$(PermanentKey$EXP_getInstance(), void 0, this.exp);
  };
  StoreManager.prototype.GetExp = function () {
    return this.exp;
  };
  StoreManager.prototype.addExp_za3lpa$ = function (amount) {
    this.exp = this.exp + amount | 0;
    if (this.exp < 0) {
      this.exp = 0;
    }
    this.saveExp();
  };
  StoreManager.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StoreManager',
    interfaces: []
  };
  function BlockTypeView() {
    View_init(void 0, void 0, void 0, this);
    this.blockId = [null, null, null, null, null, null];
    this.menu_z3bng4$_0 = this.menu_z3bng4$_0;
    this.notice_zgfnxv$_0 = this.notice_zgfnxv$_0;
    this.particleManagerForFairy_bo91vu$_0 = this.particleManagerForFairy_bo91vu$_0;
    this.menuBackCallback = BlockTypeView$menuBackCallback$lambda(this);
    this.menuCallback = BlockTypeView$menuCallback$lambda(this);
  }
  Object.defineProperty(BlockTypeView.prototype, 'menu', {
    get: function () {
      if (this.menu_z3bng4$_0 == null)
        return throwUPAE('menu');
      return this.menu_z3bng4$_0;
    },
    set: function (menu) {
      this.menu_z3bng4$_0 = menu;
    }
  });
  Object.defineProperty(BlockTypeView.prototype, 'notice', {
    get: function () {
      if (this.notice_zgfnxv$_0 == null)
        return throwUPAE('notice');
      return this.notice_zgfnxv$_0;
    },
    set: function (notice) {
      this.notice_zgfnxv$_0 = notice;
    }
  });
  Object.defineProperty(BlockTypeView.prototype, 'particleManagerForFairy', {
    get: function () {
      if (this.particleManagerForFairy_bo91vu$_0 == null)
        return throwUPAE('particleManagerForFairy');
      return this.particleManagerForFairy_bo91vu$_0;
    },
    set: function (particleManagerForFairy) {
      this.particleManagerForFairy_bo91vu$_0 = particleManagerForFairy;
    }
  });
  function BlockTypeView$afterAttached$lambda$lambda(closure$star, closure$width, closure$amount) {
    return function () {
      var tmp$ = closure$star;
      var value = closure$width.v;
      var STRING$result;
      STRING$break: do {
        if (Kotlin.isNumber(value)) {
          STRING$result = value.toString();
          break STRING$break;
        }
         else if (typeof value === 'string') {
          STRING$result = value;
          break STRING$break;
        }
         else if (typeof value === 'boolean') {
          STRING$result = value.toString();
          break STRING$break;
        }
         else if (Kotlin.isChar(value)) {
          STRING$result = value.toString();
          break STRING$break;
        }
        STRING$result = '';
      }
       while (false);
      tmp$.addText_r4v59z$('[image Resource/UI/IconStar ' + STRING$result + '] ' + formatted(closure$amount));
      return Unit;
    };
  }
  function BlockTypeView$afterAttached$lambda(closure$currentStar, closure$star, closure$width) {
    return function (info) {
      var amount = StoreManager$Companion_getInstance().shared().GetStarAmount();
      if (closure$currentStar.v !== amount) {
        closure$currentStar.v = amount;
        closure$star.clearText_gam257$(void 0, BlockTypeView$afterAttached$lambda$lambda(closure$star, closure$width, amount));
      }
      return true;
    };
  }
  function BlockTypeView$afterAttached$lambda$lambda_0(this$BlockTypeView) {
    return function () {
      var tmp$;
      (tmp$ = this$BlockTypeView.screen) != null ? (tmp$.presentView_xl35ob$(new MainMenuView()), Unit) : null;
      return Unit;
    };
  }
  function BlockTypeView$afterAttached$lambda_0(this$BlockTypeView) {
    return function (code) {
      var tmp$;
      if (code === TouchListener$Code_getInstance().ESCAPE || code === TouchListener$Code_getInstance().BACK) {
        this$BlockTypeView.menu.drop();
        (tmp$ = this$BlockTypeView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, BlockTypeView$afterAttached$lambda$lambda_0(this$BlockTypeView)), Unit) : null;
        return true;
      }
      return false;
    };
  }
  BlockTypeView.prototype.afterAttached = function () {
    var tmp$, tmp$_0, tmp$_1;
    HAL$Companion_getInstance().shared().SetBackgroundColor_qt1dr2$(28, 28, 28);
    (tmp$ = this.screen) != null ? (tmp$.isDrawTouchMark = true) : null;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var value = SceneLayer$spaceDeep_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    this.createSprite_591x4d$(160.0, 240.0, FLOAT$result, 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, false);
    var blockList = ItemManager$Companion_getInstance().shared().GetItemListByCategory_lssvdg$(ItemType$block_getInstance());
    var array = Array_0(blockList.size * 2 | 0);
    var tmp$_2;
    tmp$_2 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_2; i++) {
      array[i] = null;
    }
    var items = array;
    var i_0 = 0;
    for (var tmp$_3 = blockList.iterator(); tmp$_3.hasNext(); ++i_0) {
      var item = tmp$_3.next();
      var tmp$_4, tmp$_5;
      var blockInfo = Kotlin.isType(tmp$_4 = item, BlockItem) ? tmp$_4 : null;
      if (blockInfo != null) {
        var ability = '';
        tmp$_5 = blockInfo.GetAbilityList().entries.iterator();
        while (tmp$_5.hasNext()) {
          var tmp$_6 = tmp$_5.next();
          var key = tmp$_6.key;
          var value_0 = tmp$_6.value;
          ability += local(value_0.second) + '\n';
        }
        var description;
        if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
          description = ['[COLOR]' + local(blockInfo.description) + '[SCALE][COLOR]\n\n[COLOR yellow]' + ability + '[COLOR]', '[COLOR]' + local(blockInfo.description) + '[SCALE][COLOR]\n\n[COLOR yellow]' + ability + '[COLOR]'];
        }
         else {
          var disableMsg = '';
          if (blockInfo.GetPrice_61zpoe$('Star') > StoreManager$Companion_getInstance().shared().GetStarAmount()) {
            var tmp$_7 = '[COLOR]' + local(blockInfo.description) + '[SCALE][COLOR]\n\n[COLOR yellow]' + ability + '[COLOR]\n[image Resource/UI/IconStar 15] [Scale 0.5]X [SCALE 0.6]';
            var value_1 = blockInfo.GetPrice_61zpoe$('Star');
            var STRING$result;
            STRING$break: do {
              if (Kotlin.isNumber(value_1)) {
                STRING$result = value_1.toString();
                break STRING$break;
              }
               else if (typeof value_1 === 'string') {
                STRING$result = value_1;
                break STRING$break;
              }
               else if (typeof value_1 === 'boolean') {
                STRING$result = value_1.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(value_1)) {
                STRING$result = value_1.toString();
                break STRING$break;
              }
              STRING$result = '';
            }
             while (false);
            var tmp$_8 = tmp$_7 + STRING$result + '\n[Button Resource/UI/IconLockDisabled 50 ';
            var STRING$result_0;
            STRING$break: do {
              if (Kotlin.isNumber(i_0)) {
                STRING$result_0 = i_0.toString();
                break STRING$break;
              }
               else if (typeof i_0 === 'string') {
                STRING$result_0 = i_0;
                break STRING$break;
              }
               else if (typeof i_0 === 'boolean') {
                STRING$result_0 = i_0.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(i_0)) {
                STRING$result_0 = i_0.toString();
                break STRING$break;
              }
              STRING$result_0 = '';
            }
             while (false);
            disableMsg = tmp$_8 + STRING$result_0 + ' false]';
          }
           else {
            var tmp$_9 = '[COLOR]' + local(blockInfo.description) + '[SCALE][COLOR]\n\n[COLOR yellow]' + ability + '[COLOR]\n[image Resource/UI/IconStar 15] [Scale 0.5]X [SCALE 0.6]';
            var value_2 = blockInfo.GetPrice_61zpoe$('Star');
            var STRING$result_1;
            STRING$break: do {
              if (Kotlin.isNumber(value_2)) {
                STRING$result_1 = value_2.toString();
                break STRING$break;
              }
               else if (typeof value_2 === 'string') {
                STRING$result_1 = value_2;
                break STRING$break;
              }
               else if (typeof value_2 === 'boolean') {
                STRING$result_1 = value_2.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(value_2)) {
                STRING$result_1 = value_2.toString();
                break STRING$break;
              }
              STRING$result_1 = '';
            }
             while (false);
            var tmp$_10 = tmp$_9 + STRING$result_1 + '\n[Button Resource/UI/IconLock 50 ';
            var STRING$result_2;
            STRING$break: do {
              if (Kotlin.isNumber(i_0)) {
                STRING$result_2 = i_0.toString();
                break STRING$break;
              }
               else if (typeof i_0 === 'string') {
                STRING$result_2 = i_0;
                break STRING$break;
              }
               else if (typeof i_0 === 'boolean') {
                STRING$result_2 = i_0.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(i_0)) {
                STRING$result_2 = i_0.toString();
                break STRING$break;
              }
              STRING$result_2 = '';
            }
             while (false);
            disableMsg = tmp$_10 + STRING$result_2 + ']';
          }
          description = ['[COLOR]' + local(blockInfo.description) + '[SCALE][COLOR]\n\n[COLOR yellow]' + ability + '[COLOR]', disableMsg];
        }
        var item_0 = MenuItem_init(blockInfo.resource + 'IconMenu', void 0, description, MenuItemType$RADIO_getInstance(), void 0, void 0, this.menuCallback);
        item_0.enable = true;
        if (blockInfo.amount === 0) {
          item_0.enable = false;
        }
        items[i_0] = item_0;
        this.blockId[i_0] = blockInfo.id;
      }
    }
    var tileSize = 60.0;
    var tileSize2 = 40.0;
    var yMargin = 40.0;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      tileSize = 100.0;
      tileSize2 = 90.0;
      yMargin = 20.0;
    }
    var tmp$_11 = this.GetSize();
    var value_3 = blockList.size;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_3 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_3)) {
        FLOAT$result_0 = numberToDouble(value_3);
        break FLOAT$break;
      }
      if (typeof value_3 === 'string') {
        try {
          var number_0 = toDouble(value_3);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    this.menu = Menu_init(this, tmp$_11, Size_init(FLOAT$result_0, 1.0), tileSize, void 0, items, null, local('MENU_12'));
    this.menu.prepare_1isvtk$(yMargin, 10.0, 20.0, void 0, 20.0);
    var current = AppController$Companion_getInstance().shared().GetCurrentBlockSetId();
    tmp$_0 = this.blockId;
    for (var i_1 = 0; i_1 !== tmp$_0.length; ++i_1) {
      var id = tmp$_0[i_1];
      if (equals(id, current)) {
        this.menu.SetCurrent_za3lpa$(i_1);
        break;
      }
    }
    var width = {v: 20.0};
    var fontSize = 24.0;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      width.v = 40.0;
      fontSize = 32.0;
    }
    this.SetFontName_61zpoe$('Number/');
    this.SetFontSize_mx4ult$(fontSize);
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    var star = this.createTextArea_pvsv9g$(310.0, 5.0, void 0, 320.0, 0.0, 0.0, 0.5, 1.0);
    star.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    star.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    var value_4 = width.v;
    var STRING$result_3;
    STRING$break: do {
      if (Kotlin.isNumber(value_4)) {
        STRING$result_3 = value_4.toString();
        break STRING$break;
      }
       else if (typeof value_4 === 'string') {
        STRING$result_3 = value_4;
        break STRING$break;
      }
       else if (typeof value_4 === 'boolean') {
        STRING$result_3 = value_4.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value_4)) {
        STRING$result_3 = value_4.toString();
        break STRING$break;
      }
      STRING$result_3 = '';
    }
     while (false);
    star.addText_r4v59z$('[image Resource/UI/IconStar ' + STRING$result_3 + '] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
    star.SetName_61zpoe$('Star Amount');
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      var currentStar = {v: StoreManager$Companion_getInstance().shared().GetStarAmount()};
      this.createAction_xcdeti$('Sync Watchdog', void 0, void 0, void 0, void 0, 0.5, void 0, BlockTypeView$afterAttached$lambda(currentStar, star, width));
    }
    this.SetFontSize_mx4ult$(16.0);
    this.SetFontName_61zpoe$('MENU_/');
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.notice = this.createTextArea_pvsv9g$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 320.0, 480.0, 0.0, 0.5, 1.0);
    this.notice.SetFadeMode_za3lpa$(1);
    this.notice.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.notice.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.notice.SetModal_6taknv$(true);
    this.SetFontSize_mx4ult$();
    var menu2 = Menu_init(this, this.GetSize(), Size_init(2.0, 1.0), tileSize2, void 0, [MenuItem_init('Resource/UI/IconBack', void 0, void 0, void 0, void 0, void 0, this.menuBackCallback), null]);
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      menu2.prepare_1isvtk$(160.0, 150.0);
    }
     else {
      menu2.prepare_1isvtk$(200.0, 150.0);
    }
    this.particleManagerForFairy = ParticleManager_init(this);
    this.createBackgroundEffect_v32r7z$(this.particleManagerForFairy, Rect_init(0.0, 0.0, 320.0, 480.0));
    (tmp$_1 = this.screen) != null ? (tmp$_1.addKeydownListener_5ol7k9$('Back Key', BlockTypeView$afterAttached$lambda_0(this)), Unit) : null;
  };
  BlockTypeView.prototype.beforeDetached = function () {
    this.particleManagerForFairy.clearParticlePool();
  };
  BlockTypeView.prototype.update_mx4ult$ = function (elapsed) {
    if (this.particleManagerForFairy != null) {
      this.particleManagerForFairy.updateObject_mx4ult$(elapsed);
      this.particleManagerForFairy.projection_1s1xds$(this.size, Position_init(0.0, 0 * this.sizeScale.yRatio, 1000.0));
    }
    View.prototype.update_mx4ult$.call(this, elapsed);
  };
  function BlockTypeView$createBackgroundEffect$lambda(closure$particleManager, closure$max, closure$rect, this$BlockTypeView) {
    return function (info) {
      if (closure$particleManager.GetCurrentParticleCount() > closure$max) {
        return true;
      }
      var tmp$ = closure$rect.x;
      var tmp$_0 = Random_getInstance();
      var value = closure$rect.width;
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      var value_0 = tmp$_0.arc4random_uniform_za3lpa$(INT$result);
      var FLOAT$result;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var xxx = tmp$ + FLOAT$result;
      var tmp$_1 = closure$rect.y;
      var tmp$_2 = Random_getInstance();
      var value_1 = closure$rect.height;
      var INT$result_0;
      INT$break: do {
        if (value_1 == null) {
          INT$result_0 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          INT$result_0 = numberToInt(value_1);
          break INT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toInt_0(value_1);
            INT$result_0 = number_1;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_0 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_0 = 0;
      }
       while (false);
      var value_2 = tmp$_2.arc4random_uniform_za3lpa$(INT$result_0);
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_0 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_0 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var yyy = tmp$_1 + FLOAT$result_0;
      var position = this$BlockTypeView.positionUniversalToDevice_xpb3zu$(xxx, yyy);
      position.z = 100.0;
      var fixScreenZ = false;
      var blink = true;
      var alpha = 1.0;
      var color = Color$Companion_getInstance().white_mx4ult$(alpha);
      var colorPick = Random_getInstance().arc4random_uniform_za3lpa$(100);
      if (colorPick < 70) {
        fixScreenZ = true;
      }
      if (colorPick < 5) {
        color = Color$Companion_getInstance().puzzleYellow_mx4ult$(alpha);
      }
       else if (colorPick < 6) {
        color = Color$Companion_getInstance().puzzleBlue_mx4ult$(alpha);
      }
       else if (colorPick < 7) {
        color = Color$Companion_getInstance().puzzleRed_mx4ult$(alpha);
      }
       else if (colorPick < 8) {
        color = Color$Companion_getInstance().puzzlePurple_mx4ult$(alpha);
      }
       else if (colorPick < 10) {
        color = Color$Companion_getInstance().puzzleOrange_mx4ult$(alpha);
      }
      var tmp$_3 = closure$particleManager;
      var tmp$_4 = 5 * this$BlockTypeView.sizeScale.xRatio;
      var tmp$_5 = (100 * 2 | 0) * this$BlockTypeView.sizeScale.xRatio;
      var value_3 = Random_getInstance().arc4random_uniform_za3lpa$(100);
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_3 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_3)) {
          FLOAT$result_1 = numberToDouble(value_3);
          break FLOAT$break;
        }
        if (typeof value_3 === 'string') {
          try {
            var number_3 = toDouble(value_3);
            FLOAT$result_1 = number_3;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      var tmp$_6 = 3.0 + FLOAT$result_1 / 100;
      var tmp$_7 = color;
      var tmp$_8 = Position_init(5.0, 5.0, -50.0);
      var tmp$_9 = Position_init(40 * this$BlockTypeView.sizeScale.xRatio, 40 * this$BlockTypeView.sizeScale.xRatio, 50.0);
      var tmp$_10 = 200 * this$BlockTypeView.sizeScale.xRatio;
      var tmp$_11 = fixScreenZ;
      var value_4 = SceneLayer$background_getInstance().value;
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_4 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_4)) {
          FLOAT$result_2 = numberToDouble(value_4);
          break FLOAT$break;
        }
        if (typeof value_4 === 'string') {
          try {
            var number_4 = toDouble(value_4);
            FLOAT$result_2 = number_4;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      tmp$_3.createFairy2_emwd81$(position, tmp$_4, tmp$_5, tmp$_6, 'Resource/UI/ParticleFairy', tmp$_7, tmp$_8, tmp$_9, tmp$_10, blink, tmp$_11, FLOAT$result_2, this$BlockTypeView);
      return true;
    };
  }
  function BlockTypeView$createBackgroundEffect$lambda_0(closure$particleManager, this$BlockTypeView) {
    return function (pos, delta, speed, state, elapsed) {
      var tmp$, tmp$_0;
      switch (state.name) {
        case 'began':
          tmp$ = closure$particleManager.GetObjectList().iterator();
          while (tmp$.hasNext()) {
            var particle = tmp$.next();
            var unit = Position_init(particle.screenPosition.x - pos.x, particle.screenPosition.y - pos.y);
            var distance = unit.length2D();
            if (distance < 100 * this$BlockTypeView.sizeScale.xRatio) {
              var power = 1000 * this$BlockTypeView.sizeScale.xRatio - 2 * distance;
              unit.normalize();
              var tmp$_1 = particle.movement;
              var x = particle.movement.x;
              tmp$_1.x = Math_0.abs(x) * unit.normalX;
              var tmp$_2 = particle.movement;
              var x_0 = particle.movement.y;
              tmp$_2.y = Math_0.abs(x_0) * unit.normalY;
              particle.accel.x = power * unit.normalX;
              particle.accel.y = power * unit.normalY;
              particle.accelRetain.x = 0.1;
              particle.accelRetain.y = 0.1;
              particle.drag.x = 50 * this$BlockTypeView.sizeScale.xRatio;
              particle.drag.y = 50 * this$BlockTypeView.sizeScale.xRatio;
            }
          }

          break;
        case 'moved':
          tmp$_0 = closure$particleManager.GetObjectList().iterator();
          while (tmp$_0.hasNext()) {
            var particle_0 = tmp$_0.next();
            var unit_0 = Position_init(particle_0.screenPosition.x - pos.x, particle_0.screenPosition.y - pos.y);
            var distance_0 = unit_0.length2D();
            if (distance_0 < 100 * this$BlockTypeView.sizeScale.xRatio) {
              var power_0 = 1000 * this$BlockTypeView.sizeScale.xRatio - 2 * distance_0;
              unit_0.normalize();
              var tmp$_3 = particle_0.movement;
              var x_1 = particle_0.movement.x;
              tmp$_3.x = Math_0.abs(x_1) * unit_0.normalX;
              var tmp$_4 = particle_0.movement;
              var x_2 = particle_0.movement.y;
              tmp$_4.y = Math_0.abs(x_2) * unit_0.normalY;
              particle_0.accel.x = power_0 * unit_0.normalX;
              particle_0.accel.y = power_0 * unit_0.normalY;
              particle_0.accelRetain.x = 0.1;
              particle_0.accelRetain.y = 0.1;
              particle_0.drag.x = 50 * this$BlockTypeView.sizeScale.xRatio;
              particle_0.drag.y = 50 * this$BlockTypeView.sizeScale.xRatio;
            }
          }

          break;
      }
    };
  }
  BlockTypeView.prototype.createBackgroundEffect_v32r7z$ = function (particleManager, rect, max) {
    if (max === void 0)
      max = 30;
    var tmp$;
    var quality = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 0);
    if (quality < 1) {
      return;
    }
    var camera = Camera_init_0(20.0, Position_init(0.0, 0.0, -100.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 50.0);
    particleManager.SetCamera_s6wt6e$(camera);
    var performance = SystemConfigure$Companion_getInstance().GetPerformance();
    var value = 200 * performance;
    var INT$result;
    INT$break: do {
      if (value == null) {
        INT$result = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value)) {
        INT$result = numberToInt(value);
        break INT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toInt_0(value);
          INT$result = number;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result = 0;
    }
     while (false);
    particleManager.SetMaxParticle_za3lpa$(INT$result);
    camera.projection = 1;
    particleManager.SetCamera_s6wt6e$(camera);
    var interval = 0.1;
    if (quality < 2) {
      interval = 0.2;
    }
    this.createAction_xcdeti$('Background Effect', true, false, true, void 0, interval, void 0, BlockTypeView$createBackgroundEffect$lambda(particleManager, max, rect, this));
    (tmp$ = this.screen) != null ? (tmp$.addTouchListener_dal58m$(new TouchListener('Touch For Fairy', 0.0, 0.0, this.GetSize().width, this.GetSize().height, void 0, BlockTypeView$createBackgroundEffect$lambda_0(particleManager, this))), Unit) : null;
  };
  function BlockTypeView$menuBackCallback$lambda(this$BlockTypeView) {
    return function (index, enable, name) {
      this$BlockTypeView.menu.drop();
      return new MainMenuView();
    };
  }
  function BlockTypeView$menuCallback$lambda$lambda$lambda$lambda() {
    SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('buy');
    return Unit;
  }
  function BlockTypeView$menuCallback$lambda$lambda$lambda$lambda_0(closure$star) {
    return function () {
      closure$star.addText_r4v59z$('[image Resource/UI/IconStar 20] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
      return Unit;
    };
  }
  function BlockTypeView$menuCallback$lambda$lambda$lambda(this$BlockTypeView, closure$message, closure$amount, closure$name) {
    return function () {
      var tmp$, tmp$_0, tmp$_1;
      SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
      this$BlockTypeView.notice.SetShow_6taknv$(false);
      this$BlockTypeView.notice.clearText_gam257$();
      if (equals((tmp$ = closure$message.sender) != null ? tmp$.GetName() : null, 'ok')) {
        (tmp$_0 = this$BlockTypeView.screen) != null ? (tmp$_0.actionDelay_ab0iom$(0.5, void 0, BlockTypeView$menuCallback$lambda$lambda$lambda$lambda), Unit) : null;
        StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(closure$amount.v);
        var star = Kotlin.isType(tmp$_1 = this$BlockTypeView.findChildByName_3m52m6$('Star Amount'), TextArea) ? tmp$_1 : null;
        if (star != null) {
          star.clearText_gam257$(void 0, BlockTypeView$menuCallback$lambda$lambda$lambda$lambda_0(star));
        }
        var value = ensureNotNull(closure$name);
        var INT$result;
        INT$break: do {
          if (value == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value)) {
            INT$result = numberToInt(value);
            break INT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toInt_0(value);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        var index = INT$result;
        if (index != null) {
          var id = this$BlockTypeView.blockId[index];
          if (id != null) {
            var block = ItemManager$Companion_getInstance().shared().GetItemInfo_61zpoe$(id);
            if (block != null) {
              block.SetAmount_za3lpa$(1);
              ItemManager$Companion_getInstance().shared().savePlayerItem_61zpoe$(id);
            }
          }
        }
        this$BlockTypeView.menu.SetEnable_fzusl$(index, true);
        this$BlockTypeView.menu.SetCurrent_za3lpa$(index);
        var id_0 = this$BlockTypeView.blockId[index];
        if (id_0 != null) {
          AppController$Companion_getInstance().shared().changeCurrentBlockSet_61zpoe$(id_0);
          AppController$Companion_getInstance().shared().saveCurrentBlockSet();
        }
      }
      return Unit;
    };
  }
  function BlockTypeView$menuCallback$lambda$lambda(this$BlockTypeView, closure$amount, closure$name) {
    return function (message) {
      var tmp$;
      if (message.event === Event$button_RELEASE_getInstance()) {
        (tmp$ = this$BlockTypeView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, BlockTypeView$menuCallback$lambda$lambda$lambda(this$BlockTypeView, message, closure$amount, closure$name)), Unit) : null;
        return false;
      }
      return true;
    };
  }
  function BlockTypeView$menuCallback$lambda(this$BlockTypeView) {
    return function (index, enable, name) {
      if (name != null) {
        var amount = {v: 0};
        var value = ensureNotNull(name);
        var INT$result;
        INT$break: do {
          if (value == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value)) {
            INT$result = numberToInt(value);
            break INT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toInt_0(value);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        var index_0 = INT$result;
        if (index_0 != null) {
          var id = this$BlockTypeView.blockId[index_0];
          if (id != null) {
            var block = ItemManager$Companion_getInstance().shared().GetItemInfo_61zpoe$(id);
            if (block != null) {
              amount.v = block.GetPrice_61zpoe$('Star');
            }
          }
        }
        this$BlockTypeView.notice.SetShow_6taknv$(true);
        this$BlockTypeView.notice.addText_r4v59z$(local('MENU_13') + '\n\n\n\n' + '[Button Resource/UI/IconYes 50 ok]        [Button Resource/UI/IconNo 50 no]', 0.3);
        this$BlockTypeView.notice.SetMessageHandler_4mjqr2$(BlockTypeView$menuCallback$lambda$lambda(this$BlockTypeView, amount, name));
        return null;
      }
      if (enable === false) {
        return null;
      }
      var id_0 = this$BlockTypeView.blockId[index];
      if (id_0 != null) {
        AppController$Companion_getInstance().shared().changeCurrentBlockSet_61zpoe$(id_0);
        AppController$Companion_getInstance().shared().saveCurrentBlockSet();
      }
      return null;
    };
  }
  BlockTypeView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BlockTypeView',
    interfaces: [View]
  };
  function GameOverView() {
    this.game_lsce3y$_0 = this.game_lsce3y$_0;
    this.menu = null;
    this.background = null;
    this.heightOffset1 = 40.0;
    this.bannerOffset = 0.0;
    this.newRecord = false;
    this.perfectPlay = false;
    this.gameScore = 0;
    this.bonusScore = 0;
    this.scorePerSecond = 0;
    this.particleManager_66rxx3$_0 = this.particleManager_66rxx3$_0;
    this.cameraPreset = [Camera_init_0(20.0, Position_init(0.0, 0.0, 0.0), Position_init(15.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 800.0, 500.0, 200.0), Camera_init_0(20.0, Position_init(0.0, 0.0, -150.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 100.0)];
    this.currentCamera_8wat6a$_0 = this.currentCamera_8wat6a$_0;
    this.paperCount = 0;
    this.fireworkManager_x19jg6$_0 = this.fireworkManager_x19jg6$_0;
    this.step = 0;
    this.menuItem = GameOverView$menuItem$lambda(this);
  }
  Object.defineProperty(GameOverView.prototype, 'game', {
    get: function () {
      if (this.game_lsce3y$_0 == null)
        return throwUPAE('game');
      return this.game_lsce3y$_0;
    },
    set: function (game) {
      this.game_lsce3y$_0 = game;
    }
  });
  Object.defineProperty(GameOverView.prototype, 'particleManager', {
    get: function () {
      if (this.particleManager_66rxx3$_0 == null)
        return throwUPAE('particleManager');
      return this.particleManager_66rxx3$_0;
    },
    set: function (particleManager) {
      this.particleManager_66rxx3$_0 = particleManager;
    }
  });
  Object.defineProperty(GameOverView.prototype, 'currentCamera', {
    get: function () {
      if (this.currentCamera_8wat6a$_0 == null)
        return throwUPAE('currentCamera');
      return this.currentCamera_8wat6a$_0;
    },
    set: function (currentCamera) {
      this.currentCamera_8wat6a$_0 = currentCamera;
    }
  });
  Object.defineProperty(GameOverView.prototype, 'fireworkManager', {
    get: function () {
      if (this.fireworkManager_x19jg6$_0 == null)
        return throwUPAE('fireworkManager');
      return this.fireworkManager_x19jg6$_0;
    },
    set: function (fireworkManager) {
      this.fireworkManager_x19jg6$_0 = fireworkManager;
    }
  });
  function GameOverView$afterAttached$lambda(this$GameOverView) {
    return function (result) {
      this$GameOverView.drawScreen();
    };
  }
  GameOverView.prototype.afterAttached = function () {
    this.particleManager = ParticleManager_init(this);
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
      this.drawScreen();
      return;
    }
    SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('PreventAds', 0);
    var current = SystemConfigure$Companion_getInstance().GetDouble_io5o9c$('PlayingTimeForAds', 0.0);
    var DOUBLE$result;
    DOUBLE$break: do {
      if (current == null) {
        DOUBLE$result = 0.0;
        break DOUBLE$break;
      }
      if (Kotlin.isNumber(current)) {
        DOUBLE$result = numberToDouble(current);
        break DOUBLE$break;
      }
      if (typeof current === 'string') {
        try {
          var number = toDouble(current);
          DOUBLE$result = number;
          break DOUBLE$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            DOUBLE$result = 0.0;
            break DOUBLE$break;
          }
           else
            throw e;
        }
      }
      DOUBLE$result = 0.0;
    }
     while (false);
    var T = DOUBLE$result + this.game.gameValue.playingTime;
    SystemConfigure$Companion_getInstance().SetDouble_io5o9c$('PlayingTimeForAds', T);
    var K = SystemConfigure$Companion_getInstance().GetInteger_bm4lxs$('PlayingCountForAds', 0) + 1 | 0;
    SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('PlayingCountForAds', K);
    var playAds = false;
    if (K >= 4 || (K >= 3 && T > 60) || (K >= 2 && T > 90)) {
      playAds = true;
    }
    if (playAds === true) {
      SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('AdsShowing', 1);
      if (AppController$Companion_getInstance().shared().showInterstitial_y8twos$(GameOverView$afterAttached$lambda(this)) === false) {
        this.drawScreen();
      }
       else {
        SystemConfigure$Companion_getInstance().SetDouble_io5o9c$('PlayingTimeForAds', 0.0);
        SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('PlayingCountForAds', 0);
      }
    }
     else {
      this.drawScreen();
    }
  };
  function GameOverView$drawScreen$lambda$lambda(closure$star, closure$width, closure$amount) {
    return function () {
      var tmp$ = closure$star;
      var value = closure$width.v;
      var STRING$result;
      STRING$break: do {
        if (Kotlin.isNumber(value)) {
          STRING$result = value.toString();
          break STRING$break;
        }
         else if (typeof value === 'string') {
          STRING$result = value;
          break STRING$break;
        }
         else if (typeof value === 'boolean') {
          STRING$result = value.toString();
          break STRING$break;
        }
         else if (Kotlin.isChar(value)) {
          STRING$result = value.toString();
          break STRING$break;
        }
        STRING$result = '';
      }
       while (false);
      tmp$.addText_r4v59z$('[image Resource/UI/IconStar ' + STRING$result + '] ' + formatted(closure$amount));
      return Unit;
    };
  }
  function GameOverView$drawScreen$lambda(closure$currentStar, closure$star, closure$width) {
    return function (info) {
      var amount = StoreManager$Companion_getInstance().shared().GetStarAmount();
      if (closure$currentStar.v !== amount) {
        closure$currentStar.v = amount;
        closure$star.clearText_gam257$(void 0, GameOverView$drawScreen$lambda$lambda(closure$star, closure$width, amount));
      }
      return true;
    };
  }
  GameOverView.prototype.drawScreen = function () {
    var tmp$;
    this.bannerOffset = 0.0;
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
      this.bannerOffset = 0.0;
    }
     else {
      if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
        if (AppController$Companion_getInstance().shared().isBannerReady() === true) {
          AppController$Companion_getInstance().shared().showAds_6taknv$(true);
          this.bannerOffset = AppController$Companion_getInstance().shared().getAdsHeight() / this.sizeScale.yRatio;
        }
      }
    }
    HAL$Companion_getInstance().shared().SetTitle_61zpoe$('');
    HAL$Companion_getInstance().shared().changeFPS_za3lpa$(30);
    HAL$Companion_getInstance().shared().SetBackgroundColor_qt1dr2$(28, 28, 28);
    (tmp$ = this.screen) != null ? (tmp$.isDrawTouchMark = true) : null;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var value = SceneLayer$spaceDeep_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    this.createSprite_591x4d$(160.0, 240.0, FLOAT$result, 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, false);
    this.currentCamera = Camera$Companion_getInstance().copy_s6wt6e$(this.cameraPreset[0]);
    this.gameScore = this.game.gameValue.score;
    if (this.game.gameValue.playingTime < this.game.gameConfigure.minimumSecondsForSPS) {
      this.game.gameValue.playingTime = this.game.gameConfigure.minimumSecondsForSPS;
    }
    if (this.game.gameValue.playingTime > 0.0 && this.game.gameValue.score > 0) {
      var tmp$_0 = this.game.gameValue.score;
      var value_0 = this.game.gameValue.playingTime;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var value_1 = tmp$_0 / FLOAT$result_0;
      var INT$result;
      INT$break: do {
        if (value_1 == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          INT$result = numberToInt(value_1);
          break INT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toInt_0(value_1);
            INT$result = number_1;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      this.scorePerSecond = INT$result;
    }
     else {
      this.scorePerSecond = 0;
    }
    var additionalScore = this.game.gameValue.clearedObstacleSum * 5000 | 0;
    if (this.game.gameConfigure.checkPerfectPlay === true && this.game.gameValue.perfectPlay === true) {
      var value_2 = this.gameScore;
      var DOUBLE$result;
      DOUBLE$break: do {
        if (value_2 == null) {
          DOUBLE$result = 0.0;
          break DOUBLE$break;
        }
        if (Kotlin.isNumber(value_2)) {
          DOUBLE$result = numberToDouble(value_2);
          break DOUBLE$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            DOUBLE$result = number_2;
            break DOUBLE$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              DOUBLE$result = 0.0;
              break DOUBLE$break;
            }
             else
              throw e;
          }
        }
        DOUBLE$result = 0.0;
      }
       while (false);
      var value_3 = DOUBLE$result * 0.2;
      var INT$result_0;
      INT$break: do {
        if (value_3 == null) {
          INT$result_0 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_3)) {
          INT$result_0 = numberToInt(value_3);
          break INT$break;
        }
        if (typeof value_3 === 'string') {
          try {
            var number_3 = toInt_0(value_3);
            INT$result_0 = number_3;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_0 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_0 = 0;
      }
       while (false);
      this.bonusScore = INT$result_0;
      this.game.gameValue.score = this.gameScore + this.bonusScore | 0;
      this.perfectPlay = true;
      this.currentCamera = Camera$Companion_getInstance().copy_s6wt6e$(this.cameraPreset[1]);
    }
     else if (this.game.GetPlayerRecord().GetHighScore() < (this.game.gameValue.score + additionalScore | 0)) {
      this.newRecord = true;
      this.currentCamera = Camera$Companion_getInstance().copy_s6wt6e$(this.cameraPreset[1]);
    }
    this.createMainScore();
    this.particleManager.SetCamera_s6wt6e$(this.currentCamera);
    var performance = SystemConfigure$Companion_getInstance().GetPerformance();
    var tmp$_1 = this.particleManager;
    var value_4 = 200 * performance;
    var INT$result_1;
    INT$break: do {
      if (value_4 == null) {
        INT$result_1 = 0;
        break INT$break;
      }
      if (Kotlin.isNumber(value_4)) {
        INT$result_1 = numberToInt(value_4);
        break INT$break;
      }
      if (typeof value_4 === 'string') {
        try {
          var number_4 = toInt_0(value_4);
          INT$result_1 = number_4;
          break INT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            INT$result_1 = 0;
            break INT$break;
          }
           else
            throw e;
        }
      }
      INT$result_1 = 0;
    }
     while (false);
    tmp$_1.SetMaxParticle_za3lpa$(INT$result_1);
    this.fireworkManager = FireworkManager_init(this.particleManager);
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    var width = {v: 20.0};
    var fontSize = 24.0;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      width.v = 40.0;
      fontSize = 32.0;
    }
    this.SetFontName_61zpoe$('Number/');
    this.SetFontSize_mx4ult$(fontSize);
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    var star = this.createTextArea_pvsv9g$(310.0, 5.0 + this.bannerOffset, void 0, 320.0, 0.0, 0.0, 0.5, 1.0);
    star.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    star.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    var value_5 = width.v;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value_5)) {
        STRING$result = value_5.toString();
        break STRING$break;
      }
       else if (typeof value_5 === 'string') {
        STRING$result = value_5;
        break STRING$break;
      }
       else if (typeof value_5 === 'boolean') {
        STRING$result = value_5.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value_5)) {
        STRING$result = value_5.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    star.addText_r4v59z$('[image Resource/UI/IconStar ' + STRING$result + '] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      var currentStar = {v: StoreManager$Companion_getInstance().shared().GetStarAmount()};
      this.createAction_xcdeti$('Sync Watchdog', void 0, void 0, void 0, void 0, 0.5, void 0, GameOverView$drawScreen$lambda(currentStar, star, width));
    }
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    var current = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$LAST_PLAYED_MODE_getInstance(), void 0, 'Beginner');
    switch (current) {
      case 'Beginner':
        this.createSprite_9wuqyc$(5.0, 5.0 + this.bannerOffset, void 0, 'Resource/UI/IconBeginner', 50.0);
        break;
      case 'Classic':
        this.createSprite_9wuqyc$(5.0, 5.0 + this.bannerOffset, void 0, 'Resource/UI/IconClassic', 50.0);
        break;
      case 'Timeless':
        this.createSprite_9wuqyc$(5.0, 5.0 + this.bannerOffset, void 0, 'Resource/UI/IconInfection', 50.0);
        break;
      case 'Beginner6x6':
        this.createSprite_9wuqyc$(5.0, 5.0 + this.bannerOffset, void 0, 'Resource/UI/IconBeginner6x6', 50.0);
        break;
      case 'Classic6x6':
        this.createSprite_9wuqyc$(5.0, 5.0 + this.bannerOffset, void 0, 'Resource/UI/IconClassic6x6', 50.0);
        break;
      case 'Timeless6x6':
        this.createSprite_9wuqyc$(5.0, 5.0 + this.bannerOffset, void 0, 'Resource/UI/IconInfection6x6', 50.0);
        break;
    }
    if (AppController$Companion_getInstance().shared().isDesktop() === true) {
      this.showPromotionMenu();
    }
    var playCount = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$PLAY_COUNT_getInstance(), void 0, 0);
    DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$PLAY_COUNT_getInstance(), void 0, playCount + 1 | 0);
  };
  GameOverView.prototype.beforeDetached = function () {
    var tmp$;
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
      AppController$Companion_getInstance().shared().showAds_6taknv$(false);
    }
    (tmp$ = this.screen) != null ? (tmp$.removeAction_81ngrp$('Firework Effect'), Unit) : null;
    this.particleManager.clearParticlePool();
  };
  GameOverView.prototype.update_mx4ult$ = function (elapsed) {
    this.particleManager.updateObject_mx4ult$(elapsed);
    this.particleManager.projection_1s1xds$(this.size, Position_init(0.0, 0 * this.sizeScale.yRatio));
    View.prototype.update_mx4ult$.call(this, elapsed);
  };
  function GameOverView$resume$lambda(it) {
    SystemConfigure$Companion_getInstance().SetDouble_io5o9c$('PlayingTimeForAds', 0.0);
    SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('PlayingCountForAds', 0);
    return Unit;
  }
  GameOverView.prototype.resume = function () {
    View.prototype.resume.call(this);
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
      return;
    }
    if (SystemConfigure$Companion_getInstance().GetInteger_bm4lxs$('PreventAds', 0) === 0) {
      if (SystemConfigure$Companion_getInstance().GetInteger_bm4lxs$('AdsShowing') === 0) {
        SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('AdsShowing', 1);
        AppController$Companion_getInstance().shared().showInterstitial_y8twos$(GameOverView$resume$lambda);
      }
       else {
        SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('AdsShowing', 0);
      }
    }
  };
  function GameOverView$showPromotionMenu$lambda(message) {
    if (message.event === Event$button_RELEASE_getInstance()) {
      window.open('https://itunes.apple.com/app/samsara-stones-of-eternity/id1196258279', '_blank');
      return false;
    }
    return true;
  }
  function GameOverView$showPromotionMenu$lambda_0(message) {
    if (message.event === Event$button_RELEASE_getInstance()) {
      window.open('https://play.google.com/store/apps/details?id=com.blindcatstudio.samsara', '_blank');
      return false;
    }
    return true;
  }
  GameOverView.prototype.showPromotionMenu = function () {
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    this.createButton_ix8ej2$(40.0, 340.0, SceneLayer$parent_getInstance().value, void 0, void 0, 100.0, -1.0, void 0, ['Resource/UI/AppStoreBadge'], void 0, void 0, void 0, true, GameOverView$showPromotionMenu$lambda);
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    this.createButton_ix8ej2$(280.0, 340.0, SceneLayer$parent_getInstance().value, void 0, void 0, 100.0, -1.0, void 0, ['Resource/UI/google-play-badge'], void 0, void 0, void 0, true, GameOverView$showPromotionMenu$lambda_0);
  };
  function GameOverView$createMainScore$lambda$lambda(this$GameOverView) {
    return function () {
      this$GameOverView.processGhost();
      return Unit;
    };
  }
  function GameOverView$createMainScore$lambda$lambda_0(this$GameOverView) {
    return function () {
      var tmp$;
      this$GameOverView.game.GetPlayerRecord().SetHighScore_za3lpa$(this$GameOverView.game.gameValue.score);
      this$GameOverView.game.GetPlayerRecord().SaveHighScore_3uxocb$(null);
      var pos = 145.0;
      if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
        pos = 130.0;
      }
      if (this$GameOverView.game.gameConfigure.width === 3) {
        pos = 105.0;
      }
      this$GameOverView.SetFontName_61zpoe$('MENU_/');
      var high = this$GameOverView.createLabel_17tgk7$(160.0, pos + this$GameOverView.heightOffset1 + this$GameOverView.bannerOffset, void 0, local('MENU_53'));
      high.SetSize_dleff0$(240.0 * this$GameOverView.sizeScale.xRatio, 20.0 * this$GameOverView.sizeScale.yRatio);
      high.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      high.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      high.SetColor_vnjrmz$(Color_init('F3C746'));
      high.SetBlendFactor_mx4ult$(1.0);
      var info = Kotlin.isType(tmp$ = this$GameOverView.findChildByName_3m52m6$('High Score Line'), TextArea) ? tmp$ : null;
      if (info != null) {
        info.clearText_gam257$();
        info.addText_r4v59z$('[Color yellow][Font]' + local('MENU_30') + '[Color]: [Font Number/][Color yellow]' + formatted(this$GameOverView.game.gameValue.score));
      }
      this$GameOverView.fireworkEffect();
      SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this$GameOverView.screen), 'NewRecordBGM', 100.0, 0.5);
      this$GameOverView.showMenu();
      return Unit;
    };
  }
  function GameOverView$createMainScore$lambda$lambda_1(this$GameOverView) {
    return function () {
      var tmp$;
      var view = this$GameOverView.menuItem(0, true, null);
      (tmp$ = this$GameOverView.screen) != null ? (tmp$.presentView_xl35ob$(ensureNotNull(view)), Unit) : null;
      return Unit;
    };
  }
  function GameOverView$createMainScore$lambda(this$GameOverView, closure$fontSize, closure$scoreLabel, closure$targetScore, closure$motion, closure$currentScore) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
      if (info.count === 1) {
        var y = 40.0;
        var number = formatted(this$GameOverView.game.gameValue.score);
        if (number.length > 5) {
          var tmp$_7 = closure$fontSize;
          var tmp$_8 = closure$fontSize.v * this$GameOverView.sizeScale.yRatio;
          var value = number.length - 5 | 0;
          var FLOAT$result;
          FLOAT$break: do {
            if (value == null) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(value)) {
              FLOAT$result = numberToDouble(value);
              break FLOAT$break;
            }
            if (typeof value === 'string') {
              try {
                var number_0 = toDouble(value);
                FLOAT$result = number_0;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result = 0.0;
          }
           while (false);
          var tmp$_9 = FLOAT$result;
          var FLOAT$result_0;
          FLOAT$break: do {
            if (25 == null) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
            if (Kotlin.isNumber(25)) {
              FLOAT$result_0 = numberToDouble(25);
              break FLOAT$break;
            }
            if (typeof 25 === 'string') {
              try {
                var number_1 = toDouble(25);
                FLOAT$result_0 = number_1;
                break FLOAT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  FLOAT$result_0 = 0.0;
                  break FLOAT$break;
                }
                 else
                  throw e;
              }
            }
            FLOAT$result_0 = 0.0;
          }
           while (false);
          tmp$_7.v = tmp$_8 * (1.0 - tmp$_9 / FLOAT$result_0);
        }
         else {
          closure$fontSize.v = closure$fontSize.v * this$GameOverView.sizeScale.yRatio;
        }
        this$GameOverView.SetFontSize_mx4ult$(closure$fontSize.v);
        this$GameOverView.SetFontName_61zpoe$('BigScore/');
        closure$scoreLabel.v = this$GameOverView.createLabel_17tgk7$(160.0, y + this$GameOverView.heightOffset1 + this$GameOverView.bannerOffset, SceneLayer$uiBottom_getInstance(), '0', null, false, null, null, false);
        (tmp$ = closure$scoreLabel.v) != null ? (tmp$.SetSize_dleff0$(-1.0, closure$fontSize.v), Unit) : null;
        (tmp$_0 = closure$scoreLabel.v) != null ? (tmp$_0.SetColor_vnjrmz$(Color$Companion_getInstance().puzzleYellow_mx4ult$()), Unit) : null;
        (tmp$_1 = closure$scoreLabel.v) != null ? (tmp$_1.SetBlendFactor_mx4ult$(1.0), Unit) : null;
        this$GameOverView.showRecord();
        return true;
      }
      if (closure$targetScore.v !== this$GameOverView.game.gameValue.score) {
        closure$targetScore.v = this$GameOverView.game.gameValue.score;
        var tmp$_10 = closure$motion;
        var tmp$_11 = void 0;
        var tmp$_12 = void 0;
        var value_0 = closure$currentScore.v;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_1 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_2 = toDouble(value_0);
              FLOAT$result_1 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        tmp$_10.reset_y2kzbl$(tmp$_11, tmp$_12, FLOAT$result_1);
        var tmp$_13 = closure$motion;
        var value_1 = closure$targetScore.v;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_2 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_3 = toDouble(value_1);
              FLOAT$result_2 = number_3;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        tmp$_13.SetTarget_nfvrp9$(FLOAT$result_2, -50.0, 1.0, void 0, -1.0);
        if (this$GameOverView.step === 0) {
          SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('score');
        }
         else {
          SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('ghostscore');
        }
      }
      if (closure$currentScore.v < closure$targetScore.v) {
        var tmp$_14 = closure$currentScore;
        var value_2 = closure$motion.update_mx4ult$(info.elapsed);
        var INT$result;
        INT$break: do {
          if (value_2 == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_2)) {
            INT$result = numberToInt(value_2);
            break INT$break;
          }
          if (typeof value_2 === 'string') {
            try {
              var number_4 = toInt_0(value_2);
              INT$result = number_4;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        tmp$_14.v = INT$result;
        if (closure$currentScore.v > closure$targetScore.v) {
          closure$currentScore.v = closure$targetScore.v;
        }
        (tmp$_2 = closure$scoreLabel.v) != null ? (tmp$_2.SetText_61zpoe$(formatted(closure$currentScore.v)), Unit) : null;
        (tmp$_3 = closure$scoreLabel.v) != null ? (tmp$_3.SetSize_dleff0$(-1.0, closure$fontSize.v), Unit) : null;
      }
      if (closure$currentScore.v === closure$targetScore.v) {
        switch (this$GameOverView.step) {
          case 0:
            if (this$GameOverView.game.gameConfigure.obstacleMaximumNumber === 0) {
              this$GameOverView.step = 3;
            }
             else {
              this$GameOverView.step = 1;
              (tmp$_4 = this$GameOverView.screen) != null ? (tmp$_4.actionDelay_ab0iom$(0.5, void 0, GameOverView$createMainScore$lambda$lambda(this$GameOverView)), Unit) : null;
            }

            break;
          case 1:
            break;
          default:if (this$GameOverView.game.gameConfigure.showSPS === true) {
              var tmp$_15 = GameCenterManager$Companion_getInstance().shared();
              var tmp$_16 = this$GameOverView.game.gameConfigure.modeString;
              var value_3 = this$GameOverView.scorePerSecond;
              var INT64$result;
              INT64$break: do {
                if (Kotlin.isNumber(value_3)) {
                  INT64$result = numberToLong(value_3);
                  break INT64$break;
                }
                if (typeof value_3 === 'string') {
                  INT64$result = toLong(value_3);
                  break INT64$break;
                }
                INT64$result = Kotlin.Long.ZERO;
              }
               while (false);
              tmp$_15.submitSPS_4ipezg$(tmp$_16, INT64$result, '0');
            }

            var tmp$_17 = GameCenterManager$Companion_getInstance().shared();
            var tmp$_18 = this$GameOverView.game.gameConfigure.modeString;
            var value_4 = this$GameOverView.game.gameValue.score;
            var INT64$result_0;
            INT64$break: do {
              if (Kotlin.isNumber(value_4)) {
                INT64$result_0 = numberToLong(value_4);
                break INT64$break;
              }
              if (typeof value_4 === 'string') {
                INT64$result_0 = toLong(value_4);
                break INT64$break;
              }
              INT64$result_0 = Kotlin.Long.ZERO;
            }
             while (false);
            tmp$_17.submitScore_4ipezg$(tmp$_18, INT64$result_0, '0');
            if (this$GameOverView.newRecord === true) {
              (tmp$_5 = this$GameOverView.screen) != null ? (tmp$_5.actionDelay_ab0iom$(0.5, void 0, GameOverView$createMainScore$lambda$lambda_0(this$GameOverView)), Unit) : null;
            }
             else {
              this$GameOverView.createBackgroundEffect();
              SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this$GameOverView.screen), 'ResultBGM', 100.0, 0.5);
              this$GameOverView.showMenu();
            }

            this$GameOverView.checkAchievementComplete();
            if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Auto Play'), 'true')) {
              (tmp$_6 = this$GameOverView.screen) != null ? (tmp$_6.actionDelay_ab0iom$(2.0, void 0, GameOverView$createMainScore$lambda$lambda_1(this$GameOverView)), Unit) : null;
            }

            return false;
        }
      }
      return true;
    };
  }
  GameOverView.prototype.createMainScore = function () {
    var scoreLabel = {v: null};
    var fontScale = 0.65;
    var currentScore = {v: 0};
    var targetScore = {v: 0};
    this.SetFontName_61zpoe$();
    this.SetFontSize_mx4ult$(24.0);
    this.SetFontHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.SetFontVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    var fontSize = {v: 50.0};
    var motion = new Motion();
    this.createAction_xcdeti$('Main Score', void 0, void 0, void 0, void 0, void 0, void 0, GameOverView$createMainScore$lambda(this, fontSize, scoreLabel, targetScore, motion, currentScore));
  };
  function GameOverView$processGhost$lambda$lambda(this$GameOverView, closure$additionalScore) {
    return function () {
      var tmp$;
      tmp$ = this$GameOverView.game.gameValue;
      tmp$.score = tmp$.score + closure$additionalScore | 0;
      this$GameOverView.step = this$GameOverView.step + 1 | 0;
      return Unit;
    };
  }
  function GameOverView$processGhost$lambda(this$GameOverView, closure$additionalScore) {
    return function () {
      var tmp$;
      (tmp$ = this$GameOverView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.5, void 0, GameOverView$processGhost$lambda$lambda(this$GameOverView, closure$additionalScore)), Unit) : null;
      return Unit;
    };
  }
  GameOverView.prototype.processGhost = function () {
    this.SetFontSize_mx4ult$(30.0);
    this.SetFontName_61zpoe$('Number/');
    var info = this.createTextArea_pvsv9g$(160.0, 80.0 + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0, void 0, 0.5);
    info.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    info.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var ghostHigh = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$GHOST_REMOVAL_getInstance());
    if (ghostHigh < this.game.gameValue.clearedObstacleSum) {
      DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$GHOST_REMOVAL_getInstance(), void 0, this.game.gameValue.clearedObstacleSum);
    }
    var additionalScore = this.game.gameValue.clearedObstacleSum * 5000 | 0;
    info.addText_r4v59z$('[Image Ghost_white 55][Scale 0.6]X[Scale] [Color 35BEC1]' + formatted(this.game.gameValue.clearedObstacleSum) + '[Color] = [Color 35BEC1]' + formatted(additionalScore), void 0, GameOverView$processGhost$lambda(this, additionalScore));
    info.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
  };
  function GameOverView$processStar$lambda$lambda(this$GameOverView) {
    return function () {
      this$GameOverView.step = this$GameOverView.step + 1 | 0;
      return Unit;
    };
  }
  function GameOverView$processStar$lambda(this$GameOverView) {
    return function () {
      var tmp$;
      (tmp$ = this$GameOverView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.5, void 0, GameOverView$processStar$lambda$lambda(this$GameOverView)), Unit) : null;
      return Unit;
    };
  }
  GameOverView.prototype.processStar = function () {
    var fontSize = 30.0;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      fontSize = 40.0;
    }
    this.SetFontSize_mx4ult$(fontSize);
    this.SetFontName_61zpoe$('Number/');
    var star = this.createTextArea_pvsv9g$(160.0, 115.0 + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0, void 0, 0.5);
    var value = this.game.gameValue.earnedStar;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    star.addText_r4v59z$('[Image Resource/UI/IconStar 35] [Scale 0.6]X[Scale] ' + STRING$result, 0.5, GameOverView$processStar$lambda(this));
    star.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
  };
  GameOverView.prototype.showRecord = function () {
    var detailRecord = 160.0;
    var lineGap = 15.0;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      this.SetFontSize_mx4ult$(40.0);
      lineGap = 30.0;
    }
     else {
      this.SetFontSize_mx4ult$(16.0);
    }
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.SetFontName_61zpoe$('MENU_/');
    var info = this.createTextArea_pvsv9g$(160.0, detailRecord + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0);
    info.addText_r4v59z$('[Font]' + local('MENU_30') + ': [Font Number/][Color yellow]' + formatted(this.game.GetPlayerRecord().GetHighScore()));
    info.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    info.SetName_61zpoe$('High Score Line');
    var info2 = this.createTextArea_pvsv9g$(160.0, detailRecord + lineGap + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0);
    if (this.game.GetPlayerRecord().GetMaxCombo() < this.game.gameValue.maxComboOnGame) {
      this.game.GetPlayerRecord().SetMaxCombo_za3lpa$(this.game.gameValue.maxComboOnGame);
      this.game.GetPlayerRecord().SaveMaxCombo_3uxocb$(null);
      info2.addText_r4v59z$('[Font]' + local('MENU_31') + ': [Font Number/][Color yellow]' + formatted(this.game.gameValue.maxComboOnGame) + ' [Font](' + local('MENU_32') + ')');
    }
     else {
      info2.addText_r4v59z$('[Font]' + local('MENU_31') + ': [Font Number/]' + formatted(this.game.gameValue.maxComboOnGame) + ' [Font][Color yellow](' + local('MENU_33') + ' [Font Number/]' + formatted(this.game.GetPlayerRecord().GetMaxCombo()) + ')');
    }
    info2.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var info3 = this.createTextArea_pvsv9g$(160.0, detailRecord + lineGap * 2 + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0);
    if (this.game.GetPlayerRecord().GetMaxFever() < this.game.gameValue.maxFeverOnGame) {
      this.game.GetPlayerRecord().SetMaxFever_za3lpa$(this.game.gameValue.maxFeverOnGame);
      this.game.GetPlayerRecord().SaveMaxFever_3uxocb$(null);
      info3.addText_r4v59z$('[Font]' + local('MENU_34') + ': [Font Number/][Color yellow]' + formatted(this.game.gameValue.maxFeverOnGame) + ' [Font](' + local('MENU_35') + ')');
    }
     else {
      info3.addText_r4v59z$('[Font]' + local('MENU_34') + ': [Font Number/]' + formatted(this.game.gameValue.maxFeverOnGame) + ' [Font][Color yellow](' + local('MENU_36') + ' [Font Number/]' + formatted(this.game.GetPlayerRecord().GetMaxFever()) + ')');
    }
    info3.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    if (this.game.gameConfigure.showSPS === true) {
      var sps = this.createTextArea_pvsv9g$(160.0, lineGap * 3 + detailRecord + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0);
      if (this.game.GetPlayerRecord().GetMaxSPS() < this.scorePerSecond) {
        this.game.GetPlayerRecord().SetMaxSPS_za3lpa$(this.scorePerSecond);
        this.game.GetPlayerRecord().SaveMaxSPS_3uxocb$(null);
        sps.addText_r4v59z$('[Font]' + local('MENU_23') + ': [Font Number/][Color yellow]' + formatted(this.scorePerSecond) + ' [Font](' + local('MENU_35') + ')');
      }
       else {
        sps.addText_r4v59z$('[Font]' + local('MENU_23') + ': [Font Number/]' + formatted(this.scorePerSecond) + ' [Font][Color yellow](' + local('MENU_36') + ' [Font Number/]' + formatted(this.game.GetPlayerRecord().GetMaxSPS()) + ')');
      }
      sps.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    }
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
      var playCount = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$PLAY_COUNT_getInstance(), void 0, 1);
      var count = this.createTextArea_pvsv9g$(160.0, lineGap * 4 + detailRecord + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0);
      count.addText_r4v59z$('[Font]' + 'Count' + ': [Font Number/]' + formatted(playCount));
      count.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    }
    var star = this.createTextArea_pvsv9g$(160.0, detailRecord + lineGap * 5 + this.heightOffset1 + this.bannerOffset, SceneLayer$parent_getInstance(), 0.0, 0.0);
    var value = this.game.gameValue.earnedStar;
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (typeof value === 'string') {
        STRING$result = value;
        break STRING$break;
      }
       else if (typeof value === 'boolean') {
        STRING$result = value.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(value)) {
        STRING$result = value.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    star.addText_r4v59z$('[Image Resource/UI/IconStar 25] X [Scale 1.5][Font Number/][Color 35BEC1]' + STRING$result);
    star.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
  };
  function GameOverView$showMenu$lambda(this$GameOverView) {
    return function (code) {
      var tmp$, tmp$_0;
      if (code === TouchListener$Code_getInstance().ESCAPE || code === TouchListener$Code_getInstance().BACK) {
        (tmp$ = this$GameOverView.menu) != null ? (tmp$.click_za3lpa$(2), Unit) : null;
        return true;
      }
       else if (code === TouchListener$Code_getInstance().ENTER) {
        (tmp$_0 = this$GameOverView.menu) != null ? (tmp$_0.click_za3lpa$(0), Unit) : null;
      }
      return false;
    };
  }
  GameOverView.prototype.showMenu = function () {
    var tmp$, tmp$_0;
    var tileSize = 50.0;
    var yMargin = 180.0;
    var xGap = 40.0;
    var item0 = MenuItem_init('Resource/UI/IconRestart', void 0, void 0, void 0, void 0, void 0, this.menuItem);
    var item1 = MenuItem_init('Resource/UI/IconHome', void 0, void 0, void 0, void 0, void 0, this.menuItem);
    var itemShare = null;
    var needStar = this.game.gameConfigure.needStar;
    if (needStar > 0) {
      item0.title = '[font Number/][Image Resource/UI/IconStar 12] [Scale 0.5]X[Scale 0.8] ' + needStar.toString();
    }
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      tileSize = 100.0;
      yMargin = 170.0;
      xGap = 0.0;
    }
     else if (AppController$Companion_getInstance().shared().isDesktop() === false) {
      itemShare = MenuItem_init('Resource/UI/IconShare', void 0, void 0, void 0, void 0, void 0, this.menuItem);
    }
    this.menu = Menu_init(this, this.GetSize(), Size_init(3.0, 1.0), tileSize, void 0, [item0, itemShare, item1]);
    (tmp$ = this.menu) != null ? (tmp$.prepare_1isvtk$(yMargin, xGap), Unit) : null;
    this.SetPlayButton();
    (tmp$_0 = this.screen) != null ? (tmp$_0.addKeydownListener_5ol7k9$('Back Key', GameOverView$showMenu$lambda(this)), Unit) : null;
  };
  GameOverView.prototype.SetPlayButton = function () {
    var tmp$, tmp$_0;
    if (StoreManager$Companion_getInstance().shared().GetStarAmount() < this.game.gameConfigure.needStar) {
      (tmp$ = this.menu) != null ? (tmp$.SetEnable_fzusl$(0, false), Unit) : null;
    }
     else {
      (tmp$_0 = this.menu) != null ? (tmp$_0.SetEnable_fzusl$(0, true), Unit) : null;
    }
  };
  GameOverView.prototype.hideButton = function () {
    var tmp$;
    (tmp$ = this.menu) != null ? (tmp$.hide(), Unit) : null;
  };
  GameOverView.prototype.showButton = function () {
    var tmp$;
    (tmp$ = this.menu) != null ? (tmp$.show(), Unit) : null;
  };
  GameOverView.prototype.checkAchievementComplete = function () {
    if (this.game.gameValue.clearedObstacleSum >= 50) {
      PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$GHOST_50_getInstance(), 100.0);
    }
    if (this.game.gameValue.clearedObstacleSum >= 100.0) {
      PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$GHOST_100_getInstance(), 100.0);
    }
    if (this.game.gameValue.clearedObstacleSum >= 150) {
      PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$GHOST_150_getInstance(), 100.0);
    }
    if (this.game.gameValue.clearedObstacleSum >= 200) {
      PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$GHOST_200_getInstance(), 100.0);
    }
    if (equals(this.game.gameConfigure.modeString, 'Beginner')) {
      if (this.game.gameValue.maxComboOnGame >= 5) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_COMBOS_5_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 10) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_COMBOS_10_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 20) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_COMBOS_20_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 50) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_COMBOS_50_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 100.0) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_COMBOS_100_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 150) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_COMBOS_150_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 50000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_50K_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 100000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_100K_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 200000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_200K_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 1000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_1M_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 2000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_2M_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 3000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_3M_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 1) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_FEVER_1_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 3) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_FEVER_3_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 5) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_FEVER_5_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 10) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_FEVER_10_getInstance(), 100.0);
      }
      if (this.game.gameValue.clearBlockCount[9] >= 1) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER_CLEAR_9_getInstance(), 100.0);
      }
    }
     else if (equals(this.game.gameConfigure.modeString, 'Classic')) {
      if (this.game.gameValue.maxComboOnGame >= 10) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_COMBOS_10_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 30) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_COMBOS_30_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 1) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_FEVER_1_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 5) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_FEVER_5_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 100000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_100K_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 300000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_300K_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 1500000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_1500K_getInstance(), 100.0);
      }
      if (this.game.gameValue.clearBlockCount[9] >= 1) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC_CLEAR_9_getInstance(), 100.0);
      }
    }
     else if (equals(this.game.gameConfigure.modeString, 'Timeless')) {
      if (this.game.gameValue.maxComboOnGame >= 50) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS_COMBOS_50_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 80) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS_COMBOS_80_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 100.0) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS_COMBOS_100_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 10) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS_FEVER_10_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 1000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS_1M_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 2000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS_2M_getInstance(), 100.0);
      }
    }
     else if (equals(this.game.gameConfigure.modeString, 'Hardcore')) {
      if (this.game.gameValue.maxComboOnGame >= 60) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$HARDCORE_COMBOS_60_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxFeverOnGame >= 10) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$HARDCORE_FEVER_10_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 1000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$HARDCORE_1M_getInstance(), 100.0);
      }
    }
     else if (equals(this.game.gameConfigure.modeString, 'Beginner6x6')) {
      if (this.game.gameValue.maxComboOnGame >= 30) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER6x6_COMBOS_30_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 50) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER6x6_COMBOS_50_getInstance(), 100.0);
      }
      if (this.game.gameValue.maxComboOnGame >= 100.0) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER6x6_COMBOS_100_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 500000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER6x6_500K_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 1000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$BEGINNER6x6_1M_getInstance(), 100.0);
      }
    }
     else if (equals(this.game.gameConfigure.modeString, 'Classic6x6')) {
      if (this.game.gameValue.maxComboOnGame >= 50) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC6x6_COMBOS_50_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 1000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC6x6_1M_getInstance(), 100.0);
      }
    }
     else if (equals(this.game.gameConfigure.modeString, 'Timeless6x6')) {
      if (this.game.gameValue.maxComboOnGame >= 100.0) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS6x6_COMBOS_100_getInstance(), 100.0);
      }
      if (this.game.gameValue.score >= 2000000) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS6x6_2M_getInstance(), 100.0);
      }
    }
    if (PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$TIMELESS_MODE_OPEN_getInstance()) !== 100.0) {
      if (PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$CLASSIC_COMBOS_30_getInstance()) === 100.0 && PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$CLASSIC_300K_getInstance()) === 100.0) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS_MODE_OPEN_getInstance(), 100.0);
      }
    }
    if (PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$CLASSIC6x6_MODE_OPEN_getInstance()) !== 100.0) {
      if (PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$GHOST_50_getInstance()) === 100.0 && PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$BEGINNER6x6_COMBOS_30_getInstance()) === 100.0) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$CLASSIC6x6_MODE_OPEN_getInstance(), 100.0);
      }
    }
    if (PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$TIMELESS6x6_MODE_OPEN_getInstance()) !== 100.0) {
      if (PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$GHOST_100_getInstance()) === 100.0 && PlayerRecordManager$Companion_getInstance().shared().GetPercentComplete_chhr4e$(DataKey$CLASSIC6x6_COMBOS_50_getInstance()) === 100.0) {
        PlayerRecordManager$Companion_getInstance().shared().SetPercentComplete_gspc9z$(DataKey$TIMELESS6x6_MODE_OPEN_getInstance(), 100.0);
      }
    }
  };
  function GameOverView$createBackgroundEffect$lambda(this$GameOverView, closure$originalColor, closure$colorMorphElapsed, closure$prevColor, closure$targetColor, closure$currentColor, closure$feverColorRotation, closure$feverColor, closure$colorIndex, closure$prevCreateTime) {
    return function (info) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (info.elapsed === 0.0) {
        (tmp$ = this$GameOverView.background) != null ? (tmp$.SetColor_vnjrmz$(closure$originalColor.v), Unit) : null;
        (tmp$_0 = this$GameOverView.background) != null ? (tmp$_0.SetBlendFactor_mx4ult$(0.0), Unit) : null;
        return false;
      }
      if (info.timeToLive !== -1.0 && info.age + 1 > info.timeToLive) {
        (tmp$_1 = this$GameOverView.background) != null ? (tmp$_1.SetBlendFactor_mx4ult$(ensureNotNull(this$GameOverView.background).GetBlendFactor() - info.elapsed), Unit) : null;
        return true;
      }
      closure$colorMorphElapsed.v += info.elapsed * 0.1;
      closure$currentColor.v = Color$Companion_getInstance().morphColor_u1nt5b$(closure$prevColor.v, closure$targetColor.v, closure$colorMorphElapsed.v);
      if (closure$currentColor.v.compare_3nzkge$(closure$targetColor.v) === true) {
        closure$feverColorRotation.v = closure$feverColorRotation.v + 1 | 0;
        if (closure$feverColorRotation.v >= closure$feverColor[closure$colorIndex].length) {
          closure$feverColorRotation.v = 0;
        }
        closure$prevColor.v = Color$Companion_getInstance().copy_3nzkge$(closure$targetColor.v);
        closure$targetColor.v = closure$feverColor[closure$colorIndex][closure$feverColorRotation.v];
        closure$colorMorphElapsed.v = 0.0;
      }
      (tmp$_2 = this$GameOverView.background) != null ? (tmp$_2.SetColor_vnjrmz$(closure$currentColor.v), Unit) : null;
      if (this$GameOverView.newRecord === false && this$GameOverView.perfectPlay === false) {
        if (info.age > closure$prevCreateTime.v + 0.25 && this$GameOverView.particleManager.GetTotalParticleCount() < 60) {
          this$GameOverView.createStar();
          closure$prevCreateTime.v = info.age;
        }
      }
      return true;
    };
  }
  GameOverView.prototype.createBackgroundEffect = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (this.game.quality < 1) {
      return;
    }
    if (this.background == null) {
      this.background = Kotlin.isType(tmp$ = this.findChildByName_3m52m6$('Background'), Sprite) ? tmp$ : null;
    }
    var feverColor = [[Color$Companion_getInstance().customDeepSpace4_mx4ult$(), Color$Companion_getInstance().customDeepSpace5_mx4ult$()]];
    var colorIndex = 0;
    var feverColorRotation = {v: 1};
    var originalColor = {v: null};
    var prevColor = {v: null};
    var currentColor = {v: null};
    var targetColor = {v: null};
    var colorMorphElapsed = {v: 0.0};
    originalColor.v = Color$Companion_getInstance().copy_3nzkge$(feverColor[colorIndex][0]);
    currentColor.v = feverColor[colorIndex][0];
    prevColor.v = Color$Companion_getInstance().copy_3nzkge$(originalColor.v);
    targetColor.v = feverColor[colorIndex][feverColorRotation.v];
    (tmp$_0 = this.background) != null ? (tmp$_0.SetBlendFactor_mx4ult$(1.0), Unit) : null;
    (tmp$_1 = this.background) != null ? (tmp$_1.SetColor_vnjrmz$(currentColor.v), Unit) : null;
    var prevCreateTime = {v: 0.0};
    this.createAction_xcdeti$('Background Effect', true, false, true, void 0, void 0, void 0, GameOverView$createBackgroundEffect$lambda(this, originalColor, colorMorphElapsed, prevColor, targetColor, currentColor, feverColorRotation, feverColor, colorIndex, prevCreateTime));
  };
  function GameOverView$createStarOld$lambda(obj, camera, elapsed) {
    if (obj.position.z > camera.position.z + camera.farMost) {
      return true;
    }
    return false;
  }
  GameOverView.prototype.createStarOld = function () {
    var tmp$;
    var color;
    switch (Random_getInstance().arc4random_uniform_za3lpa$(4)) {
      case 0:
        color = Color$Companion_getInstance().yellow_mx4ult$();
        break;
      case 1:
        color = Color$Companion_getInstance().strawberry_mx4ult$();
        break;
      case 2:
        color = Color$Companion_getInstance().sky_mx4ult$();
        break;
      default:color = Color$Companion_getInstance().white_mx4ult$();
        break;
    }
    var tmp$_0 = this.particleManager;
    var value = Random_getInstance().arc4random_uniform_za3lpa$(320);
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_1 = FLOAT$result - 160;
    var value_0 = Random_getInstance().arc4random_uniform_za3lpa$(480);
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var tmp$_2 = FLOAT$result_0 - 240;
    var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(10);
    var FLOAT$result_1;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_1 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_1 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_1 = toDouble(value_1);
          FLOAT$result_1 = number_1;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_1 = 0.0;
    }
     while (false);
    var obj = tmp$_0.createStar_2a19qk$(tmp$_1, tmp$_2, 0.0, FLOAT$result_1 + 30, 'Resource/UI/particle_circle', color);
    if ((tmp$ = obj != null ? obj.movement : null) != null) {
      var value_2 = Random_getInstance().arc4random_uniform_za3lpa$(50);
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_2 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_2 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      tmp$.z = 100.0 + FLOAT$result_2;
    }
    obj != null ? (obj.SetOriginalAlpha_mx4ult$(1.0), Unit) : null;
    obj != null ? (obj.keepDirection = true) : null;
    obj != null ? (obj.SetCallback_lnidq9$(GameOverView$createStarOld$lambda), Unit) : null;
  };
  function GameOverView$createStar$lambda(obj, camera, elapsed) {
    if (obj.position.z > camera.position.z + camera.farMost) {
      return true;
    }
    return false;
  }
  GameOverView.prototype.createStar = function () {
    var tmp$, tmp$_0;
    var number = Random_getInstance().arc4random_uniform_za3lpa$(10);
    if (number >= 4) {
      this.createStarOld();
      return;
    }
    var tmp$_1 = this.particleManager;
    var value = Random_getInstance().arc4random_uniform_za3lpa$(320);
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number_0 = toDouble(value);
          FLOAT$result = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_2 = FLOAT$result - 160;
    var value_0 = Random_getInstance().arc4random_uniform_za3lpa$(480);
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_1 = toDouble(value_0);
          FLOAT$result_0 = number_1;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    var tmp$_3 = FLOAT$result_0 - 240;
    var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(10);
    var FLOAT$result_1;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_1 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_1 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_2 = toDouble(value_1);
          FLOAT$result_1 = number_2;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_1 = 0.0;
    }
     while (false);
    var tmp$_4 = FLOAT$result_1 + 40;
    var tmp$_5 = AppController$Companion_getInstance().shared().GetCurrentBlockSetResource();
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(number)) {
        STRING$result = number.toString();
        break STRING$break;
      }
       else if (typeof number === 'string') {
        STRING$result = number;
        break STRING$break;
      }
       else if (typeof number === 'boolean') {
        STRING$result = number.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(number)) {
        STRING$result = number.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    var obj = tmp$_1.createStar_2a19qk$(tmp$_2, tmp$_3, 0.0, tmp$_4, tmp$_5 + STRING$result + '_normal');
    if ((tmp$ = obj != null ? obj.movement : null) != null) {
      var value_2 = Random_getInstance().arc4random_uniform_za3lpa$(50);
      var FLOAT$result_2;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_2 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_2 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_3 = toDouble(value_2);
            FLOAT$result_2 = number_3;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_2 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_2 = 0.0;
      }
       while (false);
      tmp$.z = 100.0 + FLOAT$result_2;
    }
    if ((tmp$_0 = obj != null ? obj.rotation : null) != null) {
      var value_3 = Random_getInstance().arc4random_uniform_za3lpa$(360);
      var FLOAT$result_3;
      FLOAT$break: do {
        if (value_3 == null) {
          FLOAT$result_3 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_3)) {
          FLOAT$result_3 = numberToDouble(value_3);
          break FLOAT$break;
        }
        if (typeof value_3 === 'string') {
          try {
            var number_4 = toDouble(value_3);
            FLOAT$result_3 = number_4;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_3 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_3 = 0.0;
      }
       while (false);
      tmp$_0.z = FLOAT$result_3 - 160;
    }
    obj != null ? (obj.SetOriginalAlpha_mx4ult$(1.0), Unit) : null;
    obj != null ? (obj.keepDirection = true) : null;
    obj != null ? (obj.SetCallback_lnidq9$(GameOverView$createStar$lambda), Unit) : null;
  };
  function GameOverView$fireworkEffect$lambda(this$GameOverView) {
    return function (info) {
      if (info.elapsed === 0.0) {
        return false;
      }
      var tmp$ = this$GameOverView.particleManager;
      var value = Random_getInstance().arc4random_uniform_za3lpa$(300);
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      var value_0 = INT$result - 150 | 0;
      var FLOAT$result;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var tmp$_0 = FLOAT$result;
      var value_1 = Random_getInstance().arc4random_uniform_za3lpa$(300);
      var INT$result_0;
      INT$break: do {
        if (value_1 == null) {
          INT$result_0 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_1)) {
          INT$result_0 = numberToInt(value_1);
          break INT$break;
        }
        if (typeof value_1 === 'string') {
          try {
            var number_1 = toInt_0(value_1);
            INT$result_0 = number_1;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_0 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_0 = 0;
      }
       while (false);
      var value_2 = INT$result_0 - 150 | 0;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_2 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_2)) {
          FLOAT$result_0 = numberToDouble(value_2);
          break FLOAT$break;
        }
        if (typeof value_2 === 'string') {
          try {
            var number_2 = toDouble(value_2);
            FLOAT$result_0 = number_2;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var tmp$_1 = FLOAT$result_0;
      var value_3 = Random_getInstance().arc4random_uniform_za3lpa$(50);
      var INT$result_1;
      INT$break: do {
        if (value_3 == null) {
          INT$result_1 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_3)) {
          INT$result_1 = numberToInt(value_3);
          break INT$break;
        }
        if (typeof value_3 === 'string') {
          try {
            var number_3 = toInt_0(value_3);
            INT$result_1 = number_3;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_1 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_1 = 0;
      }
       while (false);
      var value_4 = INT$result_1 + 50 | 0;
      var FLOAT$result_1;
      FLOAT$break: do {
        if (value_4 == null) {
          FLOAT$result_1 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_4)) {
          FLOAT$result_1 = numberToDouble(value_4);
          break FLOAT$break;
        }
        if (typeof value_4 === 'string') {
          try {
            var number_4 = toDouble(value_4);
            FLOAT$result_1 = number_4;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_1 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_1 = 0.0;
      }
       while (false);
      var particle = tmp$.createStar_2a19qk$(tmp$_0, tmp$_1, FLOAT$result_1, 50.0, 'Particle_white', void 0, void 0, void 0, true);
      if (particle != null) {
        particle.timeToLive = 0.0;
        var performance = SystemConfigure$Companion_getInstance().GetPerformance();
        var FLOAT$result_2;
        FLOAT$break: do {
          if (30 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(30)) {
            FLOAT$result_2 = numberToDouble(30);
            break FLOAT$break;
          }
          if (typeof 30 === 'string') {
            try {
              var number_5 = toDouble(30);
              FLOAT$result_2 = number_5;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        var value_5 = performance * FLOAT$result_2;
        var INT$result_2;
        INT$break: do {
          if (value_5 == null) {
            INT$result_2 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_5)) {
            INT$result_2 = numberToInt(value_5);
            break INT$break;
          }
          if (typeof value_5 === 'string') {
            try {
              var number_6 = toInt_0(value_5);
              INT$result_2 = number_6;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_2 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_2 = 0;
        }
         while (false);
        var amount = INT$result_2;
        if (amount > 100.0) {
          amount = 100;
        }
        var fireball = this$GameOverView.fireworkManager.createFirework_uq37hz$(void 0, amount, 0.0, 400.0, 1.0, 1.5, 100.0, 1.0, 2.0, 0.0, 1.5, void 0, void 0, 0);
        particle.addLocalVariables_bm4g0d$('Fireball', fireball);
        this$GameOverView.fireworkManager.explosion_xovnep$(particle);
        this$GameOverView.particleManager.removeObject_xovnep$(particle);
      }
      return true;
    };
  }
  GameOverView.prototype.fireworkEffect = function () {
    var tmp$;
    if (this.game.quality < 2) {
      return;
    }
    var cameraInitial = Camera_init_0(20.0, Position_init(0.0, 0.0, -300.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 100.0);
    this.particleManager.SetCamera_s6wt6e$(cameraInitial);
    (tmp$ = this.screen) != null ? (tmp$.createAction_xcdeti$('Firework Effect', void 0, void 0, void 0, void 0, 1.8, void 0, GameOverView$fireworkEffect$lambda(this)), Unit) : null;
  };
  function GameOverView$runCameraAngleX$lambda(closure$duration, closure$targetAngle, this$GameOverView, closure$callback, closure$motion, closure$base, closure$angle) {
    return function (info) {
      if (info.count === 1) {
        return true;
      }
      if (info.age >= closure$duration) {
        var delta = closure$targetAngle - this$GameOverView.currentCamera.direction.x;
        this$GameOverView.currentCamera.rotateX_8ca0d4$(delta, true);
        if (closure$callback != null) {
          ensureNotNull(closure$callback)();
        }
        return false;
      }
      var pos = closure$motion.update_mx4ult$(info.elapsed);
      pos *= -0.5;
      pos += 0.5;
      var target = closure$base + closure$angle.v * pos;
      this$GameOverView.currentCamera.rotateX_8ca0d4$(target - this$GameOverView.currentCamera.direction.x, true);
      return true;
    };
  }
  GameOverView.prototype.runCameraAngleX_gsqsg5$ = function (targetAngle, duration, accel, callback) {
    if (duration === void 0)
      duration = 0.5;
    if (accel === void 0)
      accel = -3.0;
    if (callback === void 0)
      callback = null;
    var angle = {v: 0.0};
    var base = this.currentCamera.direction.x;
    angle.v = targetAngle - this.currentCamera.direction.x;
    var motion = Wave_init_0(90.0, 1 / duration / 2);
    this.createAction_xcdeti$('Run Camera Angle X', true, void 0, true, void 0, void 0, void 0, GameOverView$runCameraAngleX$lambda(duration, targetAngle, this, callback, motion, base, angle));
  };
  function GameOverView$menuItem$lambda$lambda$lambda$lambda() {
    DataUtil$Companion_getInstance().SetInteger_rjan26$('PreventAds', void 0, 0);
    return Unit;
  }
  function GameOverView$menuItem$lambda$lambda$lambda(this$GameOverView) {
    return function () {
      var tmp$;
      this$GameOverView.showButton();
      (tmp$ = this$GameOverView.screen) != null ? (tmp$.actionDelay_ab0iom$(5.0, void 0, GameOverView$menuItem$lambda$lambda$lambda$lambda), Unit) : null;
      return Unit;
    };
  }
  function GameOverView$menuItem$lambda$lambda(closure$rect, closure$title, closure$sub, this$GameOverView) {
    return function () {
      var image = HAL$Companion_getInstance().shared().GetScreenshot_3fx80m$(closure$rect);
      closure$title.removeFromParent();
      closure$sub.removeFromParent();
      DataUtil$Companion_getInstance().SetInteger_rjan26$('PreventAds', void 0, 1);
      AppController$Companion_getInstance().shared().shareSocial_3yj0dh$(local('Beat my score!'), image, null, GameOverView$menuItem$lambda$lambda$lambda(this$GameOverView));
      return Unit;
    };
  }
  function GameOverView$menuItem$lambda(this$GameOverView) {
    return function (index, enable, name) {
      var tmp$;
      if (enable === false) {
        return null;
      }
      if (index === 0) {
        if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
          StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(this$GameOverView.game.gameConfigure.needStar);
        }
        var screen = this$GameOverView.screen;
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(screen), 'ResultBGM', 0.0, 0.5);
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(screen), 'NewRecordBGM', 0.0, 0.5);
        var game = Game_init(this$GameOverView.game.gameConfigure);
        var view = GameView_init(game);
        this$GameOverView.game.stop();
        this$GameOverView.game.deinitGame();
        return view;
      }
       else if (index === 1) {
        this$GameOverView.hideButton();
        var title = this$GameOverView.createSprite_591x4d$(160.0, 400.0, 0.0, 'Resource/UI/Title', 240.0, void 0, void 0, void 0, void 0, false);
        title.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        var sub = this$GameOverView.createSprite_9wuqyc$(160.0, 455.0, void 0, 'Resource/UI/SubTitle', 240.0, void 0, void 0, this$GameOverView.sizeScale);
        sub.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        sub.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        var rect = Rect_init(0.0, 0.0, this$GameOverView.GetSize().width, this$GameOverView.GetSize().height);
        (tmp$ = this$GameOverView.screen) != null ? (tmp$.actionDelay_ab0iom$(1.0, void 0, GameOverView$menuItem$lambda$lambda(rect, title, sub, this$GameOverView)), Unit) : null;
      }
       else if (index === 2) {
        var screen_0 = this$GameOverView.screen;
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(screen_0), 'ResultBGM', 0.0, 0.5);
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(screen_0), 'NewRecordBGM', 0.0, 0.5);
        this$GameOverView.game.stop();
        this$GameOverView.game.deinitGame();
        return new MainMenuView();
      }
      return null;
    };
  }
  GameOverView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameOverView',
    interfaces: [View]
  };
  function GameOverView_init(game, $this) {
    $this = $this || Object.create(GameOverView.prototype);
    View_init(void 0, void 0, void 0, $this);
    GameOverView.call($this);
    $this.game = game;
    return $this;
  }
  function GameView() {
    this.game = null;
    this.notice_ezkio8$_0 = this.notice_ezkio8$_0;
    this.pause_fseh8y$_0 = this.pause_fseh8y$_0;
    this.bottomHeight = 0.0;
  }
  Object.defineProperty(GameView.prototype, 'notice', {
    get: function () {
      if (this.notice_ezkio8$_0 == null)
        return throwUPAE('notice');
      return this.notice_ezkio8$_0;
    },
    set: function (notice) {
      this.notice_ezkio8$_0 = notice;
    }
  });
  Object.defineProperty(GameView.prototype, 'pause', {
    get: function () {
      if (this.pause_fseh8y$_0 == null)
        return throwUPAE('pause');
      return this.pause_fseh8y$_0;
    },
    set: function (pause) {
      this.pause_fseh8y$_0 = pause;
    }
  });
  GameView.prototype.moveToBackground = function () {
    if (this.game.initializeDone === false || equals(this.game.gameState.GetState(), '_init') || equals(this.game.gameState.GetState(), 'ready')) {
      return;
    }
    if (this.game.gameConfigure.takeSnapshot === true) {
      if (this.game.saveSnapshot() === true) {
        DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot', void 0, 1);
        DataUtil$Companion_getInstance().SetString_6hosri$('Snapshot_mode', void 0, this.game.gameConfigure.modeString);
      }
    }
  };
  function GameView$resume$lambda(it) {
    SystemConfigure$Companion_getInstance().SetDouble_io5o9c$('PlayingTimeForAds', 0.0);
    SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('PlayingCountForAds', 0);
    return Unit;
  }
  GameView.prototype.resume = function () {
    if (this.game.initializeDone === false || equals(this.game.gameState.GetState(), '_init') || equals(this.game.gameState.GetState(), 'ready')) {
      return;
    }
    DataUtil$Companion_getInstance().SetInteger_rjan26$('Snapshot', void 0, 0);
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
      return;
    }
    if (SystemConfigure$Companion_getInstance().GetInteger_bm4lxs$('AdsShowing') === 0) {
      SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('AdsShowing', 1);
      AppController$Companion_getInstance().shared().showInterstitial_y8twos$(GameView$resume$lambda);
    }
     else {
      SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('AdsShowing', 0);
    }
  };
  function GameView$afterAttached$lambda$lambda(this$GameView) {
    return function () {
      if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
        this$GameView.notice.addText_r4v59z$('[button Resource/UI/IconPlay 80 ok]', 0.3);
      }
       else {
        this$GameView.notice.addText_r4v59z$('[button Resource/UI/IconPlay 60 ok]', 0.3);
      }
      return Unit;
    };
  }
  function GameView$afterAttached$lambda$lambda$lambda$lambda(this$GameView) {
    return function () {
      this$GameView.game.generateBoard();
      return Unit;
    };
  }
  function GameView$afterAttached$lambda$lambda$lambda(this$GameView) {
    return function () {
      var tmp$, tmp$_0;
      SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
      this$GameView.notice.SetShow_6taknv$(false);
      this$GameView.notice.clearText_gam257$();
      this$GameView.game.initGame_g5c4ga$(this$GameView);
      this$GameView.game.start();
      (tmp$ = this$GameView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.5, void 0, GameView$afterAttached$lambda$lambda$lambda$lambda(this$GameView)), Unit) : null;
      this$GameView.preparePauseMenu();
      (tmp$_0 = this$GameView.screen) != null ? (tmp$_0.removeKeydownListener_61zpoe$('Hint OK'), Unit) : null;
      return Unit;
    };
  }
  function GameView$afterAttached$lambda$lambda_0(this$GameView) {
    return function (message) {
      var tmp$;
      if (message.event === Event$button_RELEASE_getInstance()) {
        (tmp$ = this$GameView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, GameView$afterAttached$lambda$lambda$lambda(this$GameView)), Unit) : null;
        return false;
      }
      return true;
    };
  }
  function GameView$afterAttached$lambda$lambda_1(this$GameView) {
    return function (code) {
      var tmp$;
      if (code === TouchListener$Code_getInstance().ENTER) {
        var button = Kotlin.isType(tmp$ = this$GameView.notice.findChildByName_3m52m6$('ok'), Button) ? tmp$ : null;
        if (button != null) {
          button.click();
          return true;
        }
      }
      return false;
    };
  }
  function GameView$afterAttached$lambda(this$GameView, closure$hintMessage) {
    return function () {
      var tmp$, tmp$_0;
      this$GameView.notice.addText_r4v59z$(closure$hintMessage.v, 0.3);
      (tmp$ = this$GameView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.5, void 0, GameView$afterAttached$lambda$lambda(this$GameView)), Unit) : null;
      this$GameView.notice.SetMessageHandler_4mjqr2$(GameView$afterAttached$lambda$lambda_0(this$GameView));
      (tmp$_0 = this$GameView.screen) != null ? (tmp$_0.addKeydownListener_5ol7k9$('Hint OK', GameView$afterAttached$lambda$lambda_1(this$GameView)), Unit) : null;
      return Unit;
    };
  }
  function GameView$afterAttached$lambda_0(this$GameView) {
    return function () {
      this$GameView.game.generateBoard();
      return Unit;
    };
  }
  GameView.prototype.afterAttached = function () {
    var tmp$, tmp$_0, tmp$_1;
    var bannerOffset = 0.0;
    this.bottomHeight = 0.0;
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
      if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
        if (AppController$Companion_getInstance().shared().isBannerReady() === true) {
          AppController$Companion_getInstance().shared().showAds_6taknv$(true);
          this.bottomHeight = AppController$Companion_getInstance().shared().getAdsHeight() / this.sizeScale.yRatio;
        }
      }
    }
    this.game.bannerOffset = bannerOffset;
    this.game.bottomHeight = this.bottomHeight;
    this.SetName_61zpoe$('GameView');
    HAL$Companion_getInstance().shared().SetTitle_61zpoe$('');
    HAL$Companion_getInstance().shared().SetInputMode_za3lpa$(1);
    HAL$Companion_getInstance().shared().SetBackgroundColor_qt1dr2$(28, 28, 28);
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Record'), 'true')) {
      (tmp$ = this.screen) != null ? (tmp$.isDrawTouchMark = true) : null;
    }
     else {
      (tmp$_0 = this.screen) != null ? (tmp$_0.isDrawTouchMark = false) : null;
    }
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.createSprite_591x4d$(160.0, 240.0, SceneLayer$spaceDeep_getInstance().value, 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, false);
    SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this.screen), 'MainBGM', 100.0, 0.3);
    this.game.quality = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 2);
    println('Game Quality : ' + this.game.quality.toString());
    switch (this.game.quality) {
      case 0:
        HAL$Companion_getInstance().shared().changeFPS_za3lpa$(10);
        break;
      case 1:
        HAL$Companion_getInstance().shared().changeFPS_za3lpa$(20);
        break;
      default:HAL$Companion_getInstance().shared().changeFPS_za3lpa$(30);
        break;
    }
    if (SystemConfigure$Companion_getInstance().isWatchOS() === false) {
      var fontSize = 24.0;
      this.SetFontName_61zpoe$('Number/');
      this.SetFontSize_mx4ult$(fontSize);
      this.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
      this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
      var star = this.createTextArea_pvsv9g$(310.0, 5.0 + bannerOffset / this.sizeScale.yRatio, void 0, 320.0, 0.0, 0.0, 0.5, 1.0);
      star.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
      star.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
      star.addText_r4v59z$('[image Resource/UI/IconStar 20] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
      star.SetName_61zpoe$('Star Amount');
      if (this.game.gameConfigure.obstacleMaximumNumber > 0) {
        this.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
        var ghost = this.createTextArea_pvsv9g$(5.0, 5.0 + bannerOffset / this.sizeScale.yRatio, void 0, 320.0, 0.0, 0.0, 0.5, 1.0);
        ghost.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
        ghost.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        ghost.addText_r4v59z$('[Image Ghost_white 35][Scale 0.6]X[Scale] [Color 35BEC1]0');
        ghost.SetName_61zpoe$('Ghost Amount');
      }
    }
    var hintMessage = {v: ''};
    if (SystemConfigure$Companion_getInstance().isWatchOS() === false) {
      var modeString = this.game.gameConfigure.modeString;
      if (equals(modeString, 'Beginner')) {
        var index = DataUtil$Companion_getInstance().GetInteger_rjan26$(modeString + 'GameHint', void 0, 0);
        var value = local('BEGINNER_TIP_COUNT');
        var INT$result;
        INT$break: do {
          if (value == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value)) {
            INT$result = numberToInt(value);
            break INT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toInt_0(value);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        var count = INT$result;
        if (count != null) {
          if (index < count) {
            this.SetFontName_61zpoe$('BEGINNER_TIP_/');
            var value_0 = index;
            var STRING$result;
            STRING$break: do {
              if (Kotlin.isNumber(value_0)) {
                STRING$result = value_0.toString();
                break STRING$break;
              }
               else if (typeof value_0 === 'string') {
                STRING$result = value_0;
                break STRING$break;
              }
               else if (typeof value_0 === 'boolean') {
                STRING$result = value_0.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(value_0)) {
                STRING$result = value_0.toString();
                break STRING$break;
              }
              STRING$result = '';
            }
             while (false);
            hintMessage.v = local('BEGINNER_TIP_' + STRING$result);
            index = index + 1 | 0;
            DataUtil$Companion_getInstance().SetInteger_rjan26$(modeString + 'GameHint', void 0, index);
          }
        }
      }
       else if (equals(modeString, 'Beginner6x6')) {
        var index_0 = DataUtil$Companion_getInstance().GetInteger_rjan26$(modeString + 'GameHint', void 0, 0);
        var value_1 = local('BEGINNER6x6_TIP_COUNT');
        var INT$result_0;
        INT$break: do {
          if (value_1 == null) {
            INT$result_0 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            INT$result_0 = numberToInt(value_1);
            break INT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_0 = toInt_0(value_1);
              INT$result_0 = number_0;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_0 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_0 = 0;
        }
         while (false);
        var count_0 = INT$result_0;
        if (count_0 != null) {
          if (index_0 < count_0) {
            this.SetFontName_61zpoe$('BEGINNER6x6_TIP_/');
            var value_2 = index_0;
            var STRING$result_0;
            STRING$break: do {
              if (Kotlin.isNumber(value_2)) {
                STRING$result_0 = value_2.toString();
                break STRING$break;
              }
               else if (typeof value_2 === 'string') {
                STRING$result_0 = value_2;
                break STRING$break;
              }
               else if (typeof value_2 === 'boolean') {
                STRING$result_0 = value_2.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(value_2)) {
                STRING$result_0 = value_2.toString();
                break STRING$break;
              }
              STRING$result_0 = '';
            }
             while (false);
            hintMessage.v = local('BEGINNER6x6_TIP_' + STRING$result_0);
            index_0 = index_0 + 1 | 0;
            DataUtil$Companion_getInstance().SetInteger_rjan26$(modeString + 'GameHint', void 0, index_0);
          }
        }
      }
       else if (equals(modeString, 'Classic')) {
        var index_1 = DataUtil$Companion_getInstance().GetInteger_rjan26$(modeString + 'GameHint', void 0, 0);
        var value_3 = local(modeString + '_TIP_COUNT');
        var INT$result_1;
        INT$break: do {
          if (value_3 == null) {
            INT$result_1 = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(value_3)) {
            INT$result_1 = numberToInt(value_3);
            break INT$break;
          }
          if (typeof value_3 === 'string') {
            try {
              var number_1 = toInt_0(value_3);
              INT$result_1 = number_1;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result_1 = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result_1 = 0;
        }
         while (false);
        var count_1 = INT$result_1;
        if (count_1 != null) {
          if (index_1 < count_1) {
            this.SetFontName_61zpoe$(modeString + '_TIP_/');
            var tmp$_2 = modeString + '_TIP_';
            var value_4 = index_1;
            var STRING$result_1;
            STRING$break: do {
              if (Kotlin.isNumber(value_4)) {
                STRING$result_1 = value_4.toString();
                break STRING$break;
              }
               else if (typeof value_4 === 'string') {
                STRING$result_1 = value_4;
                break STRING$break;
              }
               else if (typeof value_4 === 'boolean') {
                STRING$result_1 = value_4.toString();
                break STRING$break;
              }
               else if (Kotlin.isChar(value_4)) {
                STRING$result_1 = value_4.toString();
                break STRING$break;
              }
              STRING$result_1 = '';
            }
             while (false);
            hintMessage.v = local(tmp$_2 + STRING$result_1);
            index_1 = index_1 + 1 | 0;
            DataUtil$Companion_getInstance().SetInteger_rjan26$(modeString + 'GameHint', void 0, index_1);
          }
        }
      }
    }
     else {
      var index_2 = DataUtil$Companion_getInstance().GetInteger_rjan26$('AppleWatchGameHint', void 0, 0);
      var value_5 = local('APPLE_WATCH_TIP_COUNT');
      var INT$result_2;
      INT$break: do {
        if (value_5 == null) {
          INT$result_2 = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value_5)) {
          INT$result_2 = numberToInt(value_5);
          break INT$break;
        }
        if (typeof value_5 === 'string') {
          try {
            var number_2 = toInt_0(value_5);
            INT$result_2 = number_2;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result_2 = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result_2 = 0;
      }
       while (false);
      var count_2 = INT$result_2;
      if (count_2 != null) {
        if (index_2 < count_2) {
          var value_6 = index_2;
          var STRING$result_2;
          STRING$break: do {
            if (Kotlin.isNumber(value_6)) {
              STRING$result_2 = value_6.toString();
              break STRING$break;
            }
             else if (typeof value_6 === 'string') {
              STRING$result_2 = value_6;
              break STRING$break;
            }
             else if (typeof value_6 === 'boolean') {
              STRING$result_2 = value_6.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_6)) {
              STRING$result_2 = value_6.toString();
              break STRING$break;
            }
            STRING$result_2 = '';
          }
           while (false);
          hintMessage.v = local('APPLE_WATCH_TIP_' + STRING$result_2);
          index_2 = index_2 + 1 | 0;
          DataUtil$Companion_getInstance().SetInteger_rjan26$('AppleWatchGameHint', void 0, index_2);
        }
      }
    }
    if (get_isEmpty(hintMessage.v) === false) {
      this.SetFontSize_mx4ult$(24.0);
      this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      var wrapType = 2;
      if (equals(local('TUTORIAL_TEXT_WRAP_TYPE'), 'CHARACTER')) {
        wrapType = 1;
      }
      this.notice = this.createTextArea_pvsv9g$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 240.0, 480.0, 0.0, 0.5, 1.0, void 0, void 0, wrapType);
      this.notice.SetFadeMode_za3lpa$(1);
      this.notice.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      this.notice.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      this.notice.SetModal_6taknv$(true);
      this.SetFontSize_mx4ult$();
      this.notice.SetShow_6taknv$(true);
      this.notice.clearText_gam257$(void 0, GameView$afterAttached$lambda(this, hintMessage));
      return;
    }
    this.game.initGame_g5c4ga$(this);
    this.game.start();
    (tmp$_1 = this.screen) != null ? (tmp$_1.actionDelay_ab0iom$(0.5, void 0, GameView$afterAttached$lambda_0(this)), Unit) : null;
    this.preparePauseMenu();
  };
  GameView.prototype.beforeDetached = function () {
    var tmp$;
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
      AppController$Companion_getInstance().shared().showAds_6taknv$(false);
    }
    (tmp$ = this.screen) != null ? (tmp$.removeScrollListener(), Unit) : null;
  };
  function GameView$preparePauseMenu$lambda$lambda$lambda$lambda(closure$confirm, closure$message, this$GameView) {
    return function () {
      var tmp$;
      SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
      closure$confirm.SetShow_6taknv$(false);
      closure$confirm.clearText_gam257$();
      var name = (tmp$ = closure$message.sender) != null ? tmp$.GetName() : null;
      if (name != null) {
        if (equals(name, 'ok')) {
          this$GameView.pause.SetShow_6taknv$(false);
          this$GameView.game.isCanceled = true;
          this$GameView.game.gameCancel();
        }
      }
      return Unit;
    };
  }
  function GameView$preparePauseMenu$lambda$lambda$lambda(this$GameView, closure$confirm) {
    return function (message) {
      var tmp$;
      if (message.event === Event$button_RELEASE_getInstance()) {
        (tmp$ = this$GameView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, GameView$preparePauseMenu$lambda$lambda$lambda$lambda(closure$confirm, message, this$GameView)), Unit) : null;
        return false;
      }
      return true;
    };
  }
  function GameView$preparePauseMenu$lambda$lambda(closure$message, this$GameView) {
    return function () {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11;
      SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
      var name = (tmp$ = closure$message.sender) != null ? tmp$.GetName() : null;
      if (name != null) {
        if (equals(name, 'ok')) {
          this$GameView.pause.SetShow_6taknv$(false);
          this$GameView.pause.clearText_gam257$();
          this$GameView.pause.SetShow_6taknv$(false);
          this$GameView.game.isCanceled = true;
          this$GameView.game.gameCancel();
        }
         else if (equals(name, 'no')) {
          this$GameView.pause.SetShow_6taknv$(false);
          this$GameView.pause.clearText_gam257$();
          this$GameView.game.isPaused = false;
          (tmp$_0 = this$GameView.game.gameTimer) != null ? (tmp$_0.resume(), Unit) : null;
          (tmp$_1 = this$GameView.game.comboTimer) != null ? (tmp$_1.resume(), Unit) : null;
          (tmp$_2 = this$GameView.game.feverTimer) != null ? (tmp$_2.resume(), Unit) : null;
          (tmp$_3 = this$GameView.game.blockDisableTimer) != null ? (tmp$_3.resume(), Unit) : null;
          this$GameView.game.cancelKeyInput_za3lpa$();
        }
         else if (equals(name, 'home')) {
          this$GameView.SetFontSize_mx4ult$(16.0);
          this$GameView.SetFontName_61zpoe$('MENU_/');
          var wrapType = 2;
          if (equals(local('TUTORIAL_TEXT_WRAP_TYPE'), 'CHARACTER')) {
            wrapType = 1;
          }
          var confirm = this$GameView.createTextArea_pvsv9g$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 240.0, 480.0, 0.0, 0.5, 1.0, void 0, void 0, wrapType);
          confirm.SetFadeMode_za3lpa$(1);
          confirm.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          confirm.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          confirm.SetModal_6taknv$(true);
          confirm.SetShow_6taknv$(true);
          this$GameView.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          this$GameView.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          confirm.addText_r4v59z$('[Scale 1.0]' + local('MENU_46') + '\n\n\n\n[Scale]');
          confirm.addText_r4v59z$('[Button Resource/UI/IconYes 50 ok]          [Button Resource/UI/IconNo 50 no]\n', 0.3);
          confirm.SetMessageHandler_4mjqr2$(GameView$preparePauseMenu$lambda$lambda$lambda(this$GameView, confirm));
        }
         else if (equals(name, 'sound')) {
          if (SoundManager$Companion_getInstance().shared().GetBGMVolume() === 0.0) {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$BGM_VOLUME_getInstance(), void 0, 100);
            SoundManager$Companion_getInstance().shared().SetBGMVolume_mx4ult$(100.0);
            var button = Kotlin.isType(tmp$_4 = closure$message.sender, Button) ? tmp$_4 : null;
            if (button != null) {
              button.SetImageFrame_a3w2ab$(['Resource/UI/IconSoundOn']);
            }
            AppController$Companion_getInstance().shared().setAdsMute_6taknv$(false);
          }
           else {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$BGM_VOLUME_getInstance(), void 0, 0);
            SoundManager$Companion_getInstance().shared().SetBGMVolume_mx4ult$(0.0);
            var button_0 = Kotlin.isType(tmp$_5 = closure$message.sender, Button) ? tmp$_5 : null;
            if (button_0 != null) {
              button_0.SetImageFrame_a3w2ab$(['Resource/UI/IconSoundOff']);
            }
            AppController$Companion_getInstance().shared().setAdsMute_6taknv$(true);
          }
        }
         else if (equals(name, 'sfx')) {
          if (SoundManager$Companion_getInstance().shared().GetEffectVolume() === 0.0) {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$EFFECT_VOLUME_getInstance(), void 0, 100);
            SoundManager$Companion_getInstance().shared().SetEffectVolume_mx4ult$(100.0);
            var button_1 = Kotlin.isType(tmp$_6 = closure$message.sender, Button) ? tmp$_6 : null;
            if (button_1 != null) {
              button_1.SetImageFrame_a3w2ab$(['Resource/UI/IconSFXOn']);
            }
          }
           else {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$EFFECT_VOLUME_getInstance(), void 0, 0);
            SoundManager$Companion_getInstance().shared().SetEffectVolume_mx4ult$(0.0);
            var button_2 = Kotlin.isType(tmp$_7 = closure$message.sender, Button) ? tmp$_7 : null;
            if (button_2 != null) {
              button_2.SetImageFrame_a3w2ab$(['Resource/UI/IconSFXOff']);
            }
          }
        }
         else if (equals(name, 'resume')) {
          this$GameView.pause.SetShow_6taknv$(false);
          this$GameView.pause.clearText_gam257$();
          this$GameView.game.isPaused = false;
          (tmp$_8 = this$GameView.game.gameTimer) != null ? (tmp$_8.resume(), Unit) : null;
          (tmp$_9 = this$GameView.game.comboTimer) != null ? (tmp$_9.resume(), Unit) : null;
          (tmp$_10 = this$GameView.game.feverTimer) != null ? (tmp$_10.resume(), Unit) : null;
          (tmp$_11 = this$GameView.game.blockDisableTimer) != null ? (tmp$_11.resume(), Unit) : null;
          this$GameView.game.cancelKeyInput_za3lpa$();
        }
      }
      return Unit;
    };
  }
  function GameView$preparePauseMenu$lambda(this$GameView) {
    return function (message) {
      var tmp$;
      if (message.event === Event$button_RELEASE_getInstance()) {
        (tmp$ = this$GameView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, GameView$preparePauseMenu$lambda$lambda(message, this$GameView)), Unit) : null;
        return false;
      }
      return true;
    };
  }
  function GameView$preparePauseMenu$lambda_0(this$GameView) {
    return function (message) {
      if (message.event === Event$button_RELEASE_getInstance()) {
        if (!equals(this$GameView.game.gameState.GetState(), 'running')) {
          return false;
        }
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
        this$GameView.showExitPopup();
      }
      return true;
    };
  }
  function GameView$preparePauseMenu$lambda_1(this$GameView) {
    return function (message) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (message.event === Event$button_RELEASE_getInstance()) {
        if (!equals(this$GameView.game.gameState.GetState(), 'running')) {
          return false;
        }
        if (this$GameView.pause.GetShow() === true) {
          return false;
        }
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
        this$GameView.pause.SetShow_6taknv$(true);
        var sound = 'IconSoundOn';
        if (SoundManager$Companion_getInstance().shared().GetBGMVolume() === 0.0) {
          sound = 'IconSoundOff';
        }
        var sfx = 'IconSFXOn';
        if (SoundManager$Companion_getInstance().shared().GetEffectVolume() === 0.0) {
          sfx = 'IconSFXOff';
        }
        if (SystemConfigure$Companion_getInstance().isWatchOS() === false) {
          this$GameView.pause.addText_r4v59z$('[Button Resource/UI/' + sound + ' 60 sound]        [Button Resource/UI/' + sfx + ' 60 sfx]\n\n\n\n[Button Resource/UI/IconPlay 50 resume]\n', 0.5);
        }
         else {
          this$GameView.pause.addText_r4v59z$(local('MENU_46') + '\n\n\n\n[Scale]', 0.5);
          this$GameView.pause.addText_r4v59z$('[Button Resource/UI/IconYes 100 ok]                [Button Resource/UI/IconNo 100 no]\n', 0.5);
        }
        this$GameView.game.isPaused = true;
        (tmp$ = this$GameView.game.gameTimer) != null ? (tmp$.pause(), Unit) : null;
        (tmp$_0 = this$GameView.game.comboTimer) != null ? (tmp$_0.pause(), Unit) : null;
        (tmp$_1 = this$GameView.game.feverTimer) != null ? (tmp$_1.pause(), Unit) : null;
        (tmp$_2 = this$GameView.game.blockDisableTimer) != null ? (tmp$_2.pause(), Unit) : null;
      }
      return true;
    };
  }
  function GameView$preparePauseMenu$lambda_2(this$GameView) {
    return function (delta) {
      var tmp$;
      var button = Kotlin.isType(tmp$ = this$GameView.findChildByName_3m52m6$('Pause Switch'), Button) ? tmp$ : null;
      if (button != null) {
        var convert = HAL$Companion_getInstance().shared().convertCoordinate_dleff0$(button.GetPosition().x, button.GetPosition().y);
        HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(convert.x, convert.y, TouchListener$State$began_getInstance());
        HAL$Companion_getInstance().shared().addInputQueue_o3bepn$(convert.x, convert.y, TouchListener$State$ended_getInstance());
      }
    };
  }
  GameView.prototype.preparePauseMenu = function () {
    var tmp$, tmp$_0;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.SetFontSize_mx4ult$(16.0);
    this.SetFontName_61zpoe$('MENU_/');
    var wrapType = 2;
    if (equals(local('TUTORIAL_TEXT_WRAP_TYPE'), 'CHARACTER')) {
      wrapType = 1;
    }
    this.pause = this.createTextArea_pvsv9g$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 320.0, 480.0, 0.0, 0.5, 1.0, void 0, void 0, wrapType);
    this.pause.SetFadeMode_za3lpa$(1);
    this.pause.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.pause.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.pause.SetShow_6taknv$(false);
    this.pause.SetModal_6taknv$(true);
    (tmp$ = this.screen) != null ? (tmp$.SetModalAlpha_mx4ult$(0.9), Unit) : null;
    this.pause.SetMessageHandler_4mjqr2$(GameView$preparePauseMenu$lambda(this));
    var buttonY = 470.0 - this.bottomHeight;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      buttonY = 600.0;
    }
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    var exitButton = this.createImageButton_uax0jn$(10.0, buttonY, void 0, void 0, 40.0, 40.0, void 0, void 0, ['Resource/UI/IconAbandon', 'Resource/UI/IconAbandonDisabled', null, null]);
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    exitButton.SetName_61zpoe$('Abandon Button');
    exitButton.SetEnable_6taknv$(false);
    exitButton.SetMessageHandler_4mjqr2$(GameView$preparePauseMenu$lambda_0(this));
    var buttonFrame = ['Resource/UI/IconPause', 'Resource/UI/IconPauseDisabled', null, null];
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    var pauseButton = this.createImageButton_uax0jn$(310.0, buttonY, void 0, void 0, 40.0, 40.0, void 0, void 0, buttonFrame);
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    pauseButton.SetName_61zpoe$('Pause Switch');
    pauseButton.SetEnable_6taknv$(false);
    pauseButton.SetMessageHandler_4mjqr2$(GameView$preparePauseMenu$lambda_1(this));
    (tmp$_0 = this.screen) != null ? (tmp$_0.addScrollListener_d6xl6w$(GameView$preparePauseMenu$lambda_2(this)), Unit) : null;
  };
  function GameView$showExitPopup$lambda$lambda(closure$confirm, closure$message, this$GameView) {
    return function () {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
      closure$confirm.SetShow_6taknv$(false);
      closure$confirm.clearText_gam257$();
      var name = (tmp$ = closure$message.sender) != null ? tmp$.GetName() : null;
      if (name != null) {
        if (equals(name, 'ok')) {
          this$GameView.game.isCanceled = true;
          this$GameView.game.gameCancel();
        }
         else {
          this$GameView.game.isPaused = false;
          (tmp$_0 = this$GameView.game.gameTimer) != null ? (tmp$_0.resume(), Unit) : null;
          (tmp$_1 = this$GameView.game.comboTimer) != null ? (tmp$_1.resume(), Unit) : null;
          (tmp$_2 = this$GameView.game.feverTimer) != null ? (tmp$_2.resume(), Unit) : null;
          (tmp$_3 = this$GameView.game.blockDisableTimer) != null ? (tmp$_3.resume(), Unit) : null;
          this$GameView.game.cancelKeyInput_za3lpa$();
        }
      }
      return Unit;
    };
  }
  function GameView$showExitPopup$lambda(this$GameView, closure$confirm) {
    return function (message) {
      var tmp$;
      if (message.event === Event$button_RELEASE_getInstance()) {
        (tmp$ = this$GameView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, GameView$showExitPopup$lambda$lambda(closure$confirm, message, this$GameView)), Unit) : null;
        return false;
      }
      return true;
    };
  }
  function GameView$showExitPopup$lambda_0(closure$confirm) {
    return function (code) {
      var tmp$, tmp$_0;
      if (closure$confirm.GetShow() === false) {
        return false;
      }
      if (code === TouchListener$Code_getInstance().ESCAPE || code === TouchListener$Code_getInstance().BACK) {
        var button = Kotlin.isType(tmp$ = closure$confirm.findChildByName_3m52m6$('no'), Button) ? tmp$ : null;
        if (button != null) {
          button.click();
        }
        return true;
      }
       else if (code === TouchListener$Code_getInstance().ENTER) {
        var button_0 = Kotlin.isType(tmp$_0 = closure$confirm.findChildByName_3m52m6$('ok'), Button) ? tmp$_0 : null;
        if (button_0 != null) {
          button_0.click();
        }
        return true;
      }
      return false;
    };
  }
  GameView.prototype.showExitPopup = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    this.game.isPaused = true;
    (tmp$ = this.game.gameTimer) != null ? (tmp$.pause(), Unit) : null;
    (tmp$_0 = this.game.comboTimer) != null ? (tmp$_0.pause(), Unit) : null;
    (tmp$_1 = this.game.feverTimer) != null ? (tmp$_1.pause(), Unit) : null;
    (tmp$_2 = this.game.blockDisableTimer) != null ? (tmp$_2.pause(), Unit) : null;
    this.SetFontSize_mx4ult$(16.0);
    this.SetFontName_61zpoe$('MENU_/');
    var wrapType = 2;
    if (equals(local('TUTORIAL_TEXT_WRAP_TYPE'), 'CHARACTER')) {
      wrapType = 1;
    }
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var confirm = this.createTextArea_pvsv9g$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 240.0, 480.0, 0.0, 0.5, 1.0, void 0, void 0, wrapType);
    confirm.SetFadeMode_za3lpa$(1);
    confirm.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    confirm.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    confirm.SetModal_6taknv$(true);
    confirm.SetShow_6taknv$(true);
    confirm.addText_r4v59z$('[Scale 1.0]' + local('MENU_46') + '\n\n\n\n[Scale]', 0.5);
    confirm.addText_r4v59z$('[Button Resource/UI/IconYes 50 ok]          [Button Resource/UI/IconNo 50 no]\n', 0.5);
    confirm.SetMessageHandler_4mjqr2$(GameView$showExitPopup$lambda(this, confirm));
    (tmp$_3 = this.screen) != null ? (tmp$_3.addKeydownListener_5ol7k9$('Confirm Key', GameView$showExitPopup$lambda_0(confirm)), Unit) : null;
  };
  GameView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameView',
    interfaces: [View]
  };
  function GameView_init(game, $this) {
    $this = $this || Object.create(GameView.prototype);
    View_init(void 0, void 0, void 0, $this);
    GameView.call($this);
    $this.game = game;
    return $this;
  }
  function LoadingView() {
    View_init(void 0, void 0, void 0, this);
  }
  function LoadingView$afterAttached$lambda(closure$title) {
    return function (value, Boolean_0) {
      closure$title.SetAlpha_8ca0d4$(value);
      return true;
    };
  }
  function LoadingView$afterAttached$lambda_0() {
    var blockId = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$CURRENT_BLOCK_SET_getInstance(), void 0, 'BlocksetNumber');
    AppController$Companion_getInstance().shared().changeCurrentBlockSet_61zpoe$(blockId);
    AppController$Companion_getInstance().shared().saveCurrentBlockSet();
    return Unit;
  }
  function LoadingView$afterAttached$lambda$lambda(closure$message, closure$percent) {
    return function () {
      closure$message.addText_r4v59z$('Loading... ' + closure$percent);
      return Unit;
    };
  }
  function LoadingView$afterAttached$lambda$lambda_0(this$LoadingView) {
    return function () {
      var tmp$, tmp$_0;
      if (DataUtil$Companion_getInstance().GetInteger_rjan26$('Snapshot') === 1) {
        var configure = null;
        var mode = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$LAST_PLAYED_MODE_getInstance());
        switch (mode) {
          case 'Beginner':
            var value = this$LoadingView.size.width;
            var FLOAT$result;
            FLOAT$break: do {
              if (value == null) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value)) {
                FLOAT$result = numberToDouble(value);
                break FLOAT$break;
              }
              if (typeof value === 'string') {
                try {
                  var number = toDouble(value);
                  FLOAT$result = number;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result = 0.0;
            }
             while (false);
            var tmp$_1 = FLOAT$result;
            var value_0 = this$LoadingView.size.height;
            var FLOAT$result_0;
            FLOAT$break: do {
              if (value_0 == null) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_0)) {
                FLOAT$result_0 = numberToDouble(value_0);
                break FLOAT$break;
              }
              if (typeof value_0 === 'string') {
                try {
                  var number_0 = toDouble(value_0);
                  FLOAT$result_0 = number_0;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_0 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_0 = 0.0;
            }
             while (false);
            configure = InfiniteConfigureForiOS_init(Rect_init(0.0, 0.0, tmp$_1, FLOAT$result_0));
            break;
          case 'Beginner6x6':
            var value_1 = this$LoadingView.size.width;
            var FLOAT$result_1;
            FLOAT$break: do {
              if (value_1 == null) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_1)) {
                FLOAT$result_1 = numberToDouble(value_1);
                break FLOAT$break;
              }
              if (typeof value_1 === 'string') {
                try {
                  var number_1 = toDouble(value_1);
                  FLOAT$result_1 = number_1;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_1 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_1 = 0.0;
            }
             while (false);
            var tmp$_2 = FLOAT$result_1;
            var value_2 = this$LoadingView.size.height;
            var FLOAT$result_2;
            FLOAT$break: do {
              if (value_2 == null) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
              if (Kotlin.isNumber(value_2)) {
                FLOAT$result_2 = numberToDouble(value_2);
                break FLOAT$break;
              }
              if (typeof value_2 === 'string') {
                try {
                  var number_2 = toDouble(value_2);
                  FLOAT$result_2 = number_2;
                  break FLOAT$break;
                }
                 catch (e) {
                  if (Kotlin.isType(e, Exception)) {
                    FLOAT$result_2 = 0.0;
                    break FLOAT$break;
                  }
                   else
                    throw e;
                }
              }
              FLOAT$result_2 = 0.0;
            }
             while (false);
            configure = InfiniteConfigure6x6ForiOS_init(Rect_init(0.0, 0.0, tmp$_2, FLOAT$result_2));
            break;
        }
        if (configure != null) {
          ensureNotNull(configure).adjustTileSize();
          var game = Game_init(ensureNotNull(configure));
          var scene = GameView_init(game);
          (tmp$ = this$LoadingView.screen) != null ? (tmp$.presentView_xl35ob$(scene), Unit) : null;
        }
      }
       else {
        var scene_0 = new MainMenuView();
        (tmp$_0 = this$LoadingView.screen) != null ? (tmp$_0.presentView_xl35ob$(scene_0), Unit) : null;
      }
      return Unit;
    };
  }
  function LoadingView$afterAttached$lambda_1(closure$loadingAction, closure$total, closure$prev, closure$message, this$LoadingView) {
    return function (info) {
      var tmp$;
      if (closure$loadingAction.v.size > 0) {
        var work = closure$loadingAction.v.removeAt_za3lpa$(0);
        work();
        var progress = (1.0 - closure$loadingAction.v.size / closure$total) * 100.0;
        var INT$result;
        INT$break: do {
          if (progress == null) {
            INT$result = 0;
            break INT$break;
          }
          if (Kotlin.isNumber(progress)) {
            INT$result = numberToInt(progress);
            break INT$break;
          }
          if (typeof progress === 'string') {
            try {
              var number = toInt_0(progress);
              INT$result = number;
              break INT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                INT$result = 0;
                break INT$break;
              }
               else
                throw e;
            }
          }
          INT$result = 0;
        }
         while (false);
        if (INT$result !== closure$prev.v) {
          var tmp$_0 = closure$prev;
          var INT$result_0;
          INT$break: do {
            if (progress == null) {
              INT$result_0 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(progress)) {
              INT$result_0 = numberToInt(progress);
              break INT$break;
            }
            if (typeof progress === 'string') {
              try {
                var number_0 = toInt_0(progress);
                INT$result_0 = number_0;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_0 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_0 = 0;
          }
           while (false);
          tmp$_0.v = INT$result_0;
          var value = closure$prev.v;
          var INT$result_1;
          INT$break: do {
            if (value == null) {
              INT$result_1 = 0;
              break INT$break;
            }
            if (Kotlin.isNumber(value)) {
              INT$result_1 = numberToInt(value);
              break INT$break;
            }
            if (typeof value === 'string') {
              try {
                var number_1 = toInt_0(value);
                INT$result_1 = number_1;
                break INT$break;
              }
               catch (e) {
                if (Kotlin.isType(e, Exception)) {
                  INT$result_1 = 0;
                  break INT$break;
                }
                 else
                  throw e;
              }
            }
            INT$result_1 = 0;
          }
           while (false);
          var value_0 = INT$result_1;
          var STRING$result;
          STRING$break: do {
            if (Kotlin.isNumber(value_0)) {
              STRING$result = value_0.toString();
              break STRING$break;
            }
             else if (typeof value_0 === 'string') {
              STRING$result = value_0;
              break STRING$break;
            }
             else if (typeof value_0 === 'boolean') {
              STRING$result = value_0.toString();
              break STRING$break;
            }
             else if (Kotlin.isChar(value_0)) {
              STRING$result = value_0.toString();
              break STRING$break;
            }
            STRING$result = '';
          }
           while (false);
          var percent = STRING$result + '%';
          closure$message.clearText_gam257$(void 0, LoadingView$afterAttached$lambda$lambda(closure$message, percent));
        }
        if (closure$loadingAction.v.size === 0) {
          (tmp$ = this$LoadingView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.5, void 0, LoadingView$afterAttached$lambda$lambda_0(this$LoadingView)), Unit) : null;
        }
      }
    };
  }
  LoadingView.prototype.afterAttached = function () {
    var tmp$, tmp$_0, tmp$_1;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    this.createSprite_9wuqyc$(0.0, 480.0, void 0, 'Resource/UI/Loading1', 300.0);
    var title = this.createSprite_9wuqyc$(0.0, 480.0, void 0, 'Resource/UI/Loading2', 300.0);
    title.SetAlpha_8ca0d4$(0.0);
    (tmp$ = this.screen) != null ? (tmp$.actionFadeLoop_xukj3e$('', 1.0, 0.0, 1.0, void 0, LoadingView$afterAttached$lambda(title)), Unit) : null;
    var letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-,.!()[]%+?:>/'\u010D\u2192";
    tmp$_0 = iterator(letter);
    while (tmp$_0.hasNext()) {
      var ch = unboxChar(tmp$_0.next());
      var value = toBoxedChar(ch);
      var STRING$result;
      STRING$break: do {
        if (Kotlin.isNumber(value)) {
          STRING$result = value.toString();
          break STRING$break;
        }
         else if (typeof value === 'string') {
          STRING$result = value;
          break STRING$break;
        }
         else if (typeof value === 'boolean') {
          STRING$result = value.toString();
          break STRING$break;
        }
         else if (Kotlin.isChar(value)) {
          STRING$result = value.toString();
          break STRING$break;
        }
        STRING$result = '';
      }
       while (false);
      var str = STRING$result;
      ResourceManager$Companion_getInstance().shared().createStringTexture_49g1x9$(str, ' ', 96 * this.sizeScale.xRatio, Color$Companion_getInstance().white_mx4ult$(), Color$Companion_getInstance().white_mx4ult$(), 0.0, void 0, void 0, 'Main/' + str);
    }
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
    var message = this.createTextArea_pvsv9g$(300.0, 480.0, void 0, 120.0, 20.0);
    message.addText_r4v59z$('');
    message.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    message.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    var loadingAction = {v: ArrayList_init()};
    loadingAction.v.addAll_brywnq$(AppController$Companion_getInstance().shared().loadSoundResource());
    var tmp$_2 = loadingAction.v;
    var tmp$_3 = AppController$Companion_getInstance().shared();
    var value_0 = ensureNotNull(this.screen).GetSize().width;
    var FLOAT$result;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number = toDouble(value_0);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_4 = FLOAT$result;
    var value_1 = ensureNotNull(this.screen).GetSize().height;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_1 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_1)) {
        FLOAT$result_0 = numberToDouble(value_1);
        break FLOAT$break;
      }
      if (typeof value_1 === 'string') {
        try {
          var number_0 = toDouble(value_1);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    tmp$_2.addAll_brywnq$(tmp$_3.loadDefaultResource_dleff0$(tmp$_4, FLOAT$result_0));
    loadingAction.v.add_11rb$(LoadingView$afterAttached$lambda_0);
    var prev = {v: -1};
    var total = loadingAction.v.size;
    (tmp$_1 = this.screen) != null ? (tmp$_1.actionInstant_cinp1s$(void 0, void 0, void 0, void 0, LoadingView$afterAttached$lambda_1(loadingAction, total, prev, message, this)), Unit) : null;
  };
  LoadingView.prototype.beforeDetached = function () {
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Login GameCenter'), 'true')) {
      if (AppController$Companion_getInstance().shared().isLogin() === false) {
        if (DataUtil$Companion_getInstance().GetInteger_rjan26$('Login', void 0, 0) === 0) {
          DataUtil$Companion_getInstance().SetInteger_rjan26$('Login', void 0, 1);
          AppController$Companion_getInstance().shared().loginIntent();
        }
      }
    }
  };
  LoadingView.prototype.update_mx4ult$ = function (elapsed) {
    View.prototype.update_mx4ult$.call(this, elapsed);
  };
  LoadingView.prototype.loading_o14v8n$ = function (callback) {
    var tmp$ = AppController$Companion_getInstance().shared();
    var value = ensureNotNull(this.screen).GetSize().width;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var tmp$_0 = FLOAT$result;
    var value_0 = ensureNotNull(this.screen).GetSize().height;
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    tmp$.loadDefaultResource_dleff0$(tmp$_0, FLOAT$result_0);
    var blockId = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$CURRENT_BLOCK_SET_getInstance(), void 0, 'BlocksetNumber');
    AppController$Companion_getInstance().shared().changeCurrentBlockSet_61zpoe$(blockId);
    AppController$Companion_getInstance().shared().saveCurrentBlockSet();
    callback();
  };
  LoadingView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoadingView',
    interfaces: [View]
  };
  function MainMenuView() {
    View_init(void 0, void 0, void 0, this);
    this.particleManager = null;
    this.particleManagerForFairy = null;
    this.title = null;
    this.bg = null;
    this.notice = null;
    this.music_e6wunb$_0 = this.music_e6wunb$_0;
    this.bottomMenuItem = MainMenuView$bottomMenuItem$lambda(this);
    this.menuCallback = MainMenuView$menuCallback$lambda(this);
  }
  Object.defineProperty(MainMenuView.prototype, 'music', {
    get: function () {
      if (this.music_e6wunb$_0 == null)
        return throwUPAE('music');
      return this.music_e6wunb$_0;
    },
    set: function (music) {
      this.music_e6wunb$_0 = music;
    }
  });
  MainMenuView.prototype.afterAttached = function () {
    var tmp$, tmp$_0, tmp$_1;
    HAL$Companion_getInstance().shared().SetBackgroundColor_qt1dr2$(28, 28, 28);
    (tmp$ = this.screen) != null ? (tmp$.isDrawTouchMark = true) : null;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.bg = this.createSprite_591x4d$(160.0, 240.0, SceneLayer$spaceDeep_getInstance().value, 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, false);
    ensureNotNull(this.bg).SetName_61zpoe$('Background');
    SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this.screen), 'MenuBGM', 100.0, 1.0);
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('RecordForTitle'), 'true')) {
      this.createTitleEffect();
    }
     else {
      this.createTitleEffectForRecord();
    }
    var needStar = ArrayList_init();
    needStar.add_11rb$(InfiniteConfigureForiOS_init(Rect_init(0.0, 0.0, 0.0, 0.0)).needStar);
    needStar.add_11rb$(InfiniteConfigure6x6ForiOS_init(Rect_init(0.0, 0.0, 0.0, 0.0)).needStar);
    needStar.add_11rb$(ClassicConfigureForAndroid_init(Rect_init(0.0, 0.0, 0.0, 0.0)).needStar);
    var menu;
    var items = [MenuItem_init('Resource/UI/IconBeginner', void 0, void 0, void 0, void 0, 0.3, this.menuCallback), MenuItem_init('Resource/UI/IconBeginner6x6', void 0, void 0, void 0, void 0, 0.3, this.menuCallback), MenuItem_init('Resource/UI/IconClassic', void 0, void 0, void 0, void 0, 0.3, this.menuCallback)];
    var mode = ['Beginner', 'Beginner6x6', 'Classic'];
    for (var i = 0; i !== items.length; ++i) {
      var item = items[i];
      if (item != null) {
        var score = PlayerRecordManager$Companion_getInstance().shared().GetHighScore_61zpoe$(mode[i]);
        if (score > 0) {
          item.title = '[Color white][font Number/][Scale 0.5] ' + formatted(score);
        }
        if (needStar.get_za3lpa$(i) > 0) {
          item.upperCaption = '[font Number/][Image Resource/UI/IconStar 15] [Scale 0.5]X[Scale 0.8] ' + needStar.get_za3lpa$(i).toString();
          if (StoreManager$Companion_getInstance().shared().GetStarAmount() < needStar.get_za3lpa$(i)) {
            item.enable = false;
          }
        }
      }
    }
    if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 0) === 0) {
      if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_3_3_COMPLETE_getInstance(), void 0, 0) === 0) {
        (tmp$_0 = items[1]) != null ? (tmp$_0.enable = false) : null;
        (tmp$_1 = items[2]) != null ? (tmp$_1.enable = false) : null;
      }
    }
    var currentBlock = AppController$Companion_getInstance().shared().GetCurrentBlockSetResource() + 'IconMenu';
    var tileSize = 60.0;
    var yMargin = 0.0;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      tileSize = 110.0;
      yMargin = 75.0;
    }
    menu = Menu_init(this, this.GetSize(), Size_init(3.0, 1.0), tileSize, void 0, items);
    menu.prepare_1isvtk$(yMargin, 40.0, 10.0);
    var width = 20.0;
    var fontSize = 24.0;
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      width = 40.0;
      fontSize = 32.0;
    }
    this.SetFontName_61zpoe$('Number/');
    this.SetFontSize_mx4ult$(fontSize);
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    var star = this.createTextArea_pvsv9g$(310.0, 5.0, void 0, 320.0, 0.0, 0.0, 0.5, 1.0);
    star.SetName_61zpoe$('Star Amount');
    star.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    star.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    star.addText_r4v59z$('[image Resource/UI/IconStar ' + width.toString() + '] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
    this.showBottomMenu();
    this.particleManagerForFairy = ParticleManager_init(this);
    this.createBackgroundEffect_v32r7z$(ensureNotNull(this.particleManagerForFairy), Rect_init(0.0, 160.0, 320.0, 320.0));
  };
  MainMenuView.prototype.showBlockMenU = function () {
    var tileSize = 40.0;
    var yMargin = 210.0;
    var xGap = 200.0;
    var item0 = MenuItem_init('Resource/UI/IconTutorial', void 0, void 0, void 0, void 0, void 0, this.bottomMenuItem);
    var item1 = MenuItem_init('Resource/UI/IconOption', void 0, void 0, void 0, void 0, void 0, this.bottomMenuItem);
    var menu = Menu_init(this, this.GetSize(), Size_init(2.0, 1.0), tileSize, void 0, [item0, item1]);
    menu.prepare_1isvtk$(yMargin, xGap);
  };
  function MainMenuView$showPromotionMenu$lambda(message) {
    if (message.event === Event$button_RELEASE_getInstance()) {
      return false;
    }
    return true;
  }
  function MainMenuView$showPromotionMenu$lambda_0(message) {
    if (message.event === Event$button_RELEASE_getInstance()) {
      return false;
    }
    return true;
  }
  MainMenuView.prototype.showPromotionMenu = function () {
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    this.createButton_ix8ej2$(40.0, 340.0, SceneLayer$parent_getInstance().value, void 0, void 0, 100.0, -1.0, void 0, ['Resource/UI/AppStoreBadge'], void 0, void 0, void 0, true, MainMenuView$showPromotionMenu$lambda);
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    this.createButton_ix8ej2$(280.0, 340.0, SceneLayer$parent_getInstance().value, void 0, void 0, 100.0, -1.0, void 0, ['Resource/UI/google-play-badge'], void 0, void 0, void 0, true, MainMenuView$showPromotionMenu$lambda_0);
  };
  MainMenuView.prototype.showBottomMenu = function () {
    var tileSize = 40.0;
    var yMargin = 210.0;
    var xGap = 90.0;
    var item0;
    if (AppController$Companion_getInstance().shared().isDesktop() === true) {
      item0 = MenuItem_init('Resource/UI/IconTutorial', void 0, void 0, void 0, void 0, void 0, this.bottomMenuItem);
    }
     else {
      item0 = MenuItem_init('Resource/UI/IconGameCenter', void 0, void 0, void 0, void 0, void 0, this.bottomMenuItem);
    }
    var currentBlock = AppController$Companion_getInstance().shared().GetCurrentBlockSetResource() + 'IconMenu';
    var item1 = MenuItem_init(currentBlock, void 0, void 0, void 0, void 0, void 0, this.bottomMenuItem);
    var item2 = MenuItem_init('Resource/UI/IconOption', void 0, void 0, void 0, void 0, void 0, this.bottomMenuItem);
    var menu = Menu_init(this, this.GetSize(), Size_init(3.0, 1.0), tileSize, void 0, [item0, item1, item2]);
    menu.prepare_1isvtk$(yMargin, xGap);
  };
  MainMenuView.prototype.beforeDetached = function () {
    var tmp$, tmp$_0;
    this.removeAction_sbe383$('Title Effect');
    (tmp$ = this.particleManager) != null ? (tmp$.clearParticlePool(), Unit) : null;
    this.particleManager = null;
    (tmp$_0 = this.particleManagerForFairy) != null ? (tmp$_0.clearParticlePool(), Unit) : null;
    this.particleManagerForFairy = null;
  };
  MainMenuView.prototype.update_mx4ult$ = function (elapsed) {
    if (this.particleManager != null) {
      ensureNotNull(this.particleManager).updateObject_mx4ult$(elapsed);
      ensureNotNull(this.particleManager).projection_1s1xds$(this.size, Position_init(0.0, 0 * this.sizeScale.yRatio, 1000.0));
    }
    if (this.particleManagerForFairy != null) {
      ensureNotNull(this.particleManagerForFairy).updateObject_mx4ult$(elapsed);
      ensureNotNull(this.particleManagerForFairy).projection_1s1xds$(this.size, Position_init(0.0, 0 * this.sizeScale.yRatio, 1000.0));
    }
    View.prototype.update_mx4ult$.call(this, elapsed);
  };
  MainMenuView.prototype.createTitleEffect = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var sprite = this.createSprite_9wuqyc$(160.0, 70.0, void 0, 'Resource/UI/Title', 280.0, void 0, void 0, this.sizeScale);
    sprite.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
    sprite.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    sprite.SetAlpha_8ca0d4$(0.0);
    (tmp$ = this.screen) != null ? (tmp$.actionFadeIn_hkbjms$(sprite, void 0, 1.0, void 0, 3.0), Unit) : null;
    var width = ensureNotNull(sprite).GetSize().width;
    var height = ensureNotNull(sprite).GetSize().height;
    var xstart = sprite.GetPosition().x - sprite.GetSize().width * 0.5;
    var ystart = 70.0 * this.sizeScale.yRatio;
    var sub;
    sub = this.createLabel_17tgk7$(160.0, 125.0, void 0, 'Stones of Eternity');
    sub.SetSize_dleff0$(200.0 * this.sizeScale.yRatio, -1.0);
    sub.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    sub.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    sub.SetAlpha_8ca0d4$(0.0);
    (tmp$_0 = this.screen) != null ? (tmp$_0.actionFadeIn_hkbjms$(sub, void 0, 1.0, 2.0, 3.0), Unit) : null;
    this.particleManager = ParticleManager_init(this);
    var performance = SystemConfigure$Companion_getInstance().GetPerformance();
    if ((tmp$_1 = this.particleManager) != null) {
      var value = 200 * performance;
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      tmp$_1.SetMaxParticle_za3lpa$(INT$result);
    }
    var camera = Camera_init_0(20.0, Position_init(0.0, 0.0, -150.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 50.0);
    camera.projection = 1;
    (tmp$_2 = this.particleManager) != null ? (tmp$_2.SetCamera_s6wt6e$(camera), Unit) : null;
  };
  function MainMenuView$createTitleEffectForRecord$lambda(closure$xstart, closure$width, closure$ystart, closure$height, this$MainMenuView) {
    return function (info) {
      var tmp$;
      var xxx = closure$xstart + Random_getInstance().arc4random_uniform_za3lpa$(numberToInt(closure$width));
      var yyy = closure$ystart + Random_getInstance().arc4random_uniform_za3lpa$(numberToInt(closure$height));
      var color = Color$Companion_getInstance().white_mx4ult$();
      var colorPick = Random_getInstance().arc4random_uniform_za3lpa$(100);
      if (colorPick < 40) {
        color = Color$Companion_getInstance().puzzleYellow_mx4ult$(0.8);
      }
      (tmp$ = this$MainMenuView.particleManager) != null ? (tmp$.createFairy_hcj0m5$(Position_init(xxx, yyy, -50.0), 15 * this$MainMenuView.sizeScale.xRatio, 10, (350 * 3 | 0) * this$MainMenuView.sizeScale.xRatio, 2.0 + Random_getInstance().arc4random_uniform_za3lpa$(100) / 100.0, 'Resource/UI/Particle', color, Position_init(0.0, 0.0, -20.0), Position_init(10 * this$MainMenuView.sizeScale.xRatio, 10 * this$MainMenuView.sizeScale.xRatio, 500.0), void 0, void 0, void 0, void 0, this$MainMenuView.title), Unit) : null;
      return true;
    };
  }
  MainMenuView.prototype.createTitleEffectForRecord = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    this.title = this.createMask_jga54f$(160.0, 200.0, 0.0, 'Resource/UI/Title', 280.0);
    (tmp$ = this.title) != null ? (tmp$.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance()), Unit) : null;
    (tmp$_0 = this.title) != null ? (tmp$_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    var width = ensureNotNull(this.title).GetSize().width;
    var height = ensureNotNull(this.title).GetSize().height;
    var xstart = ensureNotNull(this.title).GetPosition().x - ensureNotNull(this.title).GetSize().width / 2;
    var ystart = ensureNotNull(this.title).GetPosition().y;
    var sprite = this.createSprite_9wuqyc$(160.0, 200.0, void 0, 'Resource/UI/TitleOutline', 280.0, void 0, void 0, this.sizeScale);
    sprite.SetBlendMode_ieo8yr$(BlendMode$add_getInstance());
    sprite.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    sprite.SetAlpha_8ca0d4$(0.0);
    (tmp$_1 = this.screen) != null ? (tmp$_1.actionFadeIn_hkbjms$(sprite, void 0, 0.8, void 0, 6.0), Unit) : null;
    var sub = this.createSprite_9wuqyc$(160.0, 255.0, void 0, 'Resource/UI/SubTitle', 240.0, void 0, void 0, this.sizeScale);
    sub.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    sub.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    sub.SetAlpha_8ca0d4$(0.0);
    (tmp$_2 = this.screen) != null ? (tmp$_2.actionFadeIn_hkbjms$(sub, void 0, 1.0, 2.0, 3.5), Unit) : null;
    this.particleManager = ParticleManager_init(this);
    var performance = SystemConfigure$Companion_getInstance().GetPerformance();
    if ((tmp$_3 = this.particleManager) != null) {
      var value = 200 * performance;
      var INT$result;
      INT$break: do {
        if (value == null) {
          INT$result = 0;
          break INT$break;
        }
        if (Kotlin.isNumber(value)) {
          INT$result = numberToInt(value);
          break INT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toInt_0(value);
            INT$result = number;
            break INT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              INT$result = 0;
              break INT$break;
            }
             else
              throw e;
          }
        }
        INT$result = 0;
      }
       while (false);
      tmp$_3.SetMaxParticle_za3lpa$(INT$result);
    }
    var camera = Camera_init_0(20.0, Position_init(0.0, 0.0, -150.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 50.0);
    camera.projection = 1;
    (tmp$_4 = this.particleManager) != null ? (tmp$_4.SetCamera_s6wt6e$(camera), Unit) : null;
    this.createAction_xcdeti$('Title Effect', true, false, true, void 0, 0.1, void 0, MainMenuView$createTitleEffectForRecord$lambda(xstart, width, ystart, height, this));
  };
  function MainMenuView$createBackgroundEffect$lambda(closure$particleManager, closure$max, closure$rect, this$MainMenuView) {
    return function (info) {
      if (closure$particleManager.GetCurrentParticleCount() > closure$max) {
        return true;
      }
      var xxx = closure$rect.x + Random_getInstance().arc4random_uniform_za3lpa$(numberToInt(closure$rect.width));
      var yyy = closure$rect.y + Random_getInstance().arc4random_uniform_za3lpa$(numberToInt(closure$rect.height));
      var position = this$MainMenuView.positionUniversalToDevice_xpb3zu$(xxx, yyy);
      position.z = 100.0;
      var fixScreenZ = false;
      var blink = true;
      var alpha = 1.0;
      var color = Color$Companion_getInstance().white_mx4ult$(alpha);
      var colorPick = Random_getInstance().arc4random_uniform_za3lpa$(100);
      if (colorPick < 70) {
        fixScreenZ = true;
      }
      if (colorPick < 5) {
        color = Color$Companion_getInstance().puzzleYellow_mx4ult$(alpha);
      }
       else if (colorPick < 6) {
        color = Color$Companion_getInstance().puzzleBlue_mx4ult$(alpha);
      }
       else if (colorPick < 7) {
        color = Color$Companion_getInstance().puzzleRed_mx4ult$(alpha);
      }
       else if (colorPick < 8) {
        color = Color$Companion_getInstance().puzzlePurple_mx4ult$(alpha);
      }
       else if (colorPick < 10) {
        color = Color$Companion_getInstance().puzzleOrange_mx4ult$(alpha);
      }
      closure$particleManager.createFairy2_emwd81$(position, 5 * this$MainMenuView.sizeScale.xRatio, (100 * 2 | 0) * this$MainMenuView.sizeScale.xRatio, 3.0 + Random_getInstance().arc4random_uniform_za3lpa$(100) / 100.0, 'Resource/UI/ParticleFairy', color, Position_init(5.0, 5.0, -50.0), Position_init(40 * this$MainMenuView.sizeScale.xRatio, 40 * this$MainMenuView.sizeScale.xRatio, 50.0), 200 * this$MainMenuView.sizeScale.xRatio, blink, fixScreenZ, SceneLayer$background_getInstance().value, this$MainMenuView);
      return true;
    };
  }
  function MainMenuView$createBackgroundEffect$lambda_0(closure$particleManager, this$MainMenuView) {
    return function (pos, delta, speed, state, elapsed) {
      var tmp$, tmp$_0;
      switch (state.name) {
        case 'began':
          tmp$ = closure$particleManager.GetObjectList().iterator();
          while (tmp$.hasNext()) {
            var particle = tmp$.next();
            var unit = Position_init(particle.screenPosition.x - pos.x, particle.screenPosition.y - pos.y);
            var distance = unit.length2D();
            if (distance < 100 * this$MainMenuView.sizeScale.xRatio) {
              var power = 1000 * this$MainMenuView.sizeScale.xRatio - 2 * distance;
              unit.normalize();
              var tmp$_1 = particle.movement;
              var x = particle.movement.x;
              tmp$_1.x = Math_0.abs(x) * unit.normalX;
              var tmp$_2 = particle.movement;
              var x_0 = particle.movement.y;
              tmp$_2.y = Math_0.abs(x_0) * unit.normalY;
              particle.accel.x = power * unit.normalX;
              particle.accel.y = power * unit.normalY;
              particle.accelRetain.x = 0.1;
              particle.accelRetain.y = 0.1;
              particle.drag.x = 50 * this$MainMenuView.sizeScale.xRatio;
              particle.drag.y = 50 * this$MainMenuView.sizeScale.xRatio;
            }
          }

          break;
        case 'moved':
          tmp$_0 = closure$particleManager.GetObjectList().iterator();
          while (tmp$_0.hasNext()) {
            var particle_0 = tmp$_0.next();
            var unit_0 = Position_init(particle_0.screenPosition.x - pos.x, particle_0.screenPosition.y - pos.y);
            var distance_0 = unit_0.length2D();
            if (distance_0 < 100 * this$MainMenuView.sizeScale.xRatio) {
              var power_0 = 1000 * this$MainMenuView.sizeScale.xRatio - 2 * distance_0;
              unit_0.normalize();
              var tmp$_3 = particle_0.movement;
              var x_1 = particle_0.movement.x;
              tmp$_3.x = Math_0.abs(x_1) * unit_0.normalX;
              var tmp$_4 = particle_0.movement;
              var x_2 = particle_0.movement.y;
              tmp$_4.y = Math_0.abs(x_2) * unit_0.normalY;
              particle_0.accel.x = power_0 * unit_0.normalX;
              particle_0.accel.y = power_0 * unit_0.normalY;
              particle_0.accelRetain.x = 0.1;
              particle_0.accelRetain.y = 0.1;
              particle_0.drag.x = 50 * this$MainMenuView.sizeScale.xRatio;
              particle_0.drag.y = 50 * this$MainMenuView.sizeScale.xRatio;
            }
          }

          break;
      }
    };
  }
  MainMenuView.prototype.createBackgroundEffect_v32r7z$ = function (particleManager, rect, max) {
    if (max === void 0)
      max = 30;
    var tmp$;
    var quality = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 0);
    if (quality < 1) {
      return;
    }
    var camera = Camera_init_0(20.0, Position_init(0.0, 0.0, -100.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 50.0);
    particleManager.SetCamera_s6wt6e$(camera);
    var performance = SystemConfigure$Companion_getInstance().GetPerformance();
    particleManager.SetMaxParticle_za3lpa$(numberToInt(200 * performance));
    camera.projection = 1;
    particleManager.SetCamera_s6wt6e$(camera);
    var interval = 0.1;
    if (quality < 2) {
      interval = 0.2;
    }
    this.createAction_xcdeti$('Background Effect', true, false, true, void 0, interval, void 0, MainMenuView$createBackgroundEffect$lambda(particleManager, max, rect, this));
    (tmp$ = this.screen) != null ? (tmp$.addTouchListener_dal58m$(new TouchListener('Touch For Fairy', 0.0, 0.0, this.GetSize().width, this.GetSize().height, void 0, MainMenuView$createBackgroundEffect$lambda_0(particleManager, this))), Unit) : null;
  };
  function MainMenuView$createStarOld$lambda(obj, camera, elapsed) {
    if (obj.position.z < camera.position.z) {
      return true;
    }
    return false;
  }
  MainMenuView.prototype.createStarOld_iwp3ca$ = function (particleManager) {
    var tmp$;
    var color = Color$Companion_getInstance().white_mx4ult$();
    var colorPick = Random_getInstance().arc4random_uniform_za3lpa$(100);
    if (colorPick <= 5) {
      color = Color$Companion_getInstance().puzzleBlue_mx4ult$(0.6);
    }
     else if (colorPick <= 10) {
      color = Color$Companion_getInstance().puzzleYellow_mx4ult$(0.8);
    }
    var createPos = Position_init(160.0, 0.0, 0.0);
    createPos.rotateZ_mx4ult$(Random_getInstance().arc4random_uniform_za3lpa$(360));
    var obj = particleManager.createStar_2a19qk$(createPos.x, createPos.y, 800.0, 10.0, 'ParticleDot', color);
    (tmp$ = obj != null ? obj.movement : null) != null ? (tmp$.z = -1.0 * (200 + Random_getInstance().arc4random_uniform_za3lpa$(100) | 0)) : null;
    obj != null ? (obj.SetOriginalAlpha_mx4ult$(1.0), Unit) : null;
    obj != null ? (obj.keepDirection = true) : null;
    obj != null ? (obj.SetCallback_lnidq9$(MainMenuView$createStarOld$lambda), Unit) : null;
  };
  function MainMenuView$bottomMenuItem$lambda(this$MainMenuView) {
    return function (index, enable, name) {
      if (enable === false) {
        return null;
      }
      if (index === 0) {
        if (AppController$Companion_getInstance().shared().isDesktop() === true) {
          SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$MainMenuView.screen), 'MenuBGM', 0.0, 0.5);
          return TutorialView_init(2);
        }
         else {
          AppController$Companion_getInstance().shared().showLeaderboard();
        }
        return null;
      }
       else if (index === 1) {
        return new BlockTypeView();
      }
       else if (index === 2) {
        return new OptionView();
      }
      return null;
    };
  }
  function MainMenuView$menuCallback$lambda(this$MainMenuView) {
    return function (index, enable, name) {
      if (enable === false) {
        return null;
      }
      switch (index) {
        case 0:
          if (HAL$Companion_getInstance().shared().GetDebug() === false) {
            if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 0) === 0) {
              if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_3_3_COMPLETE_getInstance(), void 0, 0) === 0) {
                SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$MainMenuView.screen), 'MenuBGM', 0.0, 0.5);
                return TutorialView_init(0);
              }
            }
          }

          var configure = InfiniteConfigureForiOS_init(Rect_init(0.0, 0.0, this$MainMenuView.size.width, this$MainMenuView.size.height));
          ensureNotNull(configure).adjustTileSize();
          var game = Game_init(configure);
          SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$MainMenuView.screen), 'MenuBGM', 0.0, 0.5);
          DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$LAST_PLAYED_MODE_getInstance(), void 0, configure.modeString);
          if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
            StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(configure.needStar);
          }

          return GameView_init(game);
        case 1:
          if (HAL$Companion_getInstance().shared().GetDebug() === false) {
            if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 0) === 0) {
              if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_6_6_COMPLETE_getInstance(), void 0, 0) === 0) {
                SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$MainMenuView.screen), 'MenuBGM', 0.0, 0.5);
                return TutorialView_init(1);
              }
            }
          }

          var configure_0 = InfiniteConfigure6x6ForiOS_init(Rect_init(0.0, 0.0, this$MainMenuView.size.width, this$MainMenuView.size.height));
          ensureNotNull(configure_0).adjustTileSize();
          var game_0 = Game_init(configure_0);
          SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$MainMenuView.screen), 'MenuBGM', 0.0, 0.5);
          DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$LAST_PLAYED_MODE_getInstance(), void 0, configure_0.modeString);
          if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
            StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(configure_0.needStar);
          }

          return GameView_init(game_0);
        case 2:
          var configure_1 = ClassicConfigureForAndroid_init(Rect_init(0.0, 0.0, this$MainMenuView.size.width, this$MainMenuView.size.height));
          ensureNotNull(configure_1).adjustTileSize();
          var game_1 = Game_init(configure_1);
          SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$MainMenuView.screen), 'MenuBGM', 0.0, 0.5);
          DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$LAST_PLAYED_MODE_getInstance(), void 0, configure_1.modeString);
          if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('Demo'), 'true')) {
            StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(configure_1.needStar);
          }

          return GameView_init(game_1);
      }
      return null;
    };
  }
  MainMenuView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MainMenuView',
    interfaces: [View]
  };
  function MenuItemType(name, ordinal, value) {
    Enum.call(this);
    this.value = value;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function MenuItemType_initFields() {
    MenuItemType_initFields = function () {
    };
    MenuItemType$NORMAL_instance = new MenuItemType('NORMAL', 0, 0);
    MenuItemType$RADIO_instance = new MenuItemType('RADIO', 1, 1);
    MenuItemType$SWITCH_instance = new MenuItemType('SWITCH', 2, 2);
    MenuItemType$TEXT_instance = new MenuItemType('TEXT', 3, 3);
  }
  var MenuItemType$NORMAL_instance;
  function MenuItemType$NORMAL_getInstance() {
    MenuItemType_initFields();
    return MenuItemType$NORMAL_instance;
  }
  var MenuItemType$RADIO_instance;
  function MenuItemType$RADIO_getInstance() {
    MenuItemType_initFields();
    return MenuItemType$RADIO_instance;
  }
  var MenuItemType$SWITCH_instance;
  function MenuItemType$SWITCH_getInstance() {
    MenuItemType_initFields();
    return MenuItemType$SWITCH_instance;
  }
  var MenuItemType$TEXT_instance;
  function MenuItemType$TEXT_getInstance() {
    MenuItemType_initFields();
    return MenuItemType$TEXT_instance;
  }
  MenuItemType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MenuItemType',
    interfaces: [Enum]
  };
  function MenuItemType$values() {
    return [MenuItemType$NORMAL_getInstance(), MenuItemType$RADIO_getInstance(), MenuItemType$SWITCH_getInstance(), MenuItemType$TEXT_getInstance()];
  }
  MenuItemType.values = MenuItemType$values;
  function MenuItemType$valueOf(name) {
    switch (name) {
      case 'NORMAL':
        return MenuItemType$NORMAL_getInstance();
      case 'RADIO':
        return MenuItemType$RADIO_getInstance();
      case 'SWITCH':
        return MenuItemType$SWITCH_getInstance();
      case 'TEXT':
        return MenuItemType$TEXT_getInstance();
      default:throwISE('No enum constant com.blindcatstudio.samsara.view.MenuItemType.' + name);
    }
  }
  MenuItemType.valueOf_61zpoe$ = MenuItemType$valueOf;
  function MenuItem() {
    this.enable = true;
    this.onOff = SwitchState$on_getInstance();
    this.image = [null, null, null, null];
    this.upperCaption = '';
    this.title = '';
    this.description = [];
    this.callback = null;
    this.button = null;
    this.type = null;
    this.group = 0;
    this.fontName = 'Credits/';
    this.fadeTime = 0.2;
  }
  MenuItem.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MenuItem',
    interfaces: []
  };
  function MenuItem_init(image, title, description, type, group, fadeTime, callback, $this) {
    if (title === void 0)
      title = '';
    if (description === void 0)
      description = ['', ''];
    if (type === void 0)
      type = MenuItemType$NORMAL_getInstance();
    if (group === void 0)
      group = 0;
    if (fadeTime === void 0)
      fadeTime = 0.15;
    $this = $this || Object.create(MenuItem.prototype);
    MenuItem.call($this);
    $this.image[0] = image;
    $this.title = title;
    $this.description = description;
    $this.type = type;
    $this.group = group;
    $this.fadeTime = fadeTime;
    $this.callback = callback;
    return $this;
  }
  function MenuItem_init_0(image, title, description, type, group, fadeTime, callback, $this) {
    if (title === void 0)
      title = '';
    if (description === void 0)
      description = ['', ''];
    if (type === void 0)
      type = MenuItemType$NORMAL_getInstance();
    if (group === void 0)
      group = 0;
    if (fadeTime === void 0)
      fadeTime = 0.15;
    $this = $this || Object.create(MenuItem.prototype);
    MenuItem.call($this);
    $this.image = image;
    $this.title = title;
    $this.description = description;
    $this.type = type;
    $this.group = 0;
    $this.fadeTime = fadeTime;
    $this.callback = callback;
    return $this;
  }
  function Menu() {
    this.view = null;
    this.size = null;
    this.menuDimension = null;
    this.tileSize = 0;
    this.tileWidthScale = 0;
    this.boardTile = null;
    this.items = null;
    this.title = null;
    this.titleForWatch = null;
    this.textArea = null;
    this.inputEnable = false;
    this.current = -1;
  }
  Menu.prototype.SetDescription_xobbru$ = function (index, description) {
    var item = this.items[index];
    if (item != null) {
      item.description = description;
    }
  };
  function Menu$SetCurrent$lambda$lambda$lambda(closure$item, closure$index) {
    return function (message) {
      if (message.event === Event$button_RELEASE_getInstance()) {
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
        closure$item.callback(closure$index, true, ensureNotNull(message.sender).GetName());
        return false;
      }
      if (message.event === Event$button_DISABLED_RELEASE_getInstance()) {
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('shake');
      }
      return true;
    };
  }
  function Menu$SetCurrent$lambda$lambda(this$Menu, closure$item, closure$index) {
    return function () {
      var tmp$;
      HAL$Companion_getInstance().shared().SetInputPending_6taknv$(false);
      (tmp$ = this$Menu.textArea) != null ? (tmp$.SetMessageHandler_4mjqr2$(Menu$SetCurrent$lambda$lambda$lambda(closure$item, closure$index)), Unit) : null;
      return Unit;
    };
  }
  function Menu$SetCurrent$lambda(this$Menu, closure$item, closure$index) {
    return function () {
      var tmp$;
      (tmp$ = this$Menu.textArea) != null ? (tmp$.addText_r4v59z$(closure$item.description[closure$item.enable === true ? 0 : 1], 0.3, Menu$SetCurrent$lambda$lambda(this$Menu, closure$item, closure$index)), Unit) : null;
      return Unit;
    };
  }
  Menu.prototype.SetCurrent_za3lpa$ = function (index) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (index >= this.menuDimension.width * this.menuDimension.height) {
      return;
    }
    var item = this.items[index];
    if (item != null) {
      if (item.type !== MenuItemType$RADIO_getInstance()) {
        return;
      }
      item.onOff = SwitchState$on_getInstance();
      var button = Kotlin.isType(tmp$ = item.button, Switch) ? tmp$ : null;
      if (button != null) {
        var mask = Kotlin.isType(tmp$_0 = button.findChildByName_3m52m6$('Selected Mask'), Sprite) ? tmp$_0 : null;
        if (mask != null) {
          (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionFadeIn_hkbjms$(mask, void 0, void 0, void 0, 0.1), Unit) : null;
        }
        HAL$Companion_getInstance().shared().SetInputPending_6taknv$(true);
        (tmp$_2 = this.textArea) != null ? (tmp$_2.clearText_gam257$(0.1, Menu$SetCurrent$lambda(this, item, index)), Unit) : null;
      }
      this.current = index;
    }
  };
  Menu.prototype.GetCurrent = function () {
    return this.current;
  };
  Menu.prototype.SetEnable_fzusl$ = function (index, enable) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (index >= this.menuDimension.width * this.menuDimension.height) {
      return;
    }
    (tmp$ = this.items[index]) != null ? (tmp$.enable = enable) : null;
    if (enable === false) {
      var button = (tmp$_0 = this.items[index]) != null ? tmp$_0.button : null;
      if (button != null) {
        button.SetEnable_6taknv$(enable);
        var mask = Kotlin.isType(tmp$_1 = button.findChildByName_3m52m6$('Disabled Mask'), Sprite) ? tmp$_1 : null;
        if (mask != null) {
          mask.SetAlpha_8ca0d4$(1.0);
        }
      }
    }
     else {
      var button_0 = (tmp$_2 = this.items[index]) != null ? tmp$_2.button : null;
      if (button_0 != null) {
        button_0.SetEnable_6taknv$(enable);
        var mask_0 = Kotlin.isType(tmp$_3 = button_0.findChildByName_3m52m6$('Disabled Mask'), Sprite) ? tmp$_3 : null;
        if (mask_0 != null) {
          mask_0.SetAlpha_8ca0d4$(0.0);
        }
      }
    }
  };
  Menu.prototype.SetEnable_9klhxs$ = function (enable) {
    var i = 0;
    for (var tmp$ = enable.iterator(); tmp$.hasNext(); ++i) {
      var e = tmp$.next();
      this.SetEnable_fzusl$(i, e);
    }
  };
  Menu.prototype.GetEnable_za3lpa$ = function (index) {
    var tmp$;
    var enable = (tmp$ = this.items[index]) != null ? tmp$.enable : null;
    if (enable != null) {
      return enable;
    }
    return false;
  };
  Menu.prototype.hide = function () {
    var tmp$;
    (tmp$ = this.view.mask) != null ? (tmp$.SetShow_6taknv$(false), Unit) : null;
  };
  Menu.prototype.show = function () {
    var tmp$;
    (tmp$ = this.view.mask) != null ? (tmp$.SetShow_6taknv$(true), Unit) : null;
  };
  function Menu$prepare$lambda(closure$item, closure$index, this$Menu, closure$button) {
    return function (message) {
      if (message.event === Event$button_DISABLED_PRESS_getInstance()) {
        return true;
      }
      if (message.event === Event$button_PRESS_getInstance()) {
        if (closure$item.type === MenuItemType$SWITCH_getInstance() || closure$item.type === MenuItemType$RADIO_getInstance()) {
          if (closure$index === this$Menu.current) {
            closure$button.reaction = false;
          }
           else {
            closure$button.reaction = true;
          }
        }
        return true;
      }
      if (message.event === Event$button_DISABLED_RELEASE_getInstance()) {
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('shake');
        this$Menu.click_za3lpa$(closure$index);
        return true;
      }
      if (message.event === Event$button_RELEASE_getInstance()) {
        SoundManager$Companion_getInstance().shared().playEffect_bm4lxs$('click');
        if (this$Menu.inputEnable === true) {
          this$Menu.click_za3lpa$(closure$index);
          if (closure$item.type === MenuItemType$RADIO_getInstance()) {
            return false;
          }
        }
      }
      return true;
    };
  }
  function Menu$prepare$lambda$lambda(closure$landingAmount, this$Menu) {
    return function () {
      closure$landingAmount.v = closure$landingAmount.v + 1 | 0;
      if (closure$landingAmount.v >= this$Menu.menuDimension.height * this$Menu.menuDimension.width) {
        this$Menu.inputEnable = true;
      }
      return Unit;
    };
  }
  function Menu$prepare$lambda_0(this$Menu, closure$button, closure$baseline, closure$landingAmount) {
    return function () {
      var tmp$;
      var motion = Bounce_init(0.0, this$Menu.tileSize * 0.3, closure$button.GetPosition().y, closure$baseline.v, 0.3);
      motion.SetTimeMultiplier_mx4ult$(10.0);
      closure$button.SetYMotion_vn0wwp$(motion);
      (tmp$ = this$Menu.view.screen) != null ? (tmp$.actionDelay_ab0iom$(0.5, void 0, Menu$prepare$lambda$lambda(closure$landingAmount, this$Menu)), Unit) : null;
      return Unit;
    };
  }
  Menu.prototype.prepare_1isvtk$ = function (yMargin, xGap, yGap, yLastGap, textY, drawEmpty) {
    if (xGap === void 0)
      xGap = 0.0;
    if (yGap === void 0)
      yGap = 0.0;
    if (yLastGap === void 0)
      yLastGap = 0.0;
    if (textY === void 0)
      textY = 30.0;
    if (drawEmpty === void 0)
      drawEmpty = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    var yMargin_0 = yMargin * this.view.sizeScale.yRatio;
    var yGap_0 = yGap * this.view.sizeScale.yRatio;
    var xGap_0 = xGap * this.view.sizeScale.xRatio;
    var yLastGap_0 = yLastGap * this.view.sizeScale.yRatio;
    var menuRect = Rect_init((this.size.width - (this.menuDimension.width * (this.tileSize + xGap_0) - xGap_0)) / 2, (this.size.height - (this.menuDimension.height * (this.tileSize + yGap_0) - yGap_0)) / 2 + yMargin_0, this.menuDimension.width * (this.tileSize * this.tileWidthScale + xGap_0) - xGap_0, this.menuDimension.height * (this.tileSize + yGap_0) - yGap_0 + yLastGap_0);
    var mask = Mask_init(0.0, menuRect.y - this.tileSize * 0.5, SceneLayer$gameBoardTop_getInstance().value, 'Resource/UI/board_mask', this.view.GetSize().width, this.view.GetSize().height);
    mask.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    mask.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    this.view.addChild_g5h3xp$(mask);
    this.view.mask = mask;
    var textY_0 = textY;
    if (this.title != null) {
      if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
        HAL$Companion_getInstance().shared().SetTitle_61zpoe$(this.titleForWatch);
      }
       else {
        this.view.SetFontSize_mx4ult$(28.0);
        var title = this.view.createTextArea_pvsv9g$(160.0, textY_0, void 0, 80.0, 40.0, 0.0, 0.5, 1.0);
        title.addText_r4v59z$(ensureNotNull(this.title));
        title.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
        title.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        title.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
        title.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
        title.SetFadeMode_za3lpa$(1);
        this.view.SetFontSize_mx4ult$();
        textY_0 += 50;
      }
    }
     else {
      textY_0 += 50;
    }
    if (SystemConfigure$Companion_getInstance().isWatchOS() === true) {
      this.view.SetFontSize_mx4ult$(40.0);
    }
     else {
      this.view.SetFontSize_mx4ult$(20.0);
    }
    this.view.SetFontName_61zpoe$('MENU_/');
    this.textArea = this.view.createTextArea_pvsv9g$(160.0, textY_0, void 0, 80.0, 40.0, 0.0, 0.5, 1.0);
    (tmp$ = this.textArea) != null ? (tmp$.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_0 = this.textArea) != null ? (tmp$_0.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance()), Unit) : null;
    (tmp$_1 = this.textArea) != null ? (tmp$_1.SetFadeMode_za3lpa$(1), Unit) : null;
    this.view.SetFontSize_mx4ult$();
    var count = -1;
    var landingAmount = {v: 0};
    tmp$_2 = numberToInt(this.menuDimension.height) - 1 | 0;
    for (var y = 0; y <= tmp$_2; y++) {
      tmp$_3 = numberToInt(this.menuDimension.width) - 1 | 0;
      for (var x = 0; x <= tmp$_3; x++) {
        var index = x + Kotlin.imul(y, numberToInt(this.menuDimension.width)) | 0;
        var item = this.items[index];
        if (item != null) {
          if (item.image.length === 0) {
            continue;
          }
           else {
            var posY = this.tileSize * 0.5 + y * (this.tileSize + yGap_0);
            if (y === numberToInt(this.menuDimension.height - 1)) {
              posY += yLastGap_0;
            }
            if (this.boardTile.length === 0 === false) {
              var sprite = Sprite_init(menuRect.x + x * (this.tileSize * this.tileWidthScale + xGap_0), posY, SceneLayer$ui_getInstance().value, this.boardTile, this.tileSize * this.tileWidthScale, this.tileSize);
              sprite.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
              sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
              sprite.SetBlendMode_ieo8yr$(BlendMode$alpha_getInstance());
              sprite.SetBlendFactor_mx4ult$(1.0);
              sprite.SetAlpha_8ca0d4$(0.0);
              this.view.GetMask().addChild_g5h3xp$(sprite);
              (tmp$_4 = this.view.screen) != null ? (tmp$_4.actionFadeIn_hkbjms$(sprite, void 0, void 0, void 0, 0.5), Unit) : null;
            }
          }
          count = count + 1 | 0;
          var button;
          var posY_0 = this.tileSize * 0.5 + (y - this.menuDimension.height) * (this.tileSize + yGap_0) - yLastGap_0 - this.tileSize;
          if (item.type === MenuItemType$NORMAL_getInstance()) {
            button = Button_init(menuRect.x + x * (this.tileSize * this.tileWidthScale + xGap_0), posY_0, SceneLayer$uiTop_getInstance().value, item.image);
          }
           else if (item.type === MenuItemType$SWITCH_getInstance() || item.type === MenuItemType$RADIO_getInstance()) {
            var radio = Switch_init(menuRect.x + x * (this.tileSize * this.tileWidthScale + xGap_0), posY_0, SceneLayer$uiTop_getInstance().value, item.image);
            radio.SetOnOff_abhado$(item.onOff);
            button = radio;
          }
           else {
            button = Button_init(menuRect.x + x * (this.tileSize * this.tileWidthScale + xGap_0), posY_0, SceneLayer$uiTop_getInstance().value, null, ensureNotNull(item.image[0]), item.fontName, void 0, 20 * this.view.sizeScale.yRatio);
          }
          button.SetSize_dleff0$(this.tileSize * this.tileWidthScale, this.tileSize);
          var disabled = Sprite_init(0.0, 0.0, void 0, 'Resource/UI/menu_disabled_mask', this.tileSize * this.tileWidthScale, this.tileSize);
          disabled.SetName_61zpoe$('Disabled Mask');
          disabled.SetAlpha_8ca0d4$(0.0);
          button.addChild_g5h3xp$(disabled);
          var tmp$_7 = void 0;
          var x_0 = this.tileSize * 0.4;
          var tmp$_8 = Math_0.floor(x_0);
          var x_1 = this.tileSize * 0.4;
          var mask_0 = Sprite_init(0.0, 0.0, tmp$_7, 'Resource/UI/menu_selected_mask', tmp$_8, Math_0.floor(x_1));
          mask_0.SetName_61zpoe$('Selected Mask');
          mask_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
          mask_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
          mask_0.SetAlpha_8ca0d4$(0.0);
          button.addChild_g5h3xp$(mask_0);
          button.SetMessageHandler_4mjqr2$(Menu$prepare$lambda(item, index, this, button));
          this.view.GetMask().addChild_g5h3xp$(button);
          if (item.upperCaption.length === 0 === false) {
            var fontSize = 20.0;
            SystemConfigure$Companion_getInstance().isWatchOS();
            fontSize = fontSize * this.view.sizeScale.yRatio;
            var title_0 = TextArea_init(button.GetSize().width * 0.5, -1 * button.GetSize().height * 0.3, void 0, button.GetSize().width, button.GetSize().height * 0.2, 'Number/', fontSize, 0.0, 0.5, 1.0);
            button.addChild_g5h3xp$(title_0);
            title_0.SetShow_6taknv$(true);
            title_0.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
            title_0.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
            title_0.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
            title_0.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
            title_0.addText_r4v59z$(item.upperCaption);
          }
          if (item.title.length === 0 === false) {
            var fontSize_0 = 20.0;
            SystemConfigure$Companion_getInstance().isWatchOS();
            fontSize_0 = fontSize_0 * this.view.sizeScale.yRatio;
            var title_1 = TextArea_init(button.GetSize().width * 0.5, button.GetSize().height * 1.2, void 0, button.GetSize().width, button.GetSize().height * 0.2, 'Number/', fontSize_0, 0.0, 0.5, 1.0);
            button.addChild_g5h3xp$(title_1);
            title_1.SetShow_6taknv$(true);
            title_1.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
            title_1.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
            title_1.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
            title_1.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
            title_1.addText_r4v59z$(item.title);
          }
          button.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
          button.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
          item.button = button;
          this.SetEnable_fzusl$(index, item.enable);
          var baseline = {v: this.tileSize * 0.5 + y * (this.tileSize + yGap_0)};
          if (y === (numberToInt(this.menuDimension.height) - 1 | 0)) {
            baseline.v += yLastGap_0;
          }
          (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionDelay_ab0iom$(this.items.length * 0.1 - count * 0.05, void 0, Menu$prepare$lambda_0(this, button, baseline, landingAmount)), Unit) : null;
        }
         else {
          landingAmount.v = landingAmount.v + 1 | 0;
          if (drawEmpty === true) {
            var posY_1 = this.tileSize * 0.5 + y * (this.tileSize + yGap_0);
            if (y === (numberToInt(this.menuDimension.height) - 1 | 0)) {
              posY_1 += yLastGap_0;
            }
            if (this.boardTile.length === 0 === false) {
              var sprite_0 = Sprite_init(menuRect.x + x * (this.tileSize * this.tileWidthScale + xGap_0), posY_1, SceneLayer$ui_getInstance().value, this.boardTile, this.tileSize * this.tileWidthScale, this.tileSize);
              sprite_0.SetBlendMode_ieo8yr$(BlendMode$alpha_getInstance());
              sprite_0.SetBlendFactor_mx4ult$(1.0);
              sprite_0.SetAlpha_8ca0d4$(0.0);
              this.view.GetMask().addChild_g5h3xp$(sprite_0);
              (tmp$_6 = this.view.screen) != null ? (tmp$_6.actionFadeIn_hkbjms$(sprite_0, void 0, void 0, void 0, 0.5), Unit) : null;
            }
          }
        }
      }
    }
  };
  function Menu$click$lambda$lambda() {
    HAL$Companion_getInstance().shared().SetInputPending_6taknv$(false);
    return Unit;
  }
  function Menu$click$lambda(this$Menu, closure$item) {
    return function () {
      var tmp$;
      (tmp$ = this$Menu.textArea) != null ? (tmp$.addText_r4v59z$(closure$item.description[closure$item.onOff === SwitchState$on_getInstance() ? 0 : 1], 0.3, Menu$click$lambda$lambda), Unit) : null;
      return Unit;
    };
  }
  Menu.prototype.click_za3lpa$ = function (index) {
    var tmp$, tmp$_0;
    var item = this.items[index];
    if (item != null) {
      if (item.type === MenuItemType$NORMAL_getInstance() || item.type === MenuItemType$TEXT_getInstance()) {
        if (item.enable === true) {
          var nextView = item.callback(index, true, null);
          if (nextView != null) {
            this.inputEnable = false;
            HAL$Companion_getInstance().shared().SetInputPending_6taknv$(true);
            this.drop();
            (tmp$ = this.view.screen) != null ? (tmp$.presentView_xl35ob$(nextView, item.fadeTime), Unit) : null;
          }
        }
         else {
          item.callback(index, false, null);
        }
      }
       else if (item.type === MenuItemType$RADIO_getInstance()) {
        if (index !== this.current) {
          this.toggle_za3lpa$(index);
          item.callback(index, item.enable, null);
        }
      }
       else if (item.type === MenuItemType$SWITCH_getInstance()) {
        if (item.enable === true) {
          item.callback(index, item.enable, null);
          item.onOff = item.onOff === SwitchState$on_getInstance() ? SwitchState$off_getInstance() : SwitchState$on_getInstance();
          if (Kotlin.isType(item.button, Switch)) {
            HAL$Companion_getInstance().shared().SetInputPending_6taknv$(true);
            (tmp$_0 = this.textArea) != null ? (tmp$_0.clearText_gam257$(0.1, Menu$click$lambda(this, item)), Unit) : null;
          }
        }
      }
    }
  };
  Menu.prototype.toggle_za3lpa$ = function (touched) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$ = numberToInt(this.menuDimension.width) - 1 | 0;
    for (var x = 0; x <= tmp$; x++) {
      tmp$_0 = numberToInt(this.menuDimension.height) - 1 | 0;
      for (var y = 0; y <= tmp$_0; y++) {
        var index = x + Kotlin.imul(y, numberToInt(this.menuDimension.width)) | 0;
        var item = this.items[index];
        if (item != null) {
          if (item.type !== MenuItemType$RADIO_getInstance()) {
            continue;
          }
          if (item.group !== ((tmp$_1 = this.items[touched]) != null ? tmp$_1.group : null)) {
            continue;
          }
          var button = Kotlin.isType(tmp$_3 = (tmp$_2 = this.items[index]) != null ? tmp$_2.button : null, Switch) ? tmp$_3 : null;
          if (button != null) {
            if (index === touched) {
              this.SetCurrent_za3lpa$(index);
            }
             else {
              button.SetOnOff_abhado$(SwitchState$off_getInstance());
              var mask = Kotlin.isType(tmp$_4 = button.findChildByName_3m52m6$('Selected Mask'), Sprite) ? tmp$_4 : null;
              if (mask != null) {
                if (mask.GetAlpha() > 0) {
                  (tmp$_5 = this.view.screen) != null ? (tmp$_5.actionFadeOut_7vo5wp$(mask, void 0, void 0, 0.2), Unit) : null;
                }
              }
            }
          }
        }
      }
    }
  };
  function Menu$drop$lambda(this$Menu, closure$button) {
    return function () {
      var motion = new Motion(void 0, this$Menu.tileSize * 1.2, closure$button.GetPosition().y);
      motion.SetTimeMultiplier_mx4ult$(5.0);
      closure$button.SetYMotion_vn0wwp$(motion);
      return Unit;
    };
  }
  Menu.prototype.drop = function () {
    var tmp$, tmp$_0, tmp$_1;
    var count = -1;
    for (var y = numberToInt(this.menuDimension.height) - 1 | 0; y >= 0; y--) {
      tmp$ = numberToInt(this.menuDimension.width) - 1 | 0;
      for (var x = 0; x <= tmp$; x++) {
        var index = x + Kotlin.imul(y, numberToInt(this.menuDimension.width)) | 0;
        var button = (tmp$_0 = this.items[index]) != null ? tmp$_0.button : null;
        if (button != null) {
          count = count + 1 | 0;
          (tmp$_1 = this.view.screen) != null ? (tmp$_1.actionDelay_ab0iom$(count * 0.02, void 0, Menu$drop$lambda(this, button)), Unit) : null;
        }
      }
    }
  };
  Menu.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Menu',
    interfaces: []
  };
  function Menu_init(view, size, dimension, tileSize, tileWidthScale, items, title, titleForWatch, boardTile, $this) {
    if (tileWidthScale === void 0)
      tileWidthScale = 1.0;
    if (title === void 0)
      title = null;
    if (titleForWatch === void 0)
      titleForWatch = '';
    if (boardTile === void 0)
      boardTile = 'Resource/UI/menu_tile';
    $this = $this || Object.create(Menu.prototype);
    Menu.call($this);
    $this.view = view;
    $this.size = size;
    $this.menuDimension = dimension;
    var convSize = view.sizeUniversalToDevice_1lj1ir$('Resource/UI/menu_selected_mask', tileSize);
    $this.tileSize = convSize.width;
    $this.tileWidthScale = tileWidthScale;
    $this.items = items;
    $this.title = title;
    $this.titleForWatch = titleForWatch;
    $this.boardTile = boardTile;
    return $this;
  }
  function OptionView() {
    View_init(void 0, void 0, void 0, this);
    this.menu_zk9po$_0 = this.menu_zk9po$_0;
    this.notice_6fo1qd$_0 = this.notice_6fo1qd$_0;
    this.particleManagerForFairy_8rru26$_0 = this.particleManagerForFairy_8rru26$_0;
    this.menuBackCallback = OptionView$menuBackCallback$lambda(this);
    this.menuCallback = OptionView$menuCallback$lambda(this);
  }
  Object.defineProperty(OptionView.prototype, 'menu', {
    get: function () {
      if (this.menu_zk9po$_0 == null)
        return throwUPAE('menu');
      return this.menu_zk9po$_0;
    },
    set: function (menu) {
      this.menu_zk9po$_0 = menu;
    }
  });
  Object.defineProperty(OptionView.prototype, 'notice', {
    get: function () {
      if (this.notice_6fo1qd$_0 == null)
        return throwUPAE('notice');
      return this.notice_6fo1qd$_0;
    },
    set: function (notice) {
      this.notice_6fo1qd$_0 = notice;
    }
  });
  Object.defineProperty(OptionView.prototype, 'particleManagerForFairy', {
    get: function () {
      if (this.particleManagerForFairy_8rru26$_0 == null)
        return throwUPAE('particleManagerForFairy');
      return this.particleManagerForFairy_8rru26$_0;
    },
    set: function (particleManagerForFairy) {
      this.particleManagerForFairy_8rru26$_0 = particleManagerForFairy;
    }
  });
  function OptionView$afterAttached$lambda(this$OptionView) {
    return function (result) {
      this$OptionView.drawScreen();
    };
  }
  OptionView.prototype.afterAttached = function () {
    this.particleManagerForFairy = ParticleManager_init(this);
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('AppLovin'), 'true')) {
      this.drawScreen();
      return;
    }
    var K = SystemConfigure$Companion_getInstance().GetInteger_bm4lxs$('OptionClickCount', 0) + 1 | 0;
    SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('OptionClickCount', K);
    var playAds = false;
    if (K >= 3) {
      playAds = true;
    }
    if (playAds === true) {
      if (AppController$Companion_getInstance().shared().showInterstitial_y8twos$(OptionView$afterAttached$lambda(this)) === false) {
        this.drawScreen();
      }
       else {
        SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('OptionClickCount', 0);
        SystemConfigure$Companion_getInstance().SetDouble_io5o9c$('PlayingTimeForAds', 0.0);
        SystemConfigure$Companion_getInstance().SetInteger_bm4lxs$('PlayingCountForAds', 0);
      }
    }
     else {
      this.drawScreen();
    }
  };
  function OptionView$drawScreen$lambda$lambda(this$OptionView) {
    return function () {
      var tmp$;
      (tmp$ = this$OptionView.screen) != null ? (tmp$.presentView_xl35ob$(new MainMenuView()), Unit) : null;
      return Unit;
    };
  }
  function OptionView$drawScreen$lambda(this$OptionView) {
    return function (code) {
      var tmp$;
      if (code === TouchListener$Code_getInstance().ESCAPE || code === TouchListener$Code_getInstance().BACK) {
        this$OptionView.menu.drop();
        (tmp$ = this$OptionView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, OptionView$drawScreen$lambda$lambda(this$OptionView)), Unit) : null;
        return true;
      }
      return false;
    };
  }
  OptionView.prototype.drawScreen = function () {
    var tmp$, tmp$_0;
    View.prototype.afterAttached.call(this);
    HAL$Companion_getInstance().shared().SetBackgroundColor_qt1dr2$(28, 28, 28);
    (tmp$ = this.screen) != null ? (tmp$.isDrawTouchMark = true) : null;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var value = SceneLayer$spaceDeep_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    this.createSprite_591x4d$(160.0, 240.0, FLOAT$result, 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, false);
    var Items = ArrayList_init();
    var bgm = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BGM_VOLUME_getInstance(), void 0, 100);
    var item = MenuItem_init_0(['Resource/UI/IconSoundOn', 'Resource/UI/IconSoundOff'], void 0, [local('MENU_1'), local('MENU_2')], MenuItemType$SWITCH_getInstance(), void 0, void 0, this.menuCallback);
    if (bgm === 0) {
      item.onOff = SwitchState$off_getInstance();
    }
     else {
      item.onOff = SwitchState$on_getInstance();
    }
    Items.add_11rb$(item);
    var effect = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$EFFECT_VOLUME_getInstance(), void 0, 100);
    item = MenuItem_init_0(['Resource/UI/IconSFXOn', 'Resource/UI/IconSFXOff'], void 0, [local('MENU_3'), local('MENU_4')], MenuItemType$SWITCH_getInstance(), void 0, void 0, this.menuCallback);
    if (effect === 0) {
      item.onOff = SwitchState$off_getInstance();
    }
     else {
      item.onOff = SwitchState$on_getInstance();
    }
    Items.add_11rb$(item);
    Items.add_11rb$(MenuItem_init('Resource/UI/IconColorNormal', void 0, void 0, MenuItemType$RADIO_getInstance(), 1, void 0, this.menuCallback));
    Items.add_11rb$(MenuItem_init('Resource/UI/IconColorBlind', void 0, void 0, MenuItemType$RADIO_getInstance(), 1, void 0, this.menuCallback));
    Items.add_11rb$(MenuItem_init('Resource/UI/IconKorean', void 0, void 0, MenuItemType$RADIO_getInstance(), 0, void 0, this.menuCallback));
    Items.add_11rb$(MenuItem_init('Resource/UI/IconEnglish', void 0, void 0, MenuItemType$RADIO_getInstance(), 0, void 0, this.menuCallback));
    item = MenuItem_init('Resource/UI/IconTutorial', void 0, void 0, void 0, void 0, void 0, this.menuCallback);
    if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 0) === 0) {
      item.enable = false;
    }
    Items.add_11rb$(item);
    Items.add_11rb$(MenuItem_init('Resource/UI/IconBlindcat', void 0, void 0, void 0, void 0, void 0, this.menuCallback));
    Items.add_11rb$(MenuItem_init('Resource/UI/IconBatteryLow', 'Low', void 0, MenuItemType$RADIO_getInstance(), 2, void 0, this.menuCallback));
    Items.add_11rb$(MenuItem_init('Resource/UI/IconBatteryMedium', 'Medium', void 0, MenuItemType$RADIO_getInstance(), 2, void 0, this.menuCallback));
    Items.add_11rb$(MenuItem_init('Resource/UI/IconBatteryHigh', 'High', void 0, MenuItemType$RADIO_getInstance(), 2, void 0, this.menuCallback));
    Items.add_11rb$(null);
    var tileSize = 50.0;
    var yMargin = 0.0;
    this.menu = Menu_init(this, this.GetSize(), Size_init(4.0, 3.0), tileSize, void 0, copyToArray(Items), local('MENU_5'));
    this.menu.prepare_1isvtk$(yMargin, 20.0, 20.0);
    var color = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$COLOR_MODE_getInstance(), void 0, 'Normal');
    switch (color) {
      case 'Normal':
        this.menu.SetCurrent_za3lpa$(2);
        break;
      case 'Blind':
        this.menu.SetCurrent_za3lpa$(3);
        break;
    }
    var current = GetLocale();
    if (equals(current, 'kr'))
      this.menu.SetCurrent_za3lpa$(4);
    else
      this.menu.SetCurrent_za3lpa$(5);
    var battery = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 1);
    switch (battery) {
      case 0:
        this.menu.SetCurrent_za3lpa$(8);
        break;
      case 1:
        this.menu.SetCurrent_za3lpa$(9);
        break;
      case 2:
        this.menu.SetCurrent_za3lpa$(10);
        break;
    }
    var version = AppController$Companion_getInstance().shared().getVersionName();
    if (version != null) {
      this.SetFontHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
      this.SetFontVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
      this.SetFontSize_mx4ult$(12.0);
      this.SetFontName_61zpoe$('Main/');
      var label = this.createLabel_17tgk7$(310.0, 470.0, void 0, 'Version ' + version);
      label.SetSize_dleff0$(-1.0, 20.0 * this.sizeScale.yRatio);
    }
    var width = 20.0;
    var fontSize = 24.0;
    this.SetFontName_61zpoe$('Number/');
    this.SetFontSize_mx4ult$(fontSize);
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    var star = this.createTextArea_pvsv9g$(310.0, 5.0, void 0, 320.0, 0.0, 0.0, 0.5, 1.0);
    star.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$right_getInstance());
    star.SetTextVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    var STRING$result;
    STRING$break: do {
      if (Kotlin.isNumber(width)) {
        STRING$result = width.toString();
        break STRING$break;
      }
       else if (typeof width === 'string') {
        STRING$result = width;
        break STRING$break;
      }
       else if (typeof width === 'boolean') {
        STRING$result = width.toString();
        break STRING$break;
      }
       else if (Kotlin.isChar(width)) {
        STRING$result = width.toString();
        break STRING$break;
      }
      STRING$result = '';
    }
     while (false);
    star.addText_r4v59z$('[image Resource/UI/IconStar ' + STRING$result + '] ' + formatted(StoreManager$Companion_getInstance().shared().GetStarAmount()));
    star.SetName_61zpoe$('Star Amount');
    this.SetFontSize_mx4ult$(24.0);
    this.SetFontName_61zpoe$('Main/');
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.notice = this.createTextArea_pvsv9g$(160.0, 240.0, SceneLayer$uiTop_getInstance(), 240.0, 480.0, 0.0, 0.5, 1.0);
    this.notice.SetFadeMode_za3lpa$(1);
    this.notice.SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.notice.SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.notice.SetModal_6taknv$(true);
    this.SetFontSize_mx4ult$();
    var menu2 = Menu_init(this, this.GetSize(), Size_init(2.0, 1.0), 40.0, void 0, [MenuItem_init('Resource/UI/IconBack', void 0, void 0, void 0, void 0, void 0, this.menuBackCallback), null]);
    menu2.prepare_1isvtk$(200.0, 150.0);
    this.createBackgroundEffect_v32r7z$(this.particleManagerForFairy, Rect_init(0.0, 0.0, 320.0, 480.0));
    (tmp$_0 = this.screen) != null ? (tmp$_0.addKeydownListener_5ol7k9$('Back Key', OptionView$drawScreen$lambda(this)), Unit) : null;
  };
  OptionView.prototype.beforeDetached = function () {
    this.particleManagerForFairy.clearParticlePool();
  };
  OptionView.prototype.update_mx4ult$ = function (elapsed) {
    if (this.particleManagerForFairy != null) {
      this.particleManagerForFairy.updateObject_mx4ult$(elapsed);
      this.particleManagerForFairy.projection_1s1xds$(this.size, Position_init(0.0, 0 * this.sizeScale.yRatio, 1000.0));
    }
    View.prototype.update_mx4ult$.call(this, elapsed);
  };
  function OptionView$createBackgroundEffect$lambda(closure$particleManager, closure$max, closure$rect, this$OptionView) {
    return function (info) {
      if (closure$particleManager.GetCurrentParticleCount() > closure$max) {
        return true;
      }
      var xxx = closure$rect.x + Random_getInstance().arc4random_uniform_za3lpa$(numberToInt(closure$rect.width));
      var yyy = closure$rect.y + Random_getInstance().arc4random_uniform_za3lpa$(numberToInt(closure$rect.height));
      var position = this$OptionView.positionUniversalToDevice_xpb3zu$(xxx, yyy);
      position.z = 100.0;
      var fixScreenZ = false;
      var blink = true;
      var alpha = 1.0;
      var color = Color$Companion_getInstance().white_mx4ult$(alpha);
      var colorPick = Random_getInstance().arc4random_uniform_za3lpa$(100);
      if (colorPick < 70) {
        fixScreenZ = true;
      }
      if (colorPick < 5) {
        color = Color$Companion_getInstance().puzzleYellow_mx4ult$(alpha);
      }
       else if (colorPick < 6) {
        color = Color$Companion_getInstance().puzzleBlue_mx4ult$(alpha);
      }
       else if (colorPick < 7) {
        color = Color$Companion_getInstance().puzzleRed_mx4ult$(alpha);
      }
       else if (colorPick < 8) {
        color = Color$Companion_getInstance().puzzlePurple_mx4ult$(alpha);
      }
       else if (colorPick < 10) {
        color = Color$Companion_getInstance().puzzleOrange_mx4ult$(alpha);
      }
      closure$particleManager.createFairy2_emwd81$(position, 5 * this$OptionView.sizeScale.xRatio, (100 * 2 | 0) * this$OptionView.sizeScale.xRatio, 3.0 + Random_getInstance().arc4random_uniform_za3lpa$(100) / 100.0, 'Resource/UI/ParticleFairy', color, Position_init(5.0, 5.0, -50.0), Position_init(40 * this$OptionView.sizeScale.xRatio, 40 * this$OptionView.sizeScale.xRatio, 50.0), 200 * this$OptionView.sizeScale.xRatio, blink, fixScreenZ, SceneLayer$background_getInstance().value, this$OptionView);
      return true;
    };
  }
  function OptionView$createBackgroundEffect$lambda_0(closure$particleManager, this$OptionView) {
    return function (pos, delta, speed, state, elapsed) {
      var tmp$, tmp$_0;
      switch (state.name) {
        case 'began':
          tmp$ = closure$particleManager.GetObjectList().iterator();
          while (tmp$.hasNext()) {
            var particle = tmp$.next();
            var unit = Position_init(particle.screenPosition.x - pos.x, particle.screenPosition.y - pos.y);
            var distance = unit.length2D();
            if (distance < 100 * this$OptionView.sizeScale.xRatio) {
              var power = 1000 * this$OptionView.sizeScale.xRatio - 2 * distance;
              unit.normalize();
              var tmp$_1 = particle.movement;
              var x = particle.movement.x;
              tmp$_1.x = Math_0.abs(x) * unit.normalX;
              var tmp$_2 = particle.movement;
              var x_0 = particle.movement.y;
              tmp$_2.y = Math_0.abs(x_0) * unit.normalY;
              particle.accel.x = power * unit.normalX;
              particle.accel.y = power * unit.normalY;
              particle.accelRetain.x = 0.1;
              particle.accelRetain.y = 0.1;
              particle.drag.x = 50 * this$OptionView.sizeScale.xRatio;
              particle.drag.y = 50 * this$OptionView.sizeScale.xRatio;
            }
          }

          break;
        case 'moved':
          tmp$_0 = closure$particleManager.GetObjectList().iterator();
          while (tmp$_0.hasNext()) {
            var particle_0 = tmp$_0.next();
            var unit_0 = Position_init(particle_0.screenPosition.x - pos.x, particle_0.screenPosition.y - pos.y);
            var distance_0 = unit_0.length2D();
            if (distance_0 < 100 * this$OptionView.sizeScale.xRatio) {
              var power_0 = 1000 * this$OptionView.sizeScale.xRatio - 2 * distance_0;
              unit_0.normalize();
              var tmp$_3 = particle_0.movement;
              var x_1 = particle_0.movement.x;
              tmp$_3.x = Math_0.abs(x_1) * unit_0.normalX;
              var tmp$_4 = particle_0.movement;
              var x_2 = particle_0.movement.y;
              tmp$_4.y = Math_0.abs(x_2) * unit_0.normalY;
              particle_0.accel.x = power_0 * unit_0.normalX;
              particle_0.accel.y = power_0 * unit_0.normalY;
              particle_0.accelRetain.x = 0.1;
              particle_0.accelRetain.y = 0.1;
              particle_0.drag.x = 50 * this$OptionView.sizeScale.xRatio;
              particle_0.drag.y = 50 * this$OptionView.sizeScale.xRatio;
            }
          }

          break;
      }
    };
  }
  OptionView.prototype.createBackgroundEffect_v32r7z$ = function (particleManager, rect, max) {
    if (max === void 0)
      max = 30;
    var tmp$;
    var quality = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 0);
    if (quality < 1) {
      return;
    }
    var camera = Camera_init_0(20.0, Position_init(0.0, 0.0, -100.0), Position_init(0.0, 0.0, 0.0), Position_init(0.0, 0.0, 0.0), 90.0, 1600.0, 200.0, 50.0);
    particleManager.SetCamera_s6wt6e$(camera);
    var performance = SystemConfigure$Companion_getInstance().GetPerformance();
    particleManager.SetMaxParticle_za3lpa$(numberToInt(200 * performance));
    camera.projection = 1;
    particleManager.SetCamera_s6wt6e$(camera);
    var interval = 0.1;
    if (quality < 2) {
      interval = 0.2;
    }
    this.createAction_xcdeti$('Background Effect', true, false, true, void 0, interval, void 0, OptionView$createBackgroundEffect$lambda(particleManager, max, rect, this));
    (tmp$ = this.screen) != null ? (tmp$.addTouchListener_dal58m$(new TouchListener('Touch For Fairy', 0.0, 0.0, this.GetSize().width, this.GetSize().height, void 0, OptionView$createBackgroundEffect$lambda_0(particleManager, this))), Unit) : null;
  };
  function OptionView$menuBackCallback$lambda(this$OptionView) {
    return function (index, enable, name) {
      this$OptionView.menu.drop();
      return new MainMenuView();
    };
  }
  function OptionView$menuCallback$lambda$lambda(this$OptionView) {
    return function () {
      var tmp$;
      AppController$Companion_getInstance().shared().generateLocalFont_dleff0$(this$OptionView.size.width, this$OptionView.size.height);
      (tmp$ = this$OptionView.screen) != null ? (tmp$.presentView_xl35ob$(new OptionView()), Unit) : null;
      return Unit;
    };
  }
  function OptionView$menuCallback$lambda$lambda_0(this$OptionView) {
    return function () {
      var tmp$;
      AppController$Companion_getInstance().shared().generateLocalFont_dleff0$(this$OptionView.size.width, this$OptionView.size.height);
      (tmp$ = this$OptionView.screen) != null ? (tmp$.presentView_xl35ob$(new OptionView()), Unit) : null;
      return Unit;
    };
  }
  function OptionView$menuCallback$lambda$lambda$lambda$lambda() {
    Util$Companion_getInstance().closeNotice();
    return Unit;
  }
  function OptionView$menuCallback$lambda$lambda$lambda(this$OptionView) {
    return function () {
      var tmp$, tmp$_0;
      (tmp$ = this$OptionView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.3, void 0, OptionView$menuCallback$lambda$lambda$lambda$lambda), Unit) : null;
      (tmp$_0 = this$OptionView.screen) != null ? (tmp$_0.presentView_xl35ob$(TutorialView_init(2)), Unit) : null;
      return Unit;
    };
  }
  function OptionView$menuCallback$lambda$lambda$lambda$lambda_0() {
    Util$Companion_getInstance().closeNotice();
    return Unit;
  }
  function OptionView$menuCallback$lambda$lambda$lambda_0(this$OptionView) {
    return function () {
      var tmp$, tmp$_0;
      (tmp$ = this$OptionView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.3, void 0, OptionView$menuCallback$lambda$lambda$lambda$lambda_0), Unit) : null;
      (tmp$_0 = this$OptionView.screen) != null ? (tmp$_0.presentView_xl35ob$(TutorialView_init(3)), Unit) : null;
      return Unit;
    };
  }
  function OptionView$menuCallback$lambda$lambda_1(this$OptionView) {
    return function (button) {
      var tmp$, tmp$_0;
      if (equals(button, '3x3')) {
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$OptionView.screen), 'MenuBGM', 0.0, 0.3);
        (tmp$ = this$OptionView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, OptionView$menuCallback$lambda$lambda$lambda(this$OptionView)), Unit) : null;
      }
       else if (equals(button, '6x6')) {
        SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$OptionView.screen), 'MenuBGM', 0.0, 0.3);
        (tmp$_0 = this$OptionView.screen) != null ? (tmp$_0.actionDelay_ab0iom$(0.0, void 0, OptionView$menuCallback$lambda$lambda$lambda_0(this$OptionView)), Unit) : null;
      }
    };
  }
  function OptionView$menuCallback$lambda$lambda_2(this$OptionView) {
    return function () {
      var tmp$;
      (tmp$ = this$OptionView.screen) != null ? (tmp$.presentView_xl35ob$(new OptionView()), Unit) : null;
      return Unit;
    };
  }
  function OptionView$menuCallback$lambda$lambda_3(this$OptionView) {
    return function () {
      var tmp$;
      (tmp$ = this$OptionView.screen) != null ? (tmp$.presentView_xl35ob$(new OptionView()), Unit) : null;
      return Unit;
    };
  }
  function OptionView$menuCallback$lambda$lambda_4(this$OptionView) {
    return function () {
      var tmp$;
      (tmp$ = this$OptionView.screen) != null ? (tmp$.presentView_xl35ob$(new OptionView()), Unit) : null;
      return Unit;
    };
  }
  function OptionView$menuCallback$lambda(this$OptionView) {
    return function (index, enable, name) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
      if (enable === false) {
        return null;
      }
      switch (index) {
        case 0:
          if (SoundManager$Companion_getInstance().shared().GetBGMVolume() === 0.0) {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$BGM_VOLUME_getInstance(), void 0, 100);
            SoundManager$Companion_getInstance().shared().SetBGMVolume_mx4ult$(100.0);
            AppController$Companion_getInstance().shared().setAdsMute_6taknv$(false);
          }
           else {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$BGM_VOLUME_getInstance(), void 0, 0);
            SoundManager$Companion_getInstance().shared().SetBGMVolume_mx4ult$(0.0);
            AppController$Companion_getInstance().shared().setAdsMute_6taknv$(true);
          }

          break;
        case 1:
          if (SoundManager$Companion_getInstance().shared().GetEffectVolume() === 0.0) {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$EFFECT_VOLUME_getInstance(), void 0, 100);
            SoundManager$Companion_getInstance().shared().SetEffectVolume_mx4ult$(100.0);
          }
           else {
            DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$EFFECT_VOLUME_getInstance(), void 0, 0);
            SoundManager$Companion_getInstance().shared().SetEffectVolume_mx4ult$(0.0);
          }

          break;
        case 2:
          DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$COLOR_MODE_getInstance(), void 0, 'Normal');
          tmp$ = ItemManager$Companion_getInstance().shared().GetItemListByCategory_lssvdg$(ItemType$block_getInstance()).iterator();
          while (tmp$.hasNext()) {
            var blockInfo = tmp$.next();
            TextureManager$Companion_getInstance().shared().addAlias_puj7f4$(blockInfo.resource + 'inactive_mask', blockInfo.resource + 'inactive_mask');
          }

          break;
        case 3:
          DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$COLOR_MODE_getInstance(), void 0, 'Blind');
          tmp$_0 = ItemManager$Companion_getInstance().shared().GetItemListByCategory_lssvdg$(ItemType$block_getInstance()).iterator();
          while (tmp$_0.hasNext()) {
            var blockInfo_0 = tmp$_0.next();
            TextureManager$Companion_getInstance().shared().addAlias_puj7f4$(blockInfo_0.resource + 'inactive_mask_CB', blockInfo_0.resource + 'inactive_mask');
          }

          break;
        case 4:
          SetLocale('kr');
          DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$CURRENT_LOCALE_getInstance(), void 0, 'kr');
          (tmp$_2 = Kotlin.isType(tmp$_1 = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$_1 : null) != null ? (tmp$_2.hideAllLabel_1zqrcg$(), Unit) : null;
          (tmp$_3 = this$OptionView.screen) != null ? (tmp$_3.actionDelay_ab0iom$(0.0, void 0, OptionView$menuCallback$lambda$lambda(this$OptionView)), Unit) : null;
          break;
        case 5:
          SetLocale('en');
          DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$CURRENT_LOCALE_getInstance(), void 0, 'en');
          (tmp$_5 = Kotlin.isType(tmp$_4 = HAL$Companion_getInstance().shared().GetGuestScreen(), DeviceScene) ? tmp$_4 : null) != null ? (tmp$_5.hideAllLabel_1zqrcg$(), Unit) : null;
          (tmp$_6 = this$OptionView.screen) != null ? (tmp$_6.actionDelay_ab0iom$(0.0, void 0, OptionView$menuCallback$lambda$lambda_0(this$OptionView)), Unit) : null;
          break;
        case 6:
          Util$Companion_getInstance().showNotice_sprpts$(this$OptionView, local('MENU_54'), void 0, void 0, void 0, OptionView$menuCallback$lambda$lambda_1(this$OptionView));
          return null;
        case 7:
          window.open('https://www.blindcatstudio.com', '_blank');
          break;
        case 8:
          DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 0);
          (tmp$_7 = this$OptionView.screen) != null ? (tmp$_7.actionDelay_ab0iom$(0.0, void 0, OptionView$menuCallback$lambda$lambda_2(this$OptionView)), Unit) : null;
          break;
        case 9:
          DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 1);
          (tmp$_8 = this$OptionView.screen) != null ? (tmp$_8.actionDelay_ab0iom$(0.0, void 0, OptionView$menuCallback$lambda$lambda_3(this$OptionView)), Unit) : null;
          break;
        case 10:
          DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 2);
          (tmp$_9 = this$OptionView.screen) != null ? (tmp$_9.actionDelay_ab0iom$(0.0, void 0, OptionView$menuCallback$lambda$lambda_4(this$OptionView)), Unit) : null;
          break;
      }
      return null;
    };
  }
  OptionView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OptionView',
    interfaces: [View]
  };
  function TestView() {
    View_init(void 0, void 0, void 0, this);
  }
  function TestView$afterAttached$lambda(closure$sub) {
    return function () {
      closure$sub.SetText_61zpoe$('200');
      closure$sub.SetSize_dleff0$(200.0, -1.0);
      return Unit;
    };
  }
  TestView.prototype.afterAttached = function () {
    var tmp$, tmp$_0;
    (tmp$ = this.screen) != null ? (tmp$.isDrawTouchMark = true) : null;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var sub;
    sub = this.createLabel_17tgk7$(0.0, 0.0, void 0, '100');
    sub.SetSize_dleff0$(200.0, -1.0);
    sub.SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    sub.SetHorizontalAlign_jdpdm8$(HorizontalAlign$left_getInstance());
    sub.SetAlpha_8ca0d4$(1.0);
    (tmp$_0 = this.screen) != null ? (tmp$_0.actionDelay_ab0iom$(2.0, void 0, TestView$afterAttached$lambda(sub)), Unit) : null;
    this.SetFontName_61zpoe$('Number/');
    this.SetFontSize_mx4ult$(this.fontSize);
  };
  TestView.prototype.update_mx4ult$ = function (elapsed) {
    View.prototype.update_mx4ult$.call(this, elapsed);
  };
  TestView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TestView',
    interfaces: [View]
  };
  function ScriptInfo(script, intParam, floatParam, param) {
    this.script = script;
    this.intParam = intParam;
    this.floatParam = floatParam;
    this.param = param;
  }
  ScriptInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScriptInfo',
    interfaces: []
  };
  ScriptInfo.prototype.component1 = function () {
    return this.script;
  };
  ScriptInfo.prototype.component2 = function () {
    return this.intParam;
  };
  ScriptInfo.prototype.component3 = function () {
    return this.floatParam;
  };
  ScriptInfo.prototype.component4 = function () {
    return this.param;
  };
  ScriptInfo.prototype.copy_1f5klv$ = function (script, intParam, floatParam, param) {
    return new ScriptInfo(script === void 0 ? this.script : script, intParam === void 0 ? this.intParam : intParam, floatParam === void 0 ? this.floatParam : floatParam, param === void 0 ? this.param : param);
  };
  ScriptInfo.prototype.toString = function () {
    return 'ScriptInfo(script=' + Kotlin.toString(this.script) + (', intParam=' + Kotlin.toString(this.intParam)) + (', floatParam=' + Kotlin.toString(this.floatParam)) + (', param=' + Kotlin.toString(this.param)) + ')';
  };
  ScriptInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.script) | 0;
    result = result * 31 + Kotlin.hashCode(this.intParam) | 0;
    result = result * 31 + Kotlin.hashCode(this.floatParam) | 0;
    result = result * 31 + Kotlin.hashCode(this.param) | 0;
    return result;
  };
  ScriptInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.script, other.script) && Kotlin.equals(this.intParam, other.intParam) && Kotlin.equals(this.floatParam, other.floatParam) && Kotlin.equals(this.param, other.param)))));
  };
  function TutorialView() {
    this.gameView_pf9145$_0 = this.gameView_pf9145$_0;
    this.game_d8z56e$_0 = this.game_d8z56e$_0;
    this.enableCancel = false;
    this.exit = false;
    this.touched = false;
    this.textArea = ArrayList_init();
    this.fadeDuration = 0.2;
    this.scriptList = ArrayList_init();
    this.scriptLabel = LinkedHashMap_init();
    this.scriptFire = false;
    this.scriptCurrent = 0;
    this.scriptIfBlock = false;
    this.scriptIfCondition = true;
    this.lastResult = 0;
    this.lastIncrease = new Pair(-1, -1);
    this.imageList = ArrayList_init();
    this.mode = 0;
    this.menuCallback = TutorialView$menuCallback$lambda(this);
  }
  Object.defineProperty(TutorialView.prototype, 'gameView', {
    get: function () {
      if (this.gameView_pf9145$_0 == null)
        return throwUPAE('gameView');
      return this.gameView_pf9145$_0;
    },
    set: function (gameView) {
      this.gameView_pf9145$_0 = gameView;
    }
  });
  Object.defineProperty(TutorialView.prototype, 'game', {
    get: function () {
      if (this.game_d8z56e$_0 == null)
        return throwUPAE('game');
      return this.game_d8z56e$_0;
    },
    set: function (game) {
      this.game_d8z56e$_0 = game;
    }
  });
  function TutorialView$afterAttached$lambda(this$TutorialView) {
    return function (pos, delta, speed, event, elapsed) {
      if (equals(event, TouchListener$State$began_getInstance()))
        this$TutorialView.touched = true;
    };
  }
  function TutorialView$afterAttached$lambda$lambda(this$TutorialView) {
    return function () {
      var tmp$, tmp$_0;
      this$TutorialView.removeAllAction_jldc6z$(void 0, false);
      SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$TutorialView.screen), 'TutorialBGM', 0.0, 0.5);
      SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this$TutorialView.screen), 'MenuBGM', 100.0, 1.0);
      if (this$TutorialView.game != null) {
        this$TutorialView.game.stop();
        this$TutorialView.game.deinitGame();
      }
      if (this$TutorialView.mode === 0 || this$TutorialView.mode === 1) {
        (tmp$ = this$TutorialView.screen) != null ? (tmp$.presentView_xl35ob$(new MainMenuView()), Unit) : null;
      }
       else {
        (tmp$_0 = this$TutorialView.screen) != null ? (tmp$_0.presentView_xl35ob$(new OptionView()), Unit) : null;
      }
      return Unit;
    };
  }
  function TutorialView$afterAttached$lambda_0(this$TutorialView) {
    return function (code) {
      var tmp$;
      if (code === TouchListener$Code_getInstance().ESCAPE || code === TouchListener$Code_getInstance().BACK) {
        if (this$TutorialView.game != null) {
          if (ensureNotNull(this$TutorialView.game).isIdle() === false) {
            return true;
          }
        }
        (tmp$ = this$TutorialView.screen) != null ? (tmp$.actionDelay_ab0iom$(0.0, void 0, TutorialView$afterAttached$lambda$lambda(this$TutorialView)), Unit) : null;
        return true;
      }
      return false;
    };
  }
  TutorialView.prototype.afterAttached = function () {
    var tmp$, tmp$_0, tmp$_1;
    HAL$Companion_getInstance().shared().SetTitle_61zpoe$('');
    HAL$Companion_getInstance().shared().SetInputMode_za3lpa$(1);
    HAL$Companion_getInstance().shared().SetBackgroundColor_qt1dr2$(28, 28, 28);
    (tmp$ = this.screen) != null ? (tmp$.isDrawTouchMark = false) : null;
    this.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    var value = SceneLayer$spaceDeep_getInstance().value;
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    this.createSprite_591x4d$(160.0, 240.0, FLOAT$result, 'Resource/UI/Background', 320.0, 480.0, void 0, void 0, false);
    SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this.screen), 'TutorialBGM', 100.0, 1.0);
    HAL$Companion_getInstance().shared().changeFPS_za3lpa$(30);
    var blockId = DataUtil$Companion_getInstance().GetString_sv46oe$(DataKey$CURRENT_BLOCK_SET_getInstance(), void 0, 'BlocksetNumber');
    AppController$Companion_getInstance().shared().changeCurrentBlockSet_61zpoe$(blockId);
    this.createScriptExecutor();
    this.createDialog();
    (tmp$_0 = this.screen) != null ? (tmp$_0.addTouchListener_dal58m$(new TouchListener('For Dialog', 0.0, 0.0, this.GetSize().width, this.GetSize().height, void 0, TutorialView$afterAttached$lambda(this))), Unit) : null;
    if (this.mode === 0 || this.mode === 2) {
      this.TutorialSample3x3();
    }
     else if (this.mode === 1 || this.mode === 3) {
      this.TutorialSample6x6Item();
    }
    if (!equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('RecordForTutorial'), 'true')) {
      if ((this.mode === 2 || this.mode === 3) && DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 0) !== 0) {
        this.enableCancel = true;
      }
      if (this.enableCancel === true) {
        var menu = Menu_init(this, this.GetSize(), Size_init(2.0, 1.0), 40.0, void 0, [MenuItem_init('Resource/UI/IconBack', void 0, void 0, void 0, void 0, void 0, this.menuCallback), null]);
        menu.prepare_1isvtk$(200.0, 150.0);
      }
    }
    (tmp$_1 = this.screen) != null ? (tmp$_1.addKeydownListener_5ol7k9$('Back Key', TutorialView$afterAttached$lambda_0(this)), Unit) : null;
  };
  TutorialView.prototype.beforeDetached = function () {
  };
  TutorialView.prototype.TutorialSample3x3 = function () {
    this._PrepareGame_1zr7xk$(3, 3, void 0, void 0, void 0, [new Int32Array([1, 2, 3]), new Int32Array([2, 3, 0]), new Int32Array([0, 1, 1])], new Int32Array([1, 1, 2, 2, 2, 0, 2, 2, 2, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 0, 1, 2, 1, 2, 3, 2, 3, 0]), void 0, false, false, true);
    this._SetAvailableInputCount_za3lpa$(0);
    this._SetRegenNoMoreMove_6taknv$(false);
    this._SetTransformDelay_mx4ult$(0.4);
    this._SetMatchDelay_mx4ult$(0.8);
    this._StartGame();
    this._SetInputDisableAll_vux9f0$();
    this._Dialog_g6n5q4$(local('TUTORIAL_1'), 0);
    this._SetInputEnableList_t8430p$([new Pair(0, 2)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 2)]);
    this._ShowFinger_vux9f0$(0, 2);
    this._Dialog_g6n5q4$(local('TUTORIAL_2'), 1);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_3'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 0), new Pair(0, 1), new Pair(1, 0)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 0), new Pair(1, 0), new Pair(0, 1)]);
    this._ShowFinger_vux9f0$(0, 1);
    this._Dialog_g6n5q4$(local('TUTORIAL_4'), 1);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_5'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(1, 0), new Pair(2, 0), new Pair(0, 1), new Pair(1, 1), new Pair(0, 2)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(1, 0), new Pair(2, 0), new Pair(0, 1), new Pair(1, 1), new Pair(0, 2)]);
    this._ShowFinger_vux9f0$(0, 2);
    this._Dialog_g6n5q4$(local('TUTORIAL_6'), 1);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_15'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(2, 1), new Pair(0, 2)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(2, 1), new Pair(0, 2)]);
    this._ShowFinger_vux9f0$(2, 1);
    this._Dialog_g6n5q4$(local('TUTORIAL_16'), 1);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouchAll_24o109$(1);
    this._SetAvailableInputCount_za3lpa$(0);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_7'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 2), new Pair(1, 1), new Pair(1, 2), new Pair(2, 1)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(1, 1), new Pair(1, 2)]);
    this._ShowFinger_vux9f0$(1, 1);
    this._Dialog_g6n5q4$(local('TUTORIAL_8'), 1);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Dialog_g6n5q4$(local('TUTORIAL_11'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 0), new Pair(0, 1), new Pair(1, 1), new Pair(1, 2), new Pair(2, 2)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 0), new Pair(0, 1), new Pair(1, 1), new Pair(1, 2), new Pair(2, 2)]);
    this._ShowFinger_vux9f0$(1, 1);
    this._Dialog_g6n5q4$(local('TUTORIAL_12'), 1);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._Delay_mx4ult$(3.0);
    this._DialogClear_24o109$(0, 0.5);
    this._DialogClear_24o109$(1, 0.5);
    this._SetFadeDuration_mx4ult$(1.0);
    this._RemoveGame();
    this._Dialog_g6n5q4$(local('TUTORIAL_13'), void 0, 0.5);
    this._Delay_mx4ult$(1.0);
    this._ExitTutorial();
    this._Delay_mx4ult$(0.5);
    this._Dialog_g6n5q4$(local('TUTORIAL_14'), 1);
  };
  TutorialView.prototype.TutorialSample6x6Item = function () {
    this._PrepareGame_1zr7xk$(4, 4, 5, void 0, true, [new Int32Array([3, 1001, 2, 0]), new Int32Array([0, 0, 1, 1]), new Int32Array([4, 0, 0, 4]), new Int32Array([4, 2, 4, 4])], void 0, new Int32Array([101, 103, 102]), false, false, true);
    this._SetAvailableInputCount_za3lpa$(0);
    this._SetRegenNoMoreMove_6taknv$(false);
    this._SetTransformDelay_mx4ult$(0.4);
    this._SetMatchDelay_mx4ult$(0.8);
    this._StartGame();
    this._SetInputDisableAll_vux9f0$();
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_17'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(1, 0)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(1, 0)]);
    this._ShowFinger_vux9f0$(1, 0);
    this._Dialog_g6n5q4$(local('TUTORIAL_18'), 1);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouchAll_24o109$(1);
    this._SetAvailableInputCount_za3lpa$(0);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_9'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 1), new Pair(1, 1), new Pair(1, 2), new Pair(2, 2)]);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 1), new Pair(1, 1), new Pair(1, 2), new Pair(2, 2)]);
    this._ShowFinger_vux9f0$(2, 2);
    this._Dialog_g6n5q4$(local('TUTORIAL_10'), 1);
    this._AddBlock_q5rwfd$(new Int32Array([3, 1004, 1, 3, 0]));
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._Delay_mx4ult$(1.0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 0), new Pair(0, 1), new Pair(1, 1)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 0), new Pair(0, 1)]);
    this._ShowFinger_vux9f0$(0, 1);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([3, 1002, 1, 3, 1002]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._Delay_mx4ult$(1.0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 1), new Pair(1, 1), new Pair(1, 2), new Pair(2, 2)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 1), new Pair(1, 1), new Pair(1, 2), new Pair(2, 2)]);
    this._ShowFinger_vux9f0$(1, 1);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([0, 0, 0, 1003, 2, 3, 2]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_21'), 0);
    this._Dialog_g6n5q4$(local('TUTORIAL_29'), 1);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(2, 3), new Pair(3, 2), new Pair(3, 3)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(2, 3), new Pair(3, 2), new Pair(3, 3)]);
    this._ShowFinger_vux9f0$(3, 3);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([2, 0, 1, 0, 1001]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_22'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(3, 3)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(3, 3)]);
    this._ShowFinger_vux9f0$(3, 3);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([2, 2, 3, 3, 3]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_23'), 0);
    this._Dialog_g6n5q4$(local('TUTORIAL_30'), 1);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 0), new Pair(0, 1), new Pair(1, 0)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 0), new Pair(0, 1), new Pair(1, 0)]);
    this._ShowFinger_vux9f0$(0, 1);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([1, 0, 0, 3, 2, 3]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_24'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(0, 3)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(0, 3)]);
    this._ShowFinger_vux9f0$(0, 3);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([1, 3, 2]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_25'), 0);
    this._Dialog_g6n5q4$(local('TUTORIAL_31'), 1);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(1, 2)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(1, 2)]);
    this._ShowFinger_vux9f0$(1, 2);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([2, 1000, 1, 2, 3, 2, 2, 1]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_26'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(1, 2)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(1, 2)]);
    this._ShowFinger_vux9f0$(1, 2);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([1, 3, 3, 1, 1, 0, 2, 1, 1]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_27'), 0);
    this._Dialog_g6n5q4$(local('TUTORIAL_32'), 1);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(2, 1)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(2, 1)]);
    this._ShowFinger_vux9f0$(2, 1);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([1003, 1001, 1002, 2, 1003, 1, 1000, 0, 1002, 1]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._DialogClear_24o109$(1);
    this._Delay_mx4ult$(1.0);
    this._Dialog_g6n5q4$(local('TUTORIAL_28'), 0);
    this._SetInputDisableAll_vux9f0$();
    this._SetInputEnableList_t8430p$([new Pair(2, 3)]);
    this._Delay_mx4ult$(1.0);
    this._ShowInputMask();
    this._ShowMarkerList_t8430p$([new Pair(2, 3)]);
    this._ShowFinger_vux9f0$(2, 3);
    this._Delay_mx4ult$(1.0);
    this._WaitIdle();
    this._SetAvailableInputCount_za3lpa$(1);
    this._AddBlock_q5rwfd$(new Int32Array([3, 1, 2, 2, 3, 1, 0, 3, 2]));
    this._WaitTouch_24o109$(1);
    this._HideAll();
    this._DialogClear_24o109$(0);
    this._Delay_mx4ult$(3.0);
    this._DialogClear_24o109$(0, 0.5);
    this._DialogClear_24o109$(1, 0.5);
    this._SetFadeDuration_mx4ult$(1.0);
    this._RemoveGame();
    this._Dialog_g6n5q4$(local('TUTORIAL_20'), void 0, 0.5);
    this._Delay_mx4ult$(1.0);
    this._Exit6x6Tutorial();
    this._Delay_mx4ult$(0.5);
    this._Dialog_g6n5q4$(local('TUTORIAL_14'), 1);
  };
  function TutorialView$showExitButton$lambda$lambda$lambda(this$TutorialView) {
    return function () {
      var tmp$;
      var configure;
      if (this$TutorialView.mode === 0 || this$TutorialView.mode === 2) {
        var value = this$TutorialView.size.width;
        var FLOAT$result;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        var tmp$_0 = FLOAT$result;
        var value_0 = this$TutorialView.size.height;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        configure = InfiniteConfigureForiOS_init(Rect_init(0.0, 0.0, tmp$_0, FLOAT$result_0));
      }
       else {
        var value_1 = this$TutorialView.size.width;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_1 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toDouble(value_1);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var tmp$_1 = FLOAT$result_1;
        var value_2 = this$TutorialView.size.height;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_2 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_2)) {
            FLOAT$result_2 = numberToDouble(value_2);
            break FLOAT$break;
          }
          if (typeof value_2 === 'string') {
            try {
              var number_2 = toDouble(value_2);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        configure = InfiniteConfigure6x6ForiOS_init(Rect_init(0.0, 0.0, tmp$_1, FLOAT$result_2));
      }
      configure.adjustTileSize();
      var game = Game_init(configure);
      var view = GameView_init(game);
      (tmp$ = this$TutorialView.screen) != null ? (tmp$.presentView_xl35ob$(view), Unit) : null;
      DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$LAST_PLAYED_MODE_getInstance(), void 0, configure.modeString);
      StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(configure.needStar);
      return Unit;
    };
  }
  function TutorialView$showExitButton$lambda$lambda(this$TutorialView) {
    return function () {
      var tmp$, tmp$_0;
      if (this$TutorialView.gameView != null) {
        this$TutorialView.gameView.SetTimeToLive_mx4ult$(0.0);
        (tmp$ = this$TutorialView.screen) != null ? (tmp$.removeTouchListenerAll(), Unit) : null;
        this$TutorialView.game.deinitGame();
        (tmp$_0 = this$TutorialView.screen) != null ? (tmp$_0.actionDelay_ab0iom$(0.5, void 0, TutorialView$showExitButton$lambda$lambda$lambda(this$TutorialView)), Unit) : null;
      }
      return Unit;
    };
  }
  function TutorialView$showExitButton$lambda$lambda_0(this$TutorialView) {
    return function () {
      var tmp$;
      var configure;
      if (this$TutorialView.mode === 0 || this$TutorialView.mode === 2) {
        var value = this$TutorialView.size.width;
        var FLOAT$result;
        FLOAT$break: do {
          if (value == null) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value)) {
            FLOAT$result = numberToDouble(value);
            break FLOAT$break;
          }
          if (typeof value === 'string') {
            try {
              var number = toDouble(value);
              FLOAT$result = number;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result = 0.0;
        }
         while (false);
        var tmp$_0 = FLOAT$result;
        var value_0 = this$TutorialView.size.height;
        var FLOAT$result_0;
        FLOAT$break: do {
          if (value_0 == null) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_0)) {
            FLOAT$result_0 = numberToDouble(value_0);
            break FLOAT$break;
          }
          if (typeof value_0 === 'string') {
            try {
              var number_0 = toDouble(value_0);
              FLOAT$result_0 = number_0;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_0 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_0 = 0.0;
        }
         while (false);
        configure = InfiniteConfigureForiOS_init(Rect_init(0.0, 0.0, tmp$_0, FLOAT$result_0));
      }
       else {
        var value_1 = this$TutorialView.size.width;
        var FLOAT$result_1;
        FLOAT$break: do {
          if (value_1 == null) {
            FLOAT$result_1 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_1)) {
            FLOAT$result_1 = numberToDouble(value_1);
            break FLOAT$break;
          }
          if (typeof value_1 === 'string') {
            try {
              var number_1 = toDouble(value_1);
              FLOAT$result_1 = number_1;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_1 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_1 = 0.0;
        }
         while (false);
        var tmp$_1 = FLOAT$result_1;
        var value_2 = this$TutorialView.size.height;
        var FLOAT$result_2;
        FLOAT$break: do {
          if (value_2 == null) {
            FLOAT$result_2 = 0.0;
            break FLOAT$break;
          }
          if (Kotlin.isNumber(value_2)) {
            FLOAT$result_2 = numberToDouble(value_2);
            break FLOAT$break;
          }
          if (typeof value_2 === 'string') {
            try {
              var number_2 = toDouble(value_2);
              FLOAT$result_2 = number_2;
              break FLOAT$break;
            }
             catch (e) {
              if (Kotlin.isType(e, Exception)) {
                FLOAT$result_2 = 0.0;
                break FLOAT$break;
              }
               else
                throw e;
            }
          }
          FLOAT$result_2 = 0.0;
        }
         while (false);
        configure = InfiniteConfigure6x6ForiOS_init(Rect_init(0.0, 0.0, tmp$_1, FLOAT$result_2));
      }
      configure.adjustTileSize();
      var game = Game_init(configure);
      var view = GameView_init(game);
      (tmp$ = this$TutorialView.screen) != null ? (tmp$.presentView_xl35ob$(view), Unit) : null;
      DataUtil$Companion_getInstance().SetString_sv46oe$(DataKey$LAST_PLAYED_MODE_getInstance(), void 0, configure.modeString);
      StoreManager$Companion_getInstance().shared().decreaseStar_za3lpa$(configure.needStar);
      return Unit;
    };
  }
  function TutorialView$showExitButton$lambda(this$TutorialView) {
    return function (index, enable, name) {
      var tmp$, tmp$_0;
      if (this$TutorialView.exit === true) {
        return null;
      }
      SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$TutorialView.screen), 'TutorialBGM', 0.0, 0.5);
      if (this$TutorialView.game != null) {
        this$TutorialView.game.stop();
        (tmp$ = this$TutorialView.screen) != null ? (tmp$.actionFadeOut_7vo5wp$(this$TutorialView.gameView, void 0, void 0, 1.0, void 0, true, void 0, TutorialView$showExitButton$lambda$lambda(this$TutorialView)), Unit) : null;
      }
       else {
        (tmp$_0 = this$TutorialView.screen) != null ? (tmp$_0.actionDelay_ab0iom$(0.5, void 0, TutorialView$showExitButton$lambda$lambda_0(this$TutorialView)), Unit) : null;
      }
      this$TutorialView.exit = true;
      return null;
    };
  }
  function TutorialView$showExitButton$lambda_0(closure$menu) {
    return function (code) {
      if (code === TouchListener$Code_getInstance().ENTER) {
        closure$menu.click_za3lpa$(0);
        return true;
      }
      return false;
    };
  }
  TutorialView.prototype.showExitButton = function () {
    var tmp$;
    var item1 = MenuItem_init('Resource/UI/IconPlay', void 0, void 0, void 0, void 0, void 0, TutorialView$showExitButton$lambda(this));
    var menu = Menu_init(this, this.GetSize(), Size_init(1.0, 1.0), 60.0, void 0, [item1]);
    menu.prepare_1isvtk$(0.0, 0.0);
    (tmp$ = this.screen) != null ? (tmp$.addKeydownListener_5ol7k9$('Play', TutorialView$showExitButton$lambda_0(menu)), Unit) : null;
  };
  TutorialView.prototype.createDialog = function () {
    var value = local('TUTORIAL_FONT_SIZE');
    var FLOAT$result;
    FLOAT$break: do {
      if (value == null) {
        FLOAT$result = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value)) {
        FLOAT$result = numberToDouble(value);
        break FLOAT$break;
      }
      if (typeof value === 'string') {
        try {
          var number = toDouble(value);
          FLOAT$result = number;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result = 0.0;
    }
     while (false);
    var size = FLOAT$result;
    if (size != null) {
      this.SetFontSize_mx4ult$(size);
    }
     else {
      this.SetFontSize_mx4ult$(26.0);
    }
    this.SetFontName_61zpoe$('Main/');
    var wrapType = 2;
    if (equals(local('TUTORIAL_TEXT_WRAP_TYPE'), 'CHARACTER')) {
      wrapType = 1;
    }
    this.SetFontName_61zpoe$('TUTORIAL_/');
    var tx = this.createTextArea_pvsv9g$(160.0, 120.0, void 0, 240.0, 120.0, 0.0, 0.5, 1.0, void 0, void 0, wrapType);
    this.textArea.add_11rb$(tx);
    this.textArea.get_za3lpa$(0).SetVerticalAlign_qn2em6$(VerticalAlign$bottom_getInstance());
    this.textArea.get_za3lpa$(0).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.textArea.get_za3lpa$(0).SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.textArea.get_za3lpa$(0).SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.SetFontColor_3nzkge$();
    var value_0 = local('TUTORIAL_FONT_SIZE2');
    var FLOAT$result_0;
    FLOAT$break: do {
      if (value_0 == null) {
        FLOAT$result_0 = 0.0;
        break FLOAT$break;
      }
      if (Kotlin.isNumber(value_0)) {
        FLOAT$result_0 = numberToDouble(value_0);
        break FLOAT$break;
      }
      if (typeof value_0 === 'string') {
        try {
          var number_0 = toDouble(value_0);
          FLOAT$result_0 = number_0;
          break FLOAT$break;
        }
         catch (e) {
          if (Kotlin.isType(e, Exception)) {
            FLOAT$result_0 = 0.0;
            break FLOAT$break;
          }
           else
            throw e;
        }
      }
      FLOAT$result_0 = 0.0;
    }
     while (false);
    size = FLOAT$result_0;
    if (size != null) {
      this.SetFontSize_mx4ult$(size);
    }
     else {
      this.SetFontSize_mx4ult$(24.0);
    }
    tx = this.createTextArea_pvsv9g$(160.0, 380.0, void 0, 240.0, 0.0, 0.0, 0.5, 1.0, void 0, void 0, wrapType);
    this.textArea.add_11rb$(tx);
    this.textArea.get_za3lpa$(1).SetVerticalAlign_qn2em6$(VerticalAlign$top_getInstance());
    this.textArea.get_za3lpa$(1).SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.textArea.get_za3lpa$(1).SetTextVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
    this.textArea.get_za3lpa$(1).SetTextHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
    this.SetFontSize_mx4ult$();
  };
  function TutorialView$createScriptExecutor$lambda$lambda(this$TutorialView) {
    return function (result) {
      this$TutorialView.lastResult = result;
      this$TutorialView.scriptFire = false;
    };
  }
  function TutorialView$createScriptExecutor$lambda(this$TutorialView) {
    return function (info) {
      if (info.elapsed === 0.0) {
        return false;
      }
      if (this$TutorialView.scriptFire === false) {
        while (this$TutorialView.scriptCurrent < this$TutorialView.scriptList.size) {
          var script = this$TutorialView.scriptList.get_za3lpa$(this$TutorialView.scriptCurrent);
          this$TutorialView.scriptCurrent = this$TutorialView.scriptCurrent + 1 | 0;
          var execute = script.script(this$TutorialView.lastResult, script.intParam, script.floatParam, script.param, TutorialView$createScriptExecutor$lambda$lambda(this$TutorialView));
          if (execute.first === false) {
            this$TutorialView.lastResult = execute.second;
          }
           else {
            this$TutorialView.scriptFire = true;
            break;
          }
        }
      }
      return true;
    };
  }
  TutorialView.prototype.createScriptExecutor = function () {
    this.createAction_xcdeti$('Script Executor', void 0, void 0, void 0, void 0, void 0, void 0, TutorialView$createScriptExecutor$lambda(this));
  };
  TutorialView.prototype.addScript_lak2mh$ = function (intParam, floatParam, param, script) {
    if (intParam === void 0)
      intParam = 0;
    if (floatParam === void 0)
      floatParam = 0.0;
    if (param === void 0)
      param = [];
    this.scriptList.add_11rb$(new ScriptInfo(script, intParam, floatParam, param));
  };
  TutorialView.prototype._Label_61zpoe$ = function (label) {
    var $receiver = this.scriptLabel;
    var value = this.scriptList.size;
    $receiver.put_xwzc9p$(label, value);
  };
  function TutorialView$_IfLastResultTrueThen$lambda(this$TutorialView, closure$label) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var index = this$TutorialView.scriptLabel.get_11rb$(closure$label);
      if (index != null) {
        if (this$TutorialView.lastResult === 0) {
          this$TutorialView.scriptCurrent = index;
        }
        return new Pair(false, 0);
      }
       else {
        return new Pair(false, -1);
      }
    };
  }
  TutorialView.prototype._IfLastResultTrueThen_61zpoe$ = function (label) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_IfLastResultTrueThen$lambda(this, label));
  };
  function TutorialView$_IfLastResultFalseThen$lambda(this$TutorialView, closure$label) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var index = this$TutorialView.scriptLabel.get_11rb$(closure$label);
      if (index != null) {
        if (this$TutorialView.lastResult !== 0) {
          this$TutorialView.scriptCurrent = index;
        }
        return new Pair(false, 0);
      }
       else {
        return new Pair(false, -1);
      }
    };
  }
  TutorialView.prototype._IfLastResultFalseThen_61zpoe$ = function (label) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_IfLastResultFalseThen$lambda(this, label));
  };
  function TutorialView$_IfLessThen$lambda(this$TutorialView, closure$label, closure$value) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var index = this$TutorialView.scriptLabel.get_11rb$(closure$label);
      if (index != null) {
        if (this$TutorialView.lastResult < closure$value) {
          this$TutorialView.scriptCurrent = index;
        }
        return new Pair(false, 0);
      }
       else {
        return new Pair(false, -1);
      }
    };
  }
  TutorialView.prototype._IfLessThen_19mbxw$ = function (value, label) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_IfLessThen$lambda(this, label, value));
  };
  function TutorialView$_IfGreaterThen$lambda(this$TutorialView, closure$label, closure$value) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var index = this$TutorialView.scriptLabel.get_11rb$(closure$label);
      if (index != null) {
        if (this$TutorialView.lastResult > closure$value) {
          this$TutorialView.scriptCurrent = index;
        }
        return new Pair(false, 0);
      }
       else {
        return new Pair(false, -1);
      }
    };
  }
  TutorialView.prototype._IfGreaterThen_19mbxw$ = function (value, label) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_IfGreaterThen$lambda(this, label, value));
  };
  function TutorialView$_IfEqualThen$lambda(this$TutorialView, closure$label, closure$value) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var index = this$TutorialView.scriptLabel.get_11rb$(closure$label);
      if (index != null) {
        if (this$TutorialView.lastResult === closure$value) {
          this$TutorialView.scriptCurrent = index;
        }
        return new Pair(false, 0);
      }
       else {
        return new Pair(false, -1);
      }
    };
  }
  TutorialView.prototype._IfEqualThen_19mbxw$ = function (value, label) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_IfEqualThen$lambda(this, label, value));
  };
  function TutorialView$_Goto$lambda(this$TutorialView, closure$label) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var index = this$TutorialView.scriptLabel.get_11rb$(closure$label);
      if (index != null) {
        this$TutorialView.scriptCurrent = index;
        return new Pair(false, 0);
      }
       else {
        return new Pair(false, -1);
      }
    };
  }
  TutorialView.prototype._Goto_61zpoe$ = function (label) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_Goto$lambda(this, label));
  };
  function TutorialView$_Delay$lambda$lambda(closure$callback) {
    return function () {
      closure$callback(0);
      return Unit;
    };
  }
  function TutorialView$_Delay$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$;
      (tmp$ = this$TutorialView.screen) != null ? (tmp$.actionOnce_ab0iom$(floatParam, void 0, TutorialView$_Delay$lambda$lambda(callback)), Unit) : null;
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._Delay_mx4ult$ = function (delay) {
    this.addScript_lak2mh$(void 0, delay, void 0, TutorialView$_Delay$lambda(this));
  };
  TutorialView.prototype._ShowMask = function () {
  };
  TutorialView.prototype._HideMask = function () {
  };
  function TutorialView$_SetFadeDuration$lambda(closure$time, this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.fadeDuration = closure$time;
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetFadeDuration_mx4ult$ = function (time) {
    if (time === void 0)
      time = 0.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetFadeDuration$lambda(time, this));
  };
  function TutorialView$_WaitForTouch$lambda$lambda(this$TutorialView, closure$callback) {
    return function (info) {
      if (this$TutorialView.touched === true) {
        closure$callback(0);
        return false;
      }
      return true;
    };
  }
  function TutorialView$_WaitForTouch$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.touched = false;
      this$TutorialView.createAction_xcdeti$('Wait for touch', void 0, void 0, void 0, void 0, void 0, void 0, TutorialView$_WaitForTouch$lambda$lambda(this$TutorialView, callback));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._WaitForTouch = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_WaitForTouch$lambda(this));
  };
  function TutorialView$_Dialog$lambda(this$TutorialView, closure$index, closure$text, closure$duration) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.textArea.get_za3lpa$(closure$index).addText_r4v59z$(closure$text, closure$duration);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._Dialog_g6n5q4$ = function (text, index, duration, clear) {
    if (index === void 0)
      index = 0;
    if (duration === void 0)
      duration = 0.2;
    if (clear === void 0)
      clear = true;
    var tmp$;
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('RecordForTutorial'), 'true')) {
      return;
    }
    this.addScript_lak2mh$(void 0, void 0, [Kotlin.isType(tmp$ = text, Any) ? tmp$ : throwCCE()], TutorialView$_Dialog$lambda(this, index, text, duration));
  };
  function TutorialView$_DialogClear$lambda$lambda(closure$callback) {
    return function () {
      closure$callback(0);
      return Unit;
    };
  }
  function TutorialView$_DialogClear$lambda(this$TutorialView, closure$index, closure$duration) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.textArea.get_za3lpa$(closure$index).clearText_gam257$(closure$duration, TutorialView$_DialogClear$lambda$lambda(callback));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._DialogClear_24o109$ = function (index, duration) {
    if (index === void 0)
      index = 0;
    if (duration === void 0)
      duration = 0.2;
    if (equals(SystemConfigure$Companion_getInstance().GetConfigure_jyasbz$('RecordForTutorial'), 'true')) {
      return;
    }
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_DialogClear$lambda(this, index, duration));
  };
  TutorialView.prototype._CloseDialog = function () {
  };
  function TutorialView$_PrepareGame$lambda(this$TutorialView, closure$width, closure$height, closure$number, closure$match, closure$useItem, closure$map, closure$block, closure$reuseBlock, closure$reuseWhenNoMoreMove, closure$resetClearBlockCount, closure$item) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$;
      var value = this$TutorialView.size.width;
      var FLOAT$result;
      FLOAT$break: do {
        if (value == null) {
          FLOAT$result = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value)) {
          FLOAT$result = numberToDouble(value);
          break FLOAT$break;
        }
        if (typeof value === 'string') {
          try {
            var number = toDouble(value);
            FLOAT$result = number;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result = 0.0;
      }
       while (false);
      var tmp$_0 = FLOAT$result;
      var value_0 = this$TutorialView.size.height;
      var FLOAT$result_0;
      FLOAT$break: do {
        if (value_0 == null) {
          FLOAT$result_0 = 0.0;
          break FLOAT$break;
        }
        if (Kotlin.isNumber(value_0)) {
          FLOAT$result_0 = numberToDouble(value_0);
          break FLOAT$break;
        }
        if (typeof value_0 === 'string') {
          try {
            var number_0 = toDouble(value_0);
            FLOAT$result_0 = number_0;
            break FLOAT$break;
          }
           catch (e) {
            if (Kotlin.isType(e, Exception)) {
              FLOAT$result_0 = 0.0;
              break FLOAT$break;
            }
             else
              throw e;
          }
        }
        FLOAT$result_0 = 0.0;
      }
       while (false);
      var configure = TutorialConfigure_init(Rect_init(0.0, 0.0, tmp$_0, FLOAT$result_0));
      configure.adjustTileSize();
      configure.width = closure$width;
      configure.height = closure$height;
      configure.kindOfNumber = closure$number;
      configure.minOfComplete = closure$match;
      if (closure$number === 5) {
        configure.indexOfGroup = new Int32Array([0, 0, 0, 0, 0, -1]);
        configure.startOfGroup = new Int32Array([0]);
        configure.countOfGroup = new Int32Array([5]);
        configure.amountOfNirvana = 10;
      }
      if (closure$useItem === true) {
        configure.itemTable = new Int32Array([-1, -1, -1, -1, -1, -1, 101, 103, 102, 104, 100]);
        configure.obstacleType = 1;
      }
      this$TutorialView.game = Tutorial_init(configure);
      this$TutorialView.game.SetBoardIndex_3oypbd$(closure$map, closure$block, void 0, closure$reuseBlock, closure$reuseWhenNoMoreMove, closure$resetClearBlockCount);
      this$TutorialView.game.item = toMutableList(closure$item);
      this$TutorialView.game.quality = DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$BATTERY_USAGE_MODE_getInstance(), void 0, 2);
      this$TutorialView.gameView = View_init();
      this$TutorialView.gameView.positionScale = Scale$Companion_getInstance().copy_3fer1j$(this$TutorialView.positionScale);
      this$TutorialView.gameView.sizeScale = Scale$Companion_getInstance().copy_3fer1j$(this$TutorialView.sizeScale);
      this$TutorialView.gameView.SetSize_dleff0$(this$TutorialView.size.width, this$TutorialView.size.height);
      this$TutorialView.addChild_g5h3xp$(this$TutorialView.gameView);
      this$TutorialView.gameView.SetMasterAlpha_mx4ult$(0.0);
      (tmp$ = this$TutorialView.screen) != null ? (tmp$.actionFadeIn_hkbjms$(this$TutorialView.gameView, void 0, void 0, void 0, this$TutorialView.fadeDuration, true), Unit) : null;
      this$TutorialView.game.initGame_g5c4ga$(this$TutorialView.gameView);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._PrepareGame_1zr7xk$ = function (width, height, number, match, useItem, map, block, item, reuseBlock, reuseWhenNoMoreMove, resetClearBlockCount) {
    if (number === void 0)
      number = 4;
    if (match === void 0)
      match = 3;
    if (useItem === void 0)
      useItem = false;
    if (map === void 0)
      map = null;
    if (block === void 0)
      block = new Int32Array([]);
    if (item === void 0)
      item = new Int32Array([]);
    if (reuseBlock === void 0)
      reuseBlock = false;
    if (reuseWhenNoMoreMove === void 0)
      reuseWhenNoMoreMove = false;
    if (resetClearBlockCount === void 0)
      resetClearBlockCount = false;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_PrepareGame$lambda(this, width, height, number, match, useItem, map, block, reuseBlock, reuseWhenNoMoreMove, resetClearBlockCount, item));
  };
  function TutorialView$_StartGame$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.generateBoard();
      this$TutorialView.game.start();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._StartGame = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_StartGame$lambda(this));
  };
  function TutorialView$_SetBoard$lambda(this$TutorialView, closure$map, closure$block, closure$reuseBlock, closure$reuseWhenNoMoreMove, closure$resetClearBlockCount) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetBoardIndex_3oypbd$(closure$map, closure$block, void 0, closure$reuseBlock, closure$reuseWhenNoMoreMove, closure$resetClearBlockCount);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetBoard_tgidkk$ = function (map, block, reuseBlock, reuseWhenNoMoreMove, resetClearBlockCount) {
    if (map === void 0)
      map = null;
    if (block === void 0)
      block = new Int32Array([]);
    if (reuseBlock === void 0)
      reuseBlock = false;
    if (reuseWhenNoMoreMove === void 0)
      reuseWhenNoMoreMove = false;
    if (resetClearBlockCount === void 0)
      resetClearBlockCount = false;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetBoard$lambda(this, map, block, reuseBlock, reuseWhenNoMoreMove, resetClearBlockCount));
  };
  function TutorialView$_AddBlock$lambda(this$TutorialView, closure$block) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.addBlock_q5rwfd$(closure$block);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._AddBlock_q5rwfd$ = function (block) {
    if (block === void 0)
      block = new Int32Array([]);
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_AddBlock$lambda(this, block));
  };
  function TutorialView$_SetRegenNoMoreMove$lambda(this$TutorialView, closure$regen) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetRegenNoMoreMove_6taknv$(closure$regen);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetRegenNoMoreMove_6taknv$ = function (regen) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetRegenNoMoreMove$lambda(this, regen));
  };
  function TutorialView$_SetJustDrop$lambda(this$TutorialView, closure$type, closure$count) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetJustDrop_vux9f0$(closure$type, closure$count);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetJustDrop_vux9f0$ = function (type, count) {
    if (count === void 0)
      count = -1;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetJustDrop$lambda(this, type, count));
  };
  function TutorialView$_RegenerateBoard$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.dropOffAllBlock();
      this$TutorialView.game.regenAllBlock_za3lpa$(-9);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._RegenerateBoard = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_RegenerateBoard$lambda(this));
  };
  function TutorialView$_PauseGame$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.isPaused = true;
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._PauseGame = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_PauseGame$lambda(this));
  };
  function TutorialView$_ResumeGame$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.isPaused = false;
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._ResumeGame = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_ResumeGame$lambda(this));
  };
  function TutorialView$_RemoveGame$lambda$lambda(this$TutorialView, closure$callback) {
    return function () {
      var tmp$;
      if (this$TutorialView.gameView != null) {
        this$TutorialView.gameView.SetTimeToLive_mx4ult$(0.0);
        (tmp$ = this$TutorialView.screen) != null ? (tmp$.removeTouchListener_61zpoe$('For Game'), Unit) : null;
        if (this$TutorialView.game != null) {
          this$TutorialView.game.deinitGame();
        }
        closure$callback(0);
      }
      return Unit;
    };
  }
  function TutorialView$_RemoveGame$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$, tmp$_0;
      (tmp$ = this$TutorialView.game) != null ? (tmp$.stop(), Unit) : null;
      (tmp$_0 = this$TutorialView.screen) != null ? (tmp$_0.actionFadeOut_7vo5wp$(this$TutorialView.gameView, void 0, void 0, this$TutorialView.fadeDuration, void 0, true, void 0, TutorialView$_RemoveGame$lambda$lambda(this$TutorialView, callback)), Unit) : null;
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._RemoveGame = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_RemoveGame$lambda(this));
  };
  function TutorialView$_WaitTouch$lambda$lambda(this$TutorialView, closure$cur, closure$callback, closure$count) {
    return function (info) {
      if (info.count === 1) {
        closure$cur.v = ensureNotNull(this$TutorialView.game).gameValue.clickCount;
        ensureNotNull(this$TutorialView.game).lastIncrease = new Pair(-1, -1);
        return true;
      }
      if (info.elapsed === 0.0) {
        closure$callback(ensureNotNull(this$TutorialView.game).gameValue.clickCount - closure$cur.v | 0);
        return false;
      }
      if (ensureNotNull(this$TutorialView.game).gameValue.clickCount >= (closure$cur.v + closure$count | 0)) {
        closure$callback(ensureNotNull(this$TutorialView.game).gameValue.clickCount - closure$cur.v | 0);
        return false;
      }
      return true;
    };
  }
  function TutorialView$_WaitTouch$lambda(this$TutorialView, closure$timeLimit, closure$count) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var cur = {v: 0};
      this$TutorialView.createAction_xcdeti$('Wait Touch', void 0, void 0, void 0, closure$timeLimit, void 0, void 0, TutorialView$_WaitTouch$lambda$lambda(this$TutorialView, cur, callback, closure$count));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._WaitTouch_24o109$ = function (count, timeLimit) {
    if (count === void 0)
      count = 1;
    if (timeLimit === void 0)
      timeLimit = -1.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_WaitTouch$lambda(this, timeLimit, count));
  };
  function TutorialView$_WaitTouchAll$lambda$lambda(this$TutorialView, closure$cur, closure$callback, closure$count) {
    return function (info) {
      if (info.count === 1) {
        closure$cur.v = ensureNotNull(this$TutorialView.game).gameValue.clickAllCount;
        ensureNotNull(this$TutorialView.game).lastIncrease = new Pair(-1, -1);
        return true;
      }
      if (info.elapsed === 0.0) {
        closure$callback(ensureNotNull(this$TutorialView.game).gameValue.clickAllCount - closure$cur.v | 0);
        return false;
      }
      if (ensureNotNull(this$TutorialView.game).gameValue.clickAllCount >= (closure$cur.v + closure$count | 0)) {
        closure$callback(ensureNotNull(this$TutorialView.game).gameValue.clickAllCount - closure$cur.v | 0);
        return false;
      }
      return true;
    };
  }
  function TutorialView$_WaitTouchAll$lambda(this$TutorialView, closure$timeLimit, closure$count) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var cur = {v: 0};
      this$TutorialView.createAction_xcdeti$('Wait Touch All', void 0, void 0, void 0, closure$timeLimit, void 0, void 0, TutorialView$_WaitTouchAll$lambda$lambda(this$TutorialView, cur, callback, closure$count));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._WaitTouchAll_24o109$ = function (count, timeLimit) {
    if (count === void 0)
      count = 1;
    if (timeLimit === void 0)
      timeLimit = -1.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_WaitTouchAll$lambda(this, timeLimit, count));
  };
  function TutorialView$_WaitIdle$lambda$lambda(this$TutorialView, closure$callback) {
    return function (info) {
      if (ensureNotNull(this$TutorialView.game).isIdle() === true) {
        closure$callback(0);
        return false;
      }
      return true;
    };
  }
  function TutorialView$_WaitIdle$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.createAction_xcdeti$('Wait For Idle', void 0, void 0, void 0, void 0, void 0, void 0, TutorialView$_WaitIdle$lambda$lambda(this$TutorialView, callback));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._WaitIdle = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_WaitIdle$lambda(this));
  };
  function TutorialView$_WaitCountWithType$lambda$lambda(this$TutorialView, closure$countPerType, closure$callback) {
    return function (info) {
      var tmp$;
      var count = 0;
      tmp$ = ensureNotNull(this$TutorialView.game).gameValue.clearBlockType;
      for (var i = 0; i !== tmp$.length; ++i) {
        var type = tmp$[i];
        if (closure$countPerType[i] > type) {
          break;
        }
        count = count + 1 | 0;
      }
      if (info.elapsed === 0.0) {
        closure$callback(count);
        return false;
      }
      if (count === closure$countPerType.length) {
        closure$callback(count);
        return false;
      }
      return true;
    };
  }
  function TutorialView$_WaitCountWithType$lambda(this$TutorialView, closure$timeLimit, closure$countPerType) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.createAction_xcdeti$('Wait Crush With Type', void 0, void 0, void 0, closure$timeLimit, void 0, void 0, TutorialView$_WaitCountWithType$lambda$lambda(this$TutorialView, closure$countPerType, callback));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._WaitCountWithType_ssiet8$ = function (countPerType, timeLimit) {
    if (countPerType === void 0)
      countPerType = new Int32Array([0, 0, 0, 0]);
    if (timeLimit === void 0)
      timeLimit = -1.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_WaitCountWithType$lambda(this, timeLimit, countPerType));
  };
  function TutorialView$_WaitCountWithTypeOR$lambda$lambda(this$TutorialView, closure$countPerType, closure$callback) {
    return function (info) {
      var tmp$;
      tmp$ = ensureNotNull(this$TutorialView.game).gameValue.clearBlockType;
      for (var i = 0; i !== tmp$.length; ++i) {
        var type = tmp$[i];
        if (type >= closure$countPerType[i]) {
          closure$callback(i);
          return false;
        }
      }
      if (info.elapsed === 0.0) {
        closure$callback(-1);
        return false;
      }
      return true;
    };
  }
  function TutorialView$_WaitCountWithTypeOR$lambda(this$TutorialView, closure$timeLimit, closure$countPerType) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.createAction_xcdeti$('Wait Crush With Type', void 0, void 0, void 0, closure$timeLimit, void 0, void 0, TutorialView$_WaitCountWithTypeOR$lambda$lambda(this$TutorialView, closure$countPerType, callback));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._WaitCountWithTypeOR_ssiet8$ = function (countPerType, timeLimit) {
    if (countPerType === void 0)
      countPerType = new Int32Array([0, 0, 0, 0]);
    if (timeLimit === void 0)
      timeLimit = -1.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_WaitCountWithTypeOR$lambda(this, timeLimit, countPerType));
  };
  function TutorialView$_ResetCountWithType$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$;
      tmp$ = ensureNotNull(this$TutorialView.game).gameValue.clearBlockType;
      for (var i = 0; i !== tmp$.length; ++i) {
        ensureNotNull(this$TutorialView.game).gameValue.clearBlockType[i] = 0;
      }
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._ResetCountWithType = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_ResetCountWithType$lambda(this));
  };
  function TutorialView$_CheckLastIncrease$lambda$lambda(this$TutorialView, closure$x, closure$y, closure$callback) {
    return function (info) {
      if (ensureNotNull(this$TutorialView.game).isIdle() === true) {
        if (closure$x === ensureNotNull(this$TutorialView.game).lastIncrease.first && closure$y === ensureNotNull(this$TutorialView.game).lastIncrease.second) {
          closure$callback(0);
          return false;
        }
         else {
          closure$callback(1);
          return false;
        }
      }
      return true;
    };
  }
  function TutorialView$_CheckLastIncrease$lambda(this$TutorialView, closure$x, closure$y) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.createAction_xcdeti$('Wait Idle', void 0, void 0, void 0, void 0, void 0, void 0, TutorialView$_CheckLastIncrease$lambda$lambda(this$TutorialView, closure$x, closure$y, callback));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._CheckLastIncrease_vux9f0$ = function (x, y) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_CheckLastIncrease$lambda(this, x, y));
  };
  function TutorialView$_GetMatchCount$lambda$lambda(closure$callback, this$TutorialView) {
    return function (info) {
      closure$callback(ensureNotNull(this$TutorialView.game).gameValue.clearBlockAmount);
      return false;
    };
  }
  function TutorialView$_GetMatchCount$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.createAction_xcdeti$('Wait Idle', void 0, void 0, void 0, void 0, void 0, void 0, TutorialView$_GetMatchCount$lambda$lambda(callback, this$TutorialView));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._GetMatchCount = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_GetMatchCount$lambda(this));
  };
  function TutorialView$_ClearMatchCount$lambda$lambda(this$TutorialView, closure$callback) {
    return function (info) {
      if (ensureNotNull(this$TutorialView.game).isIdle() === true) {
        ensureNotNull(this$TutorialView.game).gameValue.clearBlockAmount = 0;
        closure$callback(0);
        return false;
      }
      return true;
    };
  }
  function TutorialView$_ClearMatchCount$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.createAction_xcdeti$('Wait Idle', void 0, void 0, void 0, void 0, void 0, void 0, TutorialView$_ClearMatchCount$lambda$lambda(this$TutorialView, callback));
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._ClearMatchCount = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_ClearMatchCount$lambda(this));
  };
  function TutorialView$_Image$lambda(this$TutorialView, closure$x, closure$y, closure$z, closure$image, closure$width, closure$height, closure$name, closure$alpha, closure$rotation) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$;
      this$TutorialView.SetChildHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      this$TutorialView.SetChildVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      var sprite = this$TutorialView.createSprite_9wuqyc$(closure$x, closure$y, closure$z, closure$image, closure$width, closure$height);
      sprite.SetName_61zpoe$(closure$name);
      sprite.SetVerticalAlign_qn2em6$(VerticalAlign$center_getInstance());
      sprite.SetHorizontalAlign_jdpdm8$(HorizontalAlign$center_getInstance());
      sprite.SetAlpha_8ca0d4$(closure$alpha);
      sprite.SetRotation_mx4ult$(closure$rotation);
      if (closure$width < 0 || closure$height < 0) {
        sprite.SetSize_dleff0$(sprite.GetSize().width * ensureNotNull(this$TutorialView.screen).sizeScale.GetConstraintSmall(), sprite.GetSize().height * ensureNotNull(this$TutorialView.screen).sizeScale.GetConstraintSmall());
      }
      (tmp$ = this$TutorialView.screen) != null ? (tmp$.addChild_g5h3xp$(sprite), Unit) : null;
      this$TutorialView.imageList.add_11rb$(sprite);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._Image_r9p8je$ = function (x, y, z, image, alpha, width, height, rotation, name) {
    if (z === void 0)
      z = SceneLayer$ui_getInstance();
    if (alpha === void 0)
      alpha = 1.0;
    if (width === void 0)
      width = -1.0;
    if (height === void 0)
      height = -1.0;
    if (rotation === void 0)
      rotation = 0.0;
    if (name === void 0)
      name = '';
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_Image$lambda(this, x, y, z, image, width, height, name, alpha, rotation));
  };
  function TutorialView$_FadeIn$lambda$lambda(closure$callback, closure$sprite, closure$time) {
    return function (info) {
      if (info.elapsed === 0.0) {
        closure$callback(0);
        return false;
      }
      closure$sprite.SetAlpha_8ca0d4$(closure$sprite.GetAlpha() + info.elapsed / closure$time);
      return true;
    };
  }
  function TutorialView$_FadeIn$lambda(this$TutorialView, closure$nodeName, closure$time) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$, tmp$_0;
      var sprite = (tmp$ = this$TutorialView.screen) != null ? tmp$.findChildByName_3m52m6$(closure$nodeName) : null;
      if (sprite != null) {
        var sprite_0 = Kotlin.isType(tmp$_0 = sprite, NodeWrapper) ? tmp$_0 : null;
        if (sprite_0 != null) {
          sprite_0.addUpdateCallback_sds54w$(void 0, void 0, void 0, void 0, closure$time, void 0, TutorialView$_FadeIn$lambda$lambda(callback, sprite_0, closure$time));
        }
      }
       else {
        callback(-1);
      }
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._FadeIn_9sobi5$ = function (nodeName, time) {
    if (time === void 0)
      time = 1.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_FadeIn$lambda(this, nodeName, time));
  };
  function TutorialView$_FadeOut$lambda$lambda(closure$callback, closure$sprite, closure$time) {
    return function (info) {
      if (info.elapsed === 0.0) {
        closure$callback(0);
        return false;
      }
      closure$sprite.SetAlpha_8ca0d4$(closure$sprite.GetAlpha() - info.elapsed / closure$time);
      return true;
    };
  }
  function TutorialView$_FadeOut$lambda(this$TutorialView, closure$nodeName, closure$time) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$, tmp$_0;
      var sprite = (tmp$ = this$TutorialView.screen) != null ? tmp$.findChildByName_3m52m6$(closure$nodeName) : null;
      if (sprite != null) {
        var sprite_0 = Kotlin.isType(tmp$_0 = sprite, NodeWrapper) ? tmp$_0 : null;
        if (sprite_0 != null) {
          sprite_0.addUpdateCallback_sds54w$(void 0, void 0, void 0, void 0, closure$time, void 0, TutorialView$_FadeOut$lambda$lambda(callback, sprite_0, closure$time));
        }
      }
       else {
        callback(-1);
      }
      return new Pair(true, 0);
    };
  }
  TutorialView.prototype._FadeOut_9sobi5$ = function (nodeName, time) {
    if (time === void 0)
      time = 1.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_FadeOut$lambda(this, nodeName, time));
  };
  function TutorialView$_RemoveNode$lambda(this$TutorialView, closure$nodeName) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$, tmp$_0;
      var node = Kotlin.isType(tmp$_0 = (tmp$ = this$TutorialView.screen) != null ? tmp$.findChildByName_3m52m6$(closure$nodeName) : null, NodeWrapper) ? tmp$_0 : null;
      if (node != null) {
        node.removeFromParent();
      }
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._RemoveNode_61zpoe$ = function (nodeName) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_RemoveNode$lambda(this, nodeName));
  };
  function TutorialView$_NodeBounce$lambda$lambda(closure$xMotion, closure$yMotion, closure$node) {
    return function (info) {
      closure$xMotion.update_mx4ult$(info.elapsed);
      closure$yMotion.update_mx4ult$(info.elapsed);
      var xDelta = closure$xMotion.GetPositionDelta();
      var yDelta = closure$yMotion.GetPositionDelta();
      closure$node.SetPosition_dleff0$(closure$node.GetPosition().x + xDelta, closure$node.GetPosition().y + yDelta);
      return true;
    };
  }
  function TutorialView$_NodeBounce$lambda(this$TutorialView, closure$nodeName, closure$speed, closure$accel, closure$position, closure$baseline, closure$reflection, closure$timeToLive) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$, tmp$_0;
      var node = Kotlin.isType(tmp$_0 = (tmp$ = this$TutorialView.screen) != null ? tmp$.findChildByName_3m52m6$(closure$nodeName) : null, NodeWrapper) ? tmp$_0 : null;
      if (node != null) {
        var xMotion = Bounce_init(closure$speed.x, closure$accel.x, closure$position.x, closure$baseline.x, closure$reflection.x);
        var yMotion = Bounce_init(closure$speed.y, closure$accel.y, closure$position.y, closure$baseline.y, closure$reflection.y);
        xMotion.SetScale_mx4ult$(ensureNotNull(this$TutorialView.screen).sizeScale.GetConstraintSmall());
        yMotion.SetScale_mx4ult$(ensureNotNull(this$TutorialView.screen).sizeScale.GetConstraintSmall());
        node.addUpdateCallback_sds54w$(void 0, void 0, void 0, void 0, closure$timeToLive, void 0, TutorialView$_NodeBounce$lambda$lambda(xMotion, yMotion, node));
      }
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._NodeBounce_d4hbt5$ = function (nodeName, speed, accel, position, baseline, reflection, timeToLive) {
    if (speed === void 0)
      speed = Position_init();
    if (accel === void 0)
      accel = Position_init();
    if (position === void 0)
      position = Position_init();
    if (baseline === void 0)
      baseline = Position_init();
    if (reflection === void 0)
      reflection = Position_init(1.0, 1.0);
    if (timeToLive === void 0)
      timeToLive = -1.0;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_NodeBounce$lambda(this, nodeName, speed, accel, position, baseline, reflection, timeToLive));
  };
  function TutorialView$_RemoveAllImage$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      for (var i = this$TutorialView.imageList.size - 1 | 0; i >= 0; i--) {
        var sprite = this$TutorialView.imageList.removeAt_za3lpa$(i);
        sprite.removeFromParent();
      }
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._RemoveAllImage = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_RemoveAllImage$lambda(this));
  };
  function TutorialView$_ExitTutorial$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      if (this$TutorialView.mode === 0 && DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_3_3_COMPLETE_getInstance(), void 0, 0) === 0) {
        DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_3_3_COMPLETE_getInstance(), void 0, 1);
      }
      if (this$TutorialView.mode === 0) {
        StoreManager$Companion_getInstance().shared().addStar_za3lpa$(10);
      }
       else {
        StoreManager$Companion_getInstance().shared().addStar_za3lpa$(0);
      }
      this$TutorialView.showExitButton();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._ExitTutorial = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_ExitTutorial$lambda(this));
  };
  function TutorialView$_Exit6x6Tutorial$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      if (this$TutorialView.mode === 1 && DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_6_6_COMPLETE_getInstance(), void 0, 0) === 0) {
        DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_6_6_COMPLETE_getInstance(), void 0, 1);
        if (DataUtil$Companion_getInstance().GetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 0) === 0) {
          DataUtil$Companion_getInstance().SetInteger_hh7mhe$(DataKey$TUTORIAL_COMPLETE_getInstance(), void 0, 1);
        }
      }
      if (this$TutorialView.mode === 1) {
        StoreManager$Companion_getInstance().shared().addStar_za3lpa$(10);
      }
       else {
        StoreManager$Companion_getInstance().shared().addStar_za3lpa$(0);
      }
      this$TutorialView.showExitButton();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._Exit6x6Tutorial = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_Exit6x6Tutorial$lambda(this));
  };
  function TutorialView$_SetInputEnableAll$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetInputEnableAll();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetInputEnableAll = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetInputEnableAll$lambda(this));
  };
  function TutorialView$_SetInputDisableAll$lambda(this$TutorialView, closure$x, closure$y) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetInputDisableAll_vux9f0$(closure$x, closure$y);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetInputDisableAll_vux9f0$ = function (x, y) {
    if (x === void 0)
      x = -1;
    if (y === void 0)
      y = -1;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetInputDisableAll$lambda(this, x, y));
  };
  function TutorialView$_SetInputEnableList$lambda(closure$list, this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$, tmp$_0;
      tmp$ = closure$list;
      for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
        var pos = tmp$[tmp$_0];
        this$TutorialView.game.SetInputEnable_vux9f0$(pos.first, pos.second);
      }
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetInputEnableList_t8430p$ = function (list) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetInputEnableList$lambda(list, this));
  };
  function TutorialView$_SetInputDisable$lambda(this$TutorialView, closure$x, closure$y) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetInputDisable_vux9f0$(closure$x, closure$y);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetInputDisable_vux9f0$ = function (x, y) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetInputDisable$lambda(this, x, y));
  };
  function TutorialView$_ShowInputMask$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.showInputMask();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._ShowInputMask = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_ShowInputMask$lambda(this));
  };
  function TutorialView$_HideInputMask$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.hideInputMask();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._HideInputMask = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_HideInputMask$lambda(this));
  };
  function TutorialView$_SetAvailableInputCount$lambda(this$TutorialView, closure$count) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetAvailableInputCount_za3lpa$(closure$count);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetAvailableInputCount_za3lpa$ = function (count) {
    if (count === void 0)
      count = -1;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetAvailableInputCount$lambda(this, count));
  };
  function TutorialView$_ShowMarkerList$lambda(closure$list, this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      var tmp$, tmp$_0;
      tmp$ = closure$list;
      for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
        var pos = tmp$[tmp$_0];
        this$TutorialView.game.showMarker_vux9f0$(pos.first, pos.second);
      }
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._ShowMarkerList_t8430p$ = function (list) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_ShowMarkerList$lambda(list, this));
  };
  function TutorialView$_HideMarker$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.hideMarker();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._HideMarker = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_HideMarker$lambda(this));
  };
  function TutorialView$_HideAll$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.hideMarker();
      this$TutorialView.game.hideFinger();
      this$TutorialView.game.hideInputMask();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._HideAll = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_HideAll$lambda(this));
  };
  function TutorialView$_ShowFinger$lambda(this$TutorialView, closure$x, closure$y) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.showFinger_vux9f0$(closure$x, closure$y);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._ShowFinger_vux9f0$ = function (x, y) {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_ShowFinger$lambda(this, x, y));
  };
  function TutorialView$_HideFinger$lambda(this$TutorialView) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.hideFinger();
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._HideFinger = function () {
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_HideFinger$lambda(this));
  };
  function TutorialView$_SetTransformDelay$lambda(this$TutorialView, closure$delay) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetTransformDelay_mx4ult$(closure$delay);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetTransformDelay_mx4ult$ = function (delay) {
    if (delay === void 0)
      delay = 0.2;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetTransformDelay$lambda(this, delay));
  };
  function TutorialView$_SetMatchDelay$lambda(this$TutorialView, closure$delay) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetMatchDelay_mx4ult$(closure$delay);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetMatchDelay_mx4ult$ = function (delay) {
    if (delay === void 0)
      delay = 0.2;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetMatchDelay$lambda(this, delay));
  };
  function TutorialView$_SetMatchEffectSpeed$lambda(this$TutorialView, closure$speed) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetMatchEffectSpeed_mx4ult$(closure$speed);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetMatchEffectSpeed_mx4ult$ = function (speed) {
    if (speed === void 0)
      speed = 0.8;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetMatchEffectSpeed$lambda(this, speed));
  };
  function TutorialView$_SetDropAdjust$lambda(this$TutorialView, closure$adjust) {
    return function (lastResult, intParam, floatParam, param, callback) {
      this$TutorialView.game.SetDropAdjust_za3lpa$(closure$adjust);
      return new Pair(false, 0);
    };
  }
  TutorialView.prototype._SetDropAdjust_za3lpa$ = function (adjust) {
    if (adjust === void 0)
      adjust = -1;
    this.addScript_lak2mh$(void 0, void 0, void 0, TutorialView$_SetDropAdjust$lambda(this, adjust));
  };
  function TutorialView$menuCallback$lambda(this$TutorialView) {
    return function (index, enable, name) {
      if (this$TutorialView.game != null) {
        if (ensureNotNull(this$TutorialView.game).isIdle() === false) {
          return null;
        }
      }
      this$TutorialView.removeAllAction_jldc6z$(void 0, false);
      SoundManager$Companion_getInstance().shared().BGMFadeOut_o5txl1$(ensureNotNull(this$TutorialView.screen), 'TutorialBGM', 0.0, 0.5);
      SoundManager$Companion_getInstance().shared().BGMFadeIn_o5txl1$(ensureNotNull(this$TutorialView.screen), 'MenuBGM', 100.0, 1.0);
      if (this$TutorialView.game != null) {
        this$TutorialView.game.stop();
        this$TutorialView.game.deinitGame();
      }
      if (this$TutorialView.mode === 0 || this$TutorialView.mode === 1) {
        return new MainMenuView();
      }
       else {
        return new OptionView();
      }
    };
  }
  TutorialView.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TutorialView',
    interfaces: [View]
  };
  function TutorialView_init(mode, $this) {
    $this = $this || Object.create(TutorialView.prototype);
    View_init(void 0, void 0, void 0, $this);
    TutorialView.call($this);
    $this.mode = mode;
    $this.SetName_61zpoe$('TutorialView');
    return $this;
  }
  function UserDataHTML() {
    this.data = LinkedHashMap_init();
  }
  UserDataHTML.prototype.SetPref_za3rmp$ = function (pref) {
  };
  UserDataHTML.prototype.Get_61zpoe$ = function (forKey) {
    return localStorage.getItem(forKey);
  };
  UserDataHTML.prototype.Set_puj7f4$ = function (value, forKey) {
    localStorage.setItem(forKey, value);
  };
  UserDataHTML.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UserDataHTML',
    interfaces: [UserLocalData]
  };
  function RequestHandlerDummy() {
  }
  RequestHandlerDummy.prototype.isLogin = function () {
    return false;
  };
  RequestHandlerDummy.prototype.loginIntent = function () {
  };
  RequestHandlerDummy.prototype.showLeaderboard = function () {
  };
  RequestHandlerDummy.prototype.submitScore_ds2soj$ = function (leaderboard, score, tag) {
  };
  RequestHandlerDummy.prototype.getVersionName = function () {
    return '1.6.0';
  };
  RequestHandlerDummy.prototype.getVersionCode = function () {
    return 50;
  };
  RequestHandlerDummy.prototype.getFile_61zpoe$ = function (file) {
    return '';
  };
  RequestHandlerDummy.prototype.isGrantedExternal = function () {
    return false;
  };
  RequestHandlerDummy.prototype.getGrantExternal_6zcd6v$ = function (callback) {
  };
  RequestHandlerDummy.prototype.shareSocial_61zpoe$ = function (path) {
    return false;
  };
  RequestHandlerDummy.prototype.isBannerReady = function () {
    return false;
  };
  RequestHandlerDummy.prototype.showAds_6taknv$ = function (show) {
  };
  RequestHandlerDummy.prototype.getHeight = function () {
    return 0;
  };
  RequestHandlerDummy.prototype.showInterstitial_6zcd6v$ = function (callabck) {
    return false;
  };
  RequestHandlerDummy.prototype.isRewardReady = function () {
    return false;
  };
  RequestHandlerDummy.prototype.playRewarded_6zcd6v$ = function (callabck) {
    return false;
  };
  RequestHandlerDummy.prototype.setAdsMute_6taknv$ = function (mute) {
  };
  RequestHandlerDummy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RequestHandlerDummy',
    interfaces: [IActivityRequestHandler]
  };
  function main(args) {
    var tmp$, tmp$_0;
    var width = 640.0;
    var height = 960.0;
    if (document.getElementById('width') != null) {
      width = toDouble((Kotlin.isType(tmp$ = document.getElementById('width'), HTMLElement) ? tmp$ : throwCCE()).innerText);
    }
    if (document.getElementById('height') != null) {
      height = toDouble((Kotlin.isType(tmp$_0 = document.getElementById('height'), HTMLElement) ? tmp$_0 : throwCCE()).innerText);
    }
    Game(GameConfig(void 0, width, height, $module$Phaser.CANVAS, 'gameDiv', void 0, void 0, void 0, void 0, PhantomLoader_init(new UserDataHTML(), new RequestHandlerDummy())));
  }
  var package$com = _.com || (_.com = {});
  var package$blindcatstudio = package$com.blindcatstudio || (package$com.blindcatstudio = {});
  var package$phantom = package$blindcatstudio.phantom || (package$blindcatstudio.phantom = {});
  package$phantom.TouchInfo = TouchInfo;
  package$phantom.GuestTexture = GuestTexture;
  package$phantom.GuestTextureAtlas = GuestTextureAtlas;
  package$phantom.GuestNode = GuestNode;
  package$phantom.GuestScreen = GuestScreen;
  package$phantom.GuestSprite = GuestSprite;
  package$phantom.GuestMask = GuestMask;
  package$phantom.GuestLabel = GuestLabel;
  Object.defineProperty(HAL, 'Companion', {
    get: HAL$Companion_getInstance
  });
  package$phantom.HAL = HAL;
  Object.defineProperty(SoundCategory, 'SFX', {
    get: SoundCategory$SFX_getInstance
  });
  Object.defineProperty(SoundCategory, 'BGM', {
    get: SoundCategory$BGM_getInstance
  });
  package$phantom.SoundCategory = SoundCategory;
  Object.defineProperty(ResourceManager, 'Companion', {
    get: ResourceManager$Companion_getInstance
  });
  package$phantom.ResourceManager = ResourceManager;
  Object.defineProperty(TextureManager, 'Companion', {
    get: TextureManager$Companion_getInstance
  });
  package$phantom.TextureManager = TextureManager;
  Object.defineProperty(TimerState, 'ready', {
    get: TimerState$ready_getInstance
  });
  Object.defineProperty(TimerState, 'running', {
    get: TimerState$running_getInstance
  });
  Object.defineProperty(TimerState, 'stopRequest', {
    get: TimerState$stopRequest_getInstance
  });
  Object.defineProperty(TimerState, 'stop', {
    get: TimerState$stop_getInstance
  });
  var package$device = package$phantom.device || (package$phantom.device = {});
  package$device.TimerState = TimerState;
  package$device.Timer_init_jy2voq$ = Timer_init;
  package$device.Timer = Timer;
  Object.defineProperty(TouchListener$State, 'began', {
    get: TouchListener$State$began_getInstance
  });
  Object.defineProperty(TouchListener$State, 'moved', {
    get: TouchListener$State$moved_getInstance
  });
  Object.defineProperty(TouchListener$State, 'ended', {
    get: TouchListener$State$ended_getInstance
  });
  Object.defineProperty(TouchListener$State, 'cancelled', {
    get: TouchListener$State$cancelled_getInstance
  });
  Object.defineProperty(TouchListener$State, 'scroll', {
    get: TouchListener$State$scroll_getInstance
  });
  Object.defineProperty(TouchListener$State, 'back', {
    get: TouchListener$State$back_getInstance
  });
  Object.defineProperty(TouchListener$State, 'keydown', {
    get: TouchListener$State$keydown_getInstance
  });
  TouchListener.State = TouchListener$State;
  Object.defineProperty(TouchListener, 'Code', {
    get: TouchListener$Code_getInstance
  });
  package$device.TouchListener = TouchListener;
  var package$graphic = package$phantom.graphic || (package$phantom.graphic = {});
  package$graphic.Animation = Animation;
  package$graphic.BlankNode_init_y2kzbl$ = BlankNode_init;
  package$graphic.BlankNode = BlankNode;
  package$graphic.Button_init_8ajt6$ = Button_init;
  package$graphic.Button = Button;
  Object.defineProperty(BlendMode, 'alpha', {
    get: BlendMode$alpha_getInstance
  });
  Object.defineProperty(BlendMode, 'add', {
    get: BlendMode$add_getInstance
  });
  Object.defineProperty(BlendMode, 'subtract', {
    get: BlendMode$subtract_getInstance
  });
  Object.defineProperty(BlendMode, 'multiply', {
    get: BlendMode$multiply_getInstance
  });
  Object.defineProperty(BlendMode, 'multiplyX2', {
    get: BlendMode$multiplyX2_getInstance
  });
  Object.defineProperty(BlendMode, 'screen', {
    get: BlendMode$screen_getInstance
  });
  Object.defineProperty(BlendMode, 'replace', {
    get: BlendMode$replace_getInstance
  });
  package$graphic.BlendMode = BlendMode;
  Object.defineProperty(Color, 'Companion', {
    get: Color$Companion_getInstance
  });
  package$graphic.Color_init_9sobi5$ = Color_init;
  package$graphic.Color_init_7b5o5w$ = Color_init_0;
  package$graphic.Color_init_hu04m1$ = Color_init_1;
  package$graphic.Color = Color;
  package$graphic.CompositeLabel_init_amizvi$ = CompositeLabel_init;
  package$graphic.CompositeLabel = CompositeLabel;
  Object.defineProperty(Object3D, 'Companion', {
    get: Object3D$Companion_getInstance
  });
  package$graphic.Object3D = Object3D;
  Object.defineProperty(Vector, 'Companion', {
    get: Vector$Companion_getInstance
  });
  package$graphic.Vector_init_dleff0$ = Vector_init;
  package$graphic.Vector_init_g3jz9k$ = Vector_init_0;
  package$graphic.Vector = Vector;
  Object.defineProperty(Position, 'Companion', {
    get: Position$Companion_getInstance
  });
  package$graphic.Position_init_y2kzbl$ = Position_init;
  package$graphic.Position = Position;
  package$graphic.Plane_init_7b5o5w$ = Plane_init;
  package$graphic.Plane = Plane;
  Object.defineProperty(Size, 'Companion', {
    get: Size$Companion_getInstance
  });
  package$graphic.Size_init_dleff0$ = Size_init;
  package$graphic.Size = Size;
  Object.defineProperty(Rect, 'Companion', {
    get: Rect$Companion_getInstance
  });
  package$graphic.Rect_init_7b5o5w$ = Rect_init;
  package$graphic.Rect = Rect;
  Object.defineProperty(Scale, 'Companion', {
    get: Scale$Companion_getInstance
  });
  package$graphic.Scale = Scale;
  Object.defineProperty(Event, 'touch_BEGIN', {
    get: Event$touch_BEGIN_getInstance
  });
  Object.defineProperty(Event, 'touch_DRAG', {
    get: Event$touch_DRAG_getInstance
  });
  Object.defineProperty(Event, 'touch_END', {
    get: Event$touch_END_getInstance
  });
  Object.defineProperty(Event, 'touch_CANCEL', {
    get: Event$touch_CANCEL_getInstance
  });
  Object.defineProperty(Event, 'window_CLOSE', {
    get: Event$window_CLOSE_getInstance
  });
  Object.defineProperty(Event, 'window_CANCEL', {
    get: Event$window_CANCEL_getInstance
  });
  Object.defineProperty(Event, 'window_OK', {
    get: Event$window_OK_getInstance
  });
  Object.defineProperty(Event, 'window_SIZE', {
    get: Event$window_SIZE_getInstance
  });
  Object.defineProperty(Event, 'window_MOVE', {
    get: Event$window_MOVE_getInstance
  });
  Object.defineProperty(Event, 'window_SHOW', {
    get: Event$window_SHOW_getInstance
  });
  Object.defineProperty(Event, 'window_HIDE', {
    get: Event$window_HIDE_getInstance
  });
  Object.defineProperty(Event, 'button_PRESS', {
    get: Event$button_PRESS_getInstance
  });
  Object.defineProperty(Event, 'button_DISABLED_PRESS', {
    get: Event$button_DISABLED_PRESS_getInstance
  });
  Object.defineProperty(Event, 'button_RELEASE', {
    get: Event$button_RELEASE_getInstance
  });
  Object.defineProperty(Event, 'button_DISABLED_RELEASE', {
    get: Event$button_DISABLED_RELEASE_getInstance
  });
  Object.defineProperty(Event, 'button_CANCEL', {
    get: Event$button_CANCEL_getInstance
  });
  Object.defineProperty(Event, 'button_STARTDRAG', {
    get: Event$button_STARTDRAG_getInstance
  });
  Object.defineProperty(Event, 'button_DRAGGING', {
    get: Event$button_DRAGGING_getInstance
  });
  Object.defineProperty(Event, 'button_ENDDRAG', {
    get: Event$button_ENDDRAG_getInstance
  });
  Object.defineProperty(Event, 'slider_MOVE', {
    get: Event$slider_MOVE_getInstance
  });
  Object.defineProperty(Event, 'move', {
    get: Event$move_getInstance
  });
  Object.defineProperty(Event, 'update', {
    get: Event$update_getInstance
  });
  package$graphic.Event = Event;
  package$graphic.Message = Message;
  package$graphic.Label_init_m2pqfq$ = Label_init;
  package$graphic.Label = Label;
  package$graphic.Mask_init_cg5jzu$ = Mask_init;
  package$graphic.Mask_init_c8qbba$ = Mask_init_0;
  package$graphic.Mask = Mask;
  package$graphic.MotionInfo = MotionInfo;
  package$graphic.CallbackInfo = CallbackInfo;
  package$graphic.LocalVariables = LocalVariables;
  Object.defineProperty(VerticalAlign, 'top', {
    get: VerticalAlign$top_getInstance
  });
  Object.defineProperty(VerticalAlign, 'center', {
    get: VerticalAlign$center_getInstance
  });
  Object.defineProperty(VerticalAlign, 'bottom', {
    get: VerticalAlign$bottom_getInstance
  });
  package$graphic.VerticalAlign = VerticalAlign;
  Object.defineProperty(HorizontalAlign, 'left', {
    get: HorizontalAlign$left_getInstance
  });
  Object.defineProperty(HorizontalAlign, 'center', {
    get: HorizontalAlign$center_getInstance
  });
  Object.defineProperty(HorizontalAlign, 'right', {
    get: HorizontalAlign$right_getInstance
  });
  package$graphic.HorizontalAlign = HorizontalAlign;
  package$graphic.Node_init_y2kzbl$ = Node_init;
  package$graphic.Node = Node;
  package$graphic.NodeWrapper_init_y2kzbl$ = NodeWrapper_init;
  package$graphic.NodeWrapper = NodeWrapper;
  Object.defineProperty(package$graphic, 'Random', {
    get: Random_getInstance
  });
  Object.defineProperty(Camera, 'Companion', {
    get: Camera$Companion_getInstance
  });
  package$graphic.Camera_init_u2zgyh$ = Camera_init;
  package$graphic.Camera_init_6a4htl$ = Camera_init_0;
  package$graphic.Camera = Camera;
  Object.defineProperty(Particle, 'Companion', {
    get: Particle$Companion_getInstance
  });
  package$graphic.Particle = Particle;
  package$graphic.Background = Background;
  package$graphic.Polygon_init_6taknv$ = Polygon_init;
  package$graphic.Polygon_init_xiwfbb$ = Polygon_init_0;
  package$graphic.Polygon = Polygon;
  package$graphic.ParticleManager_init_b2yzb6$ = ParticleManager_init;
  package$graphic.ParticleManager = ParticleManager;
  package$graphic.Motion = Motion;
  package$graphic.Bounce_init_s2l86p$ = Bounce_init;
  package$graphic.Bounce = Bounce;
  package$graphic.Wave_init_7b5o5w$ = Wave_init;
  package$graphic.Wave_init_s2l86p$ = Wave_init_0;
  package$graphic.Wave = Wave;
  package$graphic.HyperTan_init_y2kzbl$ = HyperTan_init;
  package$graphic.HyperTan = HyperTan;
  Object.defineProperty(SceneLayer, 'spaceDeep', {
    get: SceneLayer$spaceDeep_getInstance
  });
  Object.defineProperty(SceneLayer, 'backgroundBottom', {
    get: SceneLayer$backgroundBottom_getInstance
  });
  Object.defineProperty(SceneLayer, 'background', {
    get: SceneLayer$background_getInstance
  });
  Object.defineProperty(SceneLayer, 'backgroundTop', {
    get: SceneLayer$backgroundTop_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameBoardBottom', {
    get: SceneLayer$gameBoardBottom_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameBoard', {
    get: SceneLayer$gameBoard_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameBoardTop', {
    get: SceneLayer$gameBoardTop_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameTileBottom', {
    get: SceneLayer$gameTileBottom_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameTile', {
    get: SceneLayer$gameTile_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameTileTop', {
    get: SceneLayer$gameTileTop_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameEffectBottom', {
    get: SceneLayer$gameEffectBottom_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameEffect', {
    get: SceneLayer$gameEffect_getInstance
  });
  Object.defineProperty(SceneLayer, 'gameEffectTop', {
    get: SceneLayer$gameEffectTop_getInstance
  });
  Object.defineProperty(SceneLayer, 'uiBottom', {
    get: SceneLayer$uiBottom_getInstance
  });
  Object.defineProperty(SceneLayer, 'ui', {
    get: SceneLayer$ui_getInstance
  });
  Object.defineProperty(SceneLayer, 'uiTop', {
    get: SceneLayer$uiTop_getInstance
  });
  Object.defineProperty(SceneLayer, 'uiForemost', {
    get: SceneLayer$uiForemost_getInstance
  });
  Object.defineProperty(SceneLayer, 'uiModalMask', {
    get: SceneLayer$uiModalMask_getInstance
  });
  Object.defineProperty(SceneLayer, 'uiModal', {
    get: SceneLayer$uiModal_getInstance
  });
  Object.defineProperty(SceneLayer, 'parent', {
    get: SceneLayer$parent_getInstance
  });
  package$graphic.SceneLayer = SceneLayer;
  Object.defineProperty(WindowProperty, 'None', {
    get: WindowProperty$None_getInstance
  });
  Object.defineProperty(WindowProperty, 'CloseButton', {
    get: WindowProperty$CloseButton_getInstance
  });
  Object.defineProperty(WindowProperty, 'OkButton', {
    get: WindowProperty$OkButton_getInstance
  });
  Object.defineProperty(WindowProperty, 'CancelButton', {
    get: WindowProperty$CancelButton_getInstance
  });
  Object.defineProperty(WindowProperty, 'Sizable', {
    get: WindowProperty$Sizable_getInstance
  });
  Object.defineProperty(WindowProperty, 'Movable', {
    get: WindowProperty$Movable_getInstance
  });
  Object.defineProperty(WindowProperty, 'Modal', {
    get: WindowProperty$Modal_getInstance
  });
  Object.defineProperty(WindowProperty, 'Tab', {
    get: WindowProperty$Tab_getInstance
  });
  package$graphic.WindowProperty = WindowProperty;
  $$importsForInline$$.SamsaraHTML = _;
  package$graphic.Screen_init_qgvd6v$ = Screen_init;
  package$graphic.Screen = Screen;
  package$graphic.Sprite_init_2ls20y$ = Sprite_init;
  package$graphic.Sprite_init_rcwdn1$ = Sprite_init_0;
  package$graphic.Sprite = Sprite;
  Object.defineProperty(SwitchState, 'on', {
    get: SwitchState$on_getInstance
  });
  Object.defineProperty(SwitchState, 'off', {
    get: SwitchState$off_getInstance
  });
  package$graphic.SwitchState = SwitchState;
  package$graphic.Switch_init_8ajt6$ = Switch_init;
  package$graphic.Switch = Switch;
  package$graphic.TextArea_init_iym62m$ = TextArea_init;
  package$graphic.TextArea = TextArea;
  package$graphic.View_init_y2kzbl$ = View_init;
  package$graphic.View = View;
  Object.defineProperty(AppController, 'Companion', {
    get: AppController$Companion_getInstance
  });
  var package$samsara = package$blindcatstudio.samsara || (package$blindcatstudio.samsara = {});
  package$samsara.AppController = AppController;
  Object.defineProperty(package$samsara, 'localizationString', {
    get: function () {
      return localizationString;
    }
  });
  Object.defineProperty(package$samsara, 'localizationKoreanString', {
    get: function () {
      return localizationKoreanString;
    }
  });
  Object.defineProperty(package$samsara, 'localeString', {
    get: function () {
      return localeString;
    },
    set: function (value) {
      localeString = value;
    }
  });
  Object.defineProperty(package$samsara, 'currentLocale', {
    get: function () {
      return currentLocale;
    },
    set: function (value) {
      currentLocale = value;
    }
  });
  package$samsara.SetLocale_61zpoe$ = SetLocale;
  package$samsara.GetLocale = GetLocale;
  package$samsara.get_isEmpty_pdl1vz$ = get_isEmpty;
  package$samsara.local_pdl1vz$ = local;
  package$samsara.formatted_s8ev3n$ = formatted;
  package$samsara.formatted_81szk$ = formatted_0;
  package$samsara.formatted_yrwdxr$ = formatted_1;
  package$samsara.INT_s8jyv4$ = INT;
  package$samsara.FLOAT_s8jyv4$ = FLOAT;
  package$samsara.DOUBLE_s8jyv4$ = DOUBLE;
  package$samsara.STRING_za3rmp$ = STRING;
  package$samsara.INT64_za3rmp$ = INT64;
  package$samsara.Ref = Ref;
  package$samsara.Firework_init_n56ifw$ = Firework_init;
  package$samsara.Firework = Firework;
  package$samsara.FireworkManager_init_iwp3ca$ = FireworkManager_init;
  package$samsara.FireworkManager = FireworkManager;
  package$samsara.CallbackEvent = CallbackEvent;
  package$samsara.IActivityRequestHandler = IActivityRequestHandler;
  package$samsara.UserLocalData = UserLocalData;
  Object.defineProperty(UserDefaults, 'Holder', {
    get: UserDefaults$Holder_getInstance
  });
  Object.defineProperty(UserDefaults, 'Companion', {
    get: UserDefaults$Companion_getInstance
  });
  package$samsara.UserDefaults = UserDefaults;
  package$samsara.PhantomLoader_init_vmfg6t$ = PhantomLoader_init;
  package$samsara.PhantomLoader = PhantomLoader;
  package$samsara.Samsara_init_hmf0yx$ = Samsara_init;
  package$samsara.Samsara = Samsara;
  Object.defineProperty(SystemConfigure, 'Companion', {
    get: SystemConfigure$Companion_getInstance
  });
  package$samsara.SystemConfigure = SystemConfigure;
  var package$driver = package$samsara.driver || (package$samsara.driver = {});
  package$driver.GuestGDXNode = GuestGDXNode;
  package$driver.GuestGDXTexture_init_61zpoe$ = GuestGDXTexture_init;
  package$driver.GuestGDXTexture_init_6hosri$ = GuestGDXTexture_init_0;
  package$driver.GuestGDXTexture = GuestGDXTexture;
  package$driver.GuestGDXSprite_init = GuestGDXSprite_init;
  package$driver.GuestGDXSprite_init_h2vgz3$ = GuestGDXSprite_init_0;
  package$driver.GuestGDXSprite = GuestGDXSprite;
  package$driver.GuestGDXMask_init_h2vgz3$ = GuestGDXMask_init;
  package$driver.GuestGDXMask = GuestGDXMask;
  package$driver.GuestGDXLabel_init = GuestGDXLabel_init;
  package$driver.GuestGDXLabel = GuestGDXLabel;
  package$driver.GDXGuestScene = GDXGuestScene;
  package$driver.DeviceScene_init_dleff0$ = DeviceScene_init;
  package$driver.DeviceScene = DeviceScene;
  package$driver.PhaserSound_init_w940ke$ = PhaserSound_init;
  package$driver.PhaserSound = PhaserSound;
  Object.defineProperty(package$driver, 'VOLUME_MAX', {
    get: function () {
      return VOLUME_MAX;
    }
  });
  Object.defineProperty(package$driver, 'EFFECT_CHANNEL', {
    get: function () {
      return EFFECT_CHANNEL;
    }
  });
  package$driver.Sound_init_7i6po5$ = Sound_init;
  package$driver.Sound = Sound;
  Object.defineProperty(SoundManager, 'Companion', {
    get: SoundManager$Companion_getInstance
  });
  package$driver.SoundManager = SoundManager;
  Object.defineProperty(Util, 'Companion', {
    get: Util$Companion_getInstance
  });
  package$driver.Util = Util;
  Object.defineProperty(BoardGenerator, 'Companion', {
    get: BoardGenerator$Companion_getInstance
  });
  var package$logic = package$samsara.logic || (package$samsara.logic = {});
  package$logic.BoardGenerator_init_mwco6a$ = BoardGenerator_init;
  package$logic.BoardGenerator = BoardGenerator;
  package$logic.Game_init_xn0iw0$ = Game_init;
  package$logic.Game = Game_0;
  package$logic.GameState = GameState;
  package$logic.GameValue = GameValue;
  Object.defineProperty(ScheduledJob$State, 'ready', {
    get: ScheduledJob$State$ready_getInstance
  });
  Object.defineProperty(ScheduledJob$State, 'running', {
    get: ScheduledJob$State$running_getInstance
  });
  Object.defineProperty(ScheduledJob$State, 'paused', {
    get: ScheduledJob$State$paused_getInstance
  });
  Object.defineProperty(ScheduledJob$State, 'stop', {
    get: ScheduledJob$State$stop_getInstance
  });
  ScheduledJob.State = ScheduledJob$State;
  package$logic.ScheduledJob = ScheduledJob;
  package$logic.ScheduledJobManager = ScheduledJobManager;
  package$logic.Tutorial_init_xn0iw0$ = Tutorial_init;
  package$logic.Tutorial = Tutorial;
  package$logic.TutorialBoardGenerator_init_qtznpk$ = TutorialBoardGenerator_init;
  package$logic.TutorialBoardGenerator = TutorialBoardGenerator;
  var package$configure = package$logic.configure || (package$logic.configure = {});
  package$configure.ClassicConfigureForWatch_init_g5erez$ = ClassicConfigureForWatch_init;
  package$configure.ClassicConfigureForWatch = ClassicConfigureForWatch;
  package$configure.ClassicConfigureForAndroid_init_g5erez$ = ClassicConfigureForAndroid_init;
  package$configure.ClassicConfigureForAndroid = ClassicConfigureForAndroid;
  package$configure.ClassicConfigure6x6ForiOS_init_g5erez$ = ClassicConfigure6x6ForiOS_init;
  package$configure.ClassicConfigure6x6ForiOS = ClassicConfigure6x6ForiOS;
  package$configure.GameConfigure_init_g5erez$ = GameConfigure_init;
  package$configure.GameConfigure = GameConfigure;
  package$configure.InfiniteConfigureForWatch_init_g5erez$ = InfiniteConfigureForWatch_init;
  package$configure.InfiniteConfigureForWatch = InfiniteConfigureForWatch;
  package$configure.InfiniteConfigureForiOS_init_g5erez$ = InfiniteConfigureForiOS_init;
  package$configure.InfiniteConfigureForiOS = InfiniteConfigureForiOS;
  package$configure.InfiniteConfigure6x6ForiOS_init_g5erez$ = InfiniteConfigure6x6ForiOS_init;
  package$configure.InfiniteConfigure6x6ForiOS = InfiniteConfigure6x6ForiOS;
  package$configure.PuzzleConfigure_init_g5erez$ = PuzzleConfigure_init;
  package$configure.PuzzleConfigure = PuzzleConfigure;
  package$configure.TimelessConfigureForWatch_init_g5erez$ = TimelessConfigureForWatch_init;
  package$configure.TimelessConfigureForWatch = TimelessConfigureForWatch;
  package$configure.TimelessConfigureForiOS_init_g5erez$ = TimelessConfigureForiOS_init;
  package$configure.TimelessConfigureForiOS = TimelessConfigureForiOS;
  package$configure.TimelessConfigure6x6ForiOS_init_g5erez$ = TimelessConfigure6x6ForiOS_init;
  package$configure.TimelessConfigure6x6ForiOS = TimelessConfigure6x6ForiOS;
  package$configure.TutorialConfigure_init_g5erez$ = TutorialConfigure_init;
  package$configure.TutorialConfigure = TutorialConfigure;
  var package$entity = package$logic.entity || (package$logic.entity = {});
  package$entity.BlockEntity_init_hb1tdc$ = BlockEntity_init;
  package$entity.BlockEntity = BlockEntity;
  package$entity.BlankEntity_init_hb1tdc$ = BlankEntity_init;
  package$entity.BlankEntity = BlankEntity;
  package$entity.EntityManager_init = EntityManager_init;
  package$entity.EntityManager = EntityManager;
  Object.defineProperty(GameEntity$EntityState, 'alive', {
    get: GameEntity$EntityState$alive_getInstance
  });
  Object.defineProperty(GameEntity$EntityState, 'dead', {
    get: GameEntity$EntityState$dead_getInstance
  });
  GameEntity.EntityState = GameEntity$EntityState;
  Object.defineProperty(GameEntity$ZOrder, 'bottom', {
    get: GameEntity$ZOrder$bottom_getInstance
  });
  Object.defineProperty(GameEntity$ZOrder, 'middle', {
    get: GameEntity$ZOrder$middle_getInstance
  });
  Object.defineProperty(GameEntity$ZOrder, 'top', {
    get: GameEntity$ZOrder$top_getInstance
  });
  GameEntity.ZOrder = GameEntity$ZOrder;
  package$entity.GameEntity_init_hb1tdc$ = GameEntity_init;
  package$entity.GameEntity = GameEntity;
  package$entity.ItemEntity_init_mwco6a$ = ItemEntity_init;
  package$entity.ItemEntity = ItemEntity;
  package$entity.ReactivateItemEntity = ReactivateItemEntity;
  package$entity.SameBombEntity = SameBombEntity;
  package$entity.NearBombEntity = NearBombEntity;
  package$entity.LineBombEntity = LineBombEntity;
  package$entity.ObstacleEntity_init_hb1tdc$ = ObstacleEntity_init;
  package$entity.ObstacleEntity = ObstacleEntity;
  Object.defineProperty(TileEntity$Attribute, 'normal', {
    get: TileEntity$Attribute$normal_getInstance
  });
  Object.defineProperty(TileEntity$Attribute, 'disabled', {
    get: TileEntity$Attribute$disabled_getInstance
  });
  Object.defineProperty(TileEntity$Attribute, 'hint', {
    get: TileEntity$Attribute$hint_getInstance
  });
  Object.defineProperty(TileEntity$Attribute, 'clear', {
    get: TileEntity$Attribute$clear_getInstance
  });
  TileEntity.Attribute = TileEntity$Attribute;
  package$entity.TileEntity_init_hb1tdc$ = TileEntity_init;
  package$entity.TileEntity = TileEntity;
  var package$user = package$samsara.user || (package$samsara.user = {});
  package$user.AndroidPlayerAchievement_init_61zpoe$ = AndroidPlayerAchievement_init;
  package$user.AndroidPlayerAchievement = AndroidPlayerAchievement;
  package$user.AndroidPlayerRecord_init_puj7f4$ = AndroidPlayerRecord_init;
  package$user.AndroidPlayerRecord = AndroidPlayerRecord;
  Object.defineProperty(DataKey, 'HIGH_SCORE', {
    get: DataKey$HIGH_SCORE_getInstance
  });
  Object.defineProperty(DataKey, 'MAX_COMBO', {
    get: DataKey$MAX_COMBO_getInstance
  });
  Object.defineProperty(DataKey, 'MAX_FEVER', {
    get: DataKey$MAX_FEVER_getInstance
  });
  Object.defineProperty(DataKey, 'MIN_INTERVAL', {
    get: DataKey$MIN_INTERVAL_getInstance
  });
  Object.defineProperty(DataKey, 'MAX_SPS', {
    get: DataKey$MAX_SPS_getInstance
  });
  Object.defineProperty(DataKey, 'PLAY_COUNT', {
    get: DataKey$PLAY_COUNT_getInstance
  });
  Object.defineProperty(DataKey, 'GHOST_REMOVAL', {
    get: DataKey$GHOST_REMOVAL_getInstance
  });
  Object.defineProperty(DataKey, 'SOUND_ON', {
    get: DataKey$SOUND_ON_getInstance
  });
  Object.defineProperty(DataKey, 'MASTER_VOLUME', {
    get: DataKey$MASTER_VOLUME_getInstance
  });
  Object.defineProperty(DataKey, 'BGM_VOLUME', {
    get: DataKey$BGM_VOLUME_getInstance
  });
  Object.defineProperty(DataKey, 'EFFECT_VOLUME', {
    get: DataKey$EFFECT_VOLUME_getInstance
  });
  Object.defineProperty(DataKey, 'LAST_PLAYED_MODE', {
    get: DataKey$LAST_PLAYED_MODE_getInstance
  });
  Object.defineProperty(DataKey, 'STAR_LAST_CHARGED_TIME', {
    get: DataKey$STAR_LAST_CHARGED_TIME_getInstance
  });
  Object.defineProperty(DataKey, 'STAR_CHARGE_START', {
    get: DataKey$STAR_CHARGE_START_getInstance
  });
  Object.defineProperty(DataKey, 'CURRENT_BLOCK_SET', {
    get: DataKey$CURRENT_BLOCK_SET_getInstance
  });
  Object.defineProperty(DataKey, 'CURRENT_BOARD_TYPE', {
    get: DataKey$CURRENT_BOARD_TYPE_getInstance
  });
  Object.defineProperty(DataKey, 'BATTERY_USAGE_MODE', {
    get: DataKey$BATTERY_USAGE_MODE_getInstance
  });
  Object.defineProperty(DataKey, 'CURRENT_LOCALE', {
    get: DataKey$CURRENT_LOCALE_getInstance
  });
  Object.defineProperty(DataKey, 'COLOR_MODE', {
    get: DataKey$COLOR_MODE_getInstance
  });
  Object.defineProperty(DataKey, 'TUTORIAL_COMPLETE', {
    get: DataKey$TUTORIAL_COMPLETE_getInstance
  });
  Object.defineProperty(DataKey, 'TUTORIAL_3_3_COMPLETE', {
    get: DataKey$TUTORIAL_3_3_COMPLETE_getInstance
  });
  Object.defineProperty(DataKey, 'TUTORIAL_6_6_COMPLETE', {
    get: DataKey$TUTORIAL_6_6_COMPLETE_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_COMBOS_5', {
    get: DataKey$BEGINNER_COMBOS_5_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_COMBOS_10', {
    get: DataKey$BEGINNER_COMBOS_10_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_COMBOS_20', {
    get: DataKey$BEGINNER_COMBOS_20_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_COMBOS_50', {
    get: DataKey$BEGINNER_COMBOS_50_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_COMBOS_100', {
    get: DataKey$BEGINNER_COMBOS_100_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_COMBOS_150', {
    get: DataKey$BEGINNER_COMBOS_150_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_50K', {
    get: DataKey$BEGINNER_50K_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_100K', {
    get: DataKey$BEGINNER_100K_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_200K', {
    get: DataKey$BEGINNER_200K_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_1M', {
    get: DataKey$BEGINNER_1M_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_2M', {
    get: DataKey$BEGINNER_2M_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_3M', {
    get: DataKey$BEGINNER_3M_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_FEVER_1', {
    get: DataKey$BEGINNER_FEVER_1_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_FEVER_3', {
    get: DataKey$BEGINNER_FEVER_3_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_FEVER_5', {
    get: DataKey$BEGINNER_FEVER_5_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_FEVER_10', {
    get: DataKey$BEGINNER_FEVER_10_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER_CLEAR_9', {
    get: DataKey$BEGINNER_CLEAR_9_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_COMBOS_10', {
    get: DataKey$CLASSIC_COMBOS_10_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_COMBOS_30', {
    get: DataKey$CLASSIC_COMBOS_30_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_FEVER_1', {
    get: DataKey$CLASSIC_FEVER_1_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_FEVER_5', {
    get: DataKey$CLASSIC_FEVER_5_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_100K', {
    get: DataKey$CLASSIC_100K_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_300K', {
    get: DataKey$CLASSIC_300K_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_1500K', {
    get: DataKey$CLASSIC_1500K_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC_CLEAR_9', {
    get: DataKey$CLASSIC_CLEAR_9_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS_MODE_OPEN', {
    get: DataKey$TIMELESS_MODE_OPEN_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS_COMBOS_50', {
    get: DataKey$TIMELESS_COMBOS_50_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS_COMBOS_80', {
    get: DataKey$TIMELESS_COMBOS_80_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS_COMBOS_100', {
    get: DataKey$TIMELESS_COMBOS_100_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS_FEVER_10', {
    get: DataKey$TIMELESS_FEVER_10_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS_1M', {
    get: DataKey$TIMELESS_1M_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS_2M', {
    get: DataKey$TIMELESS_2M_getInstance
  });
  Object.defineProperty(DataKey, 'HARDCORE_MODE_OPEN', {
    get: DataKey$HARDCORE_MODE_OPEN_getInstance
  });
  Object.defineProperty(DataKey, 'HARDCORE_COMBOS_60', {
    get: DataKey$HARDCORE_COMBOS_60_getInstance
  });
  Object.defineProperty(DataKey, 'HARDCORE_FEVER_10', {
    get: DataKey$HARDCORE_FEVER_10_getInstance
  });
  Object.defineProperty(DataKey, 'HARDCORE_1M', {
    get: DataKey$HARDCORE_1M_getInstance
  });
  Object.defineProperty(DataKey, 'GHOST_50', {
    get: DataKey$GHOST_50_getInstance
  });
  Object.defineProperty(DataKey, 'GHOST_100', {
    get: DataKey$GHOST_100_getInstance
  });
  Object.defineProperty(DataKey, 'GHOST_150', {
    get: DataKey$GHOST_150_getInstance
  });
  Object.defineProperty(DataKey, 'GHOST_200', {
    get: DataKey$GHOST_200_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER6x6_COMBOS_30', {
    get: DataKey$BEGINNER6x6_COMBOS_30_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER6x6_COMBOS_50', {
    get: DataKey$BEGINNER6x6_COMBOS_50_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER6x6_COMBOS_100', {
    get: DataKey$BEGINNER6x6_COMBOS_100_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER6x6_500K', {
    get: DataKey$BEGINNER6x6_500K_getInstance
  });
  Object.defineProperty(DataKey, 'BEGINNER6x6_1M', {
    get: DataKey$BEGINNER6x6_1M_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC6x6_MODE_OPEN', {
    get: DataKey$CLASSIC6x6_MODE_OPEN_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC6x6_COMBOS_50', {
    get: DataKey$CLASSIC6x6_COMBOS_50_getInstance
  });
  Object.defineProperty(DataKey, 'CLASSIC6x6_1M', {
    get: DataKey$CLASSIC6x6_1M_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS6x6_MODE_OPEN', {
    get: DataKey$TIMELESS6x6_MODE_OPEN_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS6x6_COMBOS_100', {
    get: DataKey$TIMELESS6x6_COMBOS_100_getInstance
  });
  Object.defineProperty(DataKey, 'TIMELESS6x6_2M', {
    get: DataKey$TIMELESS6x6_2M_getInstance
  });
  package$user.DataKey = DataKey;
  Object.defineProperty(KeychainWrapper, 'standard', {
    get: KeychainWrapper$standard_getInstance
  });
  package$user.KeychainWrapper = KeychainWrapper;
  Object.defineProperty(DataUtil, 'Companion', {
    get: DataUtil$Companion_getInstance
  });
  package$user.DataUtil = DataUtil;
  Object.defineProperty(GameCenterManager, 'Companion', {
    get: GameCenterManager$Companion_getInstance
  });
  package$user.GameCenterManager = GameCenterManager;
  Object.defineProperty(ItemType, 'block', {
    get: ItemType$block_getInstance
  });
  Object.defineProperty(ItemType, 'mode', {
    get: ItemType$mode_getInstance
  });
  Object.defineProperty(ItemType, 'gameItem', {
    get: ItemType$gameItem_getInstance
  });
  Object.defineProperty(ItemType, 'avatar', {
    get: ItemType$avatar_getInstance
  });
  Object.defineProperty(ItemType, 'board', {
    get: ItemType$board_getInstance
  });
  Object.defineProperty(ItemType, 'End', {
    get: ItemType$End_getInstance
  });
  package$user.ItemType = ItemType;
  package$user.Item = Item;
  package$user.BasicItem_init_z8o2ev$ = BasicItem_init;
  package$user.BasicItem = BasicItem;
  package$user.BlockItem_init_bivfg4$ = BlockItem_init;
  package$user.BlockItem = BlockItem;
  package$user.BoardItem_init_li189r$ = BoardItem_init;
  package$user.BoardItem = BoardItem;
  Object.defineProperty(ItemManager, 'Companion', {
    get: ItemManager$Companion_getInstance
  });
  package$user.ItemManager = ItemManager;
  package$user.PlayerRecord = PlayerRecord;
  package$user.Achievement_init_io5o9c$ = Achievement_init;
  package$user.Achievement = Achievement;
  package$user.PlayerAchievement = PlayerAchievement;
  Object.defineProperty(PlayerRecordManager, 'Companion', {
    get: PlayerRecordManager$Companion_getInstance
  });
  package$user.PlayerRecordManager_init = PlayerRecordManager_init;
  package$user.PlayerRecordManager = PlayerRecordManager;
  Object.defineProperty(PermanentKey, 'EMPTY_KEY', {
    get: PermanentKey$EMPTY_KEY_getInstance
  });
  Object.defineProperty(PermanentKey, 'STAR_AMOUNT', {
    get: PermanentKey$STAR_AMOUNT_getInstance
  });
  Object.defineProperty(PermanentKey, 'EXP', {
    get: PermanentKey$EXP_getInstance
  });
  package$user.PermanentKey = PermanentKey;
  Object.defineProperty(StoreManager, 'Companion', {
    get: StoreManager$Companion_getInstance
  });
  package$user.StoreManager = StoreManager;
  var package$view = package$samsara.view || (package$samsara.view = {});
  package$view.BlockTypeView = BlockTypeView;
  package$view.GameOverView_init_53g3xe$ = GameOverView_init;
  package$view.GameOverView = GameOverView;
  package$view.GameView_init_53g3xe$ = GameView_init;
  package$view.GameView = GameView;
  package$view.LoadingView = LoadingView;
  package$view.MainMenuView = MainMenuView;
  Object.defineProperty(MenuItemType, 'NORMAL', {
    get: MenuItemType$NORMAL_getInstance
  });
  Object.defineProperty(MenuItemType, 'RADIO', {
    get: MenuItemType$RADIO_getInstance
  });
  Object.defineProperty(MenuItemType, 'SWITCH', {
    get: MenuItemType$SWITCH_getInstance
  });
  Object.defineProperty(MenuItemType, 'TEXT', {
    get: MenuItemType$TEXT_getInstance
  });
  package$view.MenuItemType = MenuItemType;
  package$view.MenuItem_init_8jwusp$ = MenuItem_init;
  package$view.MenuItem_init_whzana$ = MenuItem_init_0;
  package$view.MenuItem = MenuItem;
  package$view.Menu_init_yj8n83$ = Menu_init;
  package$view.Menu = Menu;
  package$view.OptionView = OptionView;
  package$view.TestView = TestView;
  package$view.ScriptInfo = ScriptInfo;
  package$view.TutorialView_init_za3lpa$ = TutorialView_init;
  package$view.TutorialView = TutorialView;
  _.UserDataHTML = UserDataHTML;
  _.RequestHandlerDummy = RequestHandlerDummy;
  _.main_kand9s$ = main;
  AndroidPlayerAchievement.prototype.AddAchievement_ze4fts$ = PlayerAchievement.prototype.AddAchievement_ze4fts$;
  AndroidPlayerAchievement.prototype.AddAchievementString_io5o9c$ = PlayerAchievement.prototype.AddAchievementString_io5o9c$;
  AndroidPlayerAchievement.prototype.SetPercentComplete_gspc9z$ = PlayerAchievement.prototype.SetPercentComplete_gspc9z$;
  AndroidPlayerAchievement.prototype.SetPercentCompleteString_1truf$ = PlayerAchievement.prototype.SetPercentCompleteString_1truf$;
  AndroidPlayerRecord.prototype.SaveHighScore_3uxocb$ = PlayerRecord.prototype.SaveHighScore_3uxocb$;
  AndroidPlayerRecord.prototype.LoadHighScore_3uxocb$ = PlayerRecord.prototype.LoadHighScore_3uxocb$;
  AndroidPlayerRecord.prototype.SaveMaxCombo_3uxocb$ = PlayerRecord.prototype.SaveMaxCombo_3uxocb$;
  AndroidPlayerRecord.prototype.LoadMaxCombo_3uxocb$ = PlayerRecord.prototype.LoadMaxCombo_3uxocb$;
  AndroidPlayerRecord.prototype.SaveMaxFever_3uxocb$ = PlayerRecord.prototype.SaveMaxFever_3uxocb$;
  AndroidPlayerRecord.prototype.LoadMaxFever_3uxocb$ = PlayerRecord.prototype.LoadMaxFever_3uxocb$;
  AndroidPlayerRecord.prototype.SaveMinInterval_3uxocb$ = PlayerRecord.prototype.SaveMinInterval_3uxocb$;
  AndroidPlayerRecord.prototype.LoadMinInterval_3uxocb$ = PlayerRecord.prototype.LoadMinInterval_3uxocb$;
  AndroidPlayerRecord.prototype.SaveMaxSPS_3uxocb$ = PlayerRecord.prototype.SaveMaxSPS_3uxocb$;
  AndroidPlayerRecord.prototype.LoadMaxSPS_3uxocb$ = PlayerRecord.prototype.LoadMaxSPS_3uxocb$;
  localizationString = mapOf([new Pair('TUTORIAL_FONT_SIZE', '16'), new Pair('TUTORIAL_FONT_SIZE2', '14'), new Pair('TUTORIAL_TEXT_WRAP_TYPE', 'WORD'), new Pair('TUTORIAL_COUNT', '33'), new Pair('TUTORIAL_0', 'HOW TO PLAY'), new Pair('TUTORIAL_1', 'When three of the same number are straight except diagonal, it will pop.'), new Pair('TUTORIAL_2', 'Touch the 0 to change to 1'), new Pair('TUTORIAL_3', 'Linked tiles change together.'), new Pair('TUTORIAL_4', 'Touch the 1 to change to 2'), new Pair('TUTORIAL_5', '2 changes to 3'), new Pair('TUTORIAL_6', 'Touch the 2 to change to 3'), new Pair('TUTORIAL_7', 'All linked 3 will be 0 again.'), new Pair('TUTORIAL_8', 'Touch the 3 to change it to 0'), new Pair('TUTORIAL_9', 'Ghosts will disappear if a tile of the same color pops from the side.'), new Pair('TUTORIAL_10', 'Try to remove the ghost'), new Pair('TUTORIAL_11', 'You can earn huge score if you pop nine tiles at once.'), new Pair('TUTORIAL_12', 'Touch the 1 to change to 2'), new Pair('TUTORIAL_13', 'The game is over when you have no more tiles to match. Challenge your best score by making a big combo!'), new Pair('TUTORIAL_14', 'Touch the play button to start the game'), new Pair('TUTORIAL_15', 'Already changed tiles will not change again by touch.'), new Pair('TUTORIAL_16', 'Touch the 3'), new Pair('TUTORIAL_17', 'Ghosts are not tied to other tiles and can not be changed.'), new Pair('TUTORIAL_18', 'Touch the ghost'), new Pair('TUTORIAL_19', 'Touch the 1'), new Pair('TUTORIAL_20', 'Challenge your best score by capturing as many ghosts as you can.'), new Pair('TUTORIAL_21', 'Exploding 6 tiles at once makes a LIGHTNING item.\n\n[Image Item_101_blue 25] [Image Item_101_green 25] [Image Item_101_purple 25] [Image Item_101_red 25] [Image Item_101_yellow 25]'), new Pair('TUTORIAL_22', '[Image Item_101_red 20] explodes all red color tiles.'), new Pair('TUTORIAL_23', 'Exploding 7 or 8 tiles at once makes a LINE BLASTING item.\n\n[Image Item_103_h 25] [Image Item_103_v 25] [Image Item_104 25]'), new Pair('TUTORIAL_24', '[Image Item_103_h 20] explodes all tiles except cursed ghosts in the same line.'), new Pair('TUTORIAL_25', 'Exploding 9 tiles at once makes an EXTINCTION BOMB item.\n\n[Image Item_102 25]'), new Pair('TUTORIAL_26', '[Image Item_102 20] explodes all surrounded tiles include ghosts.'), new Pair('TUTORIAL_27', 'Exploding more than 10 tiles at once makes an INFINITY item.\n\n[Image Item_100 25]'), new Pair('TUTORIAL_28', '[Image Item_100 20] explodes all ghosts and resets tiles.'), new Pair('TUTORIAL_29', 'Explode 6 tiles at once'), new Pair('TUTORIAL_30', 'Explode 7 tiles at once'), new Pair('TUTORIAL_31', 'Explode 9 tiles at once'), new Pair('TUTORIAL_32', 'Explode 10 tiles at once'), new Pair('MENU_0', '0123456789.,()'), new Pair('MENU_1', '[Scale 1.2][COLOR yellow]\nMusic On[COLOR][Scale]'), new Pair('MENU_2', '[Scale 1.2][Color gray]\nMusic Off[Color][Scale]'), new Pair('MENU_3', '[Scale 1.2][COLOR yellow]\nSound Effect On[COLOR][Scale]'), new Pair('MENU_4', '[Scale 1.2][Color gray]\nSound Effect Off[Color][Scale]'), new Pair('MENU_5', '[Color yellow][FONT Menu_Mode/]SETUP[Color]'), new Pair('MENU_6', 'Start the game\nin your [COLOR yellow]Apple Watch[COLOR]\nand try again.\n\n\n[button Resource/UI/IconOk 60]'), new Pair('MENU_7', 'Data synched\nsuccessfully!\n\n\n[button Resource/UI/IconOk 60]'), new Pair('MENU_8', 'Start the game\nin your [COLOR yellow]Apple Watch[COLOR]\nand try again.\n\n\n[button Resource/UI/IconOk 60]'), new Pair('MENU_9', 'Start the game\nin your Apple Watch.'), new Pair('MENU_10', '[COLOR]\n[Scale 1.0]To unlock: [image Resource/UI/IconStar 20] [Scale 0.6]X[Scale] '), new Pair('MENU_11', '[Color yellow][FONT Menu_Mode/]STONE[Color]'), new Pair('MENU_12', 'STONE'), new Pair('MENU_13', '[SCALE 1.0][COLOR yellow]Do you want to unlock?[COLOR]'), new Pair('MENU_14', 'NARAKA'), new Pair('MENU_15', 'To unlock,\n[Color yellow]30 Combo in CLASSIC mode\nGet Professional Player[Color]'), new Pair('MENU_16', 'To explode some blocks and continue the game,'), new Pair('MENU_17', 'or'), new Pair('MENU_18', 'Best:'), new Pair('MENU_19', 'MODE'), new Pair('MENU_20', 'CLASSIC'), new Pair('MENU_21', 'To explode some blocks and get bonus time,'), new Pair('MENU_22', ''), new Pair('MENU_23', 'SPS'), new Pair('MENU_24', ''), new Pair('MENU_25', '[SCALE 1.8]Low[SCALE][COLOR yellow]\nMax 10 FPS[COLOR]'), new Pair('MENU_26', '[SCALE 1.8]Medium[SCALE][COLOR yellow]\nMax 20 FPS[COLOR]'), new Pair('MENU_27', '[SCALE 1.8]High[SCALE][COLOR yellow]\nMax 30 FPS\nParticle Effects[COLOR]'), new Pair('MENU_28', '[Color yellow][FONT Menu_Mode/]QUALITY[Color]'), new Pair('MENU_29', 'QUALITY'), new Pair('MENU_30', 'BEST'), new Pair('MENU_31', 'COMBO'), new Pair('MENU_32', 'NEW'), new Pair('MENU_33', 'BEST'), new Pair('MENU_34', 'FEVERS'), new Pair('MENU_35', 'NEW'), new Pair('MENU_36', 'BEST'), new Pair('MENU_37', '[SCALE 1.5]Number[SCALE]'), new Pair('MENU_38', '[SCALE 1.5]Dice[SCALE]'), new Pair('MENU_39', 'Score Bonus   +10%'), new Pair('MENU_40', '[SCALE 1.5]Infinite Seasons[SCALE]'), new Pair('MENU_41', 'Score Bonus    +20%'), new Pair('MENU_42', '[SCALE 1.5]Star Bird[SCALE]'), new Pair('MENU_43', 'Score Bonus    +20%'), new Pair('MENU_44', '[Scale 0.4] SAMSARA - Stones of Eternity'), new Pair('MENU_45', 'INFINITE'), new Pair('MENU_46', 'Would you like to quit the game?'), new Pair('MENU_47', 'INFINITE 6x6'), new Pair('MENU_48', 'CLASSIC 6x6'), new Pair('MENU_49', 'NARAKA 6x6'), new Pair('MENU_50', 'To unlock,\n[Color yellow]50 Combo in INFINITE 6x6 mode\nGet Collector title[Color]'), new Pair('MENU_51', 'To unlock,\n[Color yellow]50 Combo in CLASSIC 6x6 mode\nGet Hunter title[Color]'), new Pair('MENU_52', 'Would you like to close it?'), new Pair('MENU_53', 'NEW RECORD!!!'), new Pair('MENU_54', 'Select Tutorial\n\n\n[button Resource/UI/IconBeginner 60 3x3]        [button Resource/UI/IconBeginner6x6 60 6x6]'), new Pair('MENU_COUNT', '55'), new Pair('BEGINNER_TIP_COUNT', '1'), new Pair('BEGINNER_TIP_0', '[Scale 0.7]Whenever you make NIRVANA time, you get a star. If you match all stones at once, you will get a huge amount of stars.[Scale]\n\n\n'), new Pair('BEGINNER6x6_TIP_COUNT', '2'), new Pair('BEGINNER6x6_TIP_0', '[Scale 0.7]INFINITY ITEM [Image Item_100 20] appears only once per a game. After that, EXTINCTION BOMB [Image Item_102 20] will appear instead.[Scale]\n\n\n'), new Pair('BEGINNER6x6_TIP_1', '[Scale 0.7]If ghosts arrive bottom line or other cursed ghosts, they are put on a curse. You cannot remove cursed ghosts by the regular method but can by using particular ITEMs.[Scale]\n\n\n'), new Pair('Classic_TIP_COUNT', '2'), new Pair('Classic_TIP_0', '[Scale 0.7]You can earn bonus time every fever mode.\nIf you are in fever mode, a game will not over even if time is over.\nChallenge high score by playing as long as you can.[Scale]\n\n\n'), new Pair('Classic_TIP_1', "[Scale 0.7]SPS means Score Per Second.\nIt'll show an inaccurate measurement if you play a game under 60 seconds.[Scale]\n\n\n"), new Pair('APPLE_WATCH_TIP_COUNT', '1'), new Pair('APPLE_WATCH_TIP_0', '[Scale 2.0]You can quit the game by turning the Digital Crown.[Scale]\n\n\n'), new Pair('Beat my score!', '#SAMSARA_Stones_of_Eternity')]);
  localizationKoreanString = mapOf([new Pair('TUTORIAL_FONT_SIZE', '16'), new Pair('TUTORIAL_FONT_SIZE2', '14'), new Pair('TUTORIAL_TEXT_WRAP_TYPE', 'WORD'), new Pair('TUTORIAL_COUNT', '33'), new Pair('TUTORIAL_0', 'HOW TO PLAY'), new Pair('TUTORIAL_1', '\uAC19\uC740 \uC22B\uC790 \uC138 \uAC1C\uAC00 \uB300\uAC01\uC120\uC774 \uC544\uB2CC \uC77C\uC9C1\uC120\uC774 \uB418\uBA74 \uD130\uC9D1\uB2C8\uB2E4.'), new Pair('TUTORIAL_2', '0\uC744 \uB20C\uB7EC\uC11C 1\uB85C \uBC14\uAFB8\uC138\uC694'), new Pair('TUTORIAL_3', '\uC5F0\uACB0\uB41C \uD0C0\uC77C\uC740 \uD568\uAED8 \uBC14\uB01D\uB2C8\uB2E4.'), new Pair('TUTORIAL_4', '1\uC744 \uB20C\uB7EC\uC11C 2\uB85C \uBC14\uAFB8\uC138\uC694'), new Pair('TUTORIAL_5', '2\uB294 3\uC73C\uB85C \uBCC0\uD569\uB2C8\uB2E4.'), new Pair('TUTORIAL_6', '2\uB97C \uB20C\uB7EC\uC11C 3\uC73C\uB85C \uBC14\uAFB8\uC138\uC694'), new Pair('TUTORIAL_7', '\uC5F0\uACB0\uB41C \uBAA8\uB4E0 3\uC740 \uB2E4\uC2DC 0\uC774 \uB429\uB2C8\uB2E4.'), new Pair('TUTORIAL_8', '3\uC744 \uB20C\uB7EC\uC11C 0\uC73C\uB85C \uBC14\uAFB8\uC138\uC694'), new Pair('TUTORIAL_9', '\uC720\uB839\uACFC \uAC19\uC740 \uC0C9\uC758 \uD0C0\uC77C\uC744 \uC606\uC5D0\uC11C \uD130\uD2B8\uB9AC\uBA74 \uC720\uB839\uC744 \uC7A1\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4.'), new Pair('TUTORIAL_10', '\uC720\uB839\uC744 \uC81C\uAC70\uD574 \uBCF4\uC138\uC694'), new Pair('TUTORIAL_11', '\uC544\uD649 \uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uBA74 \uB9CE\uC740 \uC810\uC218\uB97C \uC5BB\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4.'), new Pair('TUTORIAL_12', '1\uC744 \uB20C\uB7EC\uC11C 2\uB85C \uBC14\uAFB8\uC138\uC694'), new Pair('TUTORIAL_13', '\uD130\uD2B8\uB9B4 \uD0C0\uC77C\uC774 \uC5C6\uC5B4\uC9C0\uBA74 \uAC8C\uC784\uC774 \uB05D\uB0A9\uB2C8\uB2E4. \uCF64\uBCF4\uB97C \uB9CC\uB4E4\uC5B4\uC11C \uCD5C\uACE0 \uC810\uC218\uC5D0 \uB3C4\uC804\uD574 \uBCF4\uC138\uC694!'), new Pair('TUTORIAL_14', '\uD50C\uB808\uC774 \uBC84\uD2BC\uC744 \uB204\uB974\uBA74 \uAC8C\uC784\uC744 \uC2DC\uC791\uD569\uB2C8\uB2E4'), new Pair('TUTORIAL_15', '\uD55C\uBC88 \uBC14\uB010 \uD0C0\uC77C\uC740 \uB20C\uB7EC\uC11C \uBC14\uAFC0 \uC218\uB294 \uC5C6\uC9C0\uB9CC \uC5F0\uACB0\uB41C \uD0C0\uC77C\uC744 \uC774\uC6A9\uD558\uBA74 \uAC00\uB2A5\uD569\uB2C8\uB2E4.'), new Pair('TUTORIAL_16', '3\uC744 \uB20C\uB7EC\uBCF4\uC138\uC694'), new Pair('TUTORIAL_17', '\uAC00\uB054\uC529 \uB098\uD0C0\uB098\uB294 \uC720\uB839\uC740 \uB2E4\uB978 \uD0C0\uC77C\uACFC \uC5F0\uACB0\uB418\uC9C0 \uC54A\uACE0 \uBC14\uAFC0 \uC218\uB3C4 \uC5C6\uC2B5\uB2C8\uB2E4.'), new Pair('TUTORIAL_18', '\uC720\uB839\uC744 \uB20C\uB7EC\uBCF4\uC138\uC694'), new Pair('TUTORIAL_19', '1\uC744 \uB20C\uB7EC\uBCF4\uC138\uC694'), new Pair('TUTORIAL_20', '\uC720\uB839\uC744 \uB9CE\uC774 \uC7A1\uC544\uC11C \uCD5C\uACE0 \uC810\uC218\uC5D0 \uB3C4\uC804\uD574 \uBCF4\uC138\uC694.'), new Pair('TUTORIAL_21', '6\uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uBA74 \uBC88\uAC1C \uC544\uC774\uD15C\uC774 \uB9CC\uB4E4\uC5B4\uC9D1\uB2C8\uB2E4.\n\n[Image Item_101_blue 20] [Image Item_101_green 20] [Image Item_101_purple 20] [Image Item_101_red 20] [Image Item_101_yellow 20]'), new Pair('TUTORIAL_22', '[Image Item_101_red 20]\uC740 \uBE68\uAC04 \uC0C9\uAE54\uC744 \uAC00\uC9C4 \uBAA8\uB4E0 \uD0C0\uC77C\uC744 \uD130\uD2B8\uB9BD\uB2C8\uB2E4.'), new Pair('TUTORIAL_23', '7\uAC1C\uB098 8\uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uBA74 \uC9C1\uC120 \uC81C\uAC70 \uC544\uC774\uD15C\uC774 \uB9CC\uB4E4\uC5B4\uC9D1\uB2C8\uB2E4.\n\n[Image Item_103_h 20] [Image Item_103_v 20] [Image Item_104 20]'), new Pair('TUTORIAL_24', '[Image Item_103_h 20]\uC740 \uAC19\uC740 \uB77C\uC778\uC5D0 \uC788\uB294 \uC800\uC8FC\uBC1B\uC740 \uC720\uB839\uC744 \uC81C\uC678\uD55C \uBAA8\uB4E0 \uD0C0\uC77C\uC744 \uD130\uD2B8\uB9BD\uB2C8\uB2E4.'), new Pair('TUTORIAL_25', '9\uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uBA74 \uD3ED\uD0C4 \uC544\uC774\uD15C [Image Item_102 20]\uC774 \uB9CC\uB4E4\uC5B4\uC9D1\uB2C8\uB2E4.'), new Pair('TUTORIAL_26', '[Image Item_102 20]\uC740 \uC8FC\uC704\uC758 \uD0C0\uC77C\uACFC \uC720\uB839\uC744 \uBAA8\uB450 \uD130\uD2B8\uB9BD\uB2C8\uB2E4.'), new Pair('TUTORIAL_27', '10\uAC1C \uC774\uC0C1\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uBA74 \uCD08\uAE30\uD654 \uC544\uC774\uD15C[Image Item_100 20]\uC774 \uB9CC\uB4E4\uC5B4\uC9D1\uB2C8\uB2E4.'), new Pair('TUTORIAL_28', '[Image Item_100 20]\uC740 \uBAA8\uB4E0 \uC720\uB839\uC744 \uD130\uD2B8\uB9AC\uACE0 \uD0C0\uC77C\uC744 \uCD08\uAE30\uD654\uD569\uB2C8\uB2E4.'), new Pair('TUTORIAL_29', '6\uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uC138\uC694'), new Pair('TUTORIAL_30', '7\uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uC138\uC694'), new Pair('TUTORIAL_31', '9\uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uC138\uC694'), new Pair('TUTORIAL_32', '10\uAC1C\uC758 \uD0C0\uC77C\uC744 \uD55C\uBC88\uC5D0 \uD130\uD2B8\uB9AC\uC138\uC694'), new Pair('MENU_0', '0123456789.,()'), new Pair('MENU_1', '[Scale 1.2][COLOR yellow]\n\uBC30\uACBD\uC74C\uC545 \uCF2C[COLOR][Scale]'), new Pair('MENU_2', '[Scale 1.2][Color gray]\n\uBC30\uACBD\uC74C\uC545 \uB054[Color][Scale]'), new Pair('MENU_3', '[Scale 1.2][COLOR yellow]\n\uD6A8\uACFC\uC74C \uCF2C[COLOR][Scale]'), new Pair('MENU_4', '[Scale 1.2][Color gray]\n\uD6A8\uACFC\uC74C \uB054[Color][Scale]'), new Pair('MENU_5', '[Color yellow][FONT Menu_Mode/]\uC124\uC815[Color]'), new Pair('MENU_6', '[COLOR yellow]Apple Watch[COLOR]\uC758 \uAC8C\uC784\uC744\n\uC2DC\uC791\uD55C \uD6C4\uC5D0\n\uB2E4\uC2DC \uC2DC\uB3C4\uD574 \uC8FC\uC138\uC694.\n\n\n[button Resource/UI/IconOk 60]'), new Pair('MENU_7', '\uB370\uC774\uD130 \uB3D9\uAE30\uD654\uB97C\n\uC644\uB8CC\uD588\uC2B5\uB2C8\uB2E4!\n\n\n[button Resource/UI/IconOk 60]'), new Pair('MENU_8', '[COLOR yellow]Apple Watch[COLOR]\uC758 \uAC8C\uC784\uC744\n\uC2DC\uC791\uD55C \uD6C4\uC5D0\n\uB2E4\uC2DC \uC2DC\uB3C4\uD574 \uC8FC\uC138\uC694.\n\n\n[button Resource/UI/IconOk 60]'), new Pair('MENU_9', 'Apple Watch\uC758 \uAC8C\uC784\uC744\n\uC2E4\uD589\uD574 \uC8FC\uC138\uC694...'), new Pair('MENU_10', '[COLOR]\n[Scale 1.0]\uC5F4\uB824\uBA74: [image Resource/UI/IconStar 20] [Scale 0.6]X[Scale] '), new Pair('MENU_11', '[Color yellow][FONT Menu_Mode/]\uC601\uC6D0\uC758 \uB3CC[Color]'), new Pair('MENU_12', '\uC601\uC6D0\uC758 \uB3CC'), new Pair('MENU_13', '[SCALE 1.0][COLOR yellow]\uC5EC\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?[COLOR]\n\n'), new Pair('MENU_14', '\uB098\uB77D'), new Pair('MENU_15', '\uC5F4\uB824\uBA74,\n[Color yellow]\uD074\uB798\uC2DD \uBAA8\uB4DC\uC5D0\uC11C 30 \uCF64\uBCF4\n\uD504\uB85C\uD398\uC154\uB110 \uD50C\uB808\uC774\uC5B4 \uD68D\uB4DD[Color]'), new Pair('MENU_16', '\uBE14\uB7ED\uC744 \uC77C\uBD80 \uC81C\uAC70\uD558\uACE0 \uAC8C\uC784\uC744 \uACC4\uC18D\uD558\uB824\uBA74,'), new Pair('MENU_17', '\uB610\uB294'), new Pair('MENU_18', '\uCD5C\uACE0\uC810\uC218:'), new Pair('MENU_19', '\uAC8C\uC784 \uBAA8\uB4DC'), new Pair('MENU_20', '\uD074\uB798\uC2DD'), new Pair('MENU_21', '\uBE14\uB7ED\uC744 \uC77C\uBD80 \uC81C\uAC70\uD558\uACE0 \uCD94\uAC00 \uC2DC\uAC04\uC744 \uC5BB\uC73C\uB824\uBA74,'), new Pair('MENU_22', ''), new Pair('MENU_23', '\uCD08\uB2F9 \uC810\uC218'), new Pair('MENU_24', ''), new Pair('MENU_25', '[SCALE 1.8]\uCD5C\uC800[SCALE][COLOR yellow]\n\uCD5C\uB300 10 \uD504\uB808\uC784[COLOR]'), new Pair('MENU_26', '[SCALE 1.8]\uBCF4\uD1B5[SCALE][COLOR yellow]\n\uCD5C\uB300 20 \uD504\uB808\uC784[COLOR]'), new Pair('MENU_27', '[SCALE 1.8]\uCD5C\uACE0[SCALE][COLOR yellow]\n\uCD5C\uB300 30 \uD504\uB808\uC784\n\uD30C\uD2F0\uD074 \uD6A8\uACFC[COLOR]'), new Pair('MENU_28', '[Color yellow][FONT Menu_Mode/]\uD488\uC9C8[Color]'), new Pair('MENU_29', '\uAC8C\uC784 \uD488\uC9C8'), new Pair('MENU_30', '\uCD5C\uACE0\uC810\uC218'), new Pair('MENU_31', '\uCF64\uBCF4'), new Pair('MENU_32', '\uC2E0\uAE30\uB85D'), new Pair('MENU_33', '\uCD5C\uACE0'), new Pair('MENU_34', '\uD53C\uBC84'), new Pair('MENU_35', '\uC2E0\uAE30\uB85D'), new Pair('MENU_36', '\uCD5C\uACE0'), new Pair('MENU_37', '[SCALE 1.5]\uC22B\uC790[SCALE]'), new Pair('MENU_38', '[SCALE 1.5]\uC8FC\uC0AC\uC704[SCALE]'), new Pair('MENU_39', '\uCD94\uAC00 \uC810\uC218   +10%'), new Pair('MENU_40', '[SCALE 1.5]\uB05D\uC5C6\uB294 \uACC4\uC808[SCALE]'), new Pair('MENU_41', '\uCD94\uAC00 \uC810\uC218   +10%'), new Pair('MENU_42', '[SCALE 1.5]\uBCC4\uC0C8[SCALE]'), new Pair('MENU_43', '\uCD94\uAC00 \uC810\uC218   +20%'), new Pair('MENU_44', '[Scale 0.4] \uC0BC\uC0AC\uB77C - \uC601\uC6D0\uC758 \uB3CC'), new Pair('MENU_45', '\uBB34\uD55C'), new Pair('MENU_46', '\uAC8C\uC784\uC744 \uADF8\uB9CC\uD560\uAE4C\uC694?'), new Pair('MENU_47', '\uBB34\uD55C 6x6'), new Pair('MENU_48', '\uD074\uB798\uC2DD 6x6'), new Pair('MENU_49', '\uB098\uB77D 6x6'), new Pair('MENU_50', '\uC5F4\uB824\uBA74,\n[Color yellow]\uBB34\uD55C 6x6 \uBAA8\uB4DC\uC5D0\uC11C 50 \uCF64\uBCF4\n\uCF5C\uB809\uD130 \uD68D\uB4DD[Color]'), new Pair('MENU_51', '\uC5F4\uB824\uBA74,\n[Color yellow]\uD074\uB798\uC2DD 6x6 \uBAA8\uB4DC\uC5D0\uC11C 50 \uCF64\uBCF4\n\uD5CC\uD130 \uD68D\uB4DD[Color]'), new Pair('MENU_52', '\uD504\uB85C\uADF8\uB7A8\uC744 \uC885\uB8CC\uD560\uAE4C\uC694?'), new Pair('MENU_53', '\uC2E0\uAE30\uB85D!!!'), new Pair('MENU_54', '\uD29C\uD1A0\uB9AC\uC5BC \uC120\uD0DD\n\n\n[button Resource/UI/IconBeginner 60 3x3]        [button Resource/UI/IconBeginner6x6 60 6x6]'), new Pair('MENU_COUNT', '55'), new Pair('BEGINNER_TIP_COUNT', '1'), new Pair('BEGINNER_TIP_0', '[Scale 0.7]\uC5F4\uBC18 \uBAA8\uB4DC\uAC00 \uB420 \uB54C\uB9C8\uB2E4 \uBCC4\uC744 \uC5BB\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4. \uBAA8\uB4E0 \uB3CC\uC744 \uD55C\uBC88\uC5D0 \uC5C6\uC560\uBA74 \uB354 \uB9CE\uC740 \uBCC4\uC744 \uC5BB\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4.[Scale]\n\n\n'), new Pair('BEGINNER6x6_TIP_COUNT', '2'), new Pair('BEGINNER6x6_TIP_0', '[Scale 0.7]\uCD08\uAE30\uD654 \uC544\uC774\uD15C [Image Item_100 20]\uC740 \uAC8C\uC784\uB2F9 \uB2E8 \uD55C\uBC88\uB9CC \uB098\uC635\uB2C8\uB2E4.\n\uD55C\uBC88 \uB098\uC628 \uC774\uD6C4\uC5D0\uB294 \uD3ED\uD0C4 \uC544\uC774\uD15C [Image Item_102 20]\uC774 \uB300\uC2E0 \uB9CC\uB4E4\uC5B4 \uC9D1\uB2C8\uB2E4.[Scale]\n\n\n'), new Pair('BEGINNER6x6_TIP_1', '[Scale 0.7]\uC720\uB839\uC774 \uBC14\uB2E5\uC5D0 \uB2EB\uC73C\uBA74 \uC800\uC8FC\uC5D0 \uAC78\uB824 \uD2B9\uC815 \uC544\uC774\uD15C\uC73C\uB85C\uB9CC \uC81C\uAC70\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.\n\uC720\uB839\uC774 \uBC14\uB2E5\uC5D0 \uB2EB\uC9C0 \uC54A\uB3C4\uB85D \uD574\uC11C \uACE0\uB4DD\uC810\uC5D0 \uB3C4\uC804\uD574 \uBCF4\uC138\uC694.[Scale]\n\n\n'), new Pair('Classic_TIP_COUNT', '2'), new Pair('Classic_TIP_0', '[Scale 0.7]\uC5F4\uBC18 \uBAA8\uB4DC\uAC00 \uB420 \uB54C\uB9C8\uB2E4 \uCD94\uAC00 \uC2DC\uAC04\uC744 \uC5BB\uAC8C \uB429\uB2C8\uB2E4.\n\uD0C0\uC784\uC624\uBC84\uAC00 \uB418\uC5B4\uB3C4 \uC5F4\uBC18 \uBAA8\uB4DC \uC0C1\uD0DC\uC77C\uB54C\uB294 \uAC8C\uC784\uC774 \uB05D\uB098\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.\n\uCD5C\uB300\uD55C \uAE38\uAC8C \uD50C\uB808\uC774\uD574\uC11C \uCD5C\uACE0\uC810\uC5D0 \uB3C4\uC804\uD574 \uBCF4\uC138\uC694.[Scale]\n\n\n'), new Pair('Classic_TIP_1', '[Scale 0.7]\uCD08\uB2F9 \uC810\uC218\uB294 60\uCD08 \uC774\uC0C1\uC744 \uD50C\uB808\uC774\uD588\uC744 \uACBD\uC6B0\uC5D0\uB9CC \uC815\uC0C1\uC801\uC73C\uB85C \uD45C\uC2DC\uB429\uB2C8\uB2E4.[Scale]\n\n\n'), new Pair('APPLE_WATCH_TIP_COUNT', '1'), new Pair('APPLE_WATCH_TIP_0', '[Scale 2.0]Digital Crown\uC744 \uB3CC\uB824\uC11C \uAC8C\uC784\uC744 \uADF8\uB9CC\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.[Scale]\n\n\n'), new Pair('Beat my score!', '#\uC0BC\uC0AC\uB77C_\uC601\uC6D0\uC758\uB3CC')]);
  localeString = '';
  currentLocale = localizationString;
  VOLUME_MAX = 100.0;
  EFFECT_CHANNEL = 8;
  main([]);
  Kotlin.defineModule('SamsaraHTML', _);
  return _;
}(typeof SamsaraHTML === 'undefined' ? {} : SamsaraHTML, kotlin, Phaser, phaserKt, PIXI, this['kotlinx-coroutines-core']);
